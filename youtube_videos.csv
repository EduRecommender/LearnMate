video_id,title,url,channel,channel_id,description,upload_date,transcript
K5KVEU3aaeQ,Python Full Course for Beginners [2025],https://www.youtube.com/watch?v=K5KVEU3aaeQ,Programming with Mosh,UCWv7vMbMWH4-V0ZXdmDpPBA,"Master Python from scratch No fluff—just clear, practical coding skills to kickstart your journey! ❤️ Join this channel to get ...",2025-02-12T12:30:31Z,"[Music] welcome to the complete python Mastery course in this course you're going to learn everything about python from Basics to more advanced concepts so by the end of the course you'll be able to confidently use Python for AI machine learning web development and automation if you have been looking for a comprehensive easy to follow well organized and practical course that takes you from Zero to Hero this is the right python course for you you don't need any prior knowledge of python to get started I will explain everything step by step in simple terms so you can build a solid foundation I'm m hamadani a software engineer with over 20 years of experience and I've taught Millions how to code and become professional software Engineers through my YouTube channel and online school quote withm mar.com if you're new here make sure to subscribe as I upload new videos all the time now let's jump in and get [Music] started in this course you're going to learn everything you need to get started with python just be aware that I've designed this course for beginners so if you have some programming experience check out my other python course for developers you can see the link on the top right corner of this video so python is the world's fastest growing and most popular programming language not just amongst software developers but also amongst mathematicians data analysts scientists accountants Network engineers and even kids kids in fact it's the ideal programming language to learn first but what makes python so special here are six reasons with python you can solve complex problems in less time with fewer lines of code than many other languages that's why huge companies like Google Spotify Dropbox and Facebook have embraced this beautiful and Powerful language here is an example let's say we want to extract the first three characters of the text hello work this is the code we would have to write in C this is how we would do this in JavaScript and here's how we would do it in Python see how clean and simple the language is and that's just the beginning python is a multi-purpose language and you can use it for a wide range of jobs such as data analysis Ai and machine learning writing automation scripts building web mobile and desktop applications as well as software testing or even hacking so if you want a high-paying long lasting career in any of these areas especially Ai and machine learning python is the language to put those opportunities at your fingertips in fact according to indeed.com the average salary of a python developer in the US was over $115,000 in March 2018 and here are four more reasons that make python the most desirable language python is a highle language so you don't have to worry about complex tasks such as memory management as you do in C++ it's crossplatform which means we can build and run python apps on Windows Mac and Linux it has a huge community so whenever you get stuck there is someone out there to help and it has a large ecosystem of libraries Frameworks and tools whatever you want to do it is likely that someone else has done it before because because python has been around for over 20 years there are two versions of python out there python 2 which is the Legacy version of python and is going to be supported until year 2020 and Python 3 which is python for the future in this course you're going to Learn Python 3 hi my name is msh hamadani and I'm going to be your instructor in this course I'm a software engineer with 18 years of experience and I've taught way over a million people how to codee or how to become top professional software Engineers to learn more about me and my courses head over to Cod with.com all right now let's get started all right the first thing I want you to do is open your browser and head over to python.org on this page under downloads you can download the latest version of python at the time of this video the latest version is python 3.13 chances are in the future when you're watching this video there is a new newer version of python available don't worry what I'm going to show you in this tutorial will apply to Future versions of python as well so go ahead and download the latest version now if you're on windows before you click install make sure to check this little box here that says add python to path this step is very important and it will save you a lot of headaches later so check this box and follow the installation now to verify that python is successfully installed click this magnifier and and here in this search bar type terminal now here in the terminal window type python D- version this verifies that we have successfully installed python 3.13 now if you're on Mac press command and space to bring up the spotlight search here type terminal now to verify that we have installed python correctly on Mac we should type Python 3 space-- version so as you can see I've successfully installed python 3.13 on this machine so this environment you see here is what we call python interpreter which is basically a program that executes python code we can type our python code in a file and give it to this interpreter or we can type our code directly here in this interactive shell so here we can write an expression like two + 2 in programming an expression is a piece of code that produces a value so here when we add 2 + 2 we get a value that is why we refer to this piece of code as an expression so enter we get four let's try a different kind of expression let's see if two is greater than one we get true which is an example of a Boolean value you're going to learn about these Boolean values in the next section now what if we type two is greater than five enter we get false so in programming we have true and false which are similar to yes and no in English now what if we type two is greater than but we don't add a second value here just press enter we get a syntax error in programming syntax means grammar so just like we have the concept of grammar in the languages that we speak we have the exact same concept in programming if we write a sentence that is not grammatically correct chances are some people may not understand that sentence so in this example we have this expression which is incomplete it doesn't have the right grammar or syntax that is why python interpreter is complaining by returning an error so this interactive shell is a great way to quickly experiment with a bit of python code but that's not how we build real world applications to do that we need a code editor and that's what I'm going to show you in the next lecture [Music] when it comes to typing python code you have two options you can use a code editor or an IDE which is short for integrated development environment an IDE is basically a code editor with some fancy features like autoc completion which means as you type code this feature helps you complete your code so you don't have to type every character by hand it's a per activity boosting feature it also gives you additional features like debugging which means finding and fixing bugs in your programs testing and so on for both code editors and Ides there's so many options out there the most popular code editors are vs code atom and Sublime you can use the code editor that you prefer in terms of the Ides again there are so many options out there the most popular one is pie charm in this course I'm going to use vs code or Visual Studio code because that's my favorite code editor later in the course I will show you how to install a Plugin or an extension that will convert vs code to a powerful ID so before going any further head over to code. visual studio.com and download the latest version of vs code now with vs code open on the top from the file menu go to to open and somewhere on your disk create a new folder let's call this folder hello world and then open it beautiful now click this icon on the top this opens up the Explorer panel in this panel you can see all the files and folders in your project so let's add a new file and call that app.py so all our python files should have the p my extension press enter now let's close this and type a bit of python code in this lecture we're going to use one of the built-in functions in Python called print so in Python we have a lot of buil-in functions for performing various kinds of tasks for example as a metaphor think of the remote control of your TV on this remote control you have a bunch of functions like turn on turn off change the channel change the volume and so on these are the build buin functions in your TV we have the same concept in Python and many other programming languages so one of these built-in functions that comes with python is print and we can use this to print something on the screen now whenever you want to use a function you should open and close parentheses in programming we say we're calling the print function calling a function means executing it now let's display the hello world message on the screen whenever you want to work with text you should put your text in between quotes either double quotes or single quote now I'm going to go with double quote and add hello world and then put a happy Persian cat here beautiful save the changes with command and s on Mac or control and S on Windows now to execute this code we need to go back to command prompt on Windows or terminal on Mac but the good news is that we don't have to switch programs here in vs code we have an integrated terminal so press control and back tick that is the key before number one on your keyboard that is just below the escape button so this is our integrated terminal now if you're on Windows type python if you're on Mac or Linux type Python 3 and next to that add the name of our file that is app p and here's our hello word message in the terminal beautiful now let's take this to the next level and make it a little bit more interesting let's close this terminal window by pressing control and back tick and add a second line of code so one more time print this time let's add quotes with a star in between them now let's say you want to repeat this star 10 times so here we can multiply this is by 10 save the changes open up the terminal and run our program and you can see this star is repeated 10 times so as you see the instructions in our program are executed from top to bottom in order in the next lecture I'm going to show you how to convert this vs code to a powerful IDE for building python applications [Music] in this lecture I'm going to show you how to convert vs code to a powerful IDE by using an extension called python with this extension or plug-in we get a number of features such as linting which basically means analyzing our code for potential errors we also get debugging which involves finding and fixing errors we'll look at this later in the course we also get autoc completion which basically helps us write code faster so we don't have to type every character we get code formatting which is all about making our code clean and readable just like how we format our articles newspapers books to make them clean and readable we get unit testing which involves writing a bunch of tests for our code we can run these tests in an automated fashion to make sure our code is behaving correctly and finally we get code Snippets which are reusable code blocks that we can quickly generate so we don't have to type them all by hand now don't worry about memorizing any of these as we go through the course you're going to learn about these features so back to vs code on the left side click this icon this opens the extensions panel where we can install additional extensions to enhance vs code up here in the search bar search for python all right look we have an official extension for python from Microsoft so go ahead and install this now you might see a box here saying reload if you see that make sure to click it to reload vs code now with this extension installed we have a ton of new functionality in vs code for writing python code the first one I'm going to show you in this lesson is the ability to run our code so back to app.py look with this extension installed now we have this play icon on the top for running our code so if we click it we can see the output of our program in the terminal window in this lecture I'm going to show you linting and action so let's start by writing some invalid code like this print space with no parenthesis and then hello world earlier I told you that print is a built-in function and whenever you want to use or call a function you should always use parenthesis now to be more precise this is actually valid python 2 code but because we're using Python 3 here this is invalid code from python 3's point of view so now when I save the changes you can see this red underline here let's hover our Mouse over this underline you can see this tool tip it's coming from Pilot and here's the error message missing parenthesis in call to print did you mean print with parenthesis so this is the benefit of lenting as you're writing code you can see potential problems in your code you don't have to wait to run your program to see these errors so now if we put parenthesis here and save the changes you can see that red underline is gone let's look at another error let's type two plus and then save the changes earlier we run this code in Python interpreter's interactive shell there we got a syntax or grammar error so if you hover your mouse here one more time you can see pilent is telling us that this is invalid syntax or invalid grammar it's like an incomplete sentence so this is linting an action now let me show you a couple useful shortcuts here on the top look at the view menu here we have this problems menu look at the shortcut on Mac it's shift command and M on Windows it's probably shift control M so as you're working with vs code try to memorize these shortcuts because they really help you write code faster now let's take a look at this problems panel so this problems panel lists all the issues in your code in one place so if you have an application with multiple files this is really useful because some of those files may not currently be open so this linter pilent will analyze all your files and if it finds any issues it will list them here in the problems panel now you can also put this on the right side of the screen so let's put it here so so as you write code these problems will appear here now let's fix this issue so I'm going to add three here save the changes and you can see the problem disappeared and one last thing before we finish this lecture once again on the top let's go to the view menu the first item is command pallet this is a very important feature in vs code once again look at the shortcut that is shift command and P on Mac or shift control p on Windows with this command pallet you can execute various commands in vsod if you type lint here you can see all commands related to linting as you can see all these commands are prefixed with python because these commands come with the python extension that we installed earlier so these are additional features available to us in vs code the First Command here is Select linter in this list you can see various linters available for p pent so as you're reading tutorials or talking to other people you will hear about linters such as flake 8 my pie pep 8 and so on different developers prefer different linters I personally prefer py lint that is the most popular one and that is the default linter set and the python extension of vs code if you're adventurous you can try using other linters on your own the difference between these linters is in how they find and Report errors some error messages are more meaningful or more friendly the others are more ambiguous so that's all about linting in the next lecture we'll talk about formatting code in Python Community we have a bunch of documents called python enhancement proposals or peps here on Google if you search for python peps you can see the list of all these PS under python.org sdev peps let's have a quick look here so here are the peps you can see each pep has a number and a title the one that is very popular amongst python developers is Pep 8 which is a style guide for python code a style guide is basically a document that defines a bunch of rules for formatting and styling our code if you follow these conventions the code that you right will end up being consistent with other people's code now if you have time you can go ahead and read this pep eight documentation but if not don't worry because throughout this course I'm going to explain the key things in pep 8 in this lecture I'm going to show you a tool that helps you automatically format your code according to pep 8 so back in vs code let's write some python code x equal 1 here I'm declaring a variable and setting it to one if if you're not familiar with variables don't worry in the next section you're going to learn about them so according to pep 8 this code is considered ugly because by convention we should add a space around this equal sign or the assignment operator now since you're starting out with python you probably don't know these rules so let me show you a tool that helps you automatically format your code let's revert this back to its original state now we need to go back to the command pallet remember so it's right here under View and the shortcut is shift command and P here if you search for format you can see this command format document the first time you execute this command you're going to see this message here formatter autopep8 is not installed so there are a bunch of tools for formatting python code the most popular one is Auto Pep 8 and this is the tool that this python extension we installed uses to format our our code now if you don't see this you can install autopep8 using the extensions panel so once again on the left side click this icon and search for Auto Pep 8 there it is let's install it good so let's go ahead and install this good now one more time let's open up the command pallet and execute format document see this tool automatically formats our code beautiful let's take a look at another example I'm going to declare another variable Y and set it to two and a variable with a long name like unit underline price and we set this to three now some developers have this habit of formatting their variable declarations like this so they put all these equal signs in the same column according to pep 8 this is considered ugly so once again let's format our code that is better beautiful now let me show you a trick opening up this command palet and searching for format document every time is a little bit timec consuming so I'm going to show you how to have your file automatically formatted as soon as you save the changes on the top let's go to the code menu preferences and settings here in the search box search for for format on save so we have this option editor format on Save take this now back to app.py I'm going to change the formatting of these lines make them really ugly now as soon as I save the changes you can see my code is reformatted [Music] beautiful all right now let's talk about a few different ways to run python code as I told you before one way to run python code is by opening the terminal window if you're on Windows type python if you're on Mac type Python 3 followed by the name of the file this approach is useful in situations where you don't have access to a code editor okay now with the python extension in vs code there is a simpler way to run python code we get this play button on the top when we click it we see the output in the terminal but clicking this button every time we change our code is a little bit tedious so let me show you how to associate a shortcut to this button first we close this next we bring up the command pallet the shortcut on Mac is shift command and P on Windows is shift control P here we search for open keyboard shortcuts look we have this command up here now on this window we can see all the commands in vs code and the shortcuts associated with them here in the search bar search for run python file okay so this is the command that is associated with the play button as you can see we don't currently have any key bindings or shortcuts here so double click in this column now here you can press any key combination for creating a shortcut I'm going to press controll and R okay now we press enter with this in place we can go back to app.py and press controlr and here we see the out beautiful when we talk about python we mean two separate things that are closely related Python language and a particular implementation python as a language is just a specification that defines a set of rules and grammar for writing python code a python implementation is basically a program that understands those rules and can execute python code earlier in the course we downloaded python from py python.org this is the default implementation of python called cpython It's a program written in C that's why it's called C python so here in terminal when we run python we get this C python this is the default implementation of python there are a few other implementations out there such as jython written in Java iron python written in C and piie written in a subset of python itself as new features are added to the the Python language they are first supported by cpython because that's the default implementation and then they will gradually come to the other implementations in theory if we give some python code to any of these implementations we should get the same result but in practice that's not always the case certain features may be available in one implementation but not another or they may just behave a little bit differently in a particular implementation now you might ask what is the point of this why do we have several implementations of python wouldn't C python be enough well it's for the same reason that we have multiple operating systems or multiple browsers or multiple programming languages after all these years we programmers haven't agreed on a single programming language and that's the same story with python implementations however there is one technical reason behind these implementations that you should be aware of since jyon is implemented in Java it allows you to reuse some existing Java code in a Python program so if you're a Java developer and you want to import some Java code into a Python program you should use jython instead of cpython similarly iron python is written in C so if you're a c developer and want to bring some C code into a Python program you will have to use iron python next we'll look at how exactly cpython executes python code [Music] the programming languages we use like C C Java python these are all Simple Text based languages that we humans understand computers don't understand them they only understand machine code so if we have some code written in C we should convert it to machine code and that's the job of a c compiler so a c compiler is a program that knows how to convert or compile C code into machine code however this machine code is specific to the type of CPU of a computer so if we compile a c program on a Windows machine we can't execute it on a Mac because Windows and Mac have different machine code just like how people from different countries speak different languages Java came to solve this problem Java compiler doesn't compile Java code into machine code instead it compiles it into a portable language called jav Java bite code which is not specific to a hardware platform like Windows or Mac now we still need to convert Java bite code to machine code so Java also comes with a program called Java virtual machine or jvm for doing this when we run a Java program jvm kicks in it loads our Java bite code and then at runtime it will convert each instruction to machine code with this model we can run Java bite code on any platforms that have a jvm we have jvm implementations for Windows Mac and so on so the jvm implementation on Windows knows how to convert Java bite code into machine code that a Windows machine can understand C and python have also taken the same route so they are platform independent when we run a Python program using cpython first it will compile our python code into python bite code then it will pass that bite code to python virtual machine which will in turn convert it into machine code and execute it this is how cpython works in the last lecture we talked about various python implementations I told you that if you want to reuse some Java code in a Python program you should use jython now let's see how jython makes this possible when you use jython to run a Python program instead of compiling your python code into python by code it will compile it to Java by code so we can take this Java bite code and run it using Java virtual machine and that's why you can import some Java code into a Python program when using jython because the end result is Java bite code which will eventually be executed by Java virtual [Music] machine so I've got a few questions for you cuz I want to see if you have been really paying attention to this video or not you better have so here's the first question for for each question I want you to pause the video think about the answer for a few seconds when you're ready continue watching so here's the first question what is an expression an expression is a piece of code that produces a value here's an example of an expression what do you think is the value of this expression well here we have this string we're multiplying this by three so the result will be a string of three asterisk like this here's another question what is a syntax error a syntax error is a kind of error that is due to bad syntax or bad grammar in the code and finally the last question what does a linter do a linter is a tool that checks our code for potential errors mostly in the category of syntactical Errors so if you have grammatical issues in our code the linter will tell us before running our program okay okay that's it for now if you like more quizzes and programming exercises look at the link below this video and if you have enjoyed this video I hope you have please support me by giving a thumbs up please like this video and share it with others in the next section we're going to look at the fundamentals of [Music] python hey guys I just wanted to let you know that this tutorial is actually the first two hours of my complete python Mastery course if you're finding this helpful and want to dive even deeper the the full course covers everything from beginner Basics to advanced concepts like machine learning web development and automation you'll also get Hands-On projects to build your skills step by step I put the link in the description box if you're ready to take your python knowledge to the next level now let's continue let's start this section by a discussion of variables which are one of the Core Concepts in programming we use variables to store data in computer's memory here are a few examples I'm going to Define a variable called students underline count and setting it to a th000 when we run this program python interpreter will allocate some memory and store this number thousand in that memory space then it will have this variable reference that memory location so this variable is just like a label for that memory location we can use this variable or this label anywhere in our program program to get access to that memory location and the data stored there so now if we print students count and run our program we will get the number thousand so this is the basic of variables now what kind of data can we store in computer's memory well we have several different kinds of data in this section we're going to look at the built-in primitive types in Python primitive types can be numbers booleans and strings let me show you so here we have a whole number we refer to this as an integer in programming we can also have numbers with a decimal point let's take a look so rating we set this to 4.99 this is what we call a float or a floating Point number and this terminology is not specific to python in the future when you learn a new programming language you're going to hear these terms again now let's take a look at an example of a Boolean is published we set this to true or false these are examples of Boolean values in programming so Boolean values can either be true or false and these are exactly like yes and no in English later in the course you will learn that we'll use these Boolean values to make decisions in our programs for example if the user is an admin user perhaps we want to give them extra permissions so these are the Boolean values now take into account that python is a case sensitive language which means lowercase and uppercase characters have different meanings so Boolean values should always start with a capital letter like what you see here if we type false or false these are not accepted Boolean values in Python only what you see here is a valid Boolean value so false or true and finally let's take a look at an example of a string so of course underline name we set this to a string like Python Programming so a string as I told you before is like text whenever you want to work with text in your programs you need to surround your text with quotes so these are the basics of variables so these are the variables from the last lecture now I've got a question for you there are four things that I've consistently used in this program can you spot them if you want you can pause the video think about this for a few seconds and then continue watching so here are those four things the first thing is that all my variable names are descriptive and meaningful so students count represents the number of students for a course or course name clearly explains that this variable holds the name of a course one of the issues that I see a lot amongst beginner programmers is that they use mystical names for their variables something like this CN as in short for course name when someone else reads this code they have no idea what CN stands for or they use variable names like C1 when I look at that code I wonder where is C2 and what is the difference between C1 and C2 so these variable names are very mystical that's a bad practice make sure your variable names are always descriptive and meaningful because this makes your code more maintainable now there are times that you can use short variable names like x y z if you're dealing with things like coordinates so that's an exception now the second thing that I have consistently used in this code is that I have used lowercase letters to name my variables so here we don't have course name all in capital or in title case all letter are lowercase right let's delete this the third thing that I've consistently used here is that I have used an underscore to separate multiple words and I've done this to make my variable names more readable because in Python we cannot have a space in variable names so we cannot have course name and if you put these two words together it's a little bit hard to read that's why we use an underscore and the fourth thing that I have used consistently here is that I have put a space around this equal sign again that's one of the issues I see a lot amongst beginners they write code like this this is a little bit ugly this is what we call Dirty code dirty stinky smelly you should write code that is clean and beautiful so other people can read it like a story like a newspaper article it should be formatted properly and that's why we have pep 8 in Python now the good thing is if you forget these rules when you save the changes autopep8 kicks in and it automatically reformats your code but that aside you should always give yourself the habit of writing clean code without relying too much on the tooling so these are all the best practices about naming your variables next we're going to look at strings in more detail so here we have this course variable set to Python Programming as I told you before whenever you work with text you should surround your text with quotes you can either use double quotes or single quotes that's more of a personal preference but quite often we use double quotes we also have triple quotes and we use them to format a long string for example if you have let's say a variable message that is the message we want to include in the body of an email you can use triple quotes to format it like this hi John this is msh from code with m.com blah blah blah so that's when we use triple codes now we don't need this in this lecture so delete let me show you a few useful things you can do with strings first of all we have this built-in function in Python for getting the length of strings what is a function a function is basically Bally a reusable piece of code that carries out a task as a metaphor think of the remote control of your TV on this remote control you have buttons for different functions like turn on turn off change the channel and so on these are the built-in functions in your TV in Python and many other programming languages we have the exact same concept so we have functions that are built into the language on the platform you can reuse these functions to perform various tasks so here we can use the built-in Len function to get the length of a string which means the number of characters in that string now whenever you want to use a function you should use parenthesis now we say we're calling this function which basically means we're using this function now some functions take additional data which we refer to as arguments these arguments are inputs to these functions so this Len function takes an input or an argument here we pass our course variable and this will return the number of characters in this string so let's print that and see what we get run the program we get 18 because we have 18 characters here let's look at another example if you want to get access to a specific character in this string you use the square bracket notation so here we add course square bracket brackets to get the first character you use the index zero so in Python like many other languages strings are zero index which means the index of the first character or the first element is zero so now when we print this we'll get P okay now you can also use a negative index like minus1 what does that mean well if zero represents the first character here what do you think negative 1 represents that takes us back to the end of the string so that Returns the first character from the end of the string let's draun this program you will see we'll get G there you go using a similar syntax you can slice strings let me show you so I'm going to duplicate this line and remove ne1 now let's say we want to extract the first three characters in this string so here we need two indexes the start index colon the end index so this will return a new string that contains the first three characters in this course variable that would be P Y and T so the index of these characters are zero 1 and two so that means the character at the end index is not included okay let's run the program and make sure we get the right result there you go PYT now what if we don't include the end index what do you think we're going to get it's Common Sense we start from index zero and go all the way to the end of the string so this will return a new string that is exactly the same as the original string let's take a look so we get Python programming now what if we don't include the start index but include the end index what do you think we're going to get once again it's common sense so by default python will put zero here so it will start from the beginning of the string so when I run this program we should get PYT one more time there you go and finally as the last example if we don't include the start and the end Index this will return a copy of of the original string let's look at this so we get Python Programming now you don't have to memorize any of these just remember we use the Len function to get the length of a string we use bracket notation to get access to a specific element or a specific character and we use this notation to slice a string so we have this string here python Pro programming now let's say we want to put a double quote in the middle of this string there is a problem here python interpreter sees this second string as the end of the string so the rest of the code is meaningless and invalid how do we solve this problem well there are two ways one way is to use single Cotes for our string and then we can use a double code in the middle of the string but what if for whatever reason perhaps for being consistent in our code we decided to use double quotes how can we add another double code in the middle of this string well we can prefix this with a backs slash backslash in Python strings is a special character we have a jargon for that called Escape character we use it to escape the character after let me show you what I mean so let's let's print this course and run this program what's going on here we don't have the backs slash because we use that to escape this double code and basically display it here so backs slash is an escape character and back SL double quote is an escape sequence in Python strings we have a few other Escape sequences that you should be aware of let me show you so in Python we use a hash sign to indicate a comment a comment is like additional note that we add to our program it's not executed by python interpreter okay so here are the Escape sequences you have seen back SL double quote we also have back SL single code so we can use that to add a single code here let's run the program here it is beautiful we also have double backs slash so if you want to include a backslash in your strings you should prefix it with another backslash let me show you so when we run this we get python one back slash programming and finally we have back sln which is short for new line so now if I add a back slash n here see what we get we get a new line after python so programming will end up on the second line so these are the Escape sequences in Python here we have two variables first and last let's say we want to print my full name on the console so we can Define another variable full set it to first then concatenate it with a space and one more time concatenate it with last now when we print full we get my full name on the console beautiful now this approach of using concatenation to build a string is okay but there is a better and newer approach we can use formatted strings so here we can set full to this string and prefix it with an F which can be lowercase or uppercase this formatted string doesn't have a constant value like these two strings here It's actually an expression that will be evaluated at runtime so here we want to add our first name we use curly braces to print the value of the first variable after that we add a space and then we add curly braces one more time to print the last name so at run time this expression will be evaluated what we have in between curly braces will be replaced at runtime now let's run this program one more time we get the exact same result just be aware that you can put any valid expressions in between curly braces so earlier you learned about the built-in Len function we can call Len here to get the length of this string let's run this program one more time so we get four we can also replace last with an expression like this 2 + 2 let's run this program we get four and four so when using formatted strings you can put any valid expressions in between curly braces in this lecture we're going to look at a few useful functions available to work with strings so earlier you learned about this builtin Len function this function is general purpose so it's not limited to Strings later I will show you how to use this function with other kind of objects but in Python we have quite a few functions that are specific to a strings let me show you so here if we type course dot see all these are functions available on strings now in precise terms we refer to these functions as methods this is a term in object-oriented programming that you will learn about later in the course for now now what I want you to take away is that everything in Python is an object and objects have functions we call methods that we can access using the dot notation so here course is an object we use the dot notation to access its functions or more accurately methods let's take a look at a few of these methods we have upper to convert a string to uppercase now let's print this and run the program here's what we get beautiful now note that the methods that you call here return a new string so the original string is not affected let me show you so print course run the program one more time look this is our original string right so course. upper returns a new string a new value we can store it in a variable like course underline Capital like this now to keep this demo simple and consistent I'm going to revert this back and use a print statement we also have the lower method to convert a string to lowercase we also have title which will capitalize the first letter of every word so if our string was like this when we call the title method we get Python Programming as you see here okay another useful method is strip and we use it to trim any white space at the beginning or end of a string this is particularly useful when we receive input from the user let me show you so let's imagine the user entered a couple of white spaces at the beginning of this string when we call course. strip those white spaces will be removed take a look so note that in the first three examples we have the those white spaces but in the last one it is removed so a strip removes the white space from both the beginning and end of a string we also have l strip which is short for left strip and R strip which is short for Right strip so it will remove the white space from the end of a string if you want to get the index of a character or a sequence of characters in your string you should use the find method and me show you so of course find so as an argument here we pass another string we can pass a character or a series of characters let's find the index of Pro run the program so the index of pro is nine so if we start from zero here all the way to nine this is the index of pro okay now as I told you before python is a case sensitive language so if I pass a capital P here obviously we don't have these exact characters in our string so let's see what we get we get -1 that means this string was not found in the original string another useful method is replace so we call replace with this we can replace a character or a sequence of characters with something else so let's say we want to replace all lowercase P's with J with this we get jython durog gramming whatever that means and finally if you want to check for the existence of a character or a sequence of characters in your string you can use the in Operator Let Me Show You So print we write an expression like this Pro in course so this is an expression as I told you before an expression is a piece of code that produces a value so this expression checks to see if we have Pro in course the difference between this expression and calling the fine method is that the fine method Returns the index of these characters in our string but as this expression returns a Boolean so it's a true or false let me show you so run the program we get the Boolean true and finally we have the not operator and we use that to see if our string does not contain a character or a sequence of characters so let's change this to Swift not in course when this expression is evaluated what do you think we're going to get well we don't have Swift in this string so not in will return true let's take a look there you go go so these are the useful string Methods next we'll look at numbers in Python we have three types of numbers two of these you have already seen before they are integers and floats we also have complex numbers so complex numbers in math are in the form a plus b i where I is the imaginary number number now if you're not familiar with this concept don't worry this is something that is used a lot in mathematics and electrical engineering if you want to use Python to build web applications you're never going to use complex numbers but let me quickly show you the Syntax for representing complex numbers instead of I we use J so here is an example 1 + 2 J so X now is a complex number and by the way as I told you before this is just a common or an additional note in our program when we run this program anything after this H sign will be ignored so these are the three types of numbers we have in Python for all these types of numbers we have the standard arithmetic operations that we have in math let me show you so we have addition subtraction multiplication division but we actually have two different types of divisions let me show you first let's run this program so with this division operator which is a slash we get a floating Point number if you want an integer you use double slashes let me show you so double slash run the program we get three okay we also have modulus which is the remainder of a division and finally exponent Which is less left to the power of right so 10 to the power of 3 will be a th000 these are the standard arithmetic operators now for all these operators we have a special operator called augmented assignment operator let me show you so let's imagine we have X set to 10 we want to increment X by let's say three we can write an expression like this x = x + 3 or we can use an augmented assignment operator that is a little bit shorter so we write X+ equal three these two statements are exactly the same now here I'm using addition as an example you can use any of these operators here next I'm going to show you some useful functions to work with numbers in this lecture we're going to look at a few few useful functions to work with numbers so we have this built-in function round for rounding a number so if we pass 2.9 here and print the result we will get three we have another useful built-in function called ABS which Returns the absolute value of a number so if we pass -2.9 here we'll get positive 2.9 now teic we have only a handful of built-in functions to work with numbers if you want to write a program that involves complex mathematical calculations you need to use the math module a module is like a separate file with some python code so in Python we have this math module which includes lots of mathematical functions for working with numbers but we need to import this module so we can use it on the top we type import math now math in this program is an object so we can use the dot notation to see all the functions or more accurately all the methods available in this object as an example we have math. seal for getting the ceiling of a number so if we pass 2.2 here and run this program we get three now in this math module we have lots of functions let me show you how to find the complete list here on Google search for Python 3 make sure to add the version number math module on this page you can see all the functions in the math module so in this lecture we looked at math. seal we also have math. copy sign Fabs and so on as an exercise I encourage you to play with a couple of functions in this module all right now let's take a look at another useful built-in function in Python we use the input function to get input from the user as an argument we pass a string this will be a label that will be displayed in the terminal you'll see that in a second so let's add X colon now this function returns a string so we can store it in this variable now let's imagine that y should be x + 1 save the changes now don't run this program using the code Runner extension because code Runner by default runs your program in the output window which is read only so you won't be able to enter a value so open up the terminal using control and backspace once again if you're on Windows type python if you're on Mac or Linux Linux type Python 3 and then app.py so here's our label let's enter a value like one we got an error type error what is going on here well when we receive input from the user this input always comes as a string so this expression at runtime will look like this string 1 + 1 note that the number one is different from string one because these are two different types now when python sees this expression it doesn't know what to do because two objects can be concatenated if they are of the same type so here we need to convert this string one to a number in Python we have a few built-in functions for type conversion we have int for converting a number to an integer we have float we have bull and stir or string now in this case we don't need to convert X to a string because X is already a string if you don't believe me let me show you so I'm going to comment out these few lines now let's print type of X so type is another built-in function we pass an object as an argument and it returns its type also I'm going to comment out this line because that's the bad boy we don't want to execute this save the changes back in the terminal let's run this program one more time enter one look this is what the type function returns now don't worry about the class we'll talk about classes later in the course so the type of X is a stir or string so let's delete this line to fix this problem we need to convert X to an integer and then we can print both X and Y using a format of string remember so we add an F quotes right here we add a label like X then we'll add a field so here we want to print the value of x variable after that we add some more text and finally we want to print the value of y let's run this program one more time so here in the terminal let's enter one and here's the result X is one and Y is two beautiful now all these built-in functions are self-explanatory the only tricky one is bull because in Python we have this concept of truthy and falsey values these are values that are not exactly a Boolean true or false but they can be interpreted as a Boolean true or false so here are the falsy values in Python M2 strings are considered falsy so they're interpreted as a Boolean false numbers Z is also falsy we have an object called non which represents the absence of a value we'll look at this later in the course so whenever we use these values in a boan context we get false anything else will be true let me show you a few examples so in this interactive shell in Python let's convert number zero to Bull that's falsy so we get false what about bull of one we get true if we pass a negative number we also get true if we pass a number larger than one like five we still get true so we only get false when we try to convert zero to aoia now with strings I told you that an empty string is falsey so here we'll get false anything else is true so even if I have a string that is false we'll get true because the this is not an empty string it's a string with a few characters that's why it's evaluated as true all right once again it's time for another quiz let's see if you have been really paying attention to this tutorial so here's the first question what are the built-in primitive types in Python we have strings numbers and booleans numbers can can be integers Floats or complex numbers here's the second question you have this variable fruit set to Apple what do you think we will see on the terminal when we print fruit of one well using screw brackets we can access individual characters the index of the first character is zero so this expression Returns the second character which is p what if we add a colon and negative one here well using the syntax we can slice a string our start index is one and our end index is negative -1 which refers to the first character from the end of the string now when slicing a string the character at the end index or1 is not included so with this expression we'll get all the characters starting from the second character which is p all the way until we get to e so the result of this expression is PPL L here's another question what is the result of this expression well this is what we call the modulus operator and it Returns the remainder of a division which is in this case one and finally the last question what do you think we will see when we print bull of false well earlier I told you about falsy values in Python so number zero an mty string and the non-ob these are all falsy values anything that is not falsey is considered truthy here we have a string that has five characters it doesn't matter what those characters are this is not an empty string so it's not falsey it's truy so when we convert it using the bull function we'll get the Boolean true and this brings us to the end of the section in the next section you're going to learn the fundamentals of computer programming I hope you have enjoyed this section and thank you for watching we're going to start this section by exploring comparison operators we use comparison operators to compare values here are a few examples so 10 is greater than three we get true so what we have here is a Boolean expression because when this expression is evaluated we'll get a Boolean value that is true or false here is another example 10 is greater than or equal to three once again we get true we also have less than so 10 is less than 20 we have less than or equal to here's the equality operator so 10 is equal to 10 what about this expression what do you think we're going to get we get false because this values have different types and they're stored differently in the computer's memory and finally we have the not equal operator so now with this expression we should get true beautiful we can also use these comparison operators with strings let me show you so we can check to see if bag is greater than and apple we get true because when we sort these two words bag comes after so it's considered greater now what about this one bag equals Capital bag we get false here's the reason every character you see here has a numeric representation in programming let me show you so we have this built-in function called or don't worry about memorizing this because you're probably never going to use this in the future but let me show you the numeric representation of the letter B so that is 98 in contrast capital B is represented as 66 that is the reason these two strings are not equal so these are the comparison operators in Python next we'll look at conditional statements in almost every program there are times you need to make decisions and that's when you use use an if statement here's an example let's say we have a variable called temperature we set it to 35 now if temperature is greater than 30 perhaps we want to display a message to the user so we use an if statement if after if we add a condition which is basically a Boolean expression an expression that produces a Boolean value so if temperature is greater than 30 here we have a Boolean expression if this expression evaluates to true the following statements will be executed let me show you now here's the important part that a lot of beginners miss when you use an if statement you should always terminate your statement with a colon now let's see what happens when I press enter our cursor is indented so here we have two white spaces this is very important because using these indentations python interpreter will know what statements should be executed if this condition is true here we want to print a message like it's warm we can print another message as well drink water so we can have as many statements as we want here as long as they are indented they belong to this if block now when we finish here we should remove indentation to indicate the end of this if block so here we can add a print statement with a message like Don this statement will always be executed whether this condition is true or not now note that when I save the changes this indentation you see here is going to be doubled up take a look save there you go so when we save the changes autop pep 8 reformats our code and uses four white spaces for indentation so one 2 3 4 it uses four white spaces because that's what pep 8 recommends all right now let's run this program so because temperature is greater than 30 we see the first two messages and we see the dawn message regardless so if I change the temperature to let's say 15 and run the program one more time look this Dawn message is executed whether our condition is true or not so pay great attention to these indentations that's one of the issues I see in beginner's code let's say they want both these print statements to be executed if the condition is true accidentally they remove the indentation on the fourth line and that's why their program doesn't work as they expect so be careful about this now what if you want to have multiple conditions we use an L if statement so L if that is short for L's if here we can add another condition another expression so temperature is greater than 20 one once again colon enter now by default here vs code is using two white spaces so don't worry about this as soon as you save the changes those two white spaces will be converted to four white spaces so let's print a different message it's nice save the changes now look all these lines are indented consistently you can have as many l statements as you want and optionally you can also have an else statement so if none of the previous conditions are true then what you have in the else block will be executed once again we add the colon annotation print here we can add a message like it's called save the changes in this case temperature is 15 so none of these two conditions will be true and we will see it's called let's run the program there you go in this lecture I'm going to show you a technique for writing cleaner code so let's say we're building an application for University and we want to check to see if the person who's applying for this University program is eligible or not so we start by defining a variable called age set it to 22 now if age is greater than or equal to 18 colon print eligible remove the initation else colon print not eligible let's run the program make sure it works beautiful now there is nothing wrong in this piece of code but I want to show you a cleaner way to achieve the same result instead of having a print statement here we can define a variable like message and set it to this string that is the first step so message equals this string and then we will print this message now when you have an if L statement with this structure where you're basically assigning a value to a variable you can rewrite this in a simpler way so this is how it works all we want to do over these VI lines is to assign a value to this message variable right so with start with message we set it to eligible if age is greater than or equal to 18 else we set it to not eligible this statement is almost like plain English so what we have on line seven is exactly equivalent to these four lines of code delete save the changes run the program you can see this person is eligible if I change the age to 12 12 and run the program we get not eligible so what we have here is called Turner operator in Python we have three logical operators and we use these operators to model more complex conditions so these operators are and or and not let's see a real word example of using these operators so imagine we're building an application for processing loans so we need two variables High income we can set this to true and good underlined credit we set it to true now here's the condition we want to implement if the applicant has high income and good credit score then they are eligible for the loan so if High income and good credit we add the colon and print eligible now note that here I have not compared the value of this variable with true that is one of the issues I see in a lot of beginners code this is redundant and unprofessional because High income is a Boolean so it's either true or false we don't need to compare true with true so if this condition is true and this second condition is true then we will print eligible in the terminal so save the changes and run the program obviously this person is eligible however if one of these conditions is false we will not see eligible in the terminal so let's add an lse statement here and print not eligible run the program we see not eligible so this is how the and operator works with and operator if both conditions are true the result will be true in contrast with the or operator as long as at least one of the conditions is true the result will be true so if I replace and with or here we should see eligible in the terminal let's run it one more time there you go so these are the and and or operators now let's take a look at an example of the not operator so I'm going to Define another variable student set it to True temporarily I'm going to remove this expression and simplify it we'll come back to this later so let's say if the person is eligible if they are not a student the not operator basically inverses the value of a Boolean so in this case student is true when we apply the not operator the result will be false so in this case our condition will be false and that's why this print statement will not not be executed let me show you so save run the program they're not eligible if student was false when we apply the not operator will get true so our condition will be true and we'll see eligible let's run it one more time there you go with these operators we can model even more complex conditions here's an example a person can be eligible if they have either High income or good CR credit and they should not be a student let me show you how to implement this condition so if High income or good credit we want at least one of these conditions to be true so we put these in parenthesis we want to separate these from the other condition which is not a student now the result of this should be true which means at least one of these conditions should be true after that will add and not student and finally call so with these operators you can model all kinds of real word scenarios so here's the example from the last lecture a person is eligible for a loan if they have high income and good credit and they're not a student now one thing you need to know about this Boolean operator is that they are short circuit what do I mean by that well when python interpreter wants to evaluate this expression it starts from the first argument if this is true it continues the evaluation to see if the second argument is also true so it continues the evaluation all the way to the end of this expression however as soon as one of these arguments is false the evaluation stops let me show you what I mean so if I change High income to false when python interpreter sees this expression it starts here it knows that high income is false so it doesn't matter what comes after the result of this entire expression will always be false because at least one of the arguments or one of the operant is false this is what we call short circuiting just like the short circuit concept we have in electronics so the evaluation stops as as soon as one of these arguments evaluates to false we have the same concept with the or operator so if I change these and operators to or let's see what happens with the or operator we know that at least one of the arguments should be true so the evaluation stops as soon as we find an argument that evaluates to true in this case when python interpreter evaluates this expression it sees that high income is false so so it continues the evaluation hoping that the next argument will be true here good credit is true so evaluation stops and the result of this entire expression will be true so in Python logical operators are short circuit in this lecture I'm going to show you how to chain comparison operators this is a very powerful technique for writing clean code here's an example let's say we want to implement a rule that says age should be between 18 and 65 here's how we can implement it so we Define a variable like AG set it to 22 now if age is greater than or equal to 18 and age is less than 65 then we print eligible now here's a question for you how do we write this rule in math we can write it like this well more accurately we should have an equal sign here so age should be between 18 and 65 this is how we write this rule in math now I've got some good news for you we can write the exact same expression in Python so I'm going to move this up put an if statement here line four and line three are exactly equivalent but as you can see line four is cleaner and easier to read so let's get rid of line three this is what we call chaining comparison operators all right here's a little quiz for you I want you to pause the video and think about this quiz for 10 to 20 seconds what do you think we'll see on the terminal when we run this program so pause the video figure out the answer when you're ready come back continue watching all right let's see what happens when we run this program first we get this if statement in this case we're comparing two different objects for equality and these objects have different types we have a number compared with a string so number 10 and string 10 are not equal that is why a will not be printed on the terminal so the control moves to the L If part here we have two Boolean Expressions here's the first one here's the second one and they are combined using the logical end so if both these expressions are evaluated to true then this entire expression will be true and we will see be on the terminal let's see if both these expressions are evaluated to True here's the first part bag is greater than Apple that is true because when we sort these words bag comes after Apple but look at the second part part this expression is evaluated to false because bag is not greater than cat so when we apply The Logical end between true and false the result will be false that is why this statement will not be executed so to control moves to the lse part and when we run this program the letter c will be printed on the terminal there are times that we may want to repeat a task a number of times for example let's say we send a message to a user if that message cannot be delivered perhaps we want to retry three times now for Simplicity let's imagine this print statement is equivalent to sending a message in a real world program to send a message to a user we have to write five to 10 lines of code now if you want to retry three times we don't want to repeat all that code that is ugly that's when we use a loop we use Loops to create repetition so here is how it works we start with four number in we have a built-in function called range now how many times we want to repeat this task let's say three times so we call range and pass three as an argument now similar to our if statements we need to terminate this line with a colon enter we get indentation so in this block we can write all this statements that should be repeated three times let's do a print a message like attempt save the changes run the program so we have attempt printed three times beautiful now what is this number let's take a look it's a variable of type integer so let's pass it as the second argument to the print function number run the program this is what we get 012 so here we have a for Loop this for Loop is executed three times in each iteration number will have a different value initially it will be zero in the second iteration it will be one and finally in the last iteration it will be two now here we can do something fun we can add one to this around the program and now the messages that we print are kind of more meaningful or more user friendly like attempting number one attempting number two and so on we can take this to the next level so we can pass another argument here I'm going to add an expression one more time number + one so we'll get 1 2 3 now I want to put this expression in parenthesis so let's select this put it in parenthesis and then multiply it by a DOT so here we have a string that is multiplied by a number the result will be that string repeated that number of times let's take a look so run the program see that's pretty cool isn't it now let me show you one more thing before we finish this lecture as you saw this range function generates numbers starting from zero all the way up to this number here but it doesn't include this number here we can pass another argument say start from one and finish before four with this change we don't need to add one to number every time because in the first ation this number variable will be set to one so we can simplify our code and make it cleaner let's run it one more time we get the exact same result we can also pass a third argument as a step so I'm going to change the second argument to 10 and pass two as a step look at the result these are the numbers we get 1 3 5 and so on so pretty useful you're going to use this function a lot in real world application continuing with the example from the last lecture let's imagine the scenario where after the first attempt we can successfully send the message in that case we want to jump out of this Loop we don't want to repeat this task of sending a message three times let me show you how to implement this so in this demo I'm going to simulate the scenario where we can successfully send a message so we Define a variable successful and set it to true now here after this print statement we'll have an if statement if successful colon then perhaps we can print successful now here we want to jump out of this Loop for that we use the Breck statement let's trun this program and see what happens so there you go after the first attempt you're successful and there are no more attempts so once again I want you to pay great attention to the indentation here because that's one of the common issues amongst beginners so here's our for Loop these two lines are indented with four spaces and they belong to our for Loop in every iteration these two lines will be executed now when we get to line four if this condition is true then these two lines will be executed because both these lines are indented below this if statement now let's take this program to the next level what if we attempt three times and we still cannot send an email perhaps we want to display a different message to the user we say hey we Tred three times but it didn't work so I'm going to change successful to false now at the end here we can add an L statement this is what we call a for l statement what we put under this L statement will only be executed if this Loop completes without an early termination so if we never break out of this Loop then the L statement will be executed so here we can print a message like attempted three times and failed so run the program see what we get three attempts followed by this message attempted three times and failed in contrast if we change successful to true because we terminate this Loop using this break statement what we have in the else block will not be executed take a look R the program we have one attempt successful done in programming we have this concept called nested Loops so we can put one Loop inside of another loop and with this we can get some interesting results let me show you so I'm going to start with this Loop for X in range five colon now inside of this Loop I'm going to add another loop so for y in range three colon and then in our second Loop I'm going to add a print statement here we can use formatted strings to display coordinates remember formatted strings so we have F followed by quotes now here we add parentheses for our coordinates first we want to display X and then comma followed by y let's run this program and see what happens there you go pretty cool isn't it so we get zero and zero 0o and one zero and two then we get one and zero one and one one and two and so on now let me explain how exactly python interpreter executes this code so here we have two Loops this is what we call the outer loop and this is the inner loop so the execution of our program starts here in the first iteration of this Loop X is zero now we get to this statement which is a child of this four statement because it's indented four times this statement itself is a loop so what we have inside of this Loop will be executed three times in the first iteration X is zero because we're still in the first iteration of the outer loop and Y is also zero because we are in the first iteration of the inner loop that is why we get zero and zero now we go to the second iteration of this Inner Loop in this iteration y will be one whereas X is still zero that is why we get 0 and one and similarly in the third iteration of our inner loop we'll get zero and two in the terminal now we're done with the execution of the inner loop so the control moves back to our outer loop here will be in the second iteration so X will be one and then we start here again so we have to execute this inner loop three times in the first iteration y will be zero and X is one so here we have one and zero then we'll get one and one and one and two you got the point so this is all about nested Loops so you have learned how to use for Loops to repeat one or more statements in your programs now let's dive deeper and see what this range function returns so earlier you learned about the built-in type function with this function we can get the type of an object so if I pass Five here and run this program this is what we get so the type of this number or this object is int or integer now let's look at the type of the value that we get from the range function so as an argument we pass range of a number let's run this program so this range function returns an object of type range so in Python we have primitive types like numbers strings and booleans but we also have complex types range is an example of one of those complex types throughout this course you're going to learn about a lot of other complex types now what is interesting about this range object is that it's iterable which means we can iterate over it or use it in a for Loop that is why we can write code like this so This range function returns a range object which is iterable which means we can iterate over it in each iteration X will have a different value now range objects are not the only iterable objects in Python strings are also iterable so here we can add a string like python now in each iteration X will hold one character in this string let me show you so print X and I'm going to delete these two lines here let's run this program so in each iteration we'll get one character and print it we have another complex type called list which we use to store a list of objects so we add square brackets this indicates a list now we can add a list of numbers or a list of strings like a list of names you will learn about lists later in the course so let's run this one more time as you can see we can iterate over lists in in each iteration will get one object in this list now later in the course I will show you how to create your own custom objects that are iterable for example you will learn how to write code like this for item in shopping cart print item so shopping cart is going to be a custom object that you will create it's not going to be an integer or string or Boolean it's a custom object it has a different structure and we'll make it iterable so we can use it in a for Loop and in each iteration we can get one item in the shopping cart and printed on a terminal so you have learned that we use four Loops to iterate over iterable objects in Python we have another kind of loop that is a while loop and we use that to repeat something as long as a condition is true here's an example so let's define a variable number and set it to a 100 now we use while and here we add a condition as long as number is greater than zero we add a colon once again we have indentation so we can repeat one or more statements we can print this number and then we can divide it by half so number equals number use the integer division to divide it by two or we can use the augmented assignment operator to shorten this code like this now let's run this program so here's what we get initially our number is 100 we divide it by half we get 50 then 25 and so on so as you can see in this example we are not iterating over an itable like a range object or a string or a list we are evaluating a condition and repeating a task let me show you a real word example of a y Loop in this interactive shell python is waiting for an input we can type something like 2 + 2 it will evaluate it and ask for the next input we can add another expression like 10 is greater than two so these steps will continue until we press contrl D so behind the scene we have a y Loop that continues execution until we press contr D that is the condition that causes the Y Loop to terminate let me show you how to build something like this in Python so let's Define a variable command and set it to an empty string now here we need a y Loop we want this y Loop to execute as long as command does not equal to quit so command does not equal to quit colon in this Loop we want to continue continuously get input from the user so we use the built-in input function we add a label like this get the result and store it in the command variable now at this point python interactive shell will evaluate this command we're not going to do that in this lecture because that's way too complex for Simplicity we can just Echo back what the user entered so print Echo and as the second argument we as this command so this is our y Loop it will execute until we type quit now as I told you before don't run this program using the code Runner extension because by default it will run your program in the output window which is read only so open up the terminal using control and back tick and run python or Python 3 app.py so here's our Command Prompt let's type 2+ two it echoes back let's type 3 * 2 there you go if we type quit our program terminates now let's try it one more time what if we type quit in uppercase the program doesn't terminate because as you learned before lowercase and uppercase characters have different numeric representations so quit in lowercase is different from quit in uppercase now to solve this problem an amateur programmer may do something like this and command does not equal to Capital quit so while command does not equal quit in lowercase and quit in uppercase continue getting input from the user let's run this program in terminal and see what happens so one more time python app.py we type quit beautiful it works we type quit in uppercase that would work too but what if I type quit with an uppercase q and lowercase U our program doesn't terminate so this is a poor way of checking for the quit command what is a better way let me show you so we don't need this end operator here instead because command is a string we can call the lower method so whatever the user types in first will'll convert it to lowercase and then compare it with quit in lowercase with this change it doesn't matter how the user types the word quit will always terminate the program now the last thing I want to discuss in this section is the concept of infinite Loops an infinite Loop is a loop that runs forever so if I change this condition to true because true is always true this y Loop will will run forever so to jump out of this we need a break statement so after we get the input from the user we can get the command convert it to lowercase and see if it equals to quit if that's the case we want to break now with this change we no longer need to initialize command to an empty string previously we needed this because we had a while statement like this while command does not equal will quit so we had to Define this command variable and that's why we have set it to an empty string without this line when python interpreter tries to execute this code it doesn't know what command is so now that we have an infinite Loop we no longer need to Define command and set it to an empty string so in terms of functionality this program is exactly the same as the program we wrote in the last lecture just be aware of these infinite Loops because they run for ever you should always have a way to jump out of them otherwise your program will run forever and this can sometimes cause issues because if you're executing operations that consume memory at some point your program may run out of memory and crash all right time for an exercise I want you to write a program to display the even numbers between 1 to 10 so when you run this program you should see 2 4 6 and 8 and after these I want you to print this message we have four even numbers now here's a quick hint before you get started you should call the range function with one and 10 do not use the third argument which is called Step so basically I want you to iterate over all the numbers between 1 to 10 check if each number is an even number and then print it on the terminal so pause the video spend 2 minutes on this exercise when you're done come back continue watching so we start with a for Loop for number in range 1 to 10 colon we check to see if the remainder of division of this number by two equal Z so if number modulus 2 equal Z then reprint this number now let's run this program so we get 2 4 6 8 beautiful now to count the even numbers we need a separate variable so let's call that count initially we set it to zero now in this if block every time we find an even number we need to increment count so we said count plus equals 1 and finally after our for Loop we can print a formatted string we have count count even numbers let's run the program and here's the result so that brings us to the end of this section in the next section you're going to learn how to create your own functions I hope you enjoyed the section and thank you for watching so far you have learned how to use some of the built-in functions in Python such as print round and so on in this section you're going to learn how to write your own functions now you might ask but why do we even need to write our own functions well when you build a real program that program is going to consist hundreds or thousands of lines of code you shouldn't write all that code in one file like we have done so far you should break that code into a smaller more maintainable and potentially more reusable chunks you refer to these chunks as functions so let me show you how to create your own custom functions we start with the defa keyword which is short for Define next we need to give our function a name so let's call this greet all the best practices you learn about naming your variables also apply to naming your functions so make sure your function names are meaningful descriptive use lowercase letters to name your functions and an underscore to separate multiple words now after the name we need to add parentheses you will see why shortly and then we'll add a column now what is going to happen you know it we're going to get indentation which means the following statements will belong to this function so here I'm going to add two statements hi there and welcome aboard both these lines belong to this function because they're indented now we're done with this function we need to call it so we remove the indentation and we add two line breaks after this function this is what pep8 recommends to keep our code clean and maintainable now if you forget to add two line braks don't worry as soon as you save the changes autopep8 will automatically add these line braks for you let me show you so I'm going to remove these line braks and call this function great with parenthesis just like how we call the built-in functions now save the changes there you go so we get two line breaks after our function now let's run this program so we get these two messages on the terminal now here's a question for you what is the difference between the GRE and print functions the difference is that this print function takes an input whereas our grd function doesn't take any inputs so let me show you how to pass inputs like first name and last name to this function when defining a function in between parentheses we list our parameters so here we add two parameters like first underline name and last underline name now when calling this function we need to supply two values for those parameters we refer to them as arguments so m hamedani these are the arguments to the greed function that's one of the terms that a lot of developers out there don't know they don't know the difference between parameters and arguments a parameter is the input that you define for your function whereas an argument is the actual value for a given parameter okay now let's change line two and instead of saying hi there we can greet a person by their full name so we can convert this to a formatted string and pass two Fields here first name as well as last name save the changes run the program and this is what we get in terminal now this function is more useful we can reuse it and call it with different arguments so let's greet John Smith as well run the program so we get Hi msh hamadani and hi John Smith now note that by default all the paramet that you define for a function are required so here our greed function takes two parameters if I exclude one of these arguments and save the changes you can see we have this red underline so pilent is complaining and saying there is no value for argument last name also if we run the program we get this type error greet missing one required positional argument so let's put this back now let ler I will show you how to define optional parameters so this is the simplified version of this great function we created earlier now in programming we have two types of functions functions that perform a task and functions that calculate and return a value here are some examples both the print and GD functions are example of type one they're performing a task which is printing something on the terminal in contrast the round function is an example of a function that calculates and returns a value so the functions that you create fall into these two categories now let me show you how to rewrite this great function but in the second form so instead of printing this string on the terminal we simply return it let me show you so I'm I'm going to delete all this code Define a new function but call it get underline greeting we add the name parameter and simply return this formatted string High name that's all we have to do so we use the return statement to return a value from this function now we can call this function get underlined greeting pass a name like msh because it returns a value we can store that value in a separate variable like message now you might be curious which form of these gting functions is better well with this first implementation we loged to printing something in the terminal in the future if we want to write that message in a file or send it in an email we have to create another function so we cannot reuse this great function in other scenarios in contrast this second form is not tied to printing something on the terminal it simply returns a value now we get this value and we can do whatever we want with it we can print it on the terminal or we can use the built-in open function to write this message to a file so we can create a file like content. txt open it for writing this returns a file object and then we can call file. write message now and don't worry about these two lines later in the course I'm going to talk about working with files but what I want you to take away here is that we have this message variable and we can do whatever we want with it we can print it on the terminal write it to a file send it in an email and so on and one more thing before we finish this lecture so here's our GD function and as you can see we're simply printing a string now if we call GRE give it a name run the program we get this message hi msh but what if we put this inside of a call to the print function let's see what we get we get high M followed by nonan what is this nonan is the return value of the great function so in Python all functions by default return the non value non is an object that represents the absence of a value later in the course you're going to learn more about nonone what matters now is that all functions return non by default unless you specifically return a value so here if we return some string none will no longer be returned now I just want to clarify something earlier I told you that we have two types of functions in programming functions that carry out a task or functions that calculate and return a value so back to the code we previously had so even though this function returns nonone by default it is still classified as a function that carries out a task let's create another function we call it increment we want to use this function to increment a number by a given value so here we simply return number plus by now we can call this function like this and commment two and one this returns a value so we can store it in a variable like result and then print it on the terminal let's run the program we get three beautiful now we can simplify this code we have used this result variable only in a single place that is line six so we don't really need it so on line six we can replace result with a call to increment function like this so when python interpreter executes this code first it will call the increment function it will get the result and temporarily store it in a variable for us we don't see that variable and then it will pass that variable as an argument to the print function now if we run this program we get the exact same result beautiful now we can make this code more readable if someone else looks at line five they may not know exactly what these arguments are four we can use a keyword argument to make this code more readable so this one here is the value of this by parameter we can prefix it with the name of the parameter like this now we can read this code almost like plain English increment to by one so if you're calling a function with multiple arguments and it's not quite clear what these arguments are for you can make your code more read by using keyword arguments so here y equals 1 is a keyword argument earlier I told you that all the parameters that you define for a function are required by default in this lecture I'm going to show you how to make the by parameter optional so let's say we don't want to explicitly pass by equals 1 every time we want to call this incr function we want to use this function to increment a value by one so we remove the second argument now we need to give this parameter a default value so we set it to one now if we call this function and don't Supply the second argument this default value will be used otherwise the value that we specify here will be used let me show you so we run this program the result is three but if we pass the second AR argument here will increment two by five so we will get seven so you can see it's pretty easy to make a parameter optional just be aware that all these optional parameters should come after the required parameters in other words I cannot add another required parameter here let's call that another I cannot add that here if I save the changes you can see we get a red underline here so all the optional parameters should come after the required parameters now obviously in this case we don't need the second parameter so let's delete it there are times that you may want to create a function that takes a variable number of arguments here is an example let's define this function multiply that takes two parameters X and Y and simply returns x * y now we can call this function like this so far so good but what if you want to pass one or two more arguments here that doesn't work because our multiply function takes only two parameters to solve this problem we need to replace these two parameters with a single parameter we use a plural name here to indicate that this is a collection of arguments and then we prefix it with an asterisk this is the magical part let me show you what happens when you use an asterisk here so temporarily let's delete this line and simply print numbers let's see what we get here so run the program you can see all our arguments and they're packed in parenthesis what is this well earlier you learned about lists I briefly mentioned that you can use square bracket to create a list of objects like 2 3 4 5 now later in the course we have a comprehensive section about lists so don't worry about the details of lists and how they work but what I want you to note here is that the only difference between this list and what we have here is in the notation so we use square brackets to create lists and parentheses to create toles some people call it tles or tuples so a topple is similar to a list and that it's a collection of objects the difference is that we cannot modify this collection we cannot add a new object to this toppo once again later in the course we're going to have a comprehensive section about lists top holes and other data structures what matters now is that these topples just like lists are iterable so we can iterate over them which means we can use them in Loops let me show you so let's write for number in numbers colon let's just print one number at a time actually we don't need this line so delete and run the program so we iterate over this top hole and in each iteration we get one number and printed on the terminal so now with a simple change we can calculate the product of all these numbers all we have to do is to Define a variable like total initially we set it to one and then in each each iteration we get total and multiply it by the current number or we can rewrite this statement using an augmented assignment operator so total times equal number line five and four are exactly identical so I'm going to use LINE five because it's shorter and cleaner delete and finally we'll return the total now one of the issues I see often in beginnner code is that they don't use this indentation properly so they put the return statement here and then they wonder why their function doesn't work properly if you put the return statement here it will be part of the for Loop so it will be executed in each iteration in this case after the first iteration because of this return statement will return from this multiply function so the total will not be calculated properly we need to put this at the same level of indentation as other statements in this function so here we have our four statement we Loop over all the numbers we calculate the total and then finally return it so with this implementation we can get the result and printed on the terminal let's run the program and you can see the product of these numbers is 120 hey guys I just wanted to let you know that this tutorial is actually the first two hours of my complete python Mastery course if you're finding this helpful and want to dive even deeper the full course covers everything from beginner Basics to advanced concepts like machine learning web development and automation you'll also get Hands-On projects to build your skills step by step I put the link in the description box if you're ready to take your python knowledge to the next level"
YNtWJNPCPPs,Don&#39;t Miss Mosh&#39;s Black Friday Sale!,https://www.youtube.com/watch?v=YNtWJNPCPPs,Programming with Mosh,UCWv7vMbMWH4-V0ZXdmDpPBA,Black Friday Special [Offer ends November 30th]: https://mosh.link/bf2024 Don't let Tutorial Syndrome hold you back. Take control ...,2024-11-23T14:00:25Z,all right guys let's talk about why you are here you all suffer from YouTube tutorial syndrome we're here to heal who wants to go first I could start hi I'm Amy I want to be a frontend developer and I spent so much time learning react angular view but then just yesterday a new JavaScript framework came out that everyone says I have to learn what is it te SC I hear you why are you here hi I'm Raj I've been trying to learn to code but I don't know where to begin I have around 50 playlists on YouTube for python HTML objectoriented programming data structures my parents keep asking me every day Raj when will you finally become a software engineer no Habibi don't bother coding's dead kalas where did you hear that I heard it from some YouTubers you brother brother Alex what are you doing here I was training on python but I took your advice to learn JavaScript now I started all these long dry 80 hour courses but I haven't finished a single one I've got a real problem here msh I need your help you do have a problem I do indeed all right guys you all suffer from information overload and lack of structure and this is where cot with Mar comes in the great news is we're currently offering a 50% discount on the annual subscription that's over 50 courses plus all the courses coming out next year how good is that 50% off a de heck yeah all right can buy a lot of snake food for that if you are a loved one want to recover from YouTube tutorial syndrome enroll in an all access subscription to code with MH that's over 50 courses plus all the courses coming out next year this offer is valid until November 30th click the link below to enroll what's it you want to learn the code oh you cute you don't got fingers
4XgDdxpXHEQ,Vision Transformer from Scratch Tutorial,https://www.youtube.com/watch?v=4XgDdxpXHEQ,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,Vision Transformers (ViTs) are reshaping computer vision by bringing the power of self-attention to image processing.,2025-02-25T17:15:57Z,Vision Transformers are reshaping computer vision by bringing the power of self attention to image processing in this course Tunga Barak an experienced machine learning instructor will guide you through building a vision Transformer from scratch he'll cover everything from patch embeddings and multi-head attention to assembling a full Transformer model while also exploring how Vision Transformers compared models like clip and sigp by the end of this course you'll have a deeper understanding of how AI models process visual data welcome in this video we will code a vision Transformer from scratch but what is a vision Transformer so you probably are familiar with Transformers from large language models and a vision Transformer is also type of a transformer but it can take an image as input and turn it into embedding that captures information from that image so Vision Transformers allow us to embed the information from images and because of this we can use them with language models and give the language models the ability to see and take images as input so our language models become Vision language models and you can give them images and ask questions about them so your language model pretty much can now see instead of just reading from text but how do these Vision Transformers work right now I'm going to just give a very brief Overlook and we're going to dive deeper into it um in a minute so the vision Transformers use a Transformer like architecture but instead of processing softw tokens like llms do they work on image patches and each each image patch you can think of it as a token so you can see the image patches here from like a bigger image so you can think of an image as a puzzle where each piece is a patch from the image and we embed each patch into a vector that captures its meaning and information then we add position limings so the model knows where each P belongs in the image and after that we apply self attention and U that allows them to interract that allows the patches to interact and understand the relationships within the entire image and this makes each patch context aware meaning it understands the other patches and their special relationships and to get the final understanding of the image we use a special C CLS token and instead of directly combining all patches this token attends to all patches through S attention and learns represent the entire image in a single Ting and finally through self attention layers and MLP our vision Transformer produces a high level representation of the whole image so in this video we will be coding Sig Vision Transformer I will just show here and this Vision Transformer model has 400 million parameters and it was built by Google as an improvement to a very famous model called Clips which was built by open AI but what makes sigp special so clip originally was used with softmax uh loss function but softmax loss function forces the model to compare every image which with all other text descriptions in the whole batch this is computationally pretty expensive so instead of that sigl replaces the softmax loss with a sigo loss which means that the model only focuses on individual image text pairs instead of the whole batch and without comparing everything at once this makes training way more efficient and flexible because the model learns to match images with their correct descriptions without being distracted by unrelated pairs in the whole batch and sigli is pretty famous Vision Transformer and it's used in Google's VMS like polygama and polyma to you can see here as the vision encoder all right so to understand sigp I think we first need to understand what clip is because clip is an improvement over a clip with a better loss function so we have an image encoder and we have a text encoder and what happens is we uh have a list of images and we have a list of corresponding text um pairs as well and we feed them through this image encod and as a result of these images we get image embeddings so this dog is represented uh with the embedding here as i1 and the same this image gets through the image encoder and now it's represented with an embedding and the same thing applies to the text as well so um The Running Dog the bird on a branch a camel in a desert they both get uh encoded they both get through this text encoder and as a result they have their own embeddings now so now we have a list of uh text embeddings and image embeddings and what we're going to do is we're going to take dot product of all of these uh image and text embeddings and we're going to train our model to the text encoder and image encoder to give us High do products for matching uh Pairs and low dot products for noncorresponding image text pairs so when you look at i1 it's the image of a dog and when you look at text one it's the text of a dog so we want them to have a high dot product and for the image of a dog this one and the image the text of a bird you want it to have a low dot product and so pretty much for image of a dog anything that doesn't correspond to its text we wanted to have a la. product and the same applies to the image of a bird as well so we have the embedding of the image of a bird and we have the text of image of a bird and we want them to have uh high do product because this says bird and this also is an image of a bird and everything else we wanted to have Load Out product because they're not corresponding and this pattern can be seen overall all multiplication of these embeddings and everything that gets matched we want high embeddings high do product of them Bings and everything that doesn't match we want low do product of them Bings and now we want to find the loss function where it forces this dot these dot products to be high and the rest to be low and that loss function is going to be cross entropy loss and so this cross entropy loss trains the model image encoder and text encoder to give high value to corresponding image and text and low value to non-corresponding image and text so this cross loss is going to train our image encoder and text encoder but there's a problem with clip and it's because of the fact that it's using softmax function so what happens here is when we use soft magc function we take this image dog and we take all the corresponding text that we taking producted and what we want to do is we want to give this like high probability and the rest we want them pretty much zero and we want to do it for all the image uh text pairs here and that is pretty problematic because you need to have all the batch uh all the uh corresponding text and image um embeddings here calculated together to be able to find this one as the highest and the others as the lowest and you have to do it as same for on columns as well so when you have the text running doc you're going to look at all this column here and you're going to compare it to all these um images and after that you will get a distribution of uh the probabilities and you're going to try to make this one Higher and all the rest uh lower and that's the problem uh pretty much with Sig that you cannot parallelize this easily and you will have to look at uh row by row and column by column to be able to calculate this and I will show you the math behind this right now so this is the function uh this is the math for clip and this is the math for Signet and what happens here is in uh image text of Max we have this one image here the image of a dog let's say and we're going to compare it to all the rest of the text uh uh input that we have and this is going to be one run and we're going to take their probability log likelihood negative log likelihood and what we're going to do next is we also have text to image soft Max and what is happening here is we have let's say one text let's say we choose T3 uh which was or let's say this say we choose the bird T2 and we're going to compare it to all other images here and find that only this one the corresponding one is going to be hot uh High Dot product and the rest are going to be low dot product values so we will have to train it over the whole uh other images comparatively and that is the problem with clip that you will have to do this uh twice and uh also it's not symmetric and the reason for it not being symmetric is so you might have this i1 T2 which corresponds to the dog and T2 is Bird on a branch the their dot product is different than I2 T1 I2 is the bird on a branch but the image of it versus the text of the running dog so it's not symmetric and that's why we have to do it twice but if we use sigli we will only need to do it once and what we will be doing is people treat this as a one big Matrix and uh find the values from there I will just show it in a second so inside sigp uh instead of comparing every rle like this now this is uh from this image is from clips paper and this is from clip and they're pretty much explain the same thing these are the image embeddings and the text embeddings so when you look here the text embeddings are here and the image eddings are here so in Sigma loss what we're doing is we're going to look at each individual lot product uh individually and we're going to look look at it and say hey is this supposed to be zero or is this supposed to be 1 and that's pretty much what we're going to do in the paper implementation it's uh plus one and the positive values the corresponding values are plus one and the rest are minus one but for the sake of uh understanding it simpler and what's Happening Here is instead of looking at all this row taking this text one and comparing it to all the other images what we're going to do is we're just going to look at this and say hey is this te is this supposed to be one uh and if it's so we're going to train the um image and Bings in that way and we're going to look at this one is this going to be uh one or zero it's going to be zero because it's not the corresponding thing and we can look at all the rest of this image and say text six bit image four what is it supposed to be it's supposed to be zero because they're not corresponding and and we're going to look at Image six Tex six is going to be one because they are the correct image text pairs so sigmoid loss uh here allows us to individually calculate each if it if each dot product has to be zero or one and because of this uh partition ability we can um separate this uh into matrices and give each of these into a different device and we can parallelize this process so this allows us to be faster all right let's get to it right now we will be starting to code CLI Vision Transformer model and first things first we will will need to get our images so let's get our images that we will turn into an embedding so this image uh you see right here the image of a cat this image will is going to run through our model sigp and at the end it is going to have an embedding that captures all the information from this image first things first we need to get our model to actually uh run this image so what we're going to do is we're going to import the uh from Transformers Library we're going to import the auto processor which is going to Pro process our input the image we will import the siget vision model which holds the model weights and it's the fully uh pre-trained uh model from the huging face from hugging face and sign vision confing and this is the configuration uh and the architecture of the model and we will be able to tweak some parameters if we want to like changing how many layers there are and the embedding Dimensions as well and uh right now here we are loading the model and it uh processor from the checkpoint of hugging face this Google Sig sigl base patch 16224 is the checkpoint we are using it means that our patch size is 16 and uh we are going to be using 224 by 224 images and um right here we are actually getting the whole U model itself the full model itself from the same checkpoint and this model is the full Transformer with the weights from huging face and let's check how our model structure looks like so as you can see the model from hugging face uh has uh you can see Vision Transformer and the vision embeddings so let's look at the structure this is the contents of this Vision model but it's not in uh sequential order so first of all we can see Sig Vision embeddings here the patch embeddings and position embeddings so when we look at the Sig architecture the embeddings is this green box we have the patch embeddings and the position embeddings so get the rest and then we have the and this encoder is this blue box over here and what you can see here is we have the layer normalization multi tension another layer normalization and multi-layer perceptron MLP and when we look at our uh contents here we have the layers uh we have the uh scale. product attention which is the self attention we can see over here the multi attension and then we can see layer Norm one this was the thing right before multi tension we can see U then layer Norm two right here it's content it's exactly here and then we have uh we also have multi layer perceptron it has two um fully connected layers fc1 and fc2 and it has the yell uh jell fun nonlinearity function in between so it's inside here and at the very end we have the post normalization all right so as I said this is not in sequential order it shows what contents it has so we now have our image and we know the architecture of our model but we cannot give the image directly to the model we need to pre-process it so that we can feed it to the model in a way that it can understand so let's get this part so what is happening here we have our Imports and we are pre-processing the image what happens is it takes an image and it uh the size that it resizes is 224 by 224 pixels so the images are being processed in here you can see the images are being processed to get resized and then they are turned to a tensor and then it also normalizes them so the resize turns all the images into 224 by 224 and then we turn it into a tensor and then we normalize them and you might wonder what these where these numbers come from they actually come from imag net data set so imag net is a data set of more than 14 million images and what happens there is the when they take uh the normalization values among all that data set these are the values for the mean and these are the values for the standard deviation that turns out uh to be uh the most optimal and this is pretty much an industry standard to use these and when we run it through the pre-process here you can see we give the image and now we have a tensor the pre-process over here we get a tensor and after that we UNS squeeze that tensor and why do we UNS squeeze that tensor the reason for that is over here our image right now is 224x 224 and it has three channels RGB red green and blue but if you want to turn our image into a version that the Transformer can understand we should add the batch Dimension because every time we send U images into Transformers we have to send them in batches meaning that like there's going to be couple images so this is the batch Dimension that we have to add even if we have one uh image we have to add a bad di batch Dimension and say hey there's only one element there and then what happens is we UNS squeeze it and we turn it into the correct Dimensions that we need and then we just return that image tensor and what happens after that is we get our yes image tensor so our image tensor is pretty much we just running it through this function preprocess image and it takes our image and it gives us the image Tor and the values here are these are the values that uh polyma 2 configuration uses for sigp so po 2 is is a visual language Vision language model and these are the parameters that it uses so right now for this sigp implementation I'll be using those parameters so the embed them is 768 this means that every image patch is going to be turned into a vector size of 768 so it has 768 Dimensions that it can get embedded into and the patch size is 16 that means each patch each like little puzzle piece from that image has a a size of 16 by 16 pixels and the image size is 224x 224 pixels that's the big image and right now we need to find how many patches we are going to get from that image and what we're going to do is we're going to get the image size 224 on uh height and width and we have the pat size 16 so we divide it and we get 14 so that means there's going to be 14 uh on the height and 14 on the width Dimensions so when we multiply these two we're going to get 196 uh Patches from the big from the whole image and what we're going to do after is we uh without calculating the gradient here we have no gradient uh this means that we're we are not in the training mode and the model doesn't save our gradients for efficiency so to Simply put um our model want say the feedback from the calculations to update convolution to the parameters and what happens here is with this convolution 2D parameters we running the image uh through image transer values throughout this layer to get the patch and B and what it does here is our kernal size is our patch size that means what is the uh pretty much the kernel size is how big are patch size are going to be and the stride here is also equal to the patch size and that means that the patches that we're going to get from that image through convolution they're not going to overlap so by this way we will have separate individual uh patches that uh don't have any overlapping uh values or pixels and right now let's see what our Dimension is so as you can see here we have a batch dimension of one and our uh embed Dimension is 768 we have it 14 by 14 so that means 14 patches on the uh height and 14 patches on the width and in total our number of patches is 196 all right let's add the position embeddings so as we can see here uh we have the number of patches and the embed Dimension number of patches is 196 and our embedding Dimension is 768 so what happens is here in an embedding creates a lookoff table for U all the positions that we have and their embeddings and then what happens is we create uh the positions here uh n patches uh for all those patches from 0 to 195 and then we expanded adding the batch Dimension we need because otherwise Transformer wouldn't be able to use them and it wouldn't be compatible with the rest of the patch and Bings so we uh add this uh patch Dimension uh batch Dimension and then our position ID now has the shape of one to 196 and let's see what it is exactly so this is a bad size of one and it say 196 patches inside it and now it's time to add the position embeddings uh with patch embeddings so what we're going to do right now here is we had our patch embeddings but we need to flatten them so they are in uh not like a one dimension size but we need to flatten them into bad size of one and our Ed Dimension and number of patches so after this flatten operation we have this uh Dimensions but this Dimensions doesn't uh is not compatible for addition with the uh position eddings because our position ID shape is 1 by 196 and when we have the position uh uh IDs here when we input these to position eddings what we're going to get is 1 by 196 by 768 so what we need to do is our patch eddings needs to be the same size as these and that's why we're going to transpose those embeddings that we have the patch embeddings and they were one by 768 by 196 and when we transpose these two Dimensions here uh what's going to happen is our dimensions are going to match the patch embeding dimensions and position embedding dimensions are going to match and right here the embeddings patch embeddings 1 by 196 by 768 are the same as position embeddings and we're adding them together so right now we have all of our embeddings and their shape is going to be one by bat size is one the um the number of patches is 196 and the uh embed Dimension is uh 768 so we're going to have that uh dimensions and yes we are correct and you can see it here so what we've done uh so far is we had our position embeddings and we had our patch embeddings and if you look at this architecture we had our patch embeddings and we add them with position embeddings so our embeddings uh layer is right now uh done with adding these two together and let's visualize what we have right now so right now I'm going to just uh get the embeddings and I'm going to get the embeddings from a randomly initialized um embeddings so because it should all look random and because they're randomly uh initiated here and our embeddings right now are not trained and and it just gives us this uh not so smooth U image and what does this image mean so the patch number is here from 0 to 196 these are the patches small puzzle pieces from the big image and the embedding dimensions are going from 0 to 768 and what this means is each patch has this many dimensions in its embedding and when you look at this image overall you can see that it's not trained because it's not smooth and it's not uniform so all the dimension Dimensions here and all the embeddings they don't actually u mean something but if we compare it to um the trained uh embeddings so when you look at um this what we're doing is we're taking the inputs and we're running through uh processor and we're using the vision model but what is this Vision model this Vision model is from and you look at it this Vision model is from hugging face checkpoint so this is the train embeddings so this embedding when we run it we're going to see a different result what you see here is the uh embeddings that we got from uh the Hing face checkpoint they are more smooth and you can see that they are U normalized and what these columns you see here are in specific dimensions they have some Rel ations and they are representing some specific features so the difference between untrained patch embeddings from um our uh embeddings that we just randomly initialized versus the embeddings that we took from hugging phas checkpoint are different in the sense that they're not uniform and smooth that means they are not representing the image and image patches as they are intended to right now let's make everything look more neat and put and wrap everything a class so here I create a data class to store the vision configuration so our number of channels is three our M Dimension is 768 our image size is 224 by 224 and each of our patch is 16 by 16 so this configuration we can change it if you wanted to and I'm just putting it as the config class and Sig Vision embeddings this class over here this class is pretty much this Vision embeddings that you can see here and uh it is the patch EDS and it has the position edics and let's look into this one all right so what we have right now is the initialization the config uh values we initialize them and number of channels it was three embed Dimension from here we get 768 image size is the same and Patch size is the same as we defined here and what happens here is we are creating the we are also assigning the patch and Bings from U convolutional 2D which was pretty much getting all the patches from our image and the number of patches we found was 14 by dividing the image size by the patch size and um multiplying height and the the width and number of our number of positions is on the image is the number of patches so however many patches there are there's that many positions all of these we have already done uh above and it's just wrapping everything into class and uh the position embeddings are then embeddings from s how how many positions there are and how many embedding Dimensions there are so we initialize that and uh we pretty much create that uh comparable Dimensions to add these position IDs with the batch and position embeddings with the batch embeddings and uh we did all of these here actually so these were the position eddings and these we pre-processing the image and the patch eddings we got from here convolution 2D is the same thing doing we're doing right over here so what we're doing pretty much is just wrapping everything in a class we're not doing anything new and the forward in the forward what we're doing is so we get the pixel values and we assign it to uh batch Channel height and width so our patch embeddings are the pixel values after we run patch and Bings and what we do with them is we flatten those patch and Bings so we got the patch and Bings and then after that we flatten them here after flattening flattening them we transpose it to be able to add the position embeddings on top of them so their Dimensions match so as you can see we have the position edding addition uh here and after that we add patch embeddings with with position embeddings and now we have our final embeddings and what that means is now we can feed these embeddings into the encoder layer and get our image uh to be actually uh worked on inside the Transformer so let's so let's try it what we're going to do right now is we are going to have our sign the vision embeddings from our vision configuration you can see here as the configuration that and we have our image tensor that image tensor over here that we oh why I not see all right so the image Center we are also feeding it in here and it's uh is the image Tor after pre-processing so what we're doing is we are feeding that image Tor inside this embeddings and now we are hoping to get the shapes of the embeddings then what do you think these this shape is is going to look like so our batch size is one our how many number how many patches we have the number of patches is 196 and what's the embedding Dimension it's 768 so uh since we added the patch Dimensions to uh patch embeddings to position embeddings and they have the same Dimension we transpose the patch embeddings to be able to add it to each other so we are expecting to have 1 by 196 by 768 and let's exactly so this means our edings are actually getting added and it's working right now so right now I think we should do a sanity check uh let's see if we actually initialized our um embeddings properly and if we are able to get uh load the hugging face uh weights and get the same answer so what we're doing here is we have our state dictionary uh it's embeddings that we have and the we are getting it State dictionary means we're getting its weights and biases and we have the Hing face State dictionary it's the weights from Hing face for uh the vision model the vision model that we defined at the very top the thing that we got from hugging face so this is the hugging faces own weights so we're trying to check if we initialized and um created everything uh properly so that it that we can actually take huging face values uh weights so what happens here is we're going to get the difference between our output and huging face output and we're going to do a sence check pretty much and when we run it what it says is the difference between our output and huging face output is zero so what that means is we implemented it correctly so we are um at the right track of creating this all right now that we have the embeddings now it's time to actually go into the encoder so as you can see in our architecture we finished the implementing the embeddings we had our patch embeddings we flatten them we trans CL them and then we added the position embeddings now our embeddings are complete and now we need a way to process them and that is going to be through the encoder layer so inside encoder layer we're going to start implementing it from the multi tension and let's get into it so all right so we have our multi header tension here but uh we're going to implement it in a vectorized way to match the tension weights but to make it simpler uh we can start implementing a single head tension first since it's a little more intuitive doing it this way so here uh we we are setting the head size here this is the uh size that we will project our tokens um into each head and after that we are going to create three linear Transformations so these linear Transformations are key query and value and these are the core components of self attention so these three um uh Transformations actually let patches interact with each other so any patch from any part of the image can interact with each other through these key cting valy Transformations and what we have in the forward pass is so this um from the shape of uh the uh image embeddings we get the bed size we get how many tokens there are and we get the eding size the hidden Dimensions what you can say so but here's what where the magic happens so every token from here every patch from 196 patches each of them are going to embed uh are going to emit three different vectors so the first Vector is key vector and it represents the information that this patch this token contains and the second Vector is a query vector and this represents what information this token is looking for and the last one the value here is what the uh this is the value vector and it's what actually gets AG aggregated if there's a match so how we can think of it is key each patch says I have this I have that and query is each patch is looking for something and if these get u high value um when their Matrix Matrix multiplied that means that they are attending each other more so now we can calculate the attention scores here and through matrix multiplication of queries and keys transpose we are transposing the keys to be able to to the matrix multiplication otherwise the dimensions don't match so and uh this is through this matrix multiplication we get the the affinities between all token tokens and we scale it by square of the head size to prevent that product from growing too large and uh this is um scaling like pretty much normalization you can think of it and then here we have the softmax and this softmax turns the raw scores into uh probabilities like it didn't clip it take um vector and it turn into Pro probability distribution and after that each row will uh sum to one and it's going to give us a proper attention distribution of each patch and after that what we're going to do is finally we can use these attention uh weights to aggregate the values and this weighted sum here here U it allows information to flow uh in between tokens and this output is what we returning from this forward pass and now we can actually implement the full multi attention and what's going to happen with that is so we just looked at what happens in a single attention head and it's pretty much U all the tokens attend to each other they have their Key C and value vectors and they get their dot products how how much there affinities in between each other and now that was one head but we're going to do a lot of these in parallel and that's what we call multi-ad attention so here we have the head size initialized and number of heads initialized sure and in this one here we uh here we create multiple attention heads so uh we said number of heads here so they are pretty much uh creating like running through this number of heads and each head can learn to focus on different types of relationships uh between images one can focus on the colors some specific colors the other can focus on some other specific uh textures or whever they want so each head can focus on specific features and different relationships between these patches and uh after that we are concatenating all heads and we need to project back to our input Dimension so whatever input we got we have to Output the same Dimension and this lets us connect back to the residual pathway in the Transformer and what residual pathways are here is what you can look at is so we have our multi tension here and we had the residuals from right after the embeddings and we want to be able to uh add these here so they have to the alut of multi detension has to be the same as the residual that's coming in and that's what projection does so from this L layer the input and output is going to be the same so what we've done so far is we implemented a single attention head and then we created multiple tension heads and we concatenated them together and the reason we use multiple tension heads is the more heads we have the more interesting features and relationships we can capture so to be able to match the output Dimension that we expected we concatenated those attention heads and now we were able to use those multi detentions and make it work with our model but this is not how hugging face does it to be able to use hugging face weights we need to implement it the way hug face implement it so if you look at our um configuration it's pretty much the same nothing changed here and uh let's look at the signal potention module and here we are implementing the multi detension mechanism in a vectorized way so this is different from the previous implementation where we had separate heads and here we will process all the tension heads in parallel and we're going to do it because it's more efficient to do it that way and that is how face does it because we want to be able to use their weights um while we could keep the implementation cleaner actually with some other multi detension implementation uh it's definitely better to keep it the same way uh with the original implementation and so we can load the weights from the huging face model easier and we don't have any problems with that so here you can see key value and query projections and unlike our previous implementation uh with separate heads you're using single projection layers this time and we will later reshape their outputs to handle multiple heads in parallel and this is actually more memory efficient and it follows the standard Transformer implementations and you can again get the Val the weights from hugging phas exactly if you implement it the way they do to vectorize and in the um forward pass the hidden States and the eddings and of the patches here again are just given to those variables and um what we do is first we project our input to quate key and value vectors just like before and each patch in our image will again emit these three vectors and they will be used again for attention just like before but now the difference part here is uh here like this is the important part we are reshaping multi tension here so instead of having separate heads like before we are uh splitting our embedding Dimension and imagine we're taking our large embedding vector and splitting into num head pieces so here we had our batch number we had how many patches we have and we have the number of heads how many number of heads we have and this is uh the embedding Dimension was 70068 divided by number of heads so we have a one big Vector of c cury and key and value and we divided it between number of heads and we take a one big vector and we divide it instead of concatenating all those different attention heads together so this is what we do differently and this allows us to get the huging face implementation and derates and after that we have the uh K in value settings and we then get um get the matrix multiplication of c key just like before this gives us the um attention scores of each patch and we again apply softmax just like before to find uh the distribution of uh the prob probabilities and after that we also have some drop out here and this uh drop out is for regularization during uh training and this helps uh us prevent our attention patterns from becoming too rigid and this uh also helps us with uh avoiding over fitting and after that we have our attention output uh our attention weights multiplied with our value States and this is just like the same before and after that finally we can actually uh the reshape everything back to our original dimensions and we are transposing it uh just like we did in the previous implementation and uh we will also make sure our tensor is contigous in memory for efficient comp computation and that's what we do here this is important because operations like transports can make memory layout very inefficient and this contigous helps us with memory actually and uh computation efficiency and we have one last projection to um the mix all information from all heads together here and this list the model combine the different patterns each of these heads found and then we return the attention output and actually right now let's test our implementations with a realistic example and we will use a typical Vision Transformer Dimensions so we will use a patch size of one one example one image our new patches is the same and our embedding Dimension is the same so let's create an example and we saw here create a random batch of embedded patches to test our attention mechanism so we set up our vision configuration with this trans standard Transformer parameters again uh attention heads we're going to use 12 attention heads and our hidden size is the same as before eding dimension and finally let's run our test input through the attention layer here and we'll be giving our config for the attention and it's going to take the hidden states that we provide in the beginning of this encoder and it's going to give us the output and uh if everything works our output should have the same shape as our input and let's run it so what we can see here is our input shape was one by 196 by 768 are U number of uh patches stay the same and the embedding Dimension didn't change so that means our implementation was successful all right so far we implemented the multi tension as well and now we want to do another sanity check and see if our model parameters match with huging faces parameters and we try to download and get the same output so what we're going to do is uh just another sity check pretty much so we get the state dictionaries from the huging face model and we get the vision model state dictionaries so these are the pre-trained uh uh this is the pre-trained model from hugging phase and then what we're going to do is we're going to get our own uh State dictionary and this is from the attention State dictionary for the multi detention and what we're going to do is we're going to create a mapping between our keys and hugging face keys because we want to uh load these uh values uh these weights from this address into this uh key uh in our um in our implementation so we want to make sure the weights go into the correct places so that's why we show our K project. weight is the same as like it's going to take the weights from this encoder layers. zero self attention K Pro weight keyword from the hugging phase implementation so this is to make sure keywords match and then what we're going to do is we're just going to copy over the weight and into our from huging face take the dictionary to uh our own uh State dictionary and then we're going to uh load the state dictionary into our model here and after that we're going to verify if the output matches so what happens is our output just uh gets uh the output tensor and you also get the hugging face output from U hugging faces Vision model and what we're going to do is we're going to compare the difference and and here um we just check if the results are close enough in this is close and we have a parameter here called atol and that's for if that's that's an upper bound uh for the discrepancy and if it's lower than this up uh number we call the difference uh is zero and let's try if we manage to load the uh parameters properly and as we can see the maximum difference between our output and H face output is pretty much almost zero that means we correctly loaded the uh weights into our model the rest of the encoder is rather easy and we just need to implement the MLP layer to projecting the hidden states to some other space but it will require us to update the config class so let me just write it here so what's happening here is we're creating the class Sig lip MLP and if you look at our architecture what we have done is we completed multi detention and after that we have another layer norm and we have the MLP multi-layer perceptron to write the um MLP layer we have our the configuration here and what we have is we have the hidden size as 768 and we have the intermediate size is 372 and where does this come from so by mapping the parameters to a higher Dimension the model can now learn more complex relations and in fact the represent ation that we learn in this MLP layer are the ones that got we got from multi attention and even the first residuals uh back there so this allows the encoder to learn richual representations so as you can see here the uh inputs that comes to MLP it comes from this right after multi tension and it also comes from this U very beginning of the encoder from uh the residuals here so this MLP gets both of them as input and uh uh the initialization is as you can see here we have uh fully connected layer one and its input is the hidden size which is 768 and it Maps it into the intermediate size which is 372 so now we have a reg representation and then in the fully connected Layer Two we take that intermediate size and we remap it to Hidden size so that our output is the same Dimension as our input and in the forward pass we pretty much run it through the hidden States run it through fully connected layer one and then we have our nonlinearity and this G uh nonlinearity uh allows the model to capture more complex relationships in the data and uh that's why we use it here and then after that we have the fully connected layer two and then it Maps it back to the original um uh size that we create started with uh in the beginning of the MLP and so we can just try this one out and what happens is we have our vision comp and we have our multilayer perceptual layer and we run uh a random U uh the dimension and bding and what we're going to get is hopefully the same size and as we can see we indeed get the same size B size of one and Patch number of 196 and the dimension embed dimension of or we can also call Hidden size of 768 and finally we can implement the whole Vision Transformer so let me just paste it here so what you can see here is we have our U Vision configurations again and there's a new thing here called layer Norm Epsilon and the paper implementation uh of sigp uses 1 eus 6 as the Epsilon in the layer normalization so to match the exact implementation you we will add this to the config class and Define it ourselves so that's the only reason and apart from that the rest of the sign Vision embedding is the same we have our initialization we have our patch embeddings we have uh the calculation of the position embeddings and all the rest and in the forward pass we have the Pion Bings we flatten them and we transpose them to add to position embeddings and at the very end we add both patch embeddings and position embeddings together and we return so this is pretty much the embeddings the green box that we can see patch embeddings and position embeddings getting added together and now we can look into the rest of this which is the encoder layer so let me get my camera all right so we will be writing we already have this embeddings and now we will be writing the class of this encoder and what we will be doing here is we will past the code for a single encoder layer and what happens here so in this encoder layer we have uh a one uh encoder layer and if you look at the architecture we can see that we have the layer Norm mul tension layer norm and MLP and that is exactly the same thing so we have our uh embeddings we have our self attention layer Norm one MLP and layer Norm two and after the initialization we we have our forward pass and in this forward pass let me separate it like this we first have our residuals and then we have layer Norm self attention and then we add the residuals back in there so it's the same as here so we have our residuals layer Norm U multi attension and we add residuals back in there and if you look at the rest of the forward pass we again have the residuals layer Norm 2 MLP and then we add the residuals back in there and if you look at it we have the residuals come in from here and we have the layer Norm 2 MLP and we add the residuals back in So if we get back at our code and we run this um encoder layer we are giving an image tensor and we are running it through the encoder and we expect the same shape to be the output and we can try and we get a problem called No layer Norm Epsilon but indeed we do have layer Norm Epsilon so that means I forgot to run this so oh we initialize the layer n Epsilon here and then I'm running this one again and yes our input to the model was 1 by 196 by 768 and our output from this encoder layer indeed is the same dimensions now let's take a look at our vision model again and let's check out the architecture and so we in our vision model we had the uh vehicle the Sig Vision Transformer that's the whole that's the big image of what everything is happening there we had our vision embeddings that was the green box over here and we had the sigp encoder layer and this is one of those this is one blue box it's one in quarter layer and we have 12 of those but uh we haven't implemented the rest of these encoded layers so we need to do that and wrap up in a class and the rest we have our layer Norm we have our nonlinearity G we have fully connected layer one fully connected Layer Two we have our layer normalization too and we have the last post layer normalization so post layer normalization and the encoder layers those are the two things that we need to do right now so we already implemented one of these encoder layers and what is left is implementing all those 12 so if we look back at our architecture we created one encoder layer but there's 12 of them so we can just create a class and have all these encoder layers under one class and if you look at this if you look at this class that we just wrote called sigp encoder layer that was meant for one of those encoder layers but we have 12 of them so we can just create a new class and call it sigp encoder and this class encapsulates all those 12 layers at once and what uh happens in this configuration file is that we have the num hidden layers a new parameter and it's called um 12 and 12 is the number of layers that we have in this encoder so that makes sense and let me show myself again yeah and U here we have the class and its initialization is the configuration and we have the modu list so we have all these layers all these 12 layers and we're going to initialize it inside the modu list that's pretty much it and in the forward pass we are pretty much just running a for Loop for each layer in s that layers and there's 12 layers and what what's happening is we are inputting the hidden States and we're taking the output from that layer and again feeding it to the next layer so by this way we are running this uh image uh uh image embedding from uh 12 different um encoder layers and we can take a look at here and what happens here is we have our encoder including all those 12 layers and we just uh input a random uh image embedding uh image um vector and then what happens is we want we expect it shape to be the same as the initial shape so that we know our encoder is working properly and when we run it we can see that indeed our shape is still the same now since we have the class for the whole encoder layer Let's uh create the vision Transformer class and put everything together so our Sig Vision Transformer class here is consisting of the configuration in the initialization we give the vision embeddings class we have the encoder and we have the post leer and what happens here is in the forward pass we just give it pixel values and it that turns them into embeddings and then it feeds it into the encod order and after that we have the post layer norm and it Returns the embeddings from right after the post layer norm and if you look at this architecture that we draw we have the embeddings and then we have the layer Norm pretty much the encoder and then we have the post layer Norm so here we have uh turned all these special classes that we wrote into a bigger class that encapsulates everything in there so embeddings encar and poster norm and output is the L and state is the image edic that includes all the information from that image and includes all the meaning from that image it's a vector so let's take a look at it here we have our sigp model from our sigp vision config and it's the Sig Vision Transformer that we just created it's an instance of this class and we give it an image dancer and we expect it to give us the uh embedding that encapsulates the meaning of that image and when we run this we get the shape of this image tensor from the output as 1 by 196 by 768 and this is what we expected and this shows that our model is doing the calculations uh in the uh desired Dimensions so we're pretty much done we have our vision Transformer and you can use this Vision Transformer as a a image classifier and you can use this to give a lot of images and classify them into some text U classes you can use this as the vision head for a language model and turn it into a vision language model or you can U use it for some other U Vision uh and image text uh tasks and so what we can do the last thing we're going to do is in the hugging phas um implementation there's another class called CP Vision model and they make they wrap it around another class to make it um even more simple simpler implementation so what happens here is we just have the C Vision Transformer uh as in our initialization and in the forward pass we just run it through the vision model and we just give the pixel values and it just returns us the um image embedding with uh the information uh and the the meaning that it captures inside after running it all through the all embedding encoder and post layer norm and as you can see we have our sigp model and we have our image tenser we run it through that and we are expecting to have the same size as output and yes we can see so right now we can see that um from a dimension perspective our calculations are correct but we also want to check if our keys are actually correct as well and to make sure our keys are correct as well we will check it so what we're going to do is we're going to get the state dictionary from the hugging space uh implementation of clip and we're going to get the state dictionary from our implementation of clip and we're going to check if our keys are matching correctly and if we are loading the weights properly and we can just run it like this and we see that all keys match successfully so that was a successful implementation of clip model and uh this is pretty much it so just to recap everything using a vision Transformer we took an image and we embedded into a vector that captures that information from that image and we can use an image transformer for image classification tasks to uh turning a language model into a visual language model adding visual understanding and I want to take I want to thank alar Bai for helping me creating this tutorial and um I hope you enjoyed it thank you
hK8wf18SasY,Kubernetes and EKS for Beginners – Crash Course with Pulumi,https://www.youtube.com/watch?v=hK8wf18SasY,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,Learn the basics of Kubernetes and how to deploy on EKS. You'll also learn how Pulumi can help with Infrastructure as Code.,2025-02-20T14:54:31Z,welcome to eks and kubernetes for beginners I'm Bo KS and I'm teaching this course throughout this course we'll be working with this real world example application The Zephyr archotech Emporium online store this is a modern microservices-based application this application represents a realistic scenario you might encounter in production environments making it perfect for learning kubernetes deployment patterns we'll be using palumi as our infrastructure as code tool to manage our eks clusters and deployments palumi offers several advantages you can write infrastructure code in familiar programming languages there's strong type checking and IDE support it has built-in State Management and has excellent support for AWS and kubernetes resources pulumi provided a grant to make this course possible first we'll learn about kubernetes well what is kubernetes kubernetes is a container orchestration platform that revolutionizes how we deploy and manage modern applications to understand its rule let's start with the basics of containerization applications are often packaged into containers think of these as complete portable packages containing everything needed to run your appli application while containers solve the packaging problem they introduce new challenges in management and deployment at scale this is where kubernetes steps in think of kubernetes as an operating system for your Cloud infrastructure just as Windows or Linux or Mac OS manages resources and runs applications on your computer kubernetes does the same for your container containerized applications across entire data centers it makes complex decisions about where to run your containers how to connect them and how to ensure they're running optimally so why use kubernetes well consider this restaurant analogy running applications without kubernetes is like managing a restaurant where you personally handle every detail seating guests taking orders and coordinating with chefs it's possible but becomes overwhelming as you grow kubernetes transforms this operation into a well-oiled machine automatically handling these tasks and responding to changes in real time here are the key capabilities of kubernetes automatic scaling kubernetes automatically adjust your application capacity based on demand like a restaurant that can instantly add or remove tables and staff as needed it's self-healing when something fails kubernetes automatically restarts or replaces the failed components eliminating the need for manual intervention at 3:00 a.m. intelligent load distribution traffic is automatically distributed across all available instances ensuring Optimal Performance and resource utilization seamless updates applications can be updated without downtime with automatic roll back back if problems occur infrastructure flexibility applications become truly portable running consistently across any cloud provider so to help us understand kubernetes let's create a simple application and containerize it now this is different from our Zephyr application we're just going to create a simple hello world so I'll just make a directory and then we'll go into the directory and then I'll just initialize a simple uh node.js application with npm inet okay got open visual to code I'm just going to create the main file again this is just a simple example I'm creating this simple app I'll install the dependencies express now I'll add some new scripts to the package.json got to start and Dev and then I'll just start the application with mpm start and I'll go to this URL here and we can see it says hello world here so this is the basic application that we want to containerize so next we're going to have to create a Docker file so it's just going to be called Docker file no extension or anything let's talk about Docker for a minute Docker is a essentially your packaging tool it creates standardized containers for your apps think of it like a shipping box that includes your app and everything it needs to run properly the best part these containers run exactly the same way everywhere whether on your laptop or in the cloud now kubernetes comes into play as your management system while Docker handles individual containers kubernetes is respons responsible for managing multiple Docker containers at scale it handles all the complex tasks like deployment scaling and monitoring you can think of it as a smart container orchestrator that keeps everything running smoothly so why do we need both well it's simple Docker and kubernetes serve different but complimentary purposes Docker takes care of packaging individual apps while kubernetes manages multiple Docker containers they work together seamlessly just like in a restaurant where Docker is the kitchen preparing individual meals and kubernetes is the manager making sure all orders are coordinated and delivered efficiently so let's talk about this Docker file it's it's our basic application that we want to containerize it's a set of instruction that tells dock to package your application so first we have our base image this B this is like a recipe that starts with the the base operating system and then we have our working directory now it's good to have your application um you don't want to use your root as the main application so in fact let's actually create that directory and then I'm going to move my app.js into that directory and then we're going to copy our package.json and package lock that's we have the astri key here into our container and we want to install the dependencies which is going to include Express in this uh in this situation and then we'll just copy the rest of the application and then we tell docer which Port our app uses and then the command to start our application but and let's make sure we update our package.json now that we moved our app.js to the app folder and then in my Docker file just have to make sure we have app SL app.js for our new location and now we can build our container using Docker so before we build our container you're going to have to make sure you have Docker desktop running now the way to install is different depending on your operating system so just uh look at search for Docker de desktop and just get that installed and running so once we got that running we can do Docker Docker build St hello K our directory version one and then the dot this command takes our Docker file recipe and creates a Docker image it's like a template that can be used to create running containers now let's talk about pods a pod is the smallest Deployable unit in kubernetes think of it as a wrapper around one or more containers pods are like tiny virtual machines that run your containers so I'm going to create a pod manifest I'm just going to create a new file and it's going to be called hello pod. yaml and then I'm just going to paste this in so we have the name of our pod we have the containers that we've named the container hello container and the image is the one that we just built and then we put the port that our application uses this gamma file basically just tells kubernets how to create and run our pod basically like a blueprint for running our container now we need to deploy and verify so to deploy we're going to be using the cube controller command so I'm just going to type in Cube controller to make sure it's installed if you don't have that installed you can search for how to do that and also we have to have kubernetes running on our machine so there's a few ways to do that but if you have Docker desktop installed the easiest way is just go to settings you go to kubernetes here and then click the enable kubernetes now this is already enabled once you click this for the first time it's going to take a few minutes to install and get running so since I already have kubernetes uh enabled I can now start running the commands to deploy the Pod now I'll do a cube controller apply DF hello- pod. yaml so we cre the Pod so in Dr desktop we can see that the Pod is running we can also check if the Pod is running on a terminal so I'll do Cube controller get pods and then we can see it's running we can also get detailed information with Cube controller describe pod hello pod and then we can see all this additional information about our pod so if I just make this bigger so we can get a lot of information about what the pot is like let's just test it out so if we do curl and then the Local Host 3000 it should say hello world right well no uh that's because we are outside of the Pod so the Local Host only applies inside the Pod so um temporarily we can actually port forward so I'm run Cube controller port forward hod 300 3000 and now it's forwarding everything out to our computer here so it can open up a new terminal and then we can run the curl Local Host and we can see Hello World there now the port for command creates a is just like a temporary connection between the local machine and the Pod and it's useful for testing and debugging but it's not a production solution in produ you typically use a service and possibly an Ingress to expose your application so let's just close all this down for now now let's talk about creating a deployment pods are great but they have limitations if a pod crashes it won't automatically restart so this is where deployments come in deployments manage multiple copies or replicas of your pods and ensure they're always running so let's create a deployment manifest so I'm going to create a a new file not there though I'm going to create a new file at my root and it's going to called be called hello deployment. yaml Okay so this deployment is going to run three copies of our application and make sure they're always running so if any pod fails kubernetes automatically replaces it and it's looking for the pods that are called hello K which we created and then we specify our container an image and now let's deploy it so I'll do Cube control apply and then the hello deployment. yaml and we can watch the pods being created with Cube control get pods DW okay so now you can see we have all these created while deployments manage our pods we still need to wait for users or other applications to access access them so this is where Services come in we're going to add a service now so why do we need Services well pods are temporary they can be created and destroyed at any time and each time a pod is created recreated it gets a new IP address Services provide a stable unchanging way to access your pods regardless of which pod actually handles the request think of a service like a front desk at a hotel you don't need to know which room or pod you're going to the front desk or service handles that for you so let's create a service manifest so I'm going to create a new file called hello service. yl so let's break down what this service does we have the selector this tells the service which pods to send traffic to it matches the labels we set in our deployment the port configures how traffic should be routed and the Target Port the port in the Pod to forward to and then we have our load balancer which makes our application accessible from outside the kubernetes cluster so let's deploy and verify we'll do a cube controller apply hellos service. yaml and we'll save first actually then we'll run that command again now we'll check the service status with Cube controller get services and now that I have that service running we don't need the port forwarding I have this other terminal here and I can do curl Local Host I don't need to do Port 3000 anymore because it's listening on Port 80 which is based the default where we don't have to put in a port and we can see message hello world okay let's get rid of that and let's talk about config maps and secrets so as applications grow you'll need a way to manage configuration and sensitive information kubernetes provides two resources for this config Maps they store non-sensitive configuration data like environment variables or configuration files it's basically a way to keep application settings separate from your application code then also we have secrets which are to store sensitive information like passwords API Keys certificates it's it's similar to config Maps but with extra security measures data is encoded but not encrypted by default so let's just see really quick how you would do that let's create a new file just called hello config.yml and then this is how you would set up that we are going to have data with a message hello from config map and then we can access that message and then if you're going to create a secret I'll just create a new file hello secret. yaml and this is how we would save our our secrets a kind of secret data now this is just a madeup API key but so this is just for demonstration purposes and to use our config map and our secret file we would update our deployment file basically in our spec in our containers we're just going to add some information at the end here we have EnV and then we are creating some a variable uh uh we're creating an environment variable from the config map and then we are creating an environment variable from the secret we're getting from Hello config hello secret and the key so now we can access that within our container and then we can just run the cube controller p-f hell deployment. yaml to add those configuration variables now that we have everything set up we can verify everything so we can run Cube controller get all and this will show all resources in the namespace and then we can um get the service URL we can with Cube controller get service hello service we can get the URL there we can uh View application logs by first getting the Pod name with Cube controller get pods so we have all these pods so we can then view the logs Cube controller logs hello pod so then we can see the logs running so basically this completes our introduction to C CU beretti's fundamentals each component we've covered pods deployment Services config maps and secrets play a really important role in running applications in kubernetes understanding how they work together is key to successfully deploying and managing applications in a kubernetes environment okay now let's see how these basic kubernetes concepts are implemented in more of a real world application so let's just break down the application architecture of this uh Zephyr app it there is the front end layer which is a typescript based web interface and has client side routing we got the backend Services which is a javab base microservices handling Core Business logic and we have the restful API interfaces and then there's also the supporting services which are go-based utilities and helpers we have infrastructure monitoring and service mesh integration so there's a few ways it could be deployed directly to kubernetes clusters or to Amazon eks which will be our primary focus so we I introduced this Zephyr retail store application and let's see how it uses the kubernetes concepts that we just learned so I'm in the ZR app I'm in deploy under this deploy kubernetes folder here and this is a microservice based retail store that demonstrates how real Enterprises use kubernetes so it's broken up into a bunch of different microservices components the UI service catalog service cart service order service and a few more and we start by having these name spaces so unlike our simple example earlier real applications use Nam spaces to organize different components so here we have the assets namespace the carts catalog uh checkout and then we have a few other Nam spaces here and that's what this is all um starting with I guess um to here the UI namespace and we have the rabbit mq namespace the separation helps with resource isolation Access Control clear service boundaries and easier monitoring and maintenance and then we have these different Services account which basically correspond to uh the different microservices now let's look at how the UI Services the UI service uses config maps for configuration so before I showed you the config map in a different file a lot of the things that were in different files can all be in one file so we have this um config map here and there's a few different config Maps so we have the assets carts catalog I'm actually going to focus on the UI one right here this configure config map shows how service Discovery is handled through internal DNS names and each service can be configured independently and environment variables are managed centrally and then we also have our secrets in here uh the basically for sensitive data so we have our database credentials and just other different secrets that we have right in here then we have these um Services um so services are used to enable communication between components so each service has a assistant naming pattern it uses uh the cluster IP type right here and the UI service uses the load balancer type for external access if I go down there so here's the the load balancer type and then we have the deployment so let's again look at the and there's a deployment for each of the sections but let's specifically look at the UI deployment so there's some key Enterprise patterns shown here so we have the resource management which is a best practice we have this um security context and then we have the the health monitoring so to cover all the details in this is a little outside the scope of this course but I just wanted you to see what it looks like so let's see how we would deploy this with kubernetes so let's go into the kubernetes directory so CD deploy CD kubernetes and I will just take this off and what we have our Docker desktop still running with kubernetes we have the cube controller installed and configured and so now let's check our cluster connection with Cube controller cluster info so this basically checks if our kubernetes control center is up and running it's similar to checking if internet connection before you're trying to browse the the web so we have it running uh which means we have running on the docker desktop and then we can start to move forward we're going to create our name spaces so basically we're using our deploy yaml file it includes namespace definitions and we're going to verify they're created so we'll do Cube control apply and then the the deploy yaml okay so we just created all this from our deploy yo file and then I'm going to verify they're created by control Cube controller get name spaces and I'm looking for the specific name spaces we know we in there okay so we found all these name spaces now let's check what's being deployed by verifying the resources so Cube control get deployments all namespaces so so now we can see everything including our hello deployment that we did previously now we can check our services Cube controller get Services all name spaces so here's all the services that were included in our deploy doyo file and then we'll check our pods so it looks like most of them are running we do have some that the status is not running we can also check the UI access the UI services exposed via load balancer so Cube controller get Services ui- lb and we can see that this is the external IP is pending right now now we can check our pod status with Cube controller get pods D all name spaces and then we can look for running or so anything that's not running so here are the ones that um are having some some problems now some errors can happen if you have um multiple apps that are running on the same port uh for instance I have the Hello World app that I created earlier in this tutorial so to remove everything from that app I can do Cube controller delete all and then the everything in the default Nam space now um it would normally show everything here that that we created earlier but I've already run that command so it it deleted everything and then after everything is deleted you can make sure to run the deploy do yam I'll apply that again to make sure everything's set up we can't quite get it running locally yet because there are a lot of required images that we would have to pull down like these are all these required images that it needs for this application and we could pull them locally to our computer to run it locally but I'm not going to do that for now but later we will get this up and running elastic kubernetes service or eks from Amazon is a managed service that makes it easy to use kubernetes in the cloud without worrying about the complex infrastructure setup instead of spending time installing operating and maintaining your own kubernetes control plane AWS handles all that for you it's like having AWS as your kubernetes expert team that manages the complex Parts while you focus on your applications with eks you get a production ready kubernetes cluster that automatically handles many critical tasks like system updates security patches and scaling the service seamlessly integrates with other AWS tools and services making it easier to deploy manage and scale containerized applications using kubernetes eks clusters are built on Three core components first there's the AWS managed control plane which handles all essential kubernetes services like the API server and schedulers second you have node groups the servers running your applications available as managed self-managed or serverless fargate options finally the networking layer connects everything through your VPC using security groups and load balancers to manage traffic securely we also need to understand infrastructure as code and why we're using plumi what is infrastructure as code well infrastructure as code means managing your infrastructure through code rather than manual process instead of clicking through the AWS console or running commands manually you write code that describ your desired infrastructure State key benefits of infrastructure as code are reproducibility which is to create identical environments every time inversion control where you can track changes and roll back when needed automation eliminate manual steps and human error documentation code serves as living documentation and scalability you can easy easily replicate infrastructure for different environments so why should you choose palumi for application deployment well palumi modernizes kubernetes deployments by replacing complex yaml manifests with familiar programming languages like python typescript or go this allows developers to use standard programming Concepts and tools they are know leading to more efficient infrastructure management and faster deployment Cycles unlike traditional infrastructure as code tools palumi leverages existing programming knowledge and development practices its stat concept simplifies managing multiple environments while automatically tracking resource dependencies the platform also extends Beyond kubernetes allowing management of resources across multiple Cloud providers in a single program making it an ideal choice for modern application deployment we're going to use palumi to deploy our Zephyr application on eks but first let me just do a another quick overview of palumi we're going to I'm going to create a really quick demo palumi project so you have a better understanding how palumi works and then I'll show you how we use palumi to deploy the zephra application so first we have to make sure plumi is installed uh if you have Macos it's Brew install plumi slap plumi and if you're on Windows it's Cho install palumi and then we need to configure palumi to access our AWS account if you have AWS installed then palumi and if it's it's already configured plumi will just use the configuration settings that you use for AWS so I need to get my AWS access key I'm logged into AWS I'm going to go to security credentials and then I'm going to create an access key this is not best practice but it's the fastest way for now so I have my access key and I can export this as an environment variable just all capital letters um with underscores AWS access key ID and then I can also do AWS secret access key for environment variables or I can just do AWS configure so I'm going to put in my access key and then my secret XX key and then for my default region you can use whatever region you want doing Us East one and again we could have set these as environment variables if you don't have the AWS CLI installed or if you plan on using plumi in a cicd pipeline so I'm now going to create my project so first I'm just going to be calling this pumi Qui and I'll go into the directory and then I'm going to do plumi new AWS JavaScript so basically this plumi new creates a new plumi project with some basic scaffolding based on the cloud and language specified so now I have to enter my access token to just get logged in to palumi uh you may not have to do this if you're already logged in so I'm going to log in to palumi or I could create an account and I'll create a token okay I'll copy the token and then just paste it in here now this will help us create our project name and everything I'm just going to use use these default items I'll use mpm a default AWS regen okay it's setting it up okay let's review some of the things that were generated here we got the index.js so this is the palumi program that defines our stack resource so we're getting a AWS bucket called my bucket we're exporting the name of the bucket so when we deploy the stack this will provision the S3 bucket and then we have the plum. yaml which is going to just give some of the configuration opt options so now we can just go ahead and deploy this stack with plumi up so this command evaluates the program and determines the resources the resource updates to make first the preview is shown that outlines the changes that will we made when you run the update so then I have to say if I want to perform the update and once the preview is finished we're giv three options to choose from now if we had chosen details on that last prompt it would show a rich diff of the changes to be made and the output here is going to be what we see here that the stack output and we can see that we now have a bucket name in our output that's the S3 bucket that we created up here now we can access the outputs from the CLI so we can do plumey stack output bucket name and then we can see the bucket name again and now we can actually see the bucket in a few different spots well I'm going over to AWS go to to my S3 buckets here and then here's the bucket I just created and then if I go to the plumi website I'm logged in and I'm on stacks and then pumi quick the one I just created so we can see our bucket on here we can see the bucket name and information about the bucket here okay now that the bucket is provisioned let's just quickly modify the program to host a static website so I'm just going to create a new file called index.html and then it's just going to say hello everyone so now I'm going to go back to index.js and we're going to add that file to the bucket so right after creating the bucket I just added how to create an an S3 bucket object so we have the bucket object which is this the index.html and it's going to get this source file asset the index.html and the bucket bucket into the ID of the bucket now this bucket object is part of the bucket we deployed earlier because we referenc the bucket name in the properties of the bucket object so we refer to the relationship as the bucket object being a child resource of the S3 bucket that is the parent resource that's how palumi knows what S3 bucket the object should live in next we'll just deploy our changes we I it save it and then just do pumi up and then we will see that we have uh plus one to create will preview the changes I will go to yes I do want to perform this update and it's just going to proceed with the update and upload the index that HTML file to the bucket now we can verify the object was creating the bucket by a few different ways over on the AWS console we can now see the index. HTML file is in here we can also use the aw CLI ads S3 LS and then we would put the bucket name right here and it's going to show us our index.html is there now let's update the program to turn the bucket into a website so I'm going to add a one more thing to our index.js file after we update the file we now are creating a website bucket website configuration V2 so this is how we set the this index.html as the index document of the website and for the bucket object itself will need a few more resources first of all before we Define the bucket object I'm going to put in uh some ownership controls we have the bucket ownership control resource which will Define the bucket's file ownership settings and we are defining as object writer and we're also going to need I'm going to add one more thing here a a public a bucket public access block and this is going to allow our bucket to be accessed publicly and then inside our bucket object I'm going to add some additional stuff here we need an access control setting of public read to allow the page be access anonymously like in a browser and a content type of text HTML to tell AWS to serve the files a web page and note that the bucket object also includes the plumi resource option depends on this setting tells plumi that the bucket object realized indirectly on the public the bucket public access block which is responsible for enabling public access to its contents if you admit the setting the attempt to Grant Public read access to index. HML would fail as all S3 buckets and their objects are blocked from Public Access by default finally at the very end here we're going to export the resulting B the buckets inpoint URL so this is going to export the URL so we can browse to it easily so I'll save this and I'll go back into the terminal and WR do palumi up okay looks like I did something in the wrong order can I access website before initialization so this website it's actually a reference here I I put it in the wrong order so let me just move that up to here and then we'll do pumi up again and I will perform this update okay and it's going to Output this URL so let's go to the URL and it works hello everyone okay now now that we've seen how to deploy changes to our program let's clean up and tear down the resources that are part of the stack so we can very easily destroy all the resources so I'm just going to do plumi destroy and then it will basically remove the bucket and remove everything that we did so we won't be charging all this extra stuff to our AWS account and then we can uh Delete the stack if we if we know we're never going to use this again we can delete it completely and this is going to remove the stack entirely from plumy cloud along with the update history and I'll just confirm that I want to delete it and it's been removed so I'm back in my Zephyr application and in the infra folder for infrastructure we have the index.ts TS and this is the configuration for palumi to deploy this application using kubernetes to eks so I'm just going to go over this I'm not going to go over everything in detail because it's a very long file but I'm going to go over the the key sections so you have a better understanding how palumi Works in a in a more complicated project before I go through this file I just want to briefly discuss some of the things that make creating infrastructure this way easier compared to using yaml files so I have the plumi extension installed and one thing that allows me to do well watch this I can do cons cluster equals new and then I can use the intellisense suggestions uh for resource options and then if I just hover over here I can see these inline documentation that allows the different that shows me the different things I can create the cluster with and we can also get code completion if if you have that in your code editor so I can just tab that and put that all in there plus I get type checking to catch errors and this way makes infrastructure more discoverable okay well let's review this file so we start with the the Imports which are the necessary packages plus um we have the the tools like eks and kubernetes that are going to help us that we can work with those in the file and then we have our cluster configuration variables which Define how big the cluster can be the minimum maximum desired number of nodes and they can be customized through plume's configuration systems then we have the network setup that creates a virtual private Cloud basically a private Network in AWS where your eks cluster will live then we have the eks cluster creation which specifies where it should live the VPC and how it should be configured then the rest of the file defines the various kubernetes resources basically the same resources that we talked about earlier in the course but first we have some labels which are basically key value pairs attached to kubernetes objects for organization and selection these help with identification grouping and selection and then we have the name spaces um these are just like we saw in when in the kuber netti section of the course so we're just having code to create all the same name spaces in palumi and then we have our surface accounts which provide identities identities for pods allowing them to interact with the kubernetes API and other services securely and then if we keep going down further we are going to have have the config map so the config map store non-sensitive configuration data that can be used by pods and like we talked about earlier there for environment variables there for environment variables application settings and service in points and then after the config Maps we are going to have the secrets so that's first off like database credentials API Keys authentication tokens and then we have the services again just like we saw in the kubernetes section these provide network connectivity between pods low balancing service Discovery and external access when needed so if I go down a little more and then we have a place to build the assets images and the different images we're going to need and if we go down more we can see how we're going to create deployments so deployments uh we discussed earlier and these are going to manage the number of pod replicas rolling updates pod templates health checks and resource limits so for instance we have this Li liveness probe this is a health check it ensures containers are healthy and automatically um restarts unhealthy containers and then we have the resource management uh this controls the CPU memory allocation prevents resource exhaustion then we have the the security context it enforces security policies runs containers with minimal Privileges and implements security best practices we have the volume management which provides temporary storage uh manages persistent data and handles shared stores between containers and then a lot of the rest of this is just the different deployments that we're going to use for the different microservices so again going into all the details is beyond the scope of this tutorial but this configuration provides a complete production ready microservices application with proper separation of concerns secure configuration management resource optimization Health monitoring scale and scalability support and you can get the link to the code in this video description but now that we've gone over this let's see how to deploy it so let's go back a little bit and then go into the infra directory oh need to go back one more okay we're in the infr directory and now I'm just going to do mpm install to install all the necessary dependencies and then we'll do plumi stack and net Dev to create a new stack the dev stack now we already have AWS configured from before so I can just do plumy up and I say yes I want to perform the update okay that finished so I'm going to get the cube config which is basically like the key or the password to access this cluster and then after I put into this file and then I can run this command basically to get the application URL so this UI here is the Nam space this U y lb is the service and that should give me the URL here so here's the the URL to access to access the program we could also get this over on the AWS website okay and here we finally get to see what the website looks like so we can go around to home we got the catalog and this is all being hosted on eks on AWS we can check out here we finally got this all live using kubernetes and eks and also palumi now let's get our hello world application deployed to eks using kubernetes and palumi so I've created a GitHub repo now I'm logged in to palumi and I'm going to use palumi co-pilot to help me get this deployed this allows us to basically use a conversational chat interface to do a lot of different things like generate infrastructur code and a bunch of other things that we may want to do so I'm going to try it I'm in uh settings and and I am going to enable this and I'll just click this star thing to open up palumi co-pilot so I'm going to just tell a plumi CO pile I just type this in help me deploy my application eks with plumi I have already created it locally but have not created a plumi project yet what are the steps and then I'm going to just say here is my Docker file so so it just knows a little bit more about my application and then I will uh press the send button so it says install the plumy CLI create a new project with plumy new typescript and and then it gives you some more steps here before we keep doing this I'm going to I can ask it more questions like uh uh from experience I know that Plum new typescript is going to over overwrite my package.json so which I don't want to do so I can say won't won't plumy new typescript overwrite my pack. Json file I don't want to do that okay so Al now this is how we do it without overwriting your existing files so I will copy that I'll paste the command pluming new generate only typescript and I will do Force and then we can just go through and I'm just going to set up the new plumia project I'm just going to use all the default settings mpm okay and our package.json is still correct but we now have the plum. yaml we have the index.ts which we're going to be adding to so let's go over the next step install the plumi packages now we should have these already but I'm just going to do it just to make sure so we'll paste in the packages to install then create a new file the index. Cs and set up your eks cluster and application deployment so I'm just going to copy all this and then we'll just paste in here let's go over this a little bit so we are creating our eks cluster we are EX boting the Clusters Cube config to help configure everything and then we're creating a a label my app we're deploying it now we can see here we are loading our application from this image on dockerhub so that's something that I haven't talked about dockerhub is a container repository we can see here that it recommends build your Docker image and push it to a container registry so not a repository registry like Amazon ECR or dockerhub so there's a few different ones you can use we are going to use dockerhub because it's a little easier for your first time but here's why they're required when deploying applications to kubernetes which includes eks you need a container registry and some of the reasons are because kubernetes needs to pull your application's container image from somewhere accessible to to the cluster and you can't directly use the local images in a remote cluster so when we did the example before we were using a local image but it's not like it can pull it from our computer so we have to put it on some registry you and container Registries provide a centralized secure location to store and distribute rute our container images so dockerhub is free for public repositories and they do have a free tier that we can use for this so I'm at HUB dod.com you can either sign up or sign in I'll just sign up with my account here once you when you create your account you will create a username and that's what we need to put in right here so my username is just my name and we can see it says container Port 3000 that is the port that we have in our file we can go to our Docker file and we can see that we're exposing Port 3000 it's also the port that is right in our app.js file so let's go back to our palumi file and we can see we've create we've also have a service with a load balancer so the load balancer is how you get access to your actual URL uh when you're using palumi truthfully you don't have to do a lot of manual coding because you can have the AI just write it for you so now we can keep following these instructions here um we'll have Docker build- T my app now we previously ran this command and we call it hello- kv1 and but this time we'll just build it again again with a different name so we can kind of go along with these instructions here and this now is going to be called my app and I do have Docker desktop running in the background that's important the command won't work if you don't have Docker desktop running in the background so now that we've built it we are going to get it uploaded basically to dockerhub so I'll copy this next command so first we have to do the docker tag then we do the docker push and I have to make sure to put in my actual username and then we can see um this is called boar my app latest so that's why it's going to look exactly the same here so now I just do the same thing with Docker push okay it wasn't the exact same thing it's Docker um Docker push I don't need the my app anymore um so Docker pushbar apppp latest okay while this is pushing the docker let's go look at our next step now we just have to run plumy up and that should actually just deploy the application to eks says it will create the eks cluster build and push our Docker image and deploy our application to the cluster and we can then access the application via the load balancer URL created by the kubernetes service so let's do plumi up and we'll just wait for it to do everything create everything in the background and we got an air but that's okay because we can just go over right over to palumi co-pilot put in here and then it should be able to fix so it says it's unable to find a matching VPC in your AWS account you can resolve this either by specifying existing VPC or creating a new one as part of your plumy program and then it will show how to create a new VPC and use it for the eeks cluster so let's do that we'll just copy this code over uh create a new VPC so do that at the very beginning here and it says update the eeks cluster configuration to use the newly created VPC and subnet so I'll just copy that and I can just paste in the new um eks cluster how how to create the cluster and now it just says to run pumi up again so pumi up and this time we have no errors and we can say that we want to perform the update okay we have a few more errors we can just go back and forth a few times so we get get this all fixed okay after going back and forth with the AI a bit and get and adding the service IP so we can access so we have the web address to access everything works so I'm going to just test it out I can just copy this service IP here and it works hello world so I've used palumi to deploy to eks on AWS and I want to go over a few other things when you're using palumi one is the drift detection so palumi offers drift detection which is the process of identifying changes in the actual state of your Cloud environment that are different from the expected State stored in the plumi cloud so it's really easy you just do plumi refresh and then it's going to compare what's on your actual Cloud on iws with what palumi thinks and then we'll just fix everything for drift drift detects when you do refresh no resources will be modified just the stack state will be so the plumy information will basically start corresponding to what's on our cloud in this case it was all unchanged nothing was different and if you're going to be using plumi a lot you should consider installing the plumey extension for vs code or whatever code editor you're using to get code completion and be able to mark errors more easily so I can just go to plume and then palumi tools for vs code and install another thing I want to quickly review about pumi is their insights feature which is an intelligent infrastructure Management Service that will help you discover understand manage and improve your Cloud infrastructure um basically it it can help you understand your Cloud infrastructure with AI insights even things that you didn't even previously tell plumi about so so let me just show you how that feature works for the account Discovery it requires read only access to your Cloud accounts and that's granted by creating an uh ESC environment that generates valid credentials for the corresponding plumy provider when accessed so I'm going to go to this plumi ESC here and environments I'm going to create an environment and then I'll just call this insights environment and I'll use the same thing for the name and now we're going to need to configure plumi insights with AWS or if you have another cloud like Azure or something else you can configure with that so I'm on the AWS console I'm going to go to the rolls page and I'm basically creating a new roll so I'll click the create roll button and then we'll do web identity and then for the provider I'm going to to do create new and it's going to be an open ID collect uh connect provider so of api. plum.com openid connect so the audience uh it's going to just be AWS and I put colon and then the name of our organization on pumi now you're going to have to be a admin for your palumi organization to even get this set up so the organization name is just FCC for free code camp and then I'll click add provider okay I can close this and then I can I'll just refresh this page so now I should be able to do web identity choose a provider and it's going to show the palumi provider now now for the audience the AWS FCC and then we'll go to next and then for permissions I'm going to filter this to read only access and I'll go a little further forward in the search results and we'll just go to read only access so nothing nothing before the read only access just like that and then I'll go to next and then for roll details I'll just put plumi insights or I guess I can't put a space so pumi insights and then I can do create roll and then I can just go into this roll to see more information about it here and now we're back over at palumi and we can update this environment not uh definition with our Cloud credentials so I'm just going to paste over this and then we're just going to update this for my R Arn I can get this Arn here and I'll just select this and paste it in here and then we can just delete some of this this example code down here if I scroll down we have another example that we don't need and I'm going to save this so now that we've set up the ESC and the cloud account let's create a the plumy insights account and do a discovery scan so we have this plumi inside section down here so click accounts and then we can create an account I'll choose AWS for the service provider and then the ESC environment one we just created the account name we can basically provide any unique name so I'll do insights AWS and then we can basically uh select where we are scanning which is the for me it's the US East one and then we can do automatic or manual scans we'll just keep with the manual scans and I'll do create and then we have our account I can go to the accounts Tab and and we can see everything that's uh it's access which is just the USC one go back into here so basically I just go to actions and then scan and then scan and that's going to kick up a scan across each child account so if there were other regions it would be scanning the other regions as well in parallel and then we just wait um the scan will depend on the number of resources for each account and as soon as they're discovered you can begin to explore the insights you don't have to wait for everything to finish so once a scan is finished on one section you'll see the check mark so we have this check mark here and then it still scanning this one and we'll see the other check mark once that finishes okay now that the scan is finished let's use plumi resource explore and learn how to draw insights from the cloud infrastructure so I'm going to go over to the resources Tab and here are all our resources including some of them that were were found when we did the scan so this offers multicloud search and analytics across every environment in the organization right now it's just one Cloud AWS but if if we were using different clouds we can we could search for resources across everything so I'm just going to click into this one and then we can see information about this deployment and we have access to statistics about Cloud usage including we have the breakdown by Cloud type or cloud provider resource type and department and this search we can just search by name let's say app and then these say app but we can also use AI so we can can search more with natural natural language so I'm just going to use this suggestion one show me resources in production that was none but what if I did a Dev and then now we got all the resources in Dev and it's going to show what syntax it basically converted this natural language to stack colon Dev now put Show me my vpcs and then it's going to show the vpcs and it's going to show the query that it converted that to was type aw ec2 VPC vbc so this basically enables us to ask questions that will really improve the process for management infrastructure and getting answers to any key questions we have about our projects and that's it you should now have a better understanding of kubernetes and eks and how to use palumi to manage your infrastructure
_CXwZ5xyFno,DeepSeek-R1 Crash Course,https://www.youtube.com/watch?v=_CXwZ5xyFno,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,Learn how to use DeepSeek-R1 in this crash course for beginners. Learn about the innovative reinforcement learning approach ...,2025-01-28T15:52:11Z,"hey this is angrew brown and in this crash course I'm going to show you the basics of deep seek so first we're going to look at the Deep seek website where uh you can utilize it just like use tgpt after that we will download it using AMA and have an idea of its capabilities there um then we'll use another tool called um Studio LM which will allow us to run the model locally but have a bit of an agentic Behavior we're going to use an aipc and also a modern Gra card my RTX 480 I'm going to show you some of the skills about troubleshooting with it and we do run into issues with both machines but it gives you kind of an idea of the capabilities of what we can use with deep seek and where it's not going to work I also show you how to work with it uh with hugging face with Transformers and to uh to do local inference um so you know hopefully you uh excited to learn that but we will have a bit of a primer just before we jump in it so we know what deep seek is and I'll see you there in one one second before we jump into deep seek let's learn a little bit about it so deep seek is a Chinese a company that creates openweight llms um that's its proper name I cannot pronounce it DC has many uh open open weight models so we have R1 R1 Z deep seek ver uh V3 math coder Moe soe mixture of experts and then deep seek V3 is mixture of models um I would tell you more about those but I never remember what those are they're somewhere in my ni Essentials course um the one we're going to be focusing on is mostly R1 we will look at V3 initially because that is what is utilized on deep seek.com and I want to show you uh the AI power assistant there but let's talk more about R1 and before we can talk about R1 we need to know a little bit about r10 so there is a paper where you can read all about um how deep seek works but um deep seek r10 is a model trained via large scale reinforcement learning with without without supervised fine tuning and demonstrates remarkable reasoning capabilities r10 has problems like poor readability and language mixing so R1 was trained further to mitigate those issues and it can achieve performance comparable to open ai1 and um they have a bunch of benchmarks across the board and they're basically showing the one in blue is uh deep seek and then you can see opening eyes there and most of the time they're suggesting that deep seek is performing better um and I need to point out that deep seek R1 is just text generation it doesn't do anything else but um it supposedly does really really well but they're comparing probably the 271 billion parameter model the model that we cannot run but maybe large organizations can uh affordab uh at uh afford at an affordable rate but the reason why deep seek is such a big deal is that it is speculated that it has a 95 to 97 reduction in cost compared to open AI that is the big deal here because these models to train them to run them is millions and millions of millions of dollars and hundreds of millions of dollars and they said they trained and built this model with $5 million which is nothing uh compared to these other ones and uh with the talk about deep c car one we saw like a chip manufacturers stocks drop because companies are like why do we need all this expensive compute when clearly these uh models can be optimized further so we are going to explore uh deep SE guard 1 and see how we can get her to run and see uh where we can get it run and where we're going to hit the limits with it um I do want to talk about what Hardware I'm going to be utilizing because it really is dependent on your local hardware um we could run this in Cloud but it's not really worth it to do it you really should be investing some money into local hardware and learning what you can and can't run based on your limitations but what I have is an Intel lunar Lake AI PC dev kit its proper name is the core Ultra 200 um V series and this came out in September 2024 it is a mobile chip um and uh the chip is special because it has an igpu so an integrated Graphics unit that's what the LM is going to use it has an mpu which is intended for um smaller models um but uh that's what I'm going to run it on the other one that we're going to run it on is my Precision 30 uh 3680 Tower workstation oplex I just got this station it's okay um it is a 14th generation I IE 9 and I have a g GeForce RTX 480 and so I ran this model on both of them I would say that the dedicated graphics card did do better because they just generally do but from a cost perspective the the lake AI PC dev kit is cheaper you cannot buy the one on the Le hand side because this is something that Intel sent me they there are equivalent kits out there if you just type an AIP PC dev kit Intel am all of uh uh quadcom they all make them so I just prefer to use Intel Hardware um but you know whichever one you want to utilize even the Mac M4 would be in the same kind of line of these things um that you could utilize but I found that we could run about a 7 to8 billion parameter model on either but there were cases where um when I used specific things and the models weren't optimize and I didn't tweak them it would literally hang the computer and shut them down both of them right both of them so there is some finessing here and understanding how your work your Hardware works but probably if you want to run this stuff you would probably want to have um a computer on your network so like I my aipc is on my network or you might want to have a dedicated computer with multiple graphics cards to do it but I kind of feel like if I really wanted decent performance I probably need two aips with distributed uh Distributing the llm across them with something like racer or I need another other graphics card uh with distributed because just having one of either or just feels a little bit too too little but you can run this stuff and you can get some interesting results but we'll jump into that right now okay so before we try to work with deep seek programmatically let's go ahead and use deep seek.com um AI powered assistance so this is supposed to be the Civ of Chachi BT Claude Sonet mistal 7 llamas uh meta AI um as far as I understand this is completely free um it could be limited in the future because this is a product coming out of China and for whatever reason it might not work in North America in some future so if that doesn't work you'll just skip on to the other videos in this crash course which will show you how to programmatically download the open-source model and run it on your local compute but this one in particular is running deep seek version or V3 um and then up here we have deep seek R1 which they're talking about and that's the one that we're going to try to run locally but deep seek V3 is going to be more capable because there's a lot more stuff that's moving around uh in the background there so what we'll do is go click Start now now I got logged in right away because I connected with my Google account that is something that's really really easy to do and um the use case that I like to test these things on is I created this um prompt document for uh helping me learn Japanese and so basically what the uh this prompt document does is I tell it you are a Japanese language teacher and you are going to help me work through a translation and so I have one where I did on meta Claud and chat gbt so we're just going to take this one and try to apply it to deep seek the one that's most advanced is the claw one and here you can click into here and you can see I have a role I have a language I have teaching instructions we have agent flow so it's handling State we're giving it very specific instructions we have examples and so um hopefully what I can do is give it these documents and it will act appropriately so um this is in my GitHub and it's completely open source or open to you to access at Omen King free gen I boot camp 2025 in the sentence Constructor but what I'm going to do is I'm in GitHub and I'm logged in but if I press period this will open this up in I'm just opening this in github.com um but what I did is over time I made it more advanced and the cloud one is the one that we really want to test out so I have um these and so I want this one here this is a teaching test that's fine I have examp and I have consideration examples okay so I'm just carefully reading this I'm just trying to decide which ones I want I actually want uh almost all of these I want I I'm just going to download the folder so I'm going to do I'm going to go ahead and download this folder I'm going to just download this to my desktop okay and uh it doesn't like it unless it's in a folder so I'm going to go ahead and just hit download again I think I actually made a folder on my desktop called No Maybe not download but we'll just make a new one called download okay I'm going to go in here and select we'll say view save changes and that's going to download those files to there so if I go to my desktop here I go into download we now have the same files okay so what I want to do next is I want to go back over to deep seek and it appears that we can attach file so it says text extraction only upload docs or images so it looks like we can upload multiple documents and these are very small documents and so I want to grab this one this one this one this one and this one and I'm going to go ahead and drag it on in here okay and actually I'm going to take out the prompt MD and I'm actually just going to copy its contents in here because the prompt MD tells it to look at those other files so we go ahead and copy this okay we'll paste it in here we enter and then we'll see how it performs another thing we should check is its Vision ability but we'll go here and says let's break down a sentence example for S structure um looks really really good so next possible answerers try formatting the first clue so I'm going to try to tell it to give me the answer just give me the answer I want to see if it if I can subvert uh subvert my instructions okay and so it's giving me the answer which is not supposed to supposed to be doing did I tell you not to give me the answer in my prompt document let's see if it knows my apologies for providing the answer clearly so already it's failed on that but I mean it's still really powerful and the consideration is like even if it's not as capable as Claude or as Chach BT it's just the cost Factor um but it really depends on what these models are doing because when you look at meta AI right if you look at meta AI or you look at uh mistol mistol 7 uh these models they're not necessarily working with a bunch of other models um and so there might be additional steps that um Claude or chat GPT uh is doing so that it doesn't like it makes sure that it actually reads your model but so far right like I ran it on these ones as well but here are equivalents of of more simpler ones that don't do all those extra checks so it's probably more comparable to compare it to like mistol 7 or llama in terms of its reasoning but here you can see it already made a mistake but we were able to correct it but still this is pretty good um so I mean that's fine but let's go test its Vision capabilities because I believe that this does have Vision capabilities so I'm going to go ahead and I'm looking for some kind of image so I'm going to say Japanese text right I'm going to go to images here and um uh we'll say Japanese menu in Japanese again if even if you don't care about it it's it's a very good test language as um is it really has to work hard to try to figure it out and so I'm trying to find a Japanese menu in Japanese so what I'm going to do is say translate maybe we'll just go to like a Japanese websit so we'll say Japanese Hotel um and so or or maybe you know what's better we'll say Japanese newspaper that might be better and so this is probably one minichi okay uh and I want it actually in Japanese so that's that's the struggle here today um so I'm looking for the Japanese version um I don't want it in English let's try this Japanese time. JP I do not want it in English I want it in Japanese um and so I'm just looking for that here just give me a second okay I went back to this first one in the top right corner it says Japanese and so I'll click this here so now we have some Japanese text now if this model was built by China I would imagine that they probably really good with Chinese characters and and Japanese borrow Chinese characters and so it should perform really well so what I'm going to do is I'm going to go ahead I have no idea what this is about we we'll go ahead and grab this image here and so now that is there I'm going to go back over to deep seek and I'm going to just start a new chat and I'm going to paste this image in I'm going to say can you uh transcribe uh the Japanese text um in this image because this what we want to find out can it do this because if it can do that that makes it a very capable model and transcribing means extract out the text now I didn't tell it to um produce the the translation it says this test discusses the scandal of involving a former Talent etc etc uh you know can you translate the text and break down break down the grammar and so what we're trying to do is say break it down so we can see what it says uh formatting is not the oh here we go here this is what we want um so just carefully looking at this possessive advancement to ask a question voices also yeah it looks like it's doing what it's supposed to be doing so yeah it can do Vision so that's a really big deal uh but is V3 and that makes sense but this is deeps seek this one but the question will be what can we actually run locally as there has been claims that this thing does not require series gpus and I have the the hardware to test that out on so we'll do that in the next video but this was just showing you how to use the AI power assistant if you didn't know where it was okay all right so in this video we're going to start learning how to download the model locally because imagine if deep seek is not available one day for whatever reason um and uh again it's supposed to run really well on computers that do not have uh expensive GP gpus um and so that's what we're going to find out here um the computer that I'm on right now I'm actually remoted like I'm connected on my network to my Intel developer kit and this thing um if you probably bought it brand new it's between $500 to $1,000 but the fact is is that this this thing is a is a is a mobile chip I call it the lunar Lake but it's actually called The Core Ultra 200 V series mobile processors and this is the kind of processor that you could imagine will be in your phone in the next year or two um but what's so special about um these new types of chips is that when you think of having a chip you just think of CPUs and then you hear about gpus being an extra graphics card but these things have a built-in graphics card called an igpu an integrated graphics card it has an mpu a neural Processing Unit um and just a bunch of other capabilities so basically they've crammed a bunch of stuff onto a single chip um and it's supposed to allow you to uh be able to run ml models and be able to download them so this is something that you might want to invest in you could probably do this on a Mac M4 as well or uh some other things but this is just the hardware that I have um and I do recommend it but anyway one of the easiest ways that we can work with the model is by using olama so AMA is something I already have installed you just download and install it and once it's installed it usually appears over here and mine is over here okay but the way olama works is that you have to do everything via the terminal so I'm on Windows 11 here I'm going to open up terminal if you're on a Mac same process you open up terminal um and now that I'm in here I can type the word okay so AMA is here and if it's running it shows a little AMA somewhere in in your on your computer so what I want to do is go over to here and you can see it's showing us R1 okay but notice here there's a drop down okay and we have 7 1.5 billion 7 billion 8 billion 14 billion 32 billion 70 billion 671 billion so when they're talking about deep seek R1 being as good as chat gpts they're usually comparing the top one the 671 billion parameter one which is 404 GB I don't even have enough room to download this on my computer and so you have to understand that this would require you to have actual gpus or more complex setups I've seen somebody um there's a video that circulates around that somebody bought a bunch of mac Minis and stack them let me see if I can find that for you quickly all right so I found the video and here is the person that is running they have 1 two three three four five six seven seven Mac Minis and it says they're running deep seek R1 and you can see that it says M4 Mac minis U and it says total unified memory 496 gab right so that's a lot of memory first of all um and it is kind of using gpus because these M M4 chips are just like the lunar Lake chip that I have in that they have integrated Graphics units they have mpus but you see that they need a lot of them and so you can if you have a bunch of these technically run them and I again I again I whatever you want to invest in you know you only need really one of these of whether it is like the Intel lunar lake or the at Mac M4 whatever ryzen's AMD ryzen's one is um but the point is like even if you were to stack them all and have them and network them together and do distributed compute which You' use something like Ray um to do that Ray serve you'll notice like look at the type speed it is not it's not fast it's like clunk clunk clun clunk clunk clunk clunk clunk so you know understand that you can do it but you're not going to get that from home unless the hardware improves or you buy seven of these but that doesn't mean that we can't run uh some of these other uh models right but you do need to invest in something uh like this thing and then add it to your network because you know buying a graphics card then you have to buy a whole computer and it gets really expensive so I really do believe in aip's but we'll go back over to here and so we're not running this one there's no way we're able to run this one um but we can probably run easily the seven billion parameter one I think that one is is doable we definitely can do the one 1.5 billion one and so this is really what we're targeting right it's probably the 7even billion parameter model so to download this I all I have to do is copy this command here I already have Olam installed and what it's going to do it's going to download the model for me so it's now pulling it from uh probably from hugging face okay so we go to hugging face and we say uh deep seek R1 what it's doing is it's grabbing it from here it's grabbing it from uh from hugging face and it's probably this one there are some variants under here which I'm not 100% certain here but you can see there's distills of other of other models underneath which is kind of interesting but this is probably the one that is being downloaded right now at least I think it is and normally what we looking for here is we have these uh safe tensor files and we have a bunch of them so I'm not exactly sure we'll figure that out here in a little bit but the point is is that we are downloading it right now if we go back over to here you can see it's almost downloaded so it doesn't take that long um but you can see they're a little bit large but I should have enough RAM on this computer um I'm not sure how much this comes with just give me a moment so uh what I did is I just open up opened up system information and then down below here it's it's saying I have 32 GB of RAM so the ram matters because you have to have enough RAM to hold this stuff in memory and also if the model's large you have to be able to download it and then you also need um the gpus for it but you can see this is almost done so I'm just going to pause here until it's 100% done and it should once it's done it should automatically just start working and we'll we'll see there in a moment okay just showing that it's still pulling so um it downloaded now it's pulling additional containers I'm not exactly sure what it's doing but now it is ready so it didn't take that long just a few minutes and we'll just say hello how are you and that's pretty decent so that's going at an okay Pace um could I download a more um a more intensive one that is the question that we have here because we're at the seven billion we could have done the 8 billion why did I do seven when I could have done eight the question is like where does it start kind of chugging it might be at the 14 14 billion parameter model we'll just test this again so hello and just try this again but you can see see that we're getting pretty pretty decent results um the thing is even if you had a smaller model through fine-tuning if we can finetune this model we can get better performance for very specific tasks if that's what we want to do but this one seems okay so I would actually kind of be curious to go ahead and launch it I can hear the computer spinning up from here the lunar Lake um devit but I'm going to go ahead and just type in buy and um I'm going to just go here I want to delete um that one so I'm going to say remove and was deep c car 1 first let's list the model here because we want to be cautious of the space that we have on here and this model is great I just want to have more um I just want to run I just want to run the 8 billion parameter one or something larger so we'll say remove this okay it's deleted and I'm pretty confident it can run the 8 billion let's do the 14 billion parameter this is where it might struggle and the question is how large is this this is 10 gabes I definitely have room for that so I'm going to go ahead and download this one and then once we have that we'll decide what it is that we want to do with it okay so we're going to go ahead and download that I'll be back here when this is done downloading okay all right so we now have um this model running and I'm just going to go ahead and type hello and surprisingly it's doing okay now you can't hear it but as soon as I typed I can hear my uh my little Intel developer kit is going and so I just want you to know like if you were to buy IPC the one that I have is um not for sale but if you look up one it has a lunar Lake chip in it uh that Ultra core was it the ultra core uh uh 20 20 2 220 or whatever um if you just find it with another provider like if it's with Asus or whoever Intel is partnered with you can get the same thing it's the same Hardware in it um Intel just does not sell them direct they always do it through a partner but you can see here that we can actually work with it um I'm not sure how long this would work for it might it might quit at some point but at least we have some way to work with it and so AMA is one way that we can um get this model but obviously there are different ones like the Deep seek R1 I'm going to go ahead back to AMA here and I just want to now uh delete that model just because we're done here but there's another way that uh we can work with it I think it's called notebook LM or LM Studio we'll do in the next video and that will give you more of a um AI powed assistant experience so not necessarily working with it programmatically but um closer to the end result that we want um I'm not going to delete the model just yet here but if you want to I've already showed you how to do that but we're going to look at the uh next one in the next video here because it might require you to have ol as the way that you download the model but we'll go find out okay so see you in the next one all right so here we're at Studio LM or LM Studio I've actually never used this product before I usually use web UI which will hook up to AMA um but I've heard really good things about this one and so I figured we'll just go open it up and let's see if we can get a very similar experience to um uh having like a chat gbt experience and so here you they have downloads for uh Mac uh the metal series which are the the latest ones windows and Linux so you can see here that they're suggesting that you want to have one of these new AI PC chips um as that is usually the case if you have gpus then you can probably use gpus I actually do have really good gpus I have a 480 RTX here but I want to show you what you can utilize locally um so what we'll do is just wait for this to download okay and now let's go ahead and install this but I'm really curious on how we are going to um plug this into like how are we going to download the model right does it plug into AMA does it download the model separately that's what we're going to find out here just shortly when it's done installing so we'll just wait a moment here okay all right so now we have completing the ml Studio um setup so LM Studio has been installed on your computer click finish and set up so we'll go ahead and hit finish okay so this will just open up here we'll give it a moment to open I think in the last video we stopped olama so even if it's not there we might want to I'm just going to close it out here again it might require oama we'll find out here moment so say get your first llm so here it says um llama through 3.2 that's not what we want so we're going to go down below here it says enable local LM service on login so it sounds like what we need to do is we need to log in here and make an account I don't see a login I don't so we'll go back over to here and they have this onboarding step so I'm going to go and we'll Skip onboarding and let's see if we can figure out how to install this just a moment so I'm noticing at the top here we have select a model to load no LMS yet download the one to get started I mean yes llama 3.1 is cool but it's not the model that I want right I want that specific one and so this is what I'm trying to figure out it's in the bottom left corner we have some options here um and I know it's hard to read I apologize but there's no way I can make the font larger unfortunately but they have the LM studio. a so we'll go over to here I'm going go to the model catalog and and we're looking for deep seek we have deep seek math 7 billion which is fine but I just want the normal deep seek model we have deep seek coder version two so that'd be cool if we wanted to do some coding we have distilled ones we have R1 distilled so we have llama 8 billion distilled and quen 7 billion so I would think we probably want the Llama 8 billion distilled okay so here it says use in LM studio so I'm going to go ahead and click it and we'll click open okay now it's going to download them all so 4.9 gigabytes we'll go ahead and do that so that model is now downloading so we'll wait for that to finish okay so it looks like we don't need Olam at all this is like all inclusive one thing to go though I do want to point out notice that it has a GG UF file so that makes me think that it is using like whatever llama index can use I think it's called llama index that this is what's compatible and same thing with o llama so they might be sharing the same the same stuff because they're both using ggf files this is still downloading but while I'm here I might as well just talk about what uh distilled model is so you'll notice that it's saying like R1 distilled llama 8 or quen 7 billion parameter so dist distillation is where you are taking a larger model's knowledge and you're doing knowledge transfer to a smaller model so it runs more efficiently but has the same capabilities of it um the process is complicated I explain it in my Jenning ey Essentials course which this this part of this crash course will probably get rolled into later on um but basically it's just it's a it's a technique to transfer that knowledge and there's a lot of ways to do it so I can't uh summarize it here but that's why you're seeing distilled versions of those things so basically theyve figured out a way to take the knowledge maybe they're querying directly that's probably what they're doing is like they have a bunch of um evaluations like quer that they hit uh with um uh what do you call it llama or these other models and then they look at the result and then they then when they get their smaller model to do the same thing then it performs just as well so the model is done we're going to go ahead and load the model and so now I'm just going to get my head a little bit out of the way cuz I'm kind of in the way here so now we have an experience that is more like uh what we expected to be and on the top here I wonder is a way that I can definitely bring the font up here I'm not sure if there is a dark mode the light Mode's okay but um a dark mode would be nicer but there's a lot of options around here so just open settings in the bottom right corner and here we do have some themes there we go that's a little bit easier and I do apologize for the small fonts um there's not much I can do about it I even told it to go larger this is one way we can do it so let's see if we can interact with this so we'll say um can you um I am learning Japanese can you act as my Japanese teacher let's see how it does now this is R1 this does not mean that it has Vision capabilities um as I believe that is a different model and I'm again I'm hearing my my computer spinning up in the background but here you can see that it's thinking okay so I'm trying to learn Japanese and I came across the problem where I have to translate I'm eating sushi into Japanese first I know that in Japanese the order of subject can be this so it's really interesting it's going through a thought process so um normally when you use something like web UI it's literally using the model directly almost like you're using it as a playground but this one actually has reasoning built in which is really interesting I didn't know that it had that so there literally is uh agent thinking capability this is not specific to um uh open seek I think if we brought in any model it would do this and so it's showing us the reasoning that it's doing here as it's working through this so we're going to let it think and wait till it finishes but it's really cool to see its reasoning uh where normally you wouldn't see this right so you know when and Chach B says it's thinking this is the stuff that it actually is doing in the background that it doesn't fully tell you but we'll let it work here we'll be back in just a moment okay all right so looks like I lost my connection this sometimes happens because when you are running a computational task it can halt all the resources on your machine so this model was a bit smaller but um I was still running ol in the background so what I'm going to do is I'm going to go my Intel machine I can see it rebooting in the background here I'm going to give it a moment to reboot here I'm going to reconnect I'm going to make sure llama is not running and then we'll try that again okay so be back in just a moment you know what it was the computer decided to do Windows updates so it didn't crash but this can happen when you're working with llms that it can exhaust all the resources so I'm going to wait till the update is done and I'll get my screen back up here in just a moment okay all right so I'm reconnected to my machine I do actually have some tools here that probably tell me my use let me just open them up and see if anyone will actually tell me where my memory usage is yeah I wouldn't call that very uh useful maybe there's some kind of uh tool I can download so monitor memory usage well I guess activity monitor can just do it right um or what's it called see if I can open that up here try remember the hot key for it there we go and we go to task manager and so maybe I just have task manager open here we can kind of keep track of our memory usage um obviously Chrome likes to consume quite a bit here I'm actually not running OBS I'm not sure why it um automatically launched here oh you know what um oh I didn't open on this computer here okay so what I'll do is I'll just hit task manager that was my task manager in the background there we go and so here we can kind of get an idea this computer just restarted so it's getting it itself in order here and so we can see our mem us is at 21% that's what we really want to keep a track of um so what I'm going to do is go back over to LM Studio we're going to open it up but this is stuff that really happens to me where it's like you're using local LMS and things crash and it's not a big deal just happens but we came back here and it actually did do it it said thought for 3 minutes and 4 seconds and you can see its reasoning here okay it says the translation of I likeing Sushi into Japanese isi sushim Guk which is true the structure correctly places it one thing I'd like to ask it is can it give me um Japanese characters so can you show me the uh the sentence can you show me uh Japanese using Japanese characters DG conji and herana okay and so we'll go ahead and do that it doesn't have a model selected so we'll go to the top here what's kind of interesting is that maybe you can switch between different kinds of models as you're working here we do have GPU offload of discrete uh model layers I don't know how to configure any of these things right now um flash attention would be really good so decrease memory usage generation time on some models that is where a model is trained on flash attention which we don't have here right now but I'm going to go ahead I'm going to load the Llama distilled model and we're going to go ahead and ask if it can do this for us because that would make it a little bit more useful okay so I'm going to go ahead and run that and we'll be back here in just a moment and we'll see the results all right we are back and we can take a look at the results here we'll just give it a moment I'm going to scroll up and you know what's really interesting is that um it is working every time I do this I it does work but the computer restarts and I think the reason why is that it's exhausting all possible resources um now the size of the model is not large it's whatever it is the 8 billion parameter one at least I think that's what we're running here um it's a bit hard because it says 8 billion uh distilled and so we'd have to take a closer look at it it says 8 billion so it's 8 billion parameter um but the thing is it's the reasoning that's happening behind the scenes and so um I think for that it's exhausting whereas we're when we're using llama it's less of an issue um and I think it might just be that LM Studio the way the agent Works might might not have ways of or at least I don't know how to configure it to make sure that it doesn't uh uh destroy destroy stuff when it runs out here because you'll notice here that we can set the context length and so maybe if I reduce that keep model in memory so Reserve System memory for the model even when offload GPU improves performance but requires more RAM so here you know we might toggle this off and get better production but right now when I run it it is restarting but the thing is it is working so you can see here it thought for 21 seconds it says of course I'd like to help you and so here's some examples and it's producing pretty good code or like output I should say but anyway what we've done here is we've just changed a few options so I'm saying don't keep it in memory okay because that might be an issue and we'll bring the context window down and it says CPU uh thread to allocate that seems fine to me again I'm not sure about any of these other options we're going to reload this model okay so we're now loading with those options I want to try one more time if my computer restarts it's not a big deal but again it might be just LM Studio that's causing us these issues here and so I'm just going to click into this one I think it's set up those settings we'll go ahead and just say Okay um so I'm going to just say like how do I ask how do I I say in Japanese um uh where is the movie theater okay it doesn't matter if you know Japanese it's just we're trying to tax it with something hard so here it's running again and it's going to start thinking we'll give it a moment here and as it's doing that I'm going to open up task manager he and we'll give it a moment I noticed that it has my um did it restart again yeah I did so yeah this is just the experience again it has nothing to do with the Intel machine it's just this is what happens when your resources get exhausted and so it's going to restart again but this is the best I can de demonstrate it here now I can try to run this on my main machine using the RTX 480 um so that might be another option that we can do where I actually have dedicated GP use and I have a this is like a 14th generation uh Intel chip I think it's Raptor lake so maybe we'll try that as well in a separate video here just to see what happens um but that was the example there but I could definitely see how having more than uh like those computer stacked would make this a lot easier even if you had a second one there that' still be uh more cost effective than buying a completely new computer outright those two or smaller mini PCS um but I'll be back here in just a moment okay okay so I'm going to get this installed on my main machine my main machine like as I'm recording here it's using my GPU so it's going to have to share it so I'm just going to stop this video and then we're going to treat this one as LM Studio using the RTX 480 and we'll just see uh if the experience is the same or different okay all right so I'm back here and now I'm on my main computer um and we're going to use ml studio so I'm going to go and skip the onboarding and I remember uh there's a way for us to change the theme maybe in the bottom right corner of the Cog and we'll change it to dark mode here thr our eyes are a little bit uh easier to see here also want to bump up the font a little bit um to select the model I'm going to go here to select a model at the top here we do not want that model here so I'm going to go to maybe here on left hand side no not there um it was here in the bottom left corner and we're going to go to L LM Studio Ai and we want to make our way over to the model catalog at the top right corner and I'm looking for deep seek R1 distill llama 8B so we click that here and we'll say use in studio that's now going to download this locally okay so we are now going to download this model and I'll be back here in just a moment okay all right so I've downloaded the model here I'm going to go ahead and load it and again I'm a little bit concerned because I feel like it's going to cause this computer to restart but because it's uh offloading to the gpus I'm hoping that'll be less of an issue but here you can see it's loading the model into memory okay and we really should look at our options that we have here um it doesn't make it very easy to select them but oh here it is right here okay so we have some options here and this one actually is offloading to the GPU so you see it has GPU offload I'm almost wondering if I should have set GPU offload um on the aipc because it technically has IG gpus and maybe that's where we were running into issues whereas when we were using olama maybe it was already utilizing the gpus I don't know um but anyway what I want to do is go ahead and ask the same thing so I'm going to say uh can you teach me teach me Japanese for jlpt and5 level so we'll go ahead and do that we'll hit enter and again I love how it shows us the thinking that it does here I'm assuming that it's using um our RTX RTX 480 that I have on this computer and this is going pretty decently fast here it's not causing my computer to cry this is very good this is actually reasonably good so yeah it's performing really well so the question is um you know I again I'd like to go try the uh the the developer kit again and see if I because I remember the gpus were not offloading right so maybe it didn't detect the igpus but this thing is going pretty darn quick here and so that was really really good um and so it's giving me a bunch of stuff it's like okay but give me give me example sentences in Japanese okay so that's what I want we'll give it a moment yep and that looks good so it is producing really good stuff this model again is just the Llama uh a building parameter one I'm going to eject this model let's go back over to here into the uh Studio over here and I want to go to the model Catal because there are other deep seek models so we go and take a look deep seek we have coder version two so the younger sibling of GPT 4 deeps coder version 2 model but that sounds like deep seek 2 right so I'm not sure if that's really the latest one because we only want to focus on R1 and so yeah I don't think those other ones we really care about we only care about R1 models but you can see we're getting really good performance so the question is like what's the compute or the top difference between these two and maybe we can ask this over to the model ourselves but I'm going to start a new conversation here and I'm going to say um how many tops or or is it tops does I think it's called tops tops does RTX uh 4080 have okay we'll see if it can do it select this model here and yeah we'll load the model and we'll run that there we'll give it a moment and while that's thinking I mean obviously we just use Google for this we don't really need to do that but I want to do a comparison to see like how many tops they have so I'll let that run the background I'm also just going to search and find out very quickly oh here it goes uh does not have a specified number of tensor uh as officially NV video the company focuses on metrics like cudas cores and mamory B withd but this would be speculative okay but but then but then how do I how do I compare compare tops for um let's say lunar Lake versus RTX 4080 and I know like there's lots of ways to do it but it's like if I can't compare it how do I do it and while that's trying to figure it out I'm going to go over to perplexity and maybe we can get an exact example because I'm trying to understand like how much does my discret GPU do compared to that that one that's internal so we'll say uh lunar lunar Lake versus RTX uh 40 4080 uh for Tops performance and we'll see what we get so lunar lake has 120 tops and hence gaming rather than AI workload so IND doesn't typically advertise their tops maintaining 60 FPS okay but then how so then okay but what what could it be like how many tops could it be for the RTX 480 kind of makes it hard because like we don't know how many tops it is we don't we don't know what kind of expectation we should have with it okay fair enough so yeah so it's we can't really compare it's like apples to oranges I guess and it's just not going to give us the result here um but here it is going through comparison so if you run ml perfect gpus like a model with reset you directly compare the tops uh with a new architecture and so that's basically the only way to do it so we can't it's apples to oranges um I want to go and attempt to try to run this one more time on the lunar Lake and I want to see if I can set the gpus but if we can't set the gpus then I think it's going to always have that issue specifically with this but we will use the L Lake for um using with hugging face and other things like that so be back in just a moment okay all right so I'm back and I just did a little bit of exploration on my other computer there because I want to understand like okay I have this aipc it's very easy to run this here on my RTX 480 but when I run it on the on the uh the lunar like it is shutting down and I think understand why and so this is I think is really important when you are working local machines you have to have a bit better understanding of the hardware so I'm just going to RDP back into this machine here just give me just a moment okay I have it running again and it probably will crash again but at least I know why so there's a program called camp and what camp does is it allows you to monitor um your this is for Windows for Mac I don't know what You' use you probably just uh uh utility manager but here you know I can see that none of these CPUs are being overloaded but this is just showing us the CPUs if we open up um task manager here okay and now the computer is running perfectly fine it's not even spinning its fans if I go to the left hand side here we can we have CPUs mpus and gpus now mpus are the things that we want to use because mpus uh like an mpu is specifically designed to run models however a lot of the Frameworks like Pi torch um and uh tensor flow they're optimized on Cuda originally because the underlying framework and so normally you have to go through an optimization or conversion format I don't know at this time if there is a conversion for Max for Intel Hardware Because deep seek is so new but I would imagine uh that is something the Intel team is probably working on and this is not just specific to Intel if it's AMD or whoever they want to make optimization to leverage their different kinds of compute like their MPS and also has to do with the the thing that we're using so we're using that thing called this one over here I'm not sure well all these little oh yeah this this just this is core LM showing us all the temperatures right and so what we can do is just kind of see what's going on here is that I'm going to bring this over so that we can see what's happening right we want to use mpus it's not going to happen because this thing is not set up to do that but if I drop it down here and we click into uh this right we have our options before we didn't have any gpus but we can go here we can say use all the gpus I don't know how many how much it can offload to but I'll I'll set it to something like 24 we have a CPU threat count like that might be something we want to increase we can reduce our context window um we might not want to load it into memory but the point is that if it if it exhausts the GPU because it's all it's a single integrated circuit I have a feeling that it's going to end up restarting it but here again you can see it's very low we'll go ahead and we'll load the model right and the next thing I will do is I will go type in something like you know I want to learn Japanese can you provide me um uh a lesson on Japanese sentence structure okay we'll go ahead and do that actually notice if it this doesn't require a thought process it works perfectly it doesn't cause any issues with the computer we'll go ahead and run it and let's pay attention left hand side here and now we can see that it's utilizing gpus when it was at zero it wasn't using gpus at all but Noti it's at 50 50% right and it's doing pretty good our CPU is higher than usual before when I ran this earlier off screen the CPU was really low and it was the GPU that was working hard so again it really you have to understand your settings as you go here but this is not exhausting so far but we're just watching these numbers here and also our cor temps right and you can see we're not running into any issues it's not even spinning up it's not even making any complaints right now the other challenge is that I have a a developer kit that um uh it's it's something they don't sell right so if there was an issue with the BIOS I'd have to update it and there's like no all I can get is Intel's help on it but if I to buy like a commercial version of this like um whoever is partnered with it if it's Asus or Lenovo or whatever I would probably have um less issues because they're maintaining those bios updates um but so far we're not having issues but again we're just monitoring here we have 46 47% 41% um again we're watching it you can see core is at 84% 89% and so we're just carefully watching this stuff but I might have picked the perfect the perfect amount of settings here and maybe that was the thing is that you know I turned down the CPU like what did we do the options I turned the gpus down so I turned that down I also told it not to load memory and now it's not crashing okay there we go it's not as fast as the RTX 4080 um but you know what this is my old graphics card here I actually bought this uh not even long ago before I got my new computer this is an RTX 3060 okay this is not that old it's like a it's like a couple years old 2022 and I would say that when I used to use that and I would run models my computer would crash right so but the point is is that these newer CPUs whether it's again the M4 or the Intel L lake or whatever amd's one is they're they have the strong equivalence of like graphics cards from two years ago which is crazy to me um but anyway I think I might have found The Sweet Spot I'm just really really lucky but you can see the memory usage here and stuff like that and you just have to kind of monitor it and you'll find out once you get those settings uh what works for you or you know you buy really expensive GPU and uh it'll run perfectly fine but here it's going and we'll just give it a moment we be back in just a moment okay anyway I was going a little bit slow so you know I just decided we'll just move on here but my my point was made clear is that if you dial in the specific settings you can make this stuff work on things where you don't have dedicated graphics card if you have a dedicated graphics card you can see it's pretty good and uh yeah this is fine with the RTX 480 so you know if you have that you're going to be in good shape there but now that we've shown how to do with AI power assistance let's take a look at how we can actually get these models from hugging face next okay and work with them programmatically um so I'll see you in the next one all right so what I want to do in this video is I want to see if we can download the model from hugging phase and then work with it programmatically um is that's going to give you the most flexibility with these models of course if you just want to consume them then uh using the um LM Studio that I showed you or whatever it was called um would be the easiest way to do it but having a better understanding of these models how we can use them directly would be useful I think for the rest of this I'm just going to use the RTX 480 because I realize that to really make use of aips you have to wait till they have optimizers for it so we're talking about um Intel again you have this kit called open Veno and open Veno is an optimization framework and if we go down they I think they have like a bunch of examples here we'll go back for a moment yeah quick examples maybe over here and maybe not over here but we go back to the notebooks and we scroll on down yeah they have this page here and so um in this thing they will have different llms that are optimized specifically so that you can maybe Leverage The mpus or the or or make it run better on CPUs but until that's out there we're stuck on the gpus and we're not going to get the best performance that we can uh so maybe in a in a month or so um I can revisit that and then I will be utilizing it it might be as fast as my RTX 480 but for now we're going to just stick uh with the RTX 480 and we'll go look at Deep seek because they have more than just R1 so you can see there is a collection of models and in here if we click into it we have um R1 r10 which I don't know what that is let's go take a look here it probably explains it somewhere uh but we have R1 distilled 70 billion PR parameter quen 32 billion parameter quen 14 billion and so we have some variant here that we can utilize just give me a moment I want to see what zero is so to me it sounds like zero is the precursor to R1 so it says a model trained with supervised learning okay and so I don't think we want to use zero we want to use the R1 model or one of these distilled versions which uh give similar capabilities but if we go over to here it's not 100% clear on how we can run this um but down below here we can see total parameters is 671 billion okay so this one literally is the big one this is the really really big one and so that would be a little bit too hard for us to run this machine we can't run 671 billion parameters you saw the person stacking all those uh Apple m4s like uh yeah I have an RTX 480 but I need a bunch of those to do it down below we have the distilled models and so this is probably what we were using when we were using olama um if we wanted to go ahead and do that there so this is probably where I would focus my attention on is these distilled models uh when we're using hugging face it will show us how we can deploy the models up here notice over here we have BLM um I covered this in my geni essentials course I believe but um there are different types of ways we can serve models just as web servers have you know servers to serve them like the uh like software underneath so do um uh these ml models these machine learning models and VM is one that you want to pay attention attention to because it can work with the ray framework and Ray is important because um say Ray uh I'll just say ml here but this framework specifically has a product within it um called racer it's not showing me the graphic here but racer allows you to take VM and distribute it across comput so when we saw that video of that again those Mac m4s being stacked on top of each other that was probably using racer with v LM to scale it out and so if you were to run this uh run this you might want to invest in VM the hugging face Transformer library is fine as well but again we're not going to be able to run this on my computer and not on your computer uh so we're going to go back here for a moment but there's also uh V3 which has been very popular as well and that actually is what we were using when we went to the Deep seek website but if we go over to here and we go into deep seek uh three I think this is yeah this one's a mixture of experts model and this would be a really interesting want to deploy as well but it's also 67 uh 71 billion parameter model so it's another one that we can't deploy locally right but if we did we could have like Vision tasks and all these other things that maybe it could do so we're going to really just have to stick with the R1 and it's going to be with one of these distributions I'm going to go with the Llama uh 8 billion parameter I don't know why we don't see the other ones there but 8 billion is something we know that we can reibly run whether it's on the lunar lake or if it's on the RTX 480 and so I'm going to go over here in the right hand side and we have Transformers and VMS Transformers is probably the easiest way to run it and so we can see that we have some code here so I'm going to get set up here um I'm going to just open up vs code and I already have a Repel I'm going to put this in my geni essentials course because I figured if we're going to do it we might as well put it in there and so I'm going to go and open that folder here and I need to go up a directory I might not even have this cloned so I'm going to just go and grab this directory really quickly here so just CD back and I do not so I'm going to go over to GitHub this repo is completely open so if you want to do the same thing you can do this as well we're going to say gen Essentials okay and um I'm going to go ahead and just co uh copy this and download it here so give it a clone get clone and I'm going to go ahead and open this up um I'm going to open this with wind Surfer fun because I really like wind surf I've been using that quite a bit if I have it installed here should yeah I do I have a paid version of wind surf so I have full access to it if you don't just you can just copy and paste the code but I'm trying to save myself some time here so we're going to open this up I'm going to go into the Gen Essentials I'm going to make a new folder in here I'm going to call this one deep seek and I want to go inside of this one and call it um R1 uh Transformers cuz we're going to just use the Transformers library to do this I'm going to select that folder we're going to say yes I'm going to make a new file here and I probably want to make this an iron python file um I'm not sure if I'm set up for that but we'll give it a go so what we'll do is we'll type in basic. [Music] ironpython uh ynb which is for uh jupyter notebooks and you'd have to already have jupyter installed if you don't know in my gen Essentials I show you how to set the stuff up so so you can learn it that way if you want I'm going to go over to WSL here and um yeah I'll install that extension there if it wants to install there and I'm going to see if I have cond installed I should have it installed there it is and we have a base so anytime that you are um setting up one of these environments you should really make a new one because that way you'll run into less conflicts and so I need to set up a new environment I can't remember the instructions but I'm pretty certain I show that somewhere here at local development in this folder and so if I go to cond and I go into setup I think I explain it here so for Linux and that's what I'm using right now with Windows subsystem Linux 2 is I would need to it's already installed so I want to create a new environment so I probably want to use Python 3.0.0 if it's a future you might want to use 312 but this version seems to give me the least amount of problems so I want this command but I want to change it a little bit I don't want it to be hello I want to call this deep seek so we'll go back over to here we're we're going to paste it into here and um so now we are uh setting up python 310 and it's going to install some stuff okay so now we are uh good I need to activate that so I'm say cond activate deep seek and so now we are using deep seek I'm going to go back here on the right hand left hand side and what I want to do is I want to get some code set up here so if we go back over to here into the 8 billion uh distilled model we go to Transformers we have some code and if it doesn't work that's totally fine we will we will tweak it from there I also have example code lying around so for whatever reason this doesn't work sorry I just paused there for a second if it doesn't work we can uh grab from my code base here because I don't always remember how to do this stuff even though I've done a lot of this I don't remember half the stuff that I do so we're going to go ahead here and cut this up and put this up here but we're going to need um I'm not sure how well uh um uh I'm not sure how well um uh wind surf Works within uh jup ir and python I actually never did that before so it's asking us it's asking us to start something you need to select a kernel and I'm going to say oh it's not seen the kernels that I want but you know one thing I don't think we did is I don't think we installed iron python so there's an extra step that we're supposed to do to get it to work with Jupiter and it might be under our Jupiter instructions here where yes it's this so we need to make sure we install iron python kernel otherwise it might not show up here so I'm going to just go ahead here and um I'm going to do cond cond whoops cond hyphen Fonda Forge so we're saying downloads from the cond forge and and I think it's cond install so it's cond install hyphen f cond Forge and then we paste in IP kernel and so now it should install IP kernel I'm not sure if that uh worked or not we'll go up here and take a look the following packages are not available for in installation oh it's hyphen c not hyphen f okay so we'll go here and that just means to use the condo Forge and so this should resolve our issue so we're going to install ipy kernel right give it a second it we'll say yes okay and so I'm hoping what that will do is that we'll be able to actually select the kernel we might have to close that wind Surf and reopen it we can do the same thing in vs code it's the same interface right so I'm not seeing it showing up here so I'm just going to close that wind surf it would have been nice to use wind surf but if we can't that's totally fine I'm going to go ahead and open this again I'm going to open up the Gen Essentials I'm just going to say open I'm not using any AI coding assistant here so we're just going to work through it the oldfashioned way and somewhere in here we have a deep seek folder I'm going to go ahead and make a new terminal here I want to make sure that I'm in in WSL which I am I'm going to say cond to activate deep seek because that's where I need to go so I now have that activated I'm going to go into the deep seek folder into our R1 Transformers folder um I'm looking for the Deep seek folder there it is we'll click into it and I did not save any of the code which is totally fine it's not like it's too far away to get this code again and so I'm going to go back over to here and we are going to grab this code okay I'm going to paste it in and we'll make a new code block and I want to grab this and put this below okay now normally we' install pytorch and some other things um but I'm going to just try from the most barebones thing it's going to tell me Transformers isn't installed and that's totally fine and I'm just trying to there we go do this so we'll run that and so I'm going to go here to install Jupiter oh it's installing Jupiter I see okay so we do need that maybe the kernel would have worked um and so I'm going to go to python environments python environments and so now we have deep seek so maybe we could have got it to work with W serve but that's fine so we don't have Transformers installed there's no modules called Transformers I know that we do this before so we might as well go leverage code and see what we did here before here we have hugging face basic and so here yeah we do an install with Transformer so that's all we really need there's P Pi dot. EnV we might also need that as well because we might need to put in our hugging face API to download the model I'm not sure at this point but I'll go ahead and just install that up here in the top okay so we'll give that a moment to install it shouldn't take too long we might also need to install P torch or or tensor flow or both um that's very common when you are working with open source models is that they may be in one for format or another and need to be converted over um sometimes you don't need to do it at all but we'll see so now it's saying to restart so we'll just do a restart here we should only have to do that once and so I'm going to go ahead Here and Now include it so now we have less of an issue here it's showing us this model so basically this will download it specifically from hugging phas so if we grab this address here and we go back over to wherever um I had one open here just a moment ago and it should match this address right so if I was to just delete this out here and put it in here it's the same address right so that's how it knows what model it's grabbing but we'll go back over to here um and it doesn't look like we need our hugging face API but we'll we'll find out here in just a moment so it should download it we'll get a message here we'll load Transformers we'll have tokenizers then we'll have the model um the messages here is being passed into here says copy local model directory directly okay so I think here it's like we just have two different ones we have one that's using the pre-train one yes there's two ways that we can do it I think we cover this uh when you use a direct model or a pipeline and so let's go ahead and see if we can just use the pipeline okay and if I don't remember how to do this we probably go over here and take a look um I don't remember everything that I do but yeah this is the one we just had open here just a moment ago the basic one and so this has a pipeline and then we just use it and so this in a sense should just work so let's go ahead and see if that works so I'm just going to separate this out so I don't have to continually run this we'll cut this out okay we'll run that and then we'll run this okay and we'll go down below and it says at least one tensor flow or pie torch should be installed to install tensor flow do this and so this is what I figured we were going to run into where it's complain like hey you need P torch or tensor flow um I don't know which one it needs I would think that it was safe tensorflow because I saw that and so I'm going to just go ahead and make a new one up here I'm really just guessing I'm going to go say uh tensor flow and I'm also going to just say p torch let's just install both because it'll need one or the other and one of them will work assuming I spelled it right two competing Frameworks I learned uh tensor flow first and then uh I kind of regret that because P torch is now the most po even though I really like tensor flow or specifically kirz but we'll give this a moment to install and then once we do that we'll run it again and we'll see what happens okay so it's saying P torch failed to build and I hope that doesn't matter because if it uses tensor flow it's fine but it says failed to build installable wheels so just a moment here as was my twin sister calling me uh she doesn't know I'm recording right now so I'm going to go ahead and restart this even though we don't have P torch or it might be wrong it might be installed I'm not sure we're going to go ahead and just try it again anyway um because sometimes this stuff just works anyway and we'll run it and so it is complaining it's saying at least one one of tensorflow or P should be installed install tensorflow 2.0 uh to install P torch read the instructions here um okay so I mean this shouldn't be such a huge issue so I'm going to go and let's use deep seek since we are big deep seek fans here today but I'm going to go over to the Deep seek website which is running V3 it's not even using the R1 um I'm going to log into here we'll give it a moment and we'll go here and say um you know I want to uh I need to install tensor flow 2.0 and pytorch to run uh a Transformers pipeline model so we'll give that a go and see what we get so here it's specifically saying to use 2.0 yeah and it's always a little bit tricky so I'm going to go back up to here and maybe we can say equals 2.0.0 I mean what it it did install tensor flow 20 we don't need to tell it to do two again so we go down below here and let me just carefully look here so at least one of tensorflow 2.0 or py to should be install to install it you should have it the select framework tensor for the Pyar to use the model pass returns a tuple framework oh so it's asking which model to use as it doesn't know okay so I'm going to go back over to here and I'm going to say like you know give it this thing and see if it can figure it out and it's not exactly what I want so I'm going to just stop it here I'm just saying like I am using Transformers pipeline how do I specify uh the framework okay I'm I'm surprised I have to specify the framework usually it just picks it up okay and so here we have Pi torture tensor flow I think tensorflow successfully installed I'm not sure if it's just guessing because this thing could be hallucinating we don't know uh but we'll go ahead and just give this a try and we'll run this here and here it's saying um we're still getting that right so I'm going to go over to here this probably is a common hugging face issue for tensor flow somebody has commented here you need to have P torch installed mhm so let's say deep C I don't know if there's anyone that's actually told us how to do this yet give me a second let me see if I can figure it out all right so I went over and we're asking Claude instead and so maybe Claude again because it's not just the model itself but it's the reasoning behind it and so V3 didn't really get us very far it's supposed to be a really good model um but um here it's suggesting that um P torch is generally used and maybe my instructions here is incorrect and so it's suggesting to do um I mean we have tensorflow which is fine but here it's suggesting that we do torch um torch and accelerate okay so I'm going to go ahead and run this here so maybe Pi torch is just torch and I just forgot I don't know why I wrote in pi torch we'll give that a moment we'll see what happens uh the other thing is that it's saying that we probably don't need the framework specify because well it's saying for llama in particular that it normally uses P torch I'm not sure if that's the case here um another thing that we could do is go take a look at hugging face or sorry not hugging face yeah hugging face and look at the files here and I'm seeing tensorflow files so it makes me think that it is using tensorflow but maybe it needs to convert it over to P torch I don't know but um we should have both installed so even though I removed it from the top there um tensorflow is still installed and we could just leave it uh there as a separate line with say pip install um tensor flow this is half the battle to to get these things to work is is dealing with these conflicts and you will get something completely different than me and you have to work through it but we'll wait for this um it would be interesting to see if we could serve this via a VM but we'll just first work this way okay all right so that's now installed I'm going to go to the top here and we're going to give it a restart and so now we should have those installed we'll go ahead and do Transformers pipelines and we'll go run this next and so now it's working so that's really good um um is it utilizing my gpus I would think so sometimes there's some configurations here that you have to set but I didn't set anything here I think right now it's just downloading the model so we're going to wait for the model to download and then we just want to see if it infers um I'm not sure why it's uh not getting here but maybe it'll take a moment to get going um we didn't provide it any hugging face API key so maybe that's the issue it's kind of hanging here so it makes me really think that I need my hugging face API key so what I'm going to do is I'm going to grab this code over here because I just assume that it wants it that's probably what it is and sorry I'm going to just pull this up here oops we'll paste this in here as such and I'm going to drag this on up here and I'm going to just make a new env. text I'm also going to just ignore that because I don't want it to end up in there and um it's like hugging face API key I never remember what it is um but we'll go take a look here I'm just doing this off screen here so say hugging face API key nbar okay so key where are you key I'm having a hard time finding the name of the environment variable right now uh oh it's a HF token that's what it is so I need the HF token and I'm going to go back here and see if it's actually downloaded at all did it did it move at all no it hasn't so I don't think it's going to move and I think it's because it needs um I think it needs the hugging face API key so I'm over here in hugging face and I have an account you go over down below you go to access tokens I got to log in one sec all right and so I'm going to create a new token it's going to be read only this will be for deep deep spe deep uh deep seek there was no settings that I had to accept to be able to download it so I think it's going to work I'm going to get rid of my key later on so I don't care if you see it um I'm in this file here so that was called uh HF token I believe HF token and so now we have our token supposedly set we'll go back over to here I'm going to go and scroll up and I'm going to run this and now it should know about my token I shouldn't even have to set it I don't think so maybe it'll download now I'm not sure I'm go back over to this one notice we're not pumping the token in anywhere I'm just going to bring this also down by one this is acting a little bit funny here today I'm not sure why like why is going all the way down there it's probably just the way the messaging works here I'm going to cut this here and paste it down below so I'm really just trying to get this to trigger and I mean this one's this other one here but it's not it's not doing anything another way we could do it is we could just download it directly I don't like doing it that way but we could also do it that way but I'm just looking for the hugging face uh token and bars yeah it's HF HF tokens yeah so I have it right but why it's not downloading I don't know um let's go take a look at that page and just make sure that there wasn't anything that we had to accept sometimes that's a requirement where it's like hey if you don't accept the things they won't give you access to it so if I go over here to the model card it doesn't show anything that I have to select to download this [Music] yeah there's nothing here whatsoever right so again just carefully looking here we have some safe tensors that's fine oh here it goes okay so we just had to be a little bit patient it's probably a really popular model right now and that's probably why it's so hard to download but um I'm just going to wait till this is done downloading I'll be back here in just a moment it's it's downloading and running the pipe line okay I did put the print down below here so it might um execute it here might execute it up there we'll find out here in a moment this one might be redundant because I took it out while it was running live here but we'll wait for this to finish okay it's taking a significant time to download oh maybe it's just almost done here but um yeah downloading from shards getting the checkpoints now it's starting to write run saying Cuda zero I think that means it's going to utilize my gpus I'm pretty sure zero is gpus and one is CPU I'm not sure why that is but um now it appears to be running okay so we'll just wait a little bit longer now the thing is is that once this model is downloaded right we can just call pipe every time and it'll be a lot faster right we'll wait a little bit longer okay all right I'm back here and um I mean it ran the first part of the pipeline which is fine but I guess I didn't run this line here so we'll run it and since we separate out I think this one's defined hopefully it is and we'll run this and and it should work it's probably now just doing its thing trying to run but we'll give it a moment and we'll see uh what happens here okay yeah I don't think it should take this long to run I'm going to stop this and we're going to run this again and I think it'll be faster this time working because my video here is uh the video I'm recording here is kind of struggling that's why I like to use uh an external external thing here because now my computer is [Music] hanging so what I might need to do here is pause if I can all right I'm kind of back um my uh my computer almost crashed again it's not I'm telling you it's not the the lunar Lake it's these things can exhaust all your resources and that's why it's really good to have an external computer that's specifically dedicated like an aipc or even a dedicated PC with gpus not on your main machine but um there is a tool here called Nvidia SMI and it will actually show us uh the usage here and um it's probably not going to tell us much now because it's uh already running here but as this is running we can use this to figure out what is the usage of um gpus that are going on here but I'm going to go back up here for a moment we'll take a look so um it says CPU went out of memory so Cuda Colonels uh uh they cnly reported some API calls so this is what I mean where this could be a little bit challenging and again we downloaded the other models but those other models that we saw and by the way I'll bring my head back in here so we stop seeing uh EOS uh webcam utility here but but the thing that we saw was that um uh when we used uh ol to download it was using ggf which is a format that is optimized to run on CPUs right and it can utilize gpus as well so it was already optimized whereas uh the model we're downloading is not optimized I don't think and um apparently I just don't have enough to run it at the 8 billion parameter one but the question is is it downloading the correct one so if we go back over to here right this one is distilled 8 billion parameter it has to be it right because um because of that there and so we might actually not even be able to run this at least not in that format okay so you can see where the challenges are coming here so we go over to our files and we take a look here we can see we have a bunch of safe tensors that's not going to really help us that much we got to go back into deep seek here and we'll look into um the ones that they have here well here's the question is it yeah we did the 8 billion 8 billion parameter one so we go into here 8 billion there is quen 7 billion which is a bit smaller there's also the 1.5 billion one that's not going to be useful for us but you know what I'm kind of exhausting my resources here so we can run this as an example and then if you had more resources like more RAM then you'll have less of a problem so I'm going to go ahead and copy this over here and we're going to go ahead and paste it in here as such okay so now we are literally just using a smaller model because I don't think I have enough um uh memory in order to run this especially when I'm recording this at the same time and you know if we go over to here um I'm just typ in clear here um so we have fan temperature performance you can see none of the gpus are being used right now so if we knew it if we knew that they would be showing up over here right the gpus and so right now I think it's just trying to attempt to download the model because we swapped out the model right so at some point here it should say hey we're downloading the model it's not for some reason but we'll give it a moment okay because the other one took a bit of time to get going so I'm going to pause until I see something all right so after waiting a while this one ran it says Cuda out of memory Cuda external errors might be asynchronous reported at the API calls and stack and so it keeps running on a memory and I think that's more of an issue of this computer so I might have to restart and run this again so I'm going to be back I'm going to stop the video I'm going to restart it's the easiest way to dump memory because I don't know any other way to do it but you know if I go here I mean it shows no memory usage so I'm not really sure what the issue is but I'm going to um restart I'm also going to close OBS I'm going to run it offline and then I'm going to tell I'm going to show you the results okay be back in just a moment all right I'm back and I also uh just went ahead and I ran it and this time it worked much faster so I'm not sure maybe it was holding on to the cache of the old one that was in here but giving my computer a nice restart really did help it out and you can see that we are getting the model to run um I don't need to run the pipeline every single time I'm not sure why I ran that twice but I should be able to run this again again I'm recording so maybe this won't work well as it is utilizing the gpus we'll see [Music] here so now it's struggling but literally I ran this and it was almost instantaneous like how fast it was that it ran so yeah I think it might be fighting for resources um and that is that is a little bit tricky for me here we'll go back over here to Nvidia SMI I mean I'm not seeing any of the processes being utilized so it's kind of hard to tell what's going on here but I'm going to go ahead and just stop this can I stop this but it clearly works so even though I can't show you yeah see over here says volatile GPU utilization 100% And then down here it says 33% I thought that these cores would start spitting up so we could we could make sense of it and then here I guess is the memory usage so over here you could see we have 790 of 8 818 and here we can see kind of the limits of it but if I run it again you can see that my me recording just this video is using up uh the memory so that kind of makes it a bit of a challenge um and the only way I could do that is maybe if I was to uh use onboard Graphics which um are not working for me um because I don't know if I even have any onboard Graphics but that's okay so anyway um that's our that's our example here that we got working it clearly does work I would like to try to do another video where we use VM but I'm not sure if that is possible um but we'll consider this part done and if there's a video after that then you know that I was able to get BLM to work see you the next one all right that's my crash course into uh deep seek I want to give you some of my thoughts about how I think our crash course went here and what we learned as we were working through it um one thing I realized is that um in order to run these models uh you really do need optimized models and when we're using ama if if you remember it had the ggf extension that's that file format that is um more optimized to run on CPUs I know that with llama index um for my gen Essentials course when I did that exploration so optimized models are going to make these things a lot more accessible when we were using uh notebook LM or whatever it was called uh we saw that it was it wasn't notebook LM it was LM Studio notebook LM is a Google product but LM Studio it was adding that extra thought processes and so so more things were happening there it was exhausting the machine um even on my main machine where I have an RTX 480 which was really good you could see that it ran ran well but then when we were trying to work with it directly where we didn't have an optimized model that we were downloading um my computer was restarting so it was exhausting both my machines trying to run it though I think on this machine because I was using OBS it is using a lot of my resources but uh there's a video that I did not add to this where I was trying to run it on VM and I was even trying to use 1.5 the 1.5 billion uh quen distilled model and it was saying I was running out of memory so you can see this stuff is really really tricky um and even with an RTX 480 and with my lunar Lake um there were challenges but there are areas that we can utilize it I don't think we're exactly there yet to have a full AI powered assistant with with thought and reasoning um but the RTX 480 kind of handled it if that if that's all you're using it for and you're restarting those conversations um and then you're fine tuning those some of those things down and then the lunar could do it if if we tuned it down one thing that I did say that um I realize after doing a bit more research CU I forget all the stuff that I learned but mpus are not really designed to use LMS I was saying earlier maybe there's a way to optimize it or something but mpus are designed to run smaller models alongside your llms for your workloads so you can distribute uh a more complex AI workload so maybe you have an llm and it has a smaller model that does something like images or something something I don't know something um and maybe you can utilize that mpus um but you know we're not going to ever at least in the next couple years we're not going to see anything utilizing mpus to run llms it's really the gpus and so we are really fixed on that the igpu on the lunar Lake and then what our RTX the RTX 4080 can do um so you know maybe if I had another graphics card and I actually do I have a 3060 but unfortunately the computer I bought doesn't allow me to slot in slotted in so if there was a way I could distribute the compute from this computer and my old computer or even the lunar Lake as well then I bet I could run something that is a little bit better um but you know you probably want uh like a a homebuilt computer with two graphics cards in it or you want multiple multiple uh aips that are stacked that have distributed compute um and just as as we saw that video where the person was running the uh 671 billion parameter model if you paid close attention to um the uh the the uh post it actually said in there that it was running it on 4 bit quantization so that wasn't just the model running at its full Precision it was running it highly quantized and so quantization can be good but if it's at four bit that's really small and so and it was chugging along so you know the question really is is like okay even if you had seven or eight of those you'd still have to quantize it which is not easy and it's still even it's still slow and would the results be any good so as a example it was cool but I think that 271 billion parameter model is really far Out Of Reach um but that means we can try to Target one of these other ones like if it's 70 70 billion billion parameter model or maybe we just want to reliably run the 7 billion building parameter model by having one extra computer and so you're looking at depending if if you're smart about it 1,000 ,500 and then you can uh run a model it's not going to be as good as these as Chachi BT or Claude but it definitely will pave the way there um we'll just have to continue to wait for these models to be optimized and for uh the hardware to improve or the cost to go down but maybe we're just two computers away or two graphics cards away um but yeah that's my two cents there and I'll see you in the next one okay ciao"
eX-ODcr3XJg,Polyrhythms JavaScript Project Tutorial – How Math Can Make Your Code Better,https://www.youtube.com/watch?v=eX-ODcr3XJg,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,"In this JavaScript course, @Radu will teach you about good coding practices when building a fun project. It emphasizes how ...",2024-12-10T16:58:24Z,in this JavaScript course you'll learn how math can make your code better simpler and less prone to bugs while building a fun project Dr Ru will teach you about procedural sound generation and techniques to enhance code readability and structure if you've ever doubted the role of math and programming this video will teach you just how powerful it can be I found this cool YouTube channel with a lot of so called Bly rhythms there are simulations where balls make some kind of noise when touching something [Music] I thought it'd be cool to recreate one of them especially because I can use it to teach you many things about procedural sound generation improving code structure and how knowing a bit of math can make the code base much easier to understand if you're one of those who think math is not useful when coding this video is for you try to follow along it's a nice project I think a change of tune from other things on the channel get it change of tune so then no no going to code debug and have fun coding with r coding with Ru going to prototype and design coding with Ru coding with Ru let's code now will we'll start in an empty folder I have my visual studio code editor ready here and let's create a new file called index HTML and in it we begin with basic HTML so first the dock type then the HTML tags and the head let's add the title it's going to be poly rhythm and in the body we are just going to have a canvas element appearing there let's save the file and open index HTML in a browser to test I'm using Google Chrome here and you can see the title appearing here in the tab but the canvas is not appearing there unless we open the developer tools and notice it in the elements so let's make it visible at the moment it's transparent I'm just going to give it a style with the background color black this time and now if you refresh you're going to be able to see it on the page as well I'm going to make it bigger and I'll do that in JavaScript this time so let's give it an ID here so we can refer to it in the JavaScript code and here let me open a script tag and close it and Define a size of 700 pixels and use that for the canvas width and the canvas height like so and now if we save and refresh we're going to see it filling up more of the screen like this you can use different value here if it looks better for you and looking at that example that we want to follow I see two Essential Elements there a track on which balls are moving so a track object and a ball object if you think about the object oriented Paradigm so let's Implement those objects and draw them on the canvas and to do that I'm going to move here and get access to the canvas drawing context the 2D context and let's assume that we already have a track object somewhere it's going to be defined by a center if we consider those arches are part of a circle then that has a center there in the middle and I like to use this circle for much of this tutorial because it's going to help teach you some things so let's have them as circles in the beginning and we need to pass a center for the track and a radius for the track and then the track should also be able to draw itself on a given context like this so I'm going to set the center of this first track to be in the middle of the screen so half the size and half the size and the radius let's just set it to 100 pixels for now and now we can implement this based on what we need it needs to have a location and the radius as a parameter and a draw method there and we can do that in a separate file it's going to be a little larger project this time so let's separate some of the code and you can create new files in vs code by control clicking it it's generated here next to index HTML like so so it's going to be a class and in the Constructor we are going to pass here the center and the radius let's set these as attributes so that the track object knows where it is and how big it is and let's give it the draw method as well on a context we are going to begin a path and draw it using the arc method so the arc method has several parameters first is the X location of where we want the arc to appear then the Y so these are the X and Y coordinates and then the radius and to draw a full circle we can use zero for the beginning angle and 360 for the end angle so we could put here Pi * 2 because the angles in the arc method are specified as um radians now to see it appearing there on the black canvas let's set the stroke style to White and stroke now we can test real quick let's save and refresh and you can see a circular track here if you're going to pass here just Pi there you're going to see half a Circle and if you want it to go that way then you could also pass here through so that it goes counterclockwise but again I want to work with circles here for the moment so this is our track and let's define the ball on the track so in index HTML we will need a ball object as well and in this world really balls are stuck to their track they can never go outside of it so it makes sense to somehow pin it on the track in in some way and that's why I like to define the ball here as a new ball on the track and then pass some properties like uh how big it is and how fast it moves they seem to be moving at different rates so let's say ball speed also is important here and then after drawing the track we can also draw the ball in a similar way let's define this ball radius maybe 10 pixels and the ball speed let's just have 0.1 for now and now I know what we need we need a ball with three parameters in the Constructor and the draw method so I'm just going to copy this rename it to ball and control click to create a new file and a very similar class ball this time now the Constructor has the track the radius and the speed and this track setting it to track storing all the attributes from The Constructor here so that the bow knows what they are and uh let's say that in the beginning the ball starts at the beginning of the track so we will control that with an offset parameter but to draw the ball we need to have an x and y coordinate for the ball and at the moment we don't have what it can tell us the XY coordinate is the track object it should be able to tell us because it decides where the ball is going to go so I'm going to get the center of the ball by asking the track to give us the position at this offset and now we can implement this draw method on a given context where similar as before we begin a path and use the arc method to draw a small circle this time at Center X Center y with this radius 0 math Pi * to Let's also have it a white stroke for the moment and then stro and all we need is this get position function here so let's go to track JS and Implement a way to return the position according to an angle offset so this is essentially converting from Polar coordinates because we know the radius we know the center and we know this angle offset there we are getting the XY value like so using the cosine of the offset for DX and for the Y I'm using a minus here because I want it to start going upwards but other than that it's essentially following the unit circle and now if we save and refresh we see the things there a lot of work for Just Two circles appearing on the screen right I mean if you just want to draw two circles you can do it with a couple of lines of code you don't need all this crazy stuff but there's a reason for the structure and I'm going to explain it soon first let's just uh get animation out of the way as well so let's implement the ball moving according to its speed along the track and here in index HTML let's go below these objects and animate and Define an animate function first it's going to clear the canvas so let's remove everything that is there and now redraw the track and a ball on each frame and then call the request animation frame method passing animate this the parameter this is going to call itself again and again as many times as possible per second but the ball should also move before we attempt to draw it so let's go here and say ball move and this needs to be implemented next so inside of this ball Define a move method like this and we increase the offset with this speed so this is in angles really and then we have to update the center by asking the track to tell us where is the XY position according to this offset now if we save this and refresh we get the ball that is spinning along this track and again very complicated code to do something like this why go through all this trouble with this structure and asking the track to give the position and the ball and so on instead of just drawing two circles there with some kind of a update in in the angle so the real reason is that in this way you can have more flexibility you can gener erate any kind of track and now we are deviating a little bit from that example which had just a half circle track there but anyway I think that this is very important for you to realize that structuring code a certain way gives some kind of flexibility and I'll show you here we are using the circle equation one of the circle equations um I already have a video where I show you 10 ways of doing it but this way we generate a circle here and we also draw the circle here but we are cheating we're using the arc method really you could use the same technique here by drawing many many small lines along the circle points so let's try doing that here I'm going to loop with an angle starting at zero going to 2 pi so a complete circle and let's increase it by a small fraction like this let's do line two and here we write the same formula because we are converting to get an x coordinate and a y coordinate it's essentially what the arc method is doing there of course it has many parameters so you could set zero and 2 pi to something else but anyway let's save this and refresh and you can see it's almost a circle it's not closing here you can do that by adding here a close path at the end so it connects again to the beginning and it's Jagged it's Jagged on purpose because I wanted you to see that we are really drawing it here and you could make it more refined by setting a smaller value there so now it looks essentially the same as before and this is the math that generates that specific path but you can generate some other path like if you take here a and multiply it by three the path is going to look like this crazy thing and the reason the ball doesn't follow the path is because there's now a discrepancy between this code here and this code here you could get this one to act in the same way but doing this uh fixing and now the ball is moving there uh maybe a bit too fast let's slow it down a little bit and give it maybe 0 01 here and now you can see it following that shape and this is a problem I I mean why have this copied code here for drawing the path drawing the track and getting the position when you could use get position and this is something really important reusing code and avoiding duplicates is really important so let me teach you that we can get here the position by calling the same method we have above with a as the parameter and then here in the line two we can just use the position X and position y like so and now these are in sync so if I'm going to restart it it works no surprise here but if I'm going to change this formula to something else like maybe this then it's even more uh kind of looks like a DNA strand uh it's in sync it's behaving as we expected now this looks a little bit Jagged here so of course you could add more detail like so and I hope you get the point but you can play with these crazy patterns all you want I'm not going to focus on them I'm just going to leave you with this example code and revert to the circle equations so we have the same thing as before written in a fairly complex way but there is this this flexibility there and the fact that the track tells you where the ball is going to be means that the ball doesn't need to change its implementation it just relies on the track and also really important is you could have multiple tracks you could imagine different formulas there defining the paths and you can switch through them and Implement different applications really easy if you if you have a good structure like this but in that example this ball was going here and then bouncing back so the direction would change the movement direction would change and let's implement this in one way and then I'm going to show you several other ways that are actually better and we have a lot of things to learn during this process now what most people would do in this case if the ball has to change direction it's that they would add here a way to Mark which direction the ball is moving in and I'm going to use one and minus one to indicate this and uh really here when we updated the offset we could say multiplied by this direction and that's going to solve our problem but we also have to change the direction somehow and I'm going to do it here and say if this Center y the balls Y is going to be greater than the track Center y then we switch the direction so we multiply it by minus one now if we save and refresh the ball is moving and then moving back and then here moving back because this direction has changed when the ball goes below that kind of horizontal line appearing there so we already have a functionality that is very similar we are just missing the sound and let's generate that as well it's going to be played here when we change the direction basically and let's go to index HTML and create a file for this sound as well maybe sound JS and control clicking this gives us a new file where I'm going to use the web audio API so generating a new audio context supporting Safari as well and let's create a function for playing the sound it will need to have control over the frequency let's set the default value of 440 and a duration of u 1 second these are very often useful parameters when working with sound and to generate sound we can create a basic oscillator like this and connect it to the destination this means to the speakers and let's set the frequency to to this parameter at the current time so this oscillator is going to start with this given frequency and we start it it begins to oscillate to play the sound and we can stop it after the duration refresh and here when it changes direction we should hear a sound but we don't and if we we open the console here we see that this audio context was not allowed to start because you need to somehow interact with the page before it starts working so if I click the page now it generated the tune there a 1 second tune at this frequency I'm going to refresh the page so it doesn't beep while I talk and uh let's make this sound a little bit nicer I'm going to add to this an envelope where we can control the gain what I want to do is start the sound off at zero loudness and then increase and then go down in a linear fashion until the duration ends so I need to duplicate this line and connect the oscillator to this envelope and the envelope will be connected to the audio context destination or the speakers and now this envelope here we can set its initial value to zero at the current time when it was defined and Now quickly ramp up to one and it's going to be at the current time plus a very small fraction of a second the fifth of a second and then going back down to zero after the duration doing this starting at zero and ramping up quickly prevents a click that appears in the beginning of the of the sound so now I'm going to have to click on the page to hear it and it's um nicer sound let's try making multiple tracks and multiple Balls next so in index HTML here we can prepare for that and say tracks is an empty array balls is an empty array and let's say we want 20 pairs like this now we can Loop starting at zero all the way to n and the track radius is going to change we can't rely on this fixed value anymore but there is a pattern to them it starts off at the minimum track radius and then increases at the fixed step so all we have to do here is rename this to minan radius and then track step let's say 15 and now we can take these objects from here move them here align them a little bit and add them to the tracks and balls arrays so let's do it like so and like so and let's close this and for it to work we also have to consider that now track and ball are variables local in this scope and we can't have this code here anymore we have to rewrite it so that we draw move and draw each of the tracks and and the balls so we can do that using four each and then draw each track like so and the same thing for balls first we have to move each ball and then draw each ball I'm just going to duplicate this and copy this here and now we can test so save and we get this and uh the balls are all moving at the same speed this is something we need to to fix there would be also sound but I'm not clicking on this yet let's change the ball speed in the same way that we handled the track radius so it's going to start at the minimum speed and increase by a ball speed step so up here ball Min speed and then the speed step is going to be a small decrease and now the balls are arching like that and if we [Music] click we get some sound but they're all the same frequency to have different frequencies I generate here an array of frequencies that I think sound nice so I'm just going to paste them here you can get them from the video description and we have to pick one from this array so let's go here and say that the ball sound frequency is the sound frequencies of I and we need to pass this one here so when creating the ball the ball also needs to know how it should sound like so we need to change the ball Constructor to accept a fourth parameter sound frequency and let's set it here below the speed and we need to pass this sound frequency when playing the sound to overwrite that default parameter now let's test and click [Applause] something is not right there is a problem in the sound because we set all of the sounds to maximum value here and when they are on top of each other they're going to exceed that maximum value and it doesn't sound good so one way to fix this is to give it a low value because we are expecting here to have multiple sounds overlapping at times so this is going to make it sound better I'm going to click yeah no [Music] more problem here but I think the duration could be improved maybe 2 seconds and clicking [Music] okay nice and let's have it play a little bit and notice what happens [Music] here you see this Behavior this is not what was happening in the application we tried to replicate and the reason for that is very technical here when moving the ball it sometimes moves below the track Center so that horizontal line where it changes Direction but some balls move more than others and because of that they don't travel the same distance what should happen is they should never move below that line but we should interpolate figure out where it touches the line and then already reverse and move it a fraction in the opposite direction and that would solve the problem but you can probably see that there is a lot more code going into this strategy to solve the problem so I'm going to show you another way to simplify the logic and to get it to work as expected in in another way first a more creative way and then a more mathy way the creative way I mean the sound that the balls will play is actually the same if you would look at this animation here or if the balls would just do full circles and generate the sound when they touch that horizontal border think about it it would generate exactly the same sound so for for the moment let's not bother with this uh back and forth and try to figure out how to do that how to generate the sound on each round so to speak so this would be one round another round another round another round we need to detect when the round changes and then generate the sound so a little bit different logic I hope you're able to follow but basic basically instead of having a direction here we won't they will always go in the same direction but they need to know which round they're in because if it changes they play the sound so how to do that well the best thing is for the track to give us the information on which round we are currently at because it knows according to the angle offset so let's go to trct JS and here we need to know that a period of Pi so half of the circle is when the round changes so I'm going to go here and say this period is going to be just pi and when we get the position here we can return also the round as the offset divided by this period we only need to keep this integer value here and I'm missing a comma and now with this information the round information coming from the track we can go back to ball and here instead of getting this position and assigning it to Center directly we can say the result of this get position call is stored here and then the center can be the X and Y of that result as before essentially but we also have another piece of information here we can use if the result round is not the same as this round and replace this if statement which is strange I mean look at the logic here how complicated it is the ball needs to know that the track has a center and a y and it also needs to know that that why uh when the ball exceeds that why something has to happen and now we don't have to deal with that logic anymore we just rely on the track to tell us when the round changes and then direction is unnecessary anymore we were supposed to remove it from everywhere also from here and the only thing we do is play that sound and also update The Round In this case so like that and if you save this and restart and now just click somewhere the sound is appearing there the animation doesn't look [Music] good but the sounds that are playing are actually the same as they are supposed to be now no more problem with [Music] the strange distribution of the points that we saw previously because now everything is moving at the same rate all the time and there is no glitchy effect happening because of that change in Direction so we solved that problem and the sound is fixed but the visualization should jump right and I'm going to show you a trick to solve this problem and um it's by drawing the ball twice at a symmetric position relative to that horizontal line there I'll show you so what we do here is we can generate a fake Y location for the ball symmetric to the track Center Y and relative to this Y and then we can duplicate this code I'm just going to draw it twice now so that one of it is at this fake y so let's keep the original one here and the fake one here and now let's see what we get it looks a little bit strange with symmetric things up and down like this and uh I'm not playing the sound now so that you can hear me speaking but let's see what happens if I'm going to change here the size the canvas height basically I'm going to have it so we only see the top part now and look what happens here it kind of looks like the balls are bouncing in the other direction right let's actually shrink this track a little bit so that we see it all like in that example I'm going to set here the track Min radius to maybe 50 and now everything looks nice here so look they're bouncing with a little bit of a glitch effect at the end because you can see somehow the other balls as well but you could get rid of that like if you go here when drawing the ball and only draw one or the other depending on its y value so if the fake Y is greater than this Center y then let's leave this code otherwise we draw the other so if the fake one is below then we don't draw that one and vice versa and now we get pretty much the same as in that example and the balls seem to bounce and we have the effect that we want if I'm going to click here the sound is also going to [Music] come and there are no more those problems because of the complex logic that wasn't yet perfect okay so we got it to work it can be done much simpler than this all you need to know is math and this is an example again of useful things you can do with math if you know it and how it can simplify some logic if we remove this uh crazy thing with the fake y I mean it's also hard to explain what is that fake why in the code and yeah the ball should be just a ball complicated the logic here and for no reason really you could have taken out that complex stuff maybe here to index HTML and maybe clone balls here that would have been a way to generate them symmetric along the track so that the ball logic doesn't become complicated so on second thought this would have been a better place to do that but we don't have to do that at all we can just keep the logic here like that and tell the track that we want to generate the half a circle not the full circle and you do that by adding here an absolute value to the sign and that's it if you refresh now you're going to see these balls bouncing there going back without that fake thing and actually let's go back here and set the size of the the height of the canvas to the full size and you'll see that we are drawing half circles now but it's not really true we are drawing half circles and then have circles back because the absolute value for the sign makes all negative values these ones here positive again so they essentially reflect back up and with this one line change there we get exactly the behavior that we need for building this application without complicated things like Direction changes and so on the track now actually looks like that and then goes back and this Loop is periodically infinite we're ready to style things I guess let's reset here the size to half because that's really all we need and um we need to generate colors I'm only going to worry about the color Hue here so the Hue is going to be defined like this a fraction of 360 depending on the uh value of I and we need to pass this one to the tracks They will be colored and also to the balls they will be colored as well let's save this and start with the track pass here the Hue as well and after the radius let's set the Hue value like this and now the stroke style here I'm going to use uh back tick because I will Define a color in this uh hsl format and I want to pass here the this Hue using this syntax and then the saturation 100% colorful and the lightness 50% because 100% would be white zero would be black so 50% gives you the color that you need and then let's close the back tick now if we save and refresh you get here all the Hues and if you don't like these specific ones you can go back here and index HTML and play with this formula but I'm happy with that and let's move on to make the ball as well I'm going to go here and let's pass here and after the sound frequency the Hue gets stored as well as an attribute and now the stroke style is actually white in that example but the FI style is what needs to be defined and it's the same formula from before but assigning it to the fill instead and then let's fill and uh now it's nice but maybe this um stroke style could be the line width could be a little bit bigger and the balls should be smaller so let me go up here and say line width set two and uh in index HTML where we specify the ball radius maybe a value of six is better okay and we're almost there last thing is when the balls touch this bottom part they need to change to White and then gradually go back to this color so we need to somehow measure the progress a long each round and uh let's go to BJs and prepare to do that here so the progress let's set it to zero in the beginning and um we will have it being returned by the track because it knows what is the progress there so let's just take it like this and we need to mod if I get position in the track to give us also that I'm going to do it real quick here so the progress now we take the remainder when dividing by the period this gives us a value between zero and the period so I would like the progress to be between 0 and 100% or 0er and one so let's divide by the period as well and let's save this and now back to the ball we can use this progress for the lightness value here so let's have it so that it becomes 100% minus that progress time 50 so this is going to give us uh between 50 and 100% if we just enter it here like so let's save and they change from White to their original color and then they bounce back with the new color really nice so now it's your turn try to make this even more special maybe play with the math formula and do something cool show me if you happen to be on my Discord and uh now maybe let's just listen to this application one last time so refresh and I'm going to click cck once and thanks for watching see you guys [Music]
GWB9ApTPTv4,Ollama Course – Build AI Apps Locally,https://www.youtube.com/watch?v=GWB9ApTPTv4,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,Learn how to set up and use Ollama to build powerful AI applications locally. This hands-on course covers pulling and ...,2024-11-26T15:29:04Z,"olama is an open-source tool that simplifies running large language models locally on your personal computer in this course you'll learn how to set up and use olama this Hands-On course covers polling and customizing models rest apis python Integrations and real world projects like a grocer lless organizer rag system and an AI recruiter agency Paulo created this course hello and welcome to this mini course I'm very excited that you're here because I know you want to get right in and start learning about AMA and building AI based Solutions using AMA first let me go ahead and introduce myself again which is always awkward okay my name is Paulo deson I am a software Ai and Cloud engineer but most importantly I am an online instructor and I have taught over 280,000 students all over the world in about 175 countries uh skills ranging from building mobile applications Android to learning Ai and Cloud Technologies so this is what I do and I love what I do what is this minicourse about I want to show you how to leverage olama and its many many models so that you can build AI Solutions a applications locally for free usually the structure that I like to follow and has Pro proven to work is in the beginning or the first part of the courses I start with the basics the fundamentals as well as Theory Concepts because I think it's important for you to also understand the theory before you go into Hands-On and then the second part is usually Hands-On but sometimes I like to mix those two together so that it's more exciting and you don't get bored okay so I know you're very excited to get started and I'm excited that you're here okay let's go ahead and get started well this course is going to be about ol that's the main thing so we're going to learn how to build local large language model llm applications using AMA so the idea is that we're going to be able to use AMA to customize our models meaning that we are able to use different flavors of models so we can test them around and all of that is actually going to be free which is very exciting and also we're going to be able to build rag system so retrieval augmented generation systems that are powered solely by AMA models keep in mind all of this is going to be for free you're not going to have to pay for anything okay and we are going to learn about tools and function calling when we are using these AMA models so we can Aid our large language models that are going to be using with more things that they can do okay I'm going to look at all of that and ultimately I'm going to show you how to use AMA models to build full-fledged large language model applications using these models okay keep in mind all of these models are going to be for free we don't have to pay a dime to use these models now let's talk about who is this course for now this course is for developers AI Engineers open-minded Learners machine learning engineers and so forth as well as data scientists so if you are somebody who is willing to put in the work and wants to learn about AMA and build local llm applications then this course is for you now let's talk about course prerequisites in this course I assume that you know programming this is a very um important skill obviously and I expect you to at least know the basics you'll be seeing a lot of python in this course so understand understanding how python Works how to write python code is obviously very important you also need to understand very basics of AI machine learning large language model you don't have to be an expert but just have some general understanding keep in mind also that this is not a programming course because I'm not going to be teaching you how to program and most importantly I always tell my Learners is that you have to be willing to learn and if there things that you need to go and brush on just go and do that and come back to the course but most likely you won't need to go anywhere but continue in this course and learn as much as you can so most of my courses I have this mixture of two things I have Theory so this is where we talk about the fundamental concepts the lingo and so forth and I have Hands-On because it's all about actually doing things that way you actually understand and know how to get things done that's the whole point and so the thing is I'd like to do a mixture of both and sometimes we have more handson and sometimes we we may have more Theory but I try to balance it all out where we have mixture both because I know I believe at least that is important for you to have both in your learning process but in this course you are mainly going to be focusing on Hands-On although you will still have some Theory fundamentals as well all right so let's look at the development environment setup so in this case you know that this is all P about python which means you'll have to have python installed and also you have to have some sort of a code editor for me I'm going to be using VSS code so you don't have to use that if you don't like it but that's what I'm going to be using you can use whatever you want okay now I'm not going to go through the process of installing python or vs code or anything like that because you should be able to have that if not you should be able to do that on your own so one place that I always recommend people go is to this link here kin.com knowledgebase install python there are many places online where you can learn or they will walk you through the installation of python if that's your case uh but this seems to be one of the best my favorite okay so if you don't have python installed please go ahead and get that set up so that we can continue in the next next videos now we have everything set up on our machine and we're ready to go so we're going to do a deep dive into AMA so you understand exactly what is how it works and what problem um AMA solves all right so let's go ahead and get started now it's time for us to do the Deep dive in ama so we understand exactly what is AMA what is the motivation behind and the advantages that ama brings for us developers okay so first let's look at AMA what is it ama is an open-source tool that is designed to essentially simplify the process of running large language models locally meaning on your own Hardware the idea here is very simple as you know right now if you want to run large language models or if you want to use a model large language model in this case just a model most likely you'll have to use open Ai chbt and so forth and many others out there that are paid and the thing is with a Lama you don't have to pay for anything it's free and that's the beauty so the idea is that ama sits at the center and allows us developers to pick different large language models depending on the situation depending on what we want to do at its core AMA uses what we call the CLI which is command line interface what this does is it manages is all the things in the back end so the installation and also the execution of different models but all of that again keep in mind it's all locally you will see as we go through that ama abstracts away the technicality so the technical complexity that are involved when we want to set up these models which makes Advanced language processing accessible to a broader audience such as developers researchers and hobbyists in nutshell AMA provides a straightforward way to download run and interact with various models or LMS without us having to rely on cloud-based services or even dealing with complex setup procedures rather what is the problem that ama solves now when we talk about large language models we are usually talking about this thing called rag system retrieval augmented generation the idea is very simple is that we have documents those documents are chopped into smaller chunks right and then we pass those through a model that is responsible for creating embeddings which is the vector representation of these chunks those embeddings are saved somewhere and then a query comes in goes through the same process of embedding right and then once we have this embedding that is indeed what's actually used to query do similar search internally in a factor database so that we can then pass all that information right through a large language model a model and of course get the response now again usually what happen is that all these models that we need to run a rag system for instance we may need to pay such as when we use openingi trpt and all different models that they provide okay now the other thing also behind all of that is that when we are using AMA models these are ours meaning that we download them internally in our local machine and we have a lot of control okay so that is the beauty of or in this case that is the problem that they solved but that's not the only problem that been solved the other one is that privacy so in this case here when we run our own models locally uh we are making sure that our data doesn't need to be sent to external servers because remember when we passing data through a large language model using chbt in this case or openi models and so forth we literally are passing through or sending our private data to different servers that we don't know what will happen out there so this way we have some security issues but with AMA that goes away because we have this enhanced privacy and security this is very important because imagine that you have an application that needs to be uh dealing with sensitive information then it's important to have your own models your own llm so that you have this contained enir environment where you're not sending out that sensitive information when you want to set up large language models it is cumbersome which means is technically challenging and often requiring knowledge of machine learning Frameworks and also Hardware configurations but as you will see with AMA all of that is simplified so this whole process is simplified by handling the heavy lifting for you also most importantly cost efficiency now we're going to be eliminating the need for cloud-based Services which means you're going to avoid this ongoing costs associated with API calls or server usage because everything remember is going to be local goal so once you have everything set up you can run models without additional expenses the other one is lency reduction what that means is that local execution obviously reduces the latency inherent in network communications so when we are communicating with something that is somewhere else through the network of course there is always a delay even if the network is really fast there's always this latency the delay okay but since every everything is local we don't have that problem okay because we're not dealing with remote servers which results in Faster response times for interactive applications and also most importantly we are able to customize our own models because when we running these models locally it allows for greater flexibility in customizing or even fine-tuning those models to better suit specific needs without having this limitations imposed by thirdparty services so these are some of the advantages we have by using AMA models so I know that we are eager to go ahead and start doing the Hands-On but let's continue here to talk about some key features of AMA okay so the first one is what we call the Model Management this is a big one which means that we are able to easily download and if we want to able to switch between different models or between different large language models and that is the main point about AMA is that the idea is that we have this Center place called Lama as a open source as a framework as a tool that essentially allows us to manage all of the different models that we can use interchangeably okay and next one of course is we have this unified interface what does that mean well that means that we're able to interact with various models using one consistent set of commands as you will see and of course we also have what we call extensibility what that means well it that means we have this support for adding custom models and extensions if we need to obviously we have what we call also performance optimizations which means you're able to utilize your own Hardware effectively including GPU acceleration if available because remember all AMA allows us to do is to manage all this large language models that we can download locally that is the key word key Point here and then we can do all sort of things with that we have this performance that is optimized because everything is internal it's locally as well extensibility because we can add different models and extensions as we see fit and of course we have this unified interface because we're able to interact with different models uh but still using a very consistent set of commands as you will see but the main point here of of course is that we have this Model Management in one place we're able to easily download and switch between different large language models let's look at some use cases well as you can see you can imagine we have a lot of different use cases uh for one of the first one is development and testing so you can imagine that as a developer you are able to look for different large language models and switch them to test them out to see which one is is going to perform better depending on what you want done so that's huge right so this is a deal of course for developers who are looking for ways to test applications that integrate large language models without having to set up different environments and all that complexity so also for education and resource what that means is that makes it really easy as a platform for Learning and experimentation without the barriers of Entry that are asso ated with cloud services so it's really easy just download certain kinds of large language models and you can go ahead and do testing and do some research and so forth and we talked about this secure applications the beauty of having AMA is that it provides this managed or this management platform of all of these different large language models which means it's suitable for Industries like healthc care or Finance where data privacy is very critical because everything is your own you download the large language models on your own machines so in conclusion AMA addresses these challenges of accessibility privacy and of course as we talked about cost in the realm of large language models so by enabling local execution which is exactly what we do with AMA it democratizes the use of advanced AI Technologies make making them more accessible and practical for a wide range of applications which is exactly what you would want okay so now it's time for us to look into setting up AMA locally um and what we'll do we're going to do go through the installation process and do the setup before we do setup there's some things that I need to let you know most of you should be okay there are some system requirements we need to be aware of first of all uh AMA supports Mac Linux and windows and I'm sure other operating systems there as well but these are the main ones and also make sure that we have at least close to 10 GB of free storage on your machine this is very important because as you will see some of these models require a lot of space and also processor as long as you have a modern CPU processor you should be fine and most of you should have that in place okay so just something to keep in mind all right let's go ahead and get started with setting installing and setting up AMA so if you go to ama.com O lam.com as such this is what you are going to be able to see says here get up and running with large L models now because this is a moving Target in technology things may change a little bit or dramatically by the time you watch this video hopefully not but the most important thing here to remember is that the IDE is still the same you will be able to download this tool and use that way independent on how it looks okay so should look the same but you never know and you can see here at the recording of this video says here Lama 3.2 this is the latest Lama 3.2 model that they provide we need to download AMA how do we do this well it's very simple all you do click here download Once you click that this will take you to download AMA page now you can see we have three different flavors we have Mac OS so the browser was able to pick up that I am on Mac and so offered Mac if you're on Linux of course you'll have to click and look at this so you'll have to install by taking this command and running on your terminal if your windows of course is also just like mac you have to download as an application and run it okay whichever way you have to download the AMA zip file so I'm on Mac I'm going to click download and then you can see that it is downloading here so I'm going to wait for a second all right so it was downloaded and let's go ahead and click and open real quick so this is what you should see a zip file at least on Mac all right so I'm going to go ahead and double click and it's going to and zip and then it's going to look like this as an application okay so what I will do I just double click again and it will install again as an application on my back so I'm going to say open that's fine and then I'm going to move to applications and there we go so once we've done that I'm going to show you real quick here this is what I see so I have now this window on Mac that allows us to go through the process I'm going to say next and install the command line I'm going to say go ahead and say install and I'm going to pass here my credentials say okay so run your first model so we're going to run this AMA run Lama 3.2 now again this number here may be different from when you're watching this doesn't matter just follow the instructions so I'm going to say finish so what happens now is going to go ahead in the back and run the command and everything is good so it's going to install the Llama 3.2 which is a model that's a large language model that's going to be installed with our installation so we can get started and you can see once that happens that the Llama is running because now now we have this icon at the top that is showing there this is Lama icon and you can quit from here as well okay next what we can do is let's go back to models this page this is where all the different models that ama has this is where they are aggregated and we can look into them and learn about them you can see at the top we have Lama 3.2 which is the latest one which is the one that was installed already locally in our machine well come to this later and see more now let's go ahead and click on this one so I can show you something real quick here okay the beauty here is that when you click on any of these large language models you will see essentially the same things okay we have these 3B we'll talk about this later and um 1B latest and so forth okay and then most importantly we also have all of these things that we don't care about at this point we have a readme we have the sizes it tell us exactly what they mean what they good at this 3B default for instance and how to run it so this is essentially what you have at the top here so we're going to cop this and we're going to open a command line or a terminal I have one open and I'm going to paste that so what this does well it say Lama run Lama 3.2 so what we saying here we're going to use a llama as the tool the framework right to run llama 3.2 which incidentally it's already installed on our machine right I'm going to just enter and what we'll do is going to spin up the Lama 3.2 model for us and then open this shell where we can start interacting with the model just like that now I need you to think to go back to what we talked about the beauty or the advantages of using ol is that ama has different models that we can use and install them internally locally on our machine and we can easily then through AMA as this manager of this Model start interacting with different models right now we are interacting we're able to interacting through the shell here with Lama 3.2 model which means I can ask question like what how old is the universe look at that and it gives me an answer the thing to keep in mind is that Lama 3.2 tends to be a little bit verose and as you can see uh it is quite veros but that's okay I can say in short tell me how old is the universe so you can actually direct it to tell you exactly what you need right kind of kind of like prompting it a little bit so the universe is approximately 13.8 billion years all right so I can also say for instance clear see what's going to happen glad you could convey that information clearly I guess I have to say something like this clear it cleared the session okay now I can continue here by saying for instance for help I can say forward slash I can put the exclamation point or I can say help like this so this will give me it's actually exactly other commands that I can use we have the set show load save and clear session as we saw as well as Buy to exit the shell so let's go ahead and use this show here okay I'm going to say forward slash show what we want what is that I want to show I want to show info so this will give us information about the model that we are looking at which is the Lama 3.2 says here architecture is llama the parameters is 3.2b we'll talk about that and the context length is that and embedding length and so forth and some other licensing information so just like that ladies and gentlemen we're able to install AMA and of course because AMA itself is just a manager we need to have the actual large language model and that's easy to do by installing in this case llama 3.2 we could have installed any other model of course but we start with that one when we're installing AMA all right so now I can say another question tell me a short joke okay here's one why couldn't the bicycle stand up by itself because it was too tired very funny all right and if I want to get out of this shell I can say for a slash buy like this and you can see we're no longer in our Lama 3 shell so I can clear and we're done okay very good so I hope this is a good introduction there is a lot that coming um and I hope this excites you because the power that we have right now is at all this is locally we've imported we have downloaded the AMA tool in this case manager along with one model which is Lama 3.2 okay make sure that you're able to do this and I'll see you next now to keep in mind that the whole idea of a Lama is that we have this place where we have many different models we can use interchangeably we can just pick one and then drop it and pick another one and test until we find something that works so it is important to always look at these models page here so we can look at what's available and most importantly as you can see here you can also go ahead and search or actually filter by featured most popular and uh or newest and so forth okay so newest here seems to be neotron so keep in mind again that these will change depending on when you're watching this video okay so maybe you're not going to see this as the newest but the important thing is this is the place for you to come and look at what's going on so as far as we're concerned right now updated 3 weeks ago we have the Lama 3.2 it is also important for us to have more information about those large language models because the idea is for us to be able to choose what works for what we trying to accomplish okay so let's click on Lama 3.2 so when you click on Lama 3.2 or on any large language model that is shown here you're taken to this description page now there's a lot going on here the important part here is that we understand at least the basics of what's Happening first of all we see that is under Tools 1B 3B which we'll talk about but also we see that it was pull 1.1 million times okay which means this is essentially being used by many many many people and then here we have these tags six to three tags but then we have here this drop- down list that tells us different things first one we have different flavors of this Lama 3.2 we have this 3B which is the latest that's the one we have and then if we want a shorter smaller one is 1B one important to keep in mind also is that depending on the flavor that we get here right you notice that also we have the sizes so depending on the flavor that we have here we can have different sizes so this one 3B is 3 2.0 gigabytes okay so it's not too bad but 1B is 13 GB and latest of course is 2 GB which is this one latest same thing okay and we've seen this before we have this command that we're going to use to run in this case this particular model now if you go down here we have a read me tells a little bit more about this model important for us to read and then we have the sizes so 3B parameters which is default this says here the 3B model outperforms the Jamma 2 2.6 B and the 5 3.5 Min models on tasks such as following instructions summarization prompt rewriting tool use but what does this really mean so I want you to look at this as a guide because again we go back to the whole point of Ama is that we have different models that we can use and us as developers or as people who are wanting to use these models is that we need to find something that works for us this is why it's important for you to always think about testing different models until you find something that works for you what works for me in a situation X Y and Z it's not obviously going to be what's going to work for you in your own situation so that is something to keep in mind always all right so it tells us here the comparison that for 3B parameter this size here it's really good at following instructions summarization prompt rewriting and Tool use so use tools or function calling and so forth now when it comes to 1B parameter this is a smaller version of 3.2 it says here the model is compatitive with other 1 through 3B parameter models its use cases include personal information management multilingual knowledge retrieval rewriting tasks running locally on edge okay so if you want to pull Lama 3.2 1B then you would run this so you can imagine if you want something that will be good for this use case obviously you will use Lama 3.2 1B and let's go ahead I'm going to show you how to do this so we can run or Lama run Lama 3.2 to pull down to get this Lama 3.2 1B so I'm going to copy this go back to our terminal just paste that actually I should copy the whole thing and paste it so run Lama 32 1B so this will download this particular subset of model this model so hit enter you can see it's pulling down manifest it's pulling everything in what may take a little bit depending on on this size remember we're actually downloading locally so that means it will take up some space farewell so now you can see that we have installed Lama 3 1B so if I were to go ahead and say for slash again show info you can see voila it's now we're now using architecture Lama of course the same thing parameters is 1 2 B which is exactly different than the full-fledged Lama 3.2 so it's a little smaller okay and context length and all that information so we can go and ask question how old is the universe like this and it's going to go ahead and do the same thing but because we know from Reading here we know that this particular one here is really good at writing tasks running locally on edge multilingual knowledge retrievals so I can ask things like as an example how do you say hello I am fine in Tai let's see okay so it was really good this is just a very simplistic uh test here so again you can see the things you can do you can pull in different large language models to see what's going on now the other thing I can do here I can say I'm going to just say buy just to get out of here and still here I can say AMA and I can say list so this command here is going to list all of the models that have been download downloaded locally look at this now you can see we have this Lama 3.2 1B this is the latest one okay it says exactly when this was downloaded and of course I have a few others that I've done loaded a while ago so L 32 latest time ago I have this embedding large as well which we'll talk about later very good so here it shows everything that has been downloaded in terms of a list of all of the models let's look at parameters and do a quick Deep dive uh so that we understand a little bit more about the information that comes with models so we're going to learn what are parameters as well as what is that they really mean right so when we say show info that command we saw this we have this model architecture llama parameters of course 3.2b context length embedding length quantization and so forth so what do all of these mean let's start with the first one so the first one is in this these llama architecture here first of all the architecture side of thing that means it was architected it's a llama large language model meta AI that means they are the ones who created it matter Facebook and also that means that these models were designed with one thing in mind which is efficiency they were designed to be extremely efficient which means they are strong when it comes to performing even at smaller scales compared of course to other large models out there so they're very efficient and perform really well now when we look at then the parameters side of things it says here 3.2b and we saw that sometimes it fluctuates to 1.2 or3 or 1 and so forth different numbers these are the internal weights and biases that the model learns during training but what they do really is that they determined essentially how the model processes input data and how it generates output because that's the whole point okay now when we say 32b for instance what does that mean well that stands for 3.2 billion parameters now you can imagine even if you don't understand exactly what those means that means if you have 3.2 billion parameters in this case these weights and biases everything neurons and nodes and everything that means you have a lot inside of this neural neural network which means there's a lot of information that can be passed around the relationships and so forth which in terms mean that this model the the more billions or the more parameters it has which means has more connections and more interactivity inside that means the more accurate it is when it comes to getting the results now it's important to understand also that the number of parameters does reflect the complexity and the capacity of the model as explained but there's also what we call a tradeoff which means that more parameters can improve performance of course but it require more computational resources so if you have a large language model that is 3B or 5B or 7B or 8B well that means it's going to be amazing in terms of performance but also means it is going to require a large amount of computational resources so when we have something like 32b this kind of strikes the balance between per performance and resource consumption so let's summarize this simply when we talk about parameters talk about 3B or 2B or 10p or 7p and so forth these are numbers inside a neural network that it adjusts to learn how to turn inputs into correct outputs so the largest number the more the better in this case but we have drawbacks in that you also need uh a lot of computational resources to run it so next we have the context length so this number refers to the maximum number of tokens which essentially are pieces of text that the large language model can ingest in a single input so when we have something like 131,072 this is an exceptionally long context length what that means is that it can handle very long documents capturing dependencies across large large spans of text which is really good that means you can take big large books and article lengthy articles and extensive conversations and it can deal with it with no problem when we talk about the embedding length we're talking about the size of the vector representation for each token in the input text so when we say 372 what we're saying is that we have 372 dimensions in the embedding space so the larger number again the more Dimensions we have which means the more relations you're going to have in this Vector space so what does that mean well that means that we have what we call the semantic richness which means higher dimensional embeddings can obviously capture more nuanced meanings and relationships between words when it comes to a large language model then that means this will reflect the model's ability to understand very complex language patterns so the large ler we have this High dimensional the more the model is going to understand complex language patterns now there are some implications again is that we have this competition load so larger embeddings increases of course the compettition requirements and also if we have that that's going to improve the model's ability to generate contextually relevant and coherent responses okay and the last one we have here is quantization now there's books and we can spend hours and hours talking about this but in general quantization essentially is a technique used to reduce the size of a neural network model by in this case reducing the Precision of its weights this number indicates that the model's weights are quantized or quantized to four bits so translating essentially we just saying we now have a smaller model and faster processing and lower memory usage so now we have a more efficient um model so going back to our Lama 3.2 model page here to see more information now you understand what 3B means 1B means and the implications and so forth and one thing you will realize also is that at the bottom we have what we call benchmarks now I don't really trust a lot of these benchmarks because anybody can inflate B the benchmarks or deflate them to follow certain agenda but nonetheless it's nice to look at and see The Benchmark but one thing I want to show you here is the implication of the sizes the parameters if I go back perhaps and let's go back to models here real quick and let's look for something different let's look for Lama 3.1 you can see with Lama 3.1 you even have 8B 70b 45b let's click on 405b well let's look at this one you can see that if we go to 405b that's 229 GB of space you have to have in your hard dis that's a lot and even if you're able to have that internally locally that that means you also have to have the computational capacity for you to be able to run these models so this is something to keep in mind you could have the capacity of having 229 gabyt locally but will you have the capacity of the computational resources that are needed to run this now keep in mind as you learn now this is probably one of the best models versions right because it has everything it's large billions and billions of of nodes and neurons and everything that's something to uh keep in mind and so for things that most of us are able to do want to do 8B even 70b should be totally fine okay just something to keep in mind and as you go through each one of these different models they have different things okay you can see of course we have more information here 45b 7B 8B and so forth as we talked about and they tell us the evaluation and what they're good at when should you use it and all these different informations as well as human evaluation as you see here so this is something to always go ahead and read and perhaps go to uh some links here to read more about it now I want you to always have this inquisitive mindset whenever you're looking for models so that you know exactly what you're getting um and contract that with what you want to accomplish that's how you need to uh go by uh when it comes to using AMA and different models here it's not just one model fits all that's not the idea the idea is that you find something that will work for you okay so models are real fun and you can always um go ahead and test them out now now let's go ahead and run through some commands uh with our Lama that way we are well situated and we understand how to use some of the most important commands Okay Okay so let's go ahead and get started so we know that we always start with AMA we can say AMA list this will list all of the installed models internally locally so you can see we have 32b 32 callon 1B here it's the size and when it was modified and we have other ones that I have here in your case you should probably most likely just have one let's say I want to delete or remove a model I can say AMA remove also I can say AMA help which is going to give me some of the commands that I can use we have serve have create Show run stop pull push list we've seen before PS and RM for remove so let's start with I'm going to go back say AMA list to show the list of all of the models that we have here let's say I want to delete the this one here so I'm going to copy that and I'm going to say clear AMA RM to remove and pass in the model name hit enter and it's going to delete that model now if I go ahead and say AMA list again we should see that we no longer have that model very good and if you want to delete this other one here you can also do like that now if we want to go ahead and pull in a new run we can say AMA and I'm going to say pull and the name of the model as we've seen before so again we can go back to our models website all right AMA Library models and let's say we want to get Jamma okay so I go back here you can see models all these models let's say I want to get something different let's say we want this code Gemma if you click here you can see that we have different flavors let's say I want to be the smaller so you can see we can run this one here I can either run all of this or I can just pull first this one and then run it okay so two ways to do the same thing so I can say AMA pull like that it's going to go ahead and pull our model now remember this is 1. gigabytes and may take a little bit okay so once that is done I can say AMA list we should see that we have code Jamma so I can now run it right so let's go ahead say all Lama run coama so it's going to now run coama so we can interact with it go back here I can say that Co Jamma is a collection of powerful lightweight models that can perform a variety of coding tasks like fill in the middle code completion code generation so forth so let's see we can test it out right can see if this works so I can say for instance write me a python function that returns hello world okay there we go you can see Define function your name return hello world your name and there we go all right very good so you can see that we're able to of course download a new model and test it out so what I can do again I can just say for slash buy to get out of here and then I can say AMA list to see that and I can copy this and remove it so I'm going to say AMA RM to remove that and it's deleted and AMA list again you can see that we no longer have Jemma okay so back to our models here I can go ahead and look at models and imagine that we want to find a model that deals with images or that is able to read an image and tell us what's going on there's a model called lava so lava is a novel endtoend trained large multimodel that combines a vision encoder and funa for general purpose Visual and language understanding so this is is a good candidate for what we call a multimodel model which means is that it's able to deal with images as well as text and so forth and other types okay so we have just this one and then we have this lava Lama 3 so depending on the situation we can read more to figure out which one is the one we should probably look into so let's click on this lava and you can see we have 7B 13B and 34b so you know which one we're going to be using so I'm going to go ahead head and get at least the 7B which is this one here latest or 7B doesn't matter it's about 4.7 gigabytes okay so let's go ahead and pull this one in I'm going to copy that and let's go ahead and just paste it all in and get our lava 7B all right so after a little while you can see that we downloaded a few things here but most importantly we have this 4.1 gab so we have now our model is running and you can see we have our shell I'm going to just say what is your name see what's going to say I don't have a name of course it's just a large language model okay so now let's see what we can do one thing I'm going to do actually is I'm going to move over to a code editor vs code to make this simple okay so I'm just going to say byy for now and then I'm going to open up here to see vs code so I have this flower1 PNG we're going to use this with of course our lava model to see if it can read this image and tell us what it's all about okay so let me go ahead and open the terminal here real quick and so what I'm going to do first let's go ahead and say AMA I'm going to run lava 7B okay now it's running very good so what I'm going to do now is I'm going to say what is in this image and I'm just going to pass the image name which is flower one. PNG let's see what's going to happen so now it's going to think and tell us exactly what it sees the image shows a bunch of small purple white flowers with yellow centers which appears to be a type of pansy they're growing in what seems like soil or a potting medium surrounded by what looks like green foliage so that's pretty good right for if you go back here and look yeah looks exactly that's exactly what it's describing which is really really awesome now let's test something here I'm going to test to see if this model has this history capability meaning it's able to save the conversation for context I'm going to say and now write me a short poem about the about that let's see what's going to happen ah there we go so it was able to look look at that a purple and white with yellow Hearts Define they add A Touch of Beauty to the world around little patch and so forth so it knows now we know if we're testing that this model is able to save the context the history of the things that we've been asking uh the context of our conversation tell me more about those flowers let's see what it's going to say okay there we go it knows exactly what flowers we're talking about which is what we had here okay I can ask can you tell me where they grow best and keep in mind again this is all local large language model that we running we don't have to go and send request to a network somewhere it's all local very good so pansies are native to the Mediterranean region and all that great stuff very good so we see that it is indeed working so we're able to pull in a new large language model in this case lava which is a multimodel model which allows us to deal with text as well with images and so forth and we ask it to tell us what it sees right in this image here and it was able to give us the description of the image and we ask some follow-up questions about that image and it works so I've changed to AMA run Lama 3.2 model right now so I can do it again you can see since it's loaded then we can see that we are able to go to the shell so what I want to be able to do is show you that we can also do many many different things here right so because we are running on a large language model it's a model that does a lot of things I can perhaps say I have a sentence that I'm not sure the sentiment of that sentence right I can say tell me what is the sentiment of the following sentence I not willing to pay you back let's see what's going to happen okay again it's very verbose which is okay but essentially says that the sentiment of the sentence I am not willing to pay you back is negative and confrontational it implies that the speaker is unwilling or unable to repay a debt all right so this is really good now one thing we can do I can also say can you please be less verbos okay there we go so the beauty here is that you're talking or you're interacting with a large language model and you can actually prompt it to do what you want it to do in this case I told it to always be prompt to always be less verbos at least in this case and you can see says the sentiment of I am not willing to pay your back is negative and confrontational it implies resentment defensiveness and obligation aversion okay now the beauty here is also we can modify or in this case customize our model because we can actually add certain pieces of metadata to the model that cater to what we want it to be like what I mean by that is that we can actually create a file here right click I'm going to click here and this is what we call a model file so it has to be something like this model file no extension whatsoever and inside of this file file this is where we are going to add a few lines of text code essentially so at the top here I'm going to say all caps say from because we are modifying it from a different from a base model it's going to be from Lama 3.2 in this case if you have something different you add that and then here is where we're going to set a few things so we can set a lot of things but now I'm going to show you how to set in this case the temperature what is a temperature temperature is what allows the model to be more creative or more direct and matter of fact so the higher the number in this case from 0 to one the higher the number closer to one the more elaborate the more um creative the model is going to be okay so I can change to 0 point three for instance if I want it to be less creative and then I can add for instance the system message so this is just the prompt right that it needs to know of so in this case here put that into let's say triple quotes like that to say inside here we can put text a very smart assistant who answers questions succintly and informatively okay something like this so this is our model file which is going to allow us to modify or customize our model okay so we can add more parameters here more things to Aid our model but this is okay for now so how do we do this now to make it so that our model indeed will comply with what we put together here in this model file well it's very simple all we have to do now I'm going to let's go say byy real quick here all we have to do now is we need to use the create command from AMA to create some sort of a new version of our model which is going to be specified by this model file very easy really so I'm going to say AMA and then say create and I can give it a name just say James okay whatever you want and then we're going to say f to say to the file it's going to be under the model file notice the model file is actually the same level here so I can just go ahead and that so if I hit enter what's going to happen now let's say enter okay so says success you can see that it went ahead and transferred model data so using the layers and everything in the background and so now if I save for instance list you can see that we have this James so it really created a replica of the main model and now this is going to be different from the Lama 3 3.2 right because it will have a little bit more of a modified customized piece to it very good so now I can use Mario or James I should say to ask questions so look now I can say orama first run James look at that and we should run James how beautiful is that so look what will happen I can say what is your name look what's going to happen my name is James and look how suc it is it goes straight to tell to answer what needs to be answered are you smart let's see I designed to process and provide accurate information quickly and efficiently making me highly knowledgeable on a wide range of topics and all of that comes from this because we said that your assistant that was very smart ask answer questions suly and informatively very good very good you the power things you can do right so now I can ask questions let's see let's say tell me about all tell me about the oceans let's see okay so this is pretty good because it's such an open ended question it went ahead there are five oceans gives me all that information oceans play a crucial role in regulating the earth's climate weather patterns and ecosystems they also provide all of this information here okay so it is to the point that's pretty good this was just an example to show you the things you can do you can actually modify customize your model to be and do certain things that you wanted to do this of course was very very simplistic but you can see for the system here we can prompt it even better with more complex information and change temperature and all these different things let's go ahead and just say byy and because we're done let's go ahead and get rid of it so that we save some space so llama RM James okay so Lama list we should not see James and while I'm here let me go ahead and actually get rid of some of these as well so that we have more space okay very good so far we've been using the CLI the command line interface with AMA which is attached with AMA that governs everything in a back end but we can also use the rest API in fact most of the things that we're going to be using later are based on the rest API which means there is an endo that we can hit and run in this case the models so how does that work one thing to keep in mind is that in the back end as you see well you can't quite see here but at the top my bar here I do have this well you probably see this quid AMA but there is this AMA that is running in the back end so that means in the background it's running which means we're able to do all sort of things that we're doing right the all Lama application per se it's running but it's actually being served at an endpoint locally and all of that is being served at Local Host 11434 what does that mean well that means then we can generate a response using the olama rest API because it has it attached to it and it's running in the back end in the background okay so to do so it's very simple all you have to do you have access to all of this we can curl something like this so in this case you can see it's a curl and this is the end point so Local Host 1143 for API gen generate and then dasd and then we pass the payload here so here we're saying the model is going to be Lama 3.2 right and the prompt we passing along it why is the sky blue so if I were to run this or hit enter what will happen is it's going to hit that end point and of course it's going to show me this now this is not very helpful mainly because it just shows a lot of gibberish and there is this stream that's happening but if you look look closely you can see that every time this run extremely it's going to show a certain word in response so combining all these words will be the response so that means then when we write the actual rest API payload we need to also add something else to it to tell it that we don't want it to stream as it is right now so that we just get result what that means now I can let me go back down let's clear so now what we need to pass is this here that says stream false so say we don't want it to stream just give us the response if you hit enter you can see it will take a few moments and then voila we have this model everything all the metadata about the model that we're using in this case is say tell me a fun fact about Portugal and then says here here is one response did you know that the town of obid obid in Portugal is often called the fairy tale Town due to its medieval architecture and picturesque streets right it gives it some other information all right so that is a difference here if we put stream false then we get that if this is not there it assumes that stream is true that's why we get what do you saw earlier now in this case you can see the end point is generate now we can also get the chat with the model the chat end point okay so generate the difference here generate it just goes ahead and predicts what needs to happen as you see just gives us result but we can also pass in the chat endpoint so let me go and clear to do so I have that you will have access to all of this anyway so no worries and there we go we do the same thing curl now the end point here is API for SL chat and then DD and then we pass here the payload so so we pass the model the messages messages plural that's why we have here a list okay so we pass the role it's going to be user and the content is going to say tell me a fun fact about mosm Beek let's go ahead and run this so there we go and now this is a different endpoint it gives us here some here's one fun fact about gorang gorza Peninsula which has one of the largest Coral in the world um I think this is actually not correct they have to remember that sometimes these large lar models are not always correct so there's no such thing as going a peninsula I know this because I'm from there but anyway you can see that it's giving us some results large ler models and are always correct so as always we can also pass more information or more specification to our endpoint in our payload so imagine that we want to for instance we want to request a Json mode we can do so by requesting it by adding Json right so you can see here we are getting the generated API and we have the same thing model prompt now here we even said in our prompt make sure that we want to get the response as Json but also we want to say here as one of the parameters that format it has to be Json to make sure that indeed the large language model aders to this okay let's go ahead and run and you can see doesn't look that great but we want to believe that this is actually a Json okay that is coming in so you can see the curly Bryce is or opening their model and then llama 3 created and all that information and we should have an actual Json but you can see response Day morning Sky color and so forth the beauty here is that if you go to this link here gith habo Lama docs API end points or so many other end points we can go ahead and hit um using the rest API okay you can always come here and look at some of them we can do essentially the same thing we were able to do in our s ey that's the whole point we can do that using the rest API for instance we can copy a model show model information you've seen that before okay you can just curl and then do that so I'm not going to do that you can do that yourself and then this is the result that you get so all these things that we've done before you're going to be able to do them as well using the endpoint API the rest API endpoints we've learned a lot so far there are a lot of things that we've learned about the CLI we learn how to use the CLI of course which is attached to orama to do all sort of things to pull in different models to run them to remove them to even modify the model or in this case customize the model by creating the model file file and then use that to create some sort of a copy or a modified version customized version of that model which is very handy as you see for use cases that you may have okay so a lot that I've thrown at you I hope this is making sense I hope you are practicing and seeing the power and most importantly here remember is that all of that is local you're not having to do anything uh passing something to the network to get anything back in that way which means it's free you're just using your own resources which is the power of AMA so as a quick full summary here AMA as we know is a platform that allows you to run large language models locally which is really awesome the great thing is that it supports various models tailored for different tasks including text generation code generation and multimodel applications so essentially AMA model support these tasks here text generation such as Lama 3 x could be 3.2 3.10 or 3.11 depends Moll and so many others uh we have also code generation one of the example was code Lama okay and multi model application in this case text and images and we saw in this case was lava the lava model now this is just to show you the breath of things or models that ama provides Okay so again your job is really to figure out what models is going to give you the best results for your use case Okay so keep in mind that you always have to test figure out which one will work for you all right so to create large language model applications using AMA we saw that first of all uh we can use large language models that come with Alama because Alama hosts per se all these different large language models we can use now we also learned that there are different ways to interact with AMA and its models so we saw that the main way is through the CLI the command line interface so it's easy straightforward and that's what we've been looking into and then the second way would be in this case to use UI based interface which we're going to look into next so essentially have a user interface where the back and we can put or apply a model AMA model and then we have a nice user interface that users or yourself can use to interact with the model now we've just finished looking at the rest API so this is the base of essentially everything else we're going to be doing after the next UI based interface way of interacting with the models okay so essentially we're able to use rest API curl and then hit the end point and get information that way about generating text or um in this case deleting things deleting models or looking up everything related to our models so essentially the same things that we're able to do using the CLI we have a way of doing that using the API the rest API and later we'll see we're going to use AMA python library now this is where we're going to be able to then use the tools in Python in code because now we have more customization more freedom per se to start building the actual large language models applications that we so want to do okay okay so now let's go ahead and look at the UI based interface so if you go to m thata MST that app as you see here this is what you will see so you can read about it say Lama 3.2 Vapor mode all this great stuff say the easiest way way to use local and online AI models so without Misty painful setup endless configurations confusing UI Docker and all these other things with MTI one app one click setup no Docker no terminal offline and private unique and Powerful feature so that's the reason why I chose this of course you can choose any other that you might find out there that I mentioned so this is what I'm going to be using and you can see there's a lot of logos here saying that it works with uh meta stuff with chat open Ai and many many others so it's really good so you can see Windows Mac and Linux and they do have a user interface so you can see exactly how it will look like so essentially it's going to be like having chat GPT uh but now we are running our own models so click here and I am on Mac of course I'm going to go and go that way if you're on Windows you have the option to do the 64 or 64 CPU only MD or Nvidia if you're Mac you have apple silicon or Intel chip if you're Linux of course you have these flavors as well so pick the one that works best for you so I'm on Mac I'm going to go to Apple silicon like that so it's going to go ahead and download okay so it's now downloaded I'm go let's go ahead and open it and I'm going to double click to start the installation so I'm going to go ahead and drop it there very good and let me go ahead and open it real quick okay so I'm going to say open all right and there you have it now once you open it this should happen and the beauty here is that you can see how would you like to get started you can set up locally AI I remote modeles provided and so forth but if you look down here look at this Gama get started quickly using AMA models all right and even found it under users meama and all the models they found it locally because it detected that we have Ama installed in our in our uh on our machine so I'm going to go ahead and say continue down here okay that's it just one click and we are done and you can see here at the bottom here make see I can make this larger yeah I can make this larger that's very good okay at the bottom here you can click smaller you can click you can see we have different levels or different models we have lava 7B which you remember and I have Lama 3.2 all right because those are the ones that we have installed at least I have installed locally if you have more than one then you're going to see all of them sure here and this is beautiful because we didn't have to do anything just one click indeed like they promised and we are there so let me choose the Lama 3.2 and the moment you do that that's it and you can just start chatting just like that I'm going to say how old are you just silly to see what's going to say so this is being powered Again by our own model so I was released to the public in 2023 very good can you tell me a funny short story and just like that look how fast this is one day a man walked into a library and asked the librarian do you have any books on puff loves dogs and scroller cats scroll danger I think that's what you say the libran replied it rings a bell but I'm not sure if it's hair or not okay that's very cool so we have that so you can start talking you can start chatting with this long large language model and if I wanted to I can also go and attach a document let's click here and I'm going to add one image that we've seen before drop it there now image is attached let me go back here and I can ask tell me about the image now here's the thing the reason why it's saying this is because the model doesn't CU we're using llama 3.2 it doesn't really know how to deal with the images however if I change here go to Lava 7 and ask the same question tell me about the image Aha and now because lava is a mul model multimodal model it will know how to answer questions about the image there we go now it's working the image shows two purple flowers with yellow centers okay very good so it is describing it took a little bit of doing here perhaps it should have reset everything but it's okay you can see that now it is actually working because we're using lava 7 and it will tell me exactly what it sees now I can change to Lama 2 or 3.1 and if I say tell me about the image it's going to give me some issues of course okay very good so it can't do that but the other thing I can do here I can also add let me just delete this I'm going to add a document let's say for instance I'm going to add this document that we've seen before which is the b o i PDF there we go I'm when I say can you tell me about the PDF file okay so now I have some issues here the best way to do this is you go to attach knowledge Stacks so click here and I'm going to say add your first knowledge stack so I'm going to say my tester and the thing is because we are now invoking want to create a rag system we need to have an embedding model so that it can create those embeddings of the PDF file of the document that way it can be saved and then the large language model is able to Converse that way okay so we're going to just use whatever they give us nomic uh embedding test text I'm going to add that it's very good and at this point let's go ahead and add an actual file so I'm going go ahead and drop it again in this case here just drop it like that all right so once you do that you have to hit compose so that it a it's able to pick it up do all the things it needs to do to actually get information from our file okay embeddings and everything say compose so it's composing okay knowledge stack saved and composed successfully you can now use it for chatting very good so let me get out of here and I'm going to go here so click again here and what I want to do here is I want to be able to say click on my tester but this is my knowledge base I want to include in my chat here so make sure you click that and that will what I will do is we'll let this know that indeed we have included that knowledge base which includes all the information about our PDF file so say Give me a summary of the PDF file okay let's uh says there's no PDF file mentioned in our conversation so far the text we discussed earlier was from beneficial ownership and everything so it took a little bit uh because I'm asking PDF it doesn't really know about the PDF because all of that information was actually transformed into text and embeddings and everything for the large language model so I just can say Give me a summary of the document okay there we go so it says the document provide instruction on how to fill out certain items including identifying documents issues a company's images and everything and it is indeed beneficial ownership all of that so we've seen this before I can keep asking what are the penalties for not filing and and there you go it gives me exactly the penalty and everything that will happen if I don't file right I can just say give me the penalties maybe that's a better question perhaps okay that's better because now it's giving me exactly what I need okay based on the text from beneficial ownership information blah blah blah and everything is there failure to comply with beneficial ownership reporting requirements Cil penalty 10,000 fine up to 500,000 and so forth okay what are the deadlines for filing okay so you can see that this is working we're able to converse with our data our own document now the beauty here if you AR haven't realized yet is that all of this again is internal it's our own large language models we can of course go and spin out a different large language model OKAY adding new provider and so forth and we can use interchangeably as you see here and we passed in a knowledge base which means we said here are some documents in this case which is one document and use that to create a knowledge base so a rag system essentially and so that we can chat and ask questions about that knowledge base okay and just like chat GPT we can go ahead and create a new chat we can do all sort of things as you see here the point is not for me to go through Misty thoroughly the point is to show you what's possible to create a user interface or to use a user interface that is guided or is being fueled by our own AMA model how cool is that so what I want you to do is to play around with this and you can see it's just to show you how amazing this is because we have our own box that we can uh pass in sensitive documents and all those things without worrying about prices you know having to call an API anything external put this in a cloud base or having to pay for usage so it's all here and we can use as we see fit so we're able to see all of the ways in which we can interact with and its models so we looked at CLI command line interface and we saw that it's really easy because it's the fastest access to our models it's very easy but as you know it's not scalable in sense that you're not going to build a full-fledged application using that and then we went and looked at the API the rest API which is essentially the same but now we have a different back door per se we we using rest API to pass in certain payloads and get information so we're doing the same thing that we can do with CLI hitting the same functions per se but now we're using different end points with the rest API and we just finished looking at the UI based interface so this is way easier for us to be able to have a UI based interface and actual interface such as chat DBT that way we're able to ask questions uh change manually quickly different models that we may have and start chatting with our models so it's really really easy to put uh together or to have that working using the M that app and of course there are different flavor different tools out there that you can use that will do the same thing right that would give you this UI based interface so I chose MTI because it's just easy as you saw to install and get started so it wasn't about how to use these tools but I was about to give you the knowledge and tools that you can then uh use on your own and explore more okay so now we're going to go to the fun part which is we're going to use now sort of a a backend combination of the API rest API through the python Library the AMA python library because truth be told we want to be able to create local large language model applications using AMA models and so for that we need a way for us to be able to use python this code in this case code or any other language but in this case going to be python to be able to take advantage of these models that ama provides and so that's what we're going to be doing next which is we're going to get started with AMA python Library so we can use code to interact with AMA Models All right so I have this folder here we've seen before called AMA we got a few things here let's get started here simply by using the AMA library but actually I'm going to do the hard way first to show you that we can actually use code to get to the end point just like what we saw with the restful API so real quick so we can see what's going on so let me go ahead and create a new file here so we're going to have access to all of these code so no worry so I'm going to say start one. P1 or py okay and so what we'll do here first actually is I'm going to go ahead and make sure that we have an actual virtual environment for our python project so I'm going to say Python 3 okay like that so we should have a virtual environment there that's very good and let's go ahead and activate it so Source bnv if you're on Windows of course there's a different way to do this activate and voila so now we have our virtual environment AC activate active I should say very good so what is the first thing we're going to do well first of all I'm going to go and import let's say pip install I'm going to install requests real fast here so we have that okay very good because we're going to use that to do what we are looking for it to do all right so I'm going to go ahead and import requests so we have that and also I'm going to import Json so we have that as well okay so I'm going to create a URL here which is going to be the URL where is the end point it's going to be HTTP for our Local Host here so it's not going to be that it is 1 4 34 and in this case I want to go to the generate endpoint like this okay and for that remember we need to pass some payload data when we pass along so I'm going to say data just create a little uh dictionary here and for a dictionary I'm going to pass the model that we need it's not going to be gpt3 or gpt2 we're going to call this llama it's going to be Lama 3. two and make sure that llama is running for this to work always and then I'm going to pass the [Music] prompt I'm going to pass something that says tell me a short story and make it funny like that okay so there we go this is our payload that we're going to pass along using the rest API so I'm going to send the request so I'm going to say response pass in the request. post pass in url and Json and what I want to do here is I want to say stream to true to say I want this to be streamed okay as you will see in a little bit okay maybe this a little bit smaller so you can see everything all right okay so then let's go ahead and check the response first so I'm going to say check the response status so it's going to say if response status is as you see there I already have all these code so I'm not going to Bor you with all of the intricacies I'm going to put it all there okay so what we're doing now is that we're going to check if response code is 200 which means all is good and then we're going to go ahead and start generating thing so we're going to go and iterate over the streaming response because we said the streaming to true as it comes the response that comes in okay and so what we're doing here we're decoding the line and parsing everything until we actually print the generated text as we go through very good so let's go ahead and see if this works I'm going to go ahead and run this make sure that of course the AMA icon is running is out there otherwise this is not going to work so let's go ahead and run let's run this looks like I'm having issues right so I'm need to pass API like that okay my bad that was my problem let's go ahead and give it a try again okay and there we go you can see that is indeed working and it's really really fast as you see here generat text here's a short silly story for you once upon a time there was a chicken blah blah blah and there you have it all right very good so this is indeed working we're able to use code to actually interact with the our llama 3.2 model locally right albe it we are not using the AMA uh python Library but you can see that this is actually working go ahead and play around with this and I'll see you next all right so this was really nice we're able to use the rest API in code here the restful API should sayama restful API in code to interact with Lama 3.2 this is fine but now I'm going to show you how to use the AMA Library the AMA python Library so we can go straight into code we don't have to hit these we don't have to explicitly hit these end points all right let me go ahead and create a new file here let's call this start to.py remember you will have access to all this code so do not worry okay so the first thing we need to do here of course is to make sure that we import or we get the right dependency so going to say pip install we need to install or Lama as such very simple and there we go now once we have a Lama we can start working at right so first let's go ahead and import AMA there we go and real fast here I'm going to show you how simple this is so the same thing we did before with the CLI and even with the rest API we can do the same thing here using this dependency right using this SDK perite so now I can say put inside of response and I'm going to say all Lama and I can say list so this function here as in name imply is going to list list it should list all of the you guess it all of the things that we have in this case all of the models so let's go ahead and save and give it a quick run run so real quick okay I ran and you can see that we have this Json that comes up it says llama 7 oh name lava 7 and that is the model and I should have gives all that information and I should also have the Lama 3.2 and some other things all right this is very cool very good all right very good so you can imagine we can say AMA list we can also say AMA let's say chat chat response client create and delete embed and all these other different things right so that's very very exciting I just want to show you that I'm going to just call comment that out so we don't have a lot of things here all right so let's go ahead and hit the chat endpoint or in this case the chat API well as you know it's very simple so let's go ahead and get started here all right so I'm going to say res we can put anywhere orama chat so. chat and then I'm going to pass a few things and you can see that if you have over it says it respects at least to have the model name so the model I'm going to say llama 3.2 okay just add the one that you have and then here because it's chat I'm going to pass messages okay so this comes as a list and I'm going to pass the role as a user and the content is going to say something I can say something different that perhaps why is this sky blue something like this okay so now I can actually print what comes back in this case from our chat we pass the model and the messages could be more than one message okay we can also say uh for our role here another one that says let me just put like that I can say the context pass the context pass all different things that I may want to pass okay but so far this is okay let's go ahead and see how this works I'm going to go ahead and just run from here okay to a little bit and you can see we have the results so you can see the model and everything but most importantly we have the content says content is the sky appears and everything but to make it even better I can just go ahead and get the content so let's go to result uh let's say I think I have to go to messages and they get the content like that okay let's go ahead and run again all not messages message okay all right and there you go so this guy appears blue because of phenomenom because of phenomenon called scattering and all of that great stuff so we have all the information here now you noticed before when we just look at showing the entire payload it comes in with a lot information about the model when it was created of course the content the role and all that information at the bottom we have some other pieces of data metadata so done true total duration how long it took and low duration prompt evaluation and uh also evaluation count prompt evaluation duration all these little things that we may want to keep track of all right so just like that ladies and gentle ladies and gentlemen we're able to use the chat endpoint here using uh the ol Lama python Library so go ahead and play around with this and see what we can do because this is the beginning of a very exciting thing I think now one thing you can also do you should know this is that we can pass other things in our chat function here right see we have model messages tool stream so we can say we want this to be streamed and format as well very cool so what you can do I'm going to give another example here for streaming let me go ahead and comment this out so we have that for streaming it's essentially the same thing notice I passing messages we're all user now I have a different question why is the ocean so salty and I can say stream to true because I want it to be streamed when I do that then whenever I want to print that out I have to put that through a for Loop or a loop of some sort that way we can get all these pieces that are being streamed so we can see them being flashed out in our command line okay so let's go ahead and run real quick so you can see just run like this takes a second and there you have it okay so there we go if you want to have the this capability of streaming and showing those messages as they come in this is how you would do using Code all right so go ahead and play around perhap add different messages or different questions here and see how this behaves and what you can also do you can use a different model whichever model you may have running okay so one thing to keep in mind is that all we've seen now this AMA python Library West DEC I guess I could call that it's all based or designed around the AMA rest API so internally when we call orama that chat internally we're essentially doing what we did before I showed you here so it's hitting this endpoint URL and passing in the API in this case go to chat or generate or create and so forth it's just like an AB it's just an abstracted way of hitting this end point so we don't have to explicit L do this so I made sure to put it here so that you have that okay now we can hit now we can use another now we can also use the same now we can go and use a different function or end point for instance like generate if want to generate something right we can do that what I mean by that is I can say for instance AMA generate and pass that and pass that prompt I can even pass all of that I don't think I can okay I don't need to pass any of that so we can also just generate a response instead of chatting as such so nothing new here I'm just going to leave it as is so you can see the other thing we can do is we can say for instance we can show by saying AMA let's just print and say AMA and then that show and we want to show what want to show anything about llama three like that that two okay let's go ahead and see and there you go after a few moments you can see it tells everything we need to know about our model OKAY a lot of information that's for sure okay there we go next thing we can do is we can actually use the model file as we did before but all in code to create a separate model that has Specific Instructions so it's very simple I have some parts of the code here so we create in this case the model file we don't have the actual model file but we can put all in line is here as you see here and the other thing I can do is I can pass the temperature here let's go back to this one to see how you do that just copy this and pass temperature 0. 1 for instance and then all we need to do now that we have this information is as we saw before we are going to go ahead and create the actual model so and then we're going to pass the new name know it all and then pass the model file which is this one here so we can make this more robust if we want for instance we can say you are very very suce and informative something like that all right okay so now that we have created our new know it all so we can go ahead and generate something right use the generate message or generate function so I'm going to put into a variable so AMA generate and I'm going to pass the model that I'm going to be using yes going to be know it all this one here same name and The Prompt there so I can just say for instance sure that's fine okay and we can go ahead and print the result need to go into response that's how it comes as okay and there we have it so let's go ahead and give it a run and see so it's generating creating everything and some sometime soon we should have there we go the ocean salinity is primarily due to the Earth's water cycle very good it looks great and it works so now if I come here and just say AMA list we should see that we do have this new know-it-all latest which is two gabes was created about 20 seconds ago all right very good so these are are the things that we've done before using the CLI as well as using the rest API but now we're using the AMA we're using the AMA python library osdk to do the same thing because I just want to show you what's possible so this is more flexible as you see because now we actually use encode and the power of the rest API in the back end to create very simple applications of course this is just to show you what's possible and soon enough we're going to be able to create those large language model applications that are based on locally using AMA models so once we done that we can of course delete models okay so can say all delete know it all and if I run this it's going to go ahead and run again and go ahead and delete our friend know it all okay so I have the response again but most importantly if I go back and list we should see that we no longer have no at all okay so go ahead and play around with this and uh I'll see you later okay so now that you have all the tools you understand what Lama is what problem comes to solve and how to actually build a simple uh useful applications using AMA AI based applications using AMA now it's time for us to dive in and start build building real world use cases using and let's go ahead and get started all right so now it's time for us to start building something useful things that are actually useful so the first thing we're going to do here is we're going to build a grocery list organizer okay or categorizer so the idea is you have for instance a grocery list file text file that has all these different items okay and so what we want to do is we're going to use the line 3.2 the model with Allama of course and see if we can recreate this entire grocer list and actually create a new grocery list from this but categorized into categories so for apples and all these things could be produce and then we have snacks and so forth okay that's what we're going to do so you will have access to all this code of course but you notice that I now I have this data folder here which will have this grocery list that here with all of these items and so let's go ahead and create a new file here called categorizer py and this is where we're going to start playing around first thing going ahead and import AMA and then we're going to import OS because we are going to interact with the directories and finding things and at the top we're going to create I'm going to just add this model so we can use it so it's going to be be llama 3.2 okay so let's go ahead and set up the paths and I already have them set up so let me go ahead and get that so essentially for input path it's going to be data grocery list so essentially I'm going to data get this grocery list and output is going to be data and it's going to be called categorize grocery list at txt so it's going to be under data again once all is done all right so the first thing is we're going to go ahead and check paths if the input file Exist by using OS exist and pass this input file path like that and I'm going to print input file if it's not found right and then we're going to get out of there and then we're going to read these ancored and then we're going to read the uncategorized grocery items from the input file to do so we just open the file through the input file the path and read as F and then we take all those items we read everything strip everything into our items so these items now should have all of the items from our grocery list text file and as we know to direct our large language model we need to pass a prompt so to say this is what you need to do this is how you're going to be doing it right right so kind of prompted to give it some directions so it knows not to ve off somewhere else so for that we need to have this prompt that I already created so there is the prompt so you are an assistant that categorizes and sorts grocery items so we specify exactly what this model does okay here's a list of groceries so items going to be all of the items that we received there please one categorize these items into appropriate categories such as produce Dairy meat Bakery beverage beverages Etc and two sort the items alphabetically within each category so in each category you put every every item into make sure you sort um alphabetically and three present the categorized list in a clear and organized manner using bullet points or numbering that's it so we can make this more complicated as we wish but this should be fine all right so now we have the prompt we have of course now we have the file we have all of the items inside of this variable here from the text file and we have the prompt okay we're passing in that information through the prompt so we can use that prompt then to send the prompt and get the response okay so now what we do here put inside of a try catch essentially so we are generating we're using AMA generate we pass in the model and the model remember is what we set up here okay and then we pass in the prompt remember the prompt will have the items and of course the prompt to make sure that the large language models knows what to do and then we have generated a response or text we get that information if we have something or we just get nothing okay return nothing okay so now we are writing the categorized list to the output file because we want to get that what I can do also here is I can print real quick here the generated text so which is going to be the actual response so we can do that here just for fun I can just say generated text or generated or let's say categorized list and so then we write into a file and that's it and we categorize grocery list has has been saved and we show the output file the path that's it all right okay that's that is pretty much it so now we're going to go ahead and run this so I'm going to open this different ways of running just run here or you can write the command for running but that's okay so let's go ahead and what's what's going to happen so things are happening in the background and voila you can see that we see categorize list has been saved data categorize list and there it is but also we wanted to show it here look at this categorize list after categorizing and sorting gral items I present to you the following list so produce apples all of these items that seems correct we have dairy cheese eggs milk and yogurt very nicely done meat Seafood chicken ground beef salmon shrimp and sausages Bakery bread flour pasta rice Pantry almonds and all of these other items beverages that sounds great Frozen ice cream snacks chips chocolate and everything and now if I go to see as I said we have here the categorized grocery list if I click it's going to be exactly the same where we saw printed out there but now it is indeed a txt file now this is very small and very simple but I hope it's showing you the things that you can do and keep in mind that all of this is locally we don't have to pay for chat DBT or open API or anything else this is something that is local to us and keep in mind we're using llama 3.2 but if you after doing some testing and realize that for whatever you trying to do there's another large language model on another a model that will fit with what you're trying to do then obviously it's easy to swap that large language model to use that that's the beauty because remember here I'm saying we're using Lama 3.1 but I can go ahead and pull another large language model another model to use and nothing will change all will change is changing this to a different model that is the beauty of a Lama all right so what I want you to do is perhaps to make this even better or maybe you have some ideas that you may want to implement here because you have the large language model and you have some data maybe you have a list of uh something or a text that has something you want to summarize it you want to see what is the sentiment of that text and so forth there's so many things that you can do all of that because we now have this capability through AMA of picking and choose whichever model that we want to use incredible all right play around with this and I'll see you next so now it's time for us to look at something a little bit more complex something that you will find in the real world we which is building rack systems with AMA so with AMA of course we can build more complex large language model applications as I have mentioned so rag what is this thing rag stands for retrieval augmented generation so essentially is a way for us to converse or to talk or to chat with our own documents our own data internally now the thing to keep in mind is that large language models are actually very limited in terms of knowledge so they're really bombarded with a lot of different information textual audio and everything that's how they were trained on but they don't know what they don't know meaning they only know what they were trained on and so it makes it really difficult for us to build applications that are catered or that are customized to our own needs so rag solves that problem because now instead of the large language models to know only what it knows we can actually use it because it's really good at predicting things at summarizing and kind of brainstorming and getting pieces and pieces and putting together and get a response we can use that to solve this problem by injecting quote unquote injecting our own documents so that is one problem that it solves but also we're solving the issue of hallucination because any large language models you've encountered it makes stuff up because it knows a lot but if you ask questions sometimes just doesn't know but it doesn't say doesn't know it just says things that makes no sense that may seem true but they're false so this is what we're call hallucination that's what rag comes to help large language models and in turn help us when building rag systems now let's go and look have a deep dive into rag I think this is important especially for those of us who don't really know what rag is or or knew new to rag even if you already know what rag is I will just go real fast so you understand what really happens an overview so the idea is very simple is that we have these documents right so PDF files text files whatever and those are actually passed through this processing of parsing and pre-processing them what that means is that all of those are chapped into small tiny chunks documents okay and those in turn are then put through an embedding model what that does is it takes this textual information these documents chopped up and now they're going to be converted into a vector space into Vector into a number representation of those chunked documents that's what embeddings mean essentially and once that happens the vectorization of that that's what happens right it's a different format now of this data and that is saved into a vector database okay so all of this is what we call indexing this whole process we call it indexing what happens then is that a user comes in with a question query so that query say how old is is the universe for instance is also taken in and because of this whole ecosystem now is into um is transformed into a vectorized system that also has to be embedded so the query is also embedded into a model uses embedding model to embed that to vectorize this query and so that is indeed what it is actually either passed onto the vector database or it's used for searching because now you can imagine if we are searching using text and this realm on this other side here it's a vector database or vector store is saving everything mostly in Vector we need to have this correspondence right between we have the question but it has to be transformed into the same format as what we have here so that way it's easier to do this searching and so what happens now is that these systems have what we call retrieval um capabilities so they retrieve the pieces that are needed for answering the question meaning if the query is about how old is universe is going to find all the pieces all the documents inside of the vector store that perhaps are close to that question right and packages are all up and that's what's passed along with the prompt right the documents these pieces that we retrieved we call them relevant documents and the query itself and that is indeed what is passed through the large language model the model so that the large language model model has this contextual idea Sense on how to answer that question so it generates an answer which then we get a response so in nutshell ladies and gentlemen that is what rag is and is very powerful for the reasons that I've just shown you here now what do rag systems need as you saw well they need a few things first of all they need a large language model because that is essentially what drives most of the things essentially because we get all that information the documents pieces of documents related documents for what we are trying to ask for and the prompt and everything that's what it takes and the large language model has so much knowledge but also has these uh reasoning capabilities to know how to package it all up and answer that question coherently and also we need this document Corpus so essentially it's the knowledge base what we passing through the document embeddings is very important for the reasons I saw there because you take these documents you break them down into embeddings small pieces of vectors and if we need somewhere to save those vectors these are not just normal databases this what we call Vector databases these are vector stores so there are many out there uh we have phas Pinacle uh pine cone and chroma DB and then we need to have this retrieval mechanism and most Vector databases have in them some retrieval mechanism to retrieve retrieve what needs to be retrieved to then be passed along Downstream when we want to build large language model applications we can Brute Force everything and do everything our own on our own but it's always nice to have tools that kind of help us and Abstract out all the complexities of building large language model applications and so that's when we use tools such as Lang chain so it's a tool that makes it really really easy to deal with large language models and build robust large language model applications Lang chain is a an amazing framework actually and there's a lot of things that it does but one of the things that it does well is that it's able to load and parse documents easily we can use classes and wrappers to split documents and chunk them up um generate embeddings and many many many other things okay so it provides this unified abstraction for working with large language models and building llm application so tools are always welcome okay so I thought probably would be a good idea to look into Vector store and embeddings as an overview now it says Here length chain but essentially this is just in general how things work when it comes to Vector store embeddings large language models how to build a rack system and how everything actually works in the back end okay so just relax and let's go through this okay all right so this is the idea the main idea really as we saw before is that there's got to be some way of loading documents so we need to load the documents that come in in various forms Sometimes they come in as URL PDF files text file databases and so forth all of that is pulled together through as documents okay this is document loading and then goes through the process of splitting those documents as we saw and then once these are split of course go through the process of embeddings and everything and that is put into storage right this is a vector space or factor store but it has to have some retrieval as we saw because this is a way of getting information related to the question the query that comes in okay so the retriever goes through the vector store finding things are related to the question and then get relevant splits relevant documents and that is all what's put together with the prompt and large language model and pieces of documents and then large language model is able ble to give us the answer the result that's what we just saw so dis spitting what happens we go through the process of splitting and the splitting documents or the chunks are then passed through the embedding model so embedding model embeds creates this factorized or this number system or number format representation of those texts or those pieces of information Okay so so it looks something like this literally the text is converted into vector embeddings and looks something like that okay so embedding Vector keeps the content and the meaning of the text intact now this text with so the ideas that DET Texs with similar content and meaning will have similar vectors and so if you look at this diagram here this di this diagram hopefully puts everything into perspective we said that text with simp similar content and meaning will have similar vectors now remember that in this Vector space High dimensional space there's a lot of things going on lot of high dimension right so this is very simplified so that means then if you look at cat and kitty in this Vector space in this High dimensional space you can see that they are really close in meaning because a cat and a kitty they're essentially the same thing but a cat and run not the same thing right and so that is the representation but if you look at the actual representation in the vector space vectors as vectors numbers you will see something similar like this because cat and kitty are pretty much the same in terms of the semantic demeaning they will have some sort of similar numbers at some somewhere okay that's STA and that is actually what is stored into a vector database these numbers these vectors okay those are embeded things now the great thing is that Vector databases can be used in various cases now you can use all of this in searching for instance If You're Building A system that wants to find relevant uh results to the query string recommendation systems for instance finding items with related text strings uh that are recommended and classification to classify strings uh by most relevant and similar labels okay so this is some these are some use cases that are used when we talk about Vector stores and Vector databases and vectors embeddings and so forth now the whole embedding process works as follows number one of course we have documents that are split into chunks of text we saw this and then those are transformed into embeddings which then are added or saved as embeddings into a vector database now the great thing here is that most Vector databases they not only save the embedding Vector they also embed or save the original text split so on one side we're going to have the actual embedding Vector as you see here and on other side the corresponding original text so that's how most Vector databases store things so this whole process is extremely important because when we then are ready to query the vector store for embeddings in this case this is what happens first thing is we have here as you see let's put it all together we have the question this is the indexing part of thing the question goes through the embed process because it has to be transformed into embedding so that the whole system understands right and then what happens is that we go through the process of indexing here so it knows essentially to look for what is going to be similar to this embed which is part of this question so search and compare all of the entries in the vector store and then it picks out the most similar entry and once those are picked those most similar entries those are the ones that are packaged up with everything through the large language model so the large language model what it will do is going to take the most similar entry found and pass them into the to with the query the question the pieces of documents and everything to then get the answer the result so that how it all works so I wanted to show you this so that you have an idea on how Vector store and the large language model how everything comes together and rack systems so now that we understand rack systems we understand how embeddings large language model how this whole thing comes together this is the simple rack system handson or at least the overview of what we are going to be putting together so the idea here is very simple is that we're going to use Lang chain to pass through the PDF file to load that and then use l chains character text splitter to split that into small chunks as we have discussed and then we're going to use AMA embeddings this is the important part AMA also has a model for embeddings that is going to allow us to embed all of this information and put that into a chroma DB database and then what will happen is that we're going to pass in a query and we're going to use again Lang chains multi-query retrieve that will be able to do all things that it needs to do to transform this query into embeddings of course and search the chroma database with all those embeddings and then pull out the uh most similar pieces of information or data or documents and then put it all together relevant docs query and prompt and pass that through a large language model which in this case again you know is going to be Lama 3.2 and of course generate the resp response that we so desperately need so this is a r system now using AMA embeddings and using Lama 3.2 which is part of AMA now key Point here is that for all these embeddings AMA embeddings models and this large L model we can swap these with whatever else that we might want to use and the whole system will still work again I'm repeating myself I know that is the beauty of AMA is that once we have the system set up we can swap the embeddings we can swap the large language model these models with whatever else we want and it will still work okay so this is what we're going to be putting together next all right so first things here I have this B oi PDF we've seen this before so it should have access to all of this anyway it's just these beneficial ownership information report that I found online and that's what we're going to be using for our RX system okay now one thing I've also added here is this requirements. txt so this has all of the requirements all of the things the dependencies that we need for all these thing for all these project that we're going to be working on so I kept it here so that we can run so Al that you have it here that way it's easier you don't have to watch me always go ahead and type things and importing things and so forth so you have I may still do that but you have this work at txt with all the dependencies so the first thing I want to do of course is go ahead and run that real quick so pip install. R requirements txd like that so it's going to go ahead and get all the dependencies that was pretty fast that's that's very nice and we should be good all right very good and next you can see that I have also created this PDF rag. py this is what we're going to be working in so I have a few things that we're going to do here so I'm going to copy and paste in a few things so first we need to ingest the PDF files and then we need to extract text from that PDF file and split into small chunks so essentially the same things that we have been talking about in our presentation and then we're going to send those chunks to embedding model saved embeddings perform similar research retrieve and do all sort of things okay so that's the overview of what needs to be done all right so let's go ahead and get started now the first thing is I'm going to import a few things here so this is from Lang chain Community now this is working now because I installed a Rand requirements TT which included link chain community and other things so important that this happens all right so we getting the unstructured PDF loader and this online pdf loaded here now we may use one over the other but you have both and next what I'm going to do here I'm going to have the doc path and the actual models so I'm the model is going to be Lama 3.2 and the path through document just have one here is data Boi PDF that's what I'm doing okay so let's load the PDF file okay so I use the unstructured PDF loader and pass the doc path which is this one here and then data is going to get all of the loaded information right okay so now I can go ahead and actually print for preview so we see that things are actually working and you know that things are actually working I'm going to print just about 100 items from our content from data let's go ahead and run this fast so in the back end we should be able to do all the things like getting the information and load the document and I'm going to should be able to see soon here something okay very good so we went ahead and showed a few hundred words or 100 parts of the content that comes in in our content data which is the data that we loaded which is our PDF file very good so we see here P beneficial ownership information and that is good so just to test it out to make sure everything is working okay so that was the end of PDF ingestion so we're able to get that PDF next we're going to extract the PDF and do some chunking essentially okay so for that we need a lot of help of course so I'm going to go ahead and get all of the import so what happens here is that first of all we're getting ama ama embeddings this is a wrapper of AMA through L chain that's the beauty of Lang chain because we have a lot of wrapper classes and methods and so forth and then we have this recursive character text splitter which will help us to recursively split our text and then of course we have the chroma DB through Lang train all right so first of all let's go ahead and split things here keep in mind all we're doing here is independent of large language models we're using this is across the board this is how you would use you would do anytime you want to create a rack system all right so we splitting everything the chunk is 1200 so we're saying for each 1,200 chunks we're going to split so we're saying each chunk will have about 1,200 so we're saying each chunk size will have about 1,200 and the overlap is going to be 300 so the greater the overlap the better because that means we are conserving the context okay very good and then chunks we pass this text splitter which should have all that information actually this is all from the data that we loaded from here and then we use text splitter and split the document so now we have those chunks and if you want to see we can go ahead and print things out real quick here so you can see okay so you can see that we have the number of chunks first says here somewhere number of chunks is 42 and we have the actual chunks table of contents and all of that so this is good that means things are working and the beauty of using lank chain is that it adds metadata to all of these pieces you can see now we have this metadata was added called source is going to be data Boi PDF which is really good okay otherwise we will have to do all of that manually okay so we know this is working let me go ahead and comment this out okay now it's time for us to add into our Vector database because we have those chunks and we need to add them but how do we add to Vector database well first we need to do something first we need to create those embeddings if you go to ama if we go to ama.com and go to models you find many many different models one of the models called embeddings let say embeddings you can see that we have this nomic embedding embed text we also have this MX Bay embed large and many others okay we can use whatever want but this is the one we're going to be using so click here and you can see it's called it's a high performing open embedding model with a large token context window which means that means it allows you to put a large amount of text for embeddings to for it to be able to embed okay so this is what we're going to be using for our example here that means we'll have to pull this in code and so let's go ahead and do that first I'm going to go ahead and import AMA and then I'm going to incode pull in this embedding now I already have this so it's just going to go ahead and update I'm just put this in way so you have and then what we need to do is to actually create the vector database and it's very simple all we do we say chroma from documents and pass the documents chunks remember the chunks are here and the embedding now we're using this AMA embeddings and passing the mo the model nomic embed text to generate the embeddings so all of that is paying p through our cha from documents function and of course we collection name we just pass name simple rag that's fine okay all right so continuing let's go ahead and do the retrieval side of things so how do we retrieve things and so forth so first let's go ahead and pass in a few things here now we need to some help with L chain where we can create prompt templates as you see and also way of parsing whatever comes in or goes through this rack system we'll see in a second here so that's why I'm passing importing all of these and while we're here let's go ahead and also import a few other things such as the chat AMA because that's what we're going to be using that model to as our large language model and then now we have this runable pass through this is part of what we're going to see later part of chaining that happens with AMA with L chain we have this multi- quare retriever as you see it's going to help us with a lot of things because we're going to be able to retrieve documents going to be able to give a query and use a large language model to sort of write a set of queries and pick up the best one to pass through the large language model so this is all optimization under the hood okay let's go ahead and set the model that we're going to be using so this is how set model now this is a wrapper or Lama wrapper and we pass the model which is Lama 3 to all right so we have the large language model already now as you know we're going to go ahead and use the simple technique to allow us again to generate multiple questions from one single question and then retrieve documents based on those questions which allows us to get the best of both worlds so this is the query prompt that I'm going to use here so you can see here I'm using the prompt template the reason why is because we can then pass things like input variables it's going to be the question that internally we'll know how to pass around all these pieces of data what you can see here the templates say you are an AI language model assistant your task is to generate five different versions of the given user question to retrieve relevant documents from a vector database by generating multiple perspectives on the user question your goal is to help the user overcome some of the limitations of distance based similarity search provide these alternative questions separated by new lines original question and it pass the question which is going to be passed along so this prompt template here it's going to be passed along soon through the Retriever and it will know how to deal with all of that this is beautiful because we're using lank chain and it does everything automatically for us all right so now let's go ahead and actually create our retriever so our retriever here we're going to use the multi-query retriever from large langage model and we pass a few things okay we have the vector database so we need of course the vector database that we created here and then we're going to transform it into a retriever so retriever will know how to retrieve things from database it's going to return something and we need to pass the large language model because it needs to know how to take that item all those information retrieved and how to process that and with that we also need the prompt so you remember in the diagram when it comes to once we have everything set up we retrieve information we retrieve pieces in this case we're retrieving pieces that are similar to The query that we're passing along which is inside of a prompt and then we need the large language model which is going to drive everything it's going to use all that information compact everything and be able to answer questions all right very good and next we're going to use the create the rag prompt so let's go ahead and do that real quick so essentially it's another prompt that we can use this is our question that we pass along okay rag prompt this is just another template we're going to pass says answer the question based only on the following context so we're going to pass the context and the actual questions this context and everything is going to passed along as you will see later right internally with blank chain okay so once we have that we need to create an actual chat prompt from all of that so we use chat prompt from template and pass this template here so these wrappers here internally will know how to pass in this context how to pull in the question and so forth cuz these come in as just variables okay and once we done that that's when we then put all of that into a chain which is going to go through the process of pulling in all the all the pieces that we put together so that we can get the result so essentially what it means what is happening here is that we passed the context we know the context is going to be the retriever retriever will know as you saw here how to get things from database knows the large L metal model that's going to be driving everything it also knows the prompt which we created here which has a few input variables we're passing along so we're putting all together and then we have the question runnable pass through let's just say just pass through don't mind much and then we have here a chain to pass in a prompt and then we need the large language model again and then at the end once we have the result we're going to pass that through a string output parsel essentially to parse everything out to make everything clean and nice all that is done we can just start asking questions so I'm going to comment this out let's start with the main question at the top here say what is the document about for instance let's go ahead and run this so this is it this is our fullon rag system let's go ahead and run and see if this works okay so done loading done splitting document done adding to Vector database very good okay it says here the question the answer says the document appears to be a set of instruction for reporting beneficial ownership information especially the Boi filing instructions provide guidance and blah blah blah very good that's exactly right and so now we can pass questions so that's one question let's see if I go and comment this out I want this second on what are the main points as a business owner I should be aware of let's go ahead and run again now this is very inefficient because in a way it goes back and does the splitting and adding everything but that's okay just to show you how things are done okay look at this as a business owner you should be aware of the following main points and gives us all the points and let me do another one here okay based on provided text here's how to report beneficial ownership information Boi to finsen complete filing and there we go all right so it is indeed working we were able to put together a full rag system be it we could improve improve in terms of repetition of you know splitting into all the things that's okay but you can see that it this works we use large language model in this case one large language model from our own in this case ol Lama uh llama 3.2 and then we used embeddings also from all Lama just like that again we can just split around we can change the models that we're using and leave everything as is and it should work very good very good indeed so I hope you're seeing uh the benefits here number one again remember is that we don't pay anything we can run this as many times as we want we're not paying anything for any hits to the API in this case open AI or anywhere else because this is local which is really really awesome if you ask me so I hope this is helpful and uh take this code and change it around make it your own maybe you have a different PDF file that you want to uh converse with or whatever else that you need so go ahead and play around this is your code you have access to it and so just just do it all right so we finished this PDF rag it works fine and so I decided actually to show you here I have the other piece of code which is exactly same that's the same thing but I call this PDF rag clean so essentially it's the same thing as what we've seen it's just that it's a little bit cleaner and looks better okay so essentially at the top here we have some configurations and blah blah blah and have this doc path we have this model name so this created constants at the top here and Vector name as well okay so we have a function here called injest PDF it's essentially that we just pass the doc path and it does all the thing that it needs to do we have the split documents function this is how exactly how you should do it right split everything into modules and then we have this create database and it returns a VOR DB and we create Retriever and everything and we're passing along the templates and all of that so essentially like I said what we've seen before but now in a more cleaner way and then we have this create chain which creates the chain for us as we saw before the code is still the same and then we have this main so now we just call for instance get the data by calling injust PDF and then we get the chunks VOR DB instantiation the llm instantiation and Retriever and then we have to check and then we have our question right so we can add different question here let's go ahead and run this we should see the same thing essentially but just different code which is cleaner okay so it's doing all the things okay so there's a lot of good logging that's happening and voila so at the end response according to instructions this is what we have so nothing out of this world the same thing but this is is way better because it's way organized so you have both and you are set and because it's always nice to have some sort of a user interface I have another version you have access to called PDF Rag streamlit and in this case when we run this we should be having we should be able to have a user interface using streamlet so essentially obviously it's the same code it's just that we have at the bottom here streamlet let look see setting up the title and user input and everything else okay you can look at this code but it's it's not uh out of this world so let's go ahead and run this so I can show you real quick okay there we go so now I can let's see so it's going to go generate response verus running the load Vector DB and in a few moments hopefully we should see an answer okay so to file for beneficial ownership information there we go all that information very good very good indeed and I can say what's the penalty for not filing there we go and it gives us the information all right so there you have it now you have different versions and this is the user interface version that you can see that we are conversing with our rack system with our document so quick break here I just want to let you know that I thank you for being here for learning this awesome tool with me here I do have something for you as a way of me saying thank you for being here with me and I appreciate you watching this video this mini course I have an olama pack that you can download that includes source SCE code code templates and many other things that it's going to be a surprise and you can get that for free obviously you go in the link in the description and you can go and get this AMA starter pack all right okay let's continue all right so the next application that we're going to be building we're going to still use AMA Lama 3.2 but you can always change the model and this application is going to be a full-fledge application that allows us to actually use swarm framework which is is a new open AI framework that allows us to create agents agents that will actually be able to delegate certain tasks to other agents and do different tasks so this is going to be full-fledged application an AI solution application that you can actually use in real world most of the ones that we've been doing you can use in real world of course but this one is something that is actually I would say that it's usable so if you want to get a job usually you have to find somebody who will have that job for you okay and usually you have to go through recruiters and recruiters usually work in the agency and it's a slew of process a lot of people that are involved usually to get you matched with an employer and so in this video I'm going to show you how to take this whole agency with different people working these are recruiters how to actually create AI agents that will do exactly what the real recruiters do these recruitment agencies have a lot of moving parts and one of the things that can be very difficult is that when they need to vet people they actually have to of course read the resumés and they are getting many many of those resumés and have to go through each one of those and contact people and try and trying to figure out their qualifications and how would they match them to an employer what would be a solution well you know this drum roll yes the solution would be AI agents with AI agents they're going to be able to pass along different tasks to other AI agents to do exactly that from extracting information and then analyze the resume and maybe start figure out how to connect or how to match to different employers or different positions and then have a full report with recommendation so that the whole agency knows what is the process that went through to get to that conclusion where X person or X Y and Z people need to be matched to to a certain company and so that is exactly what we're going to be doing in this video I'm going to show you how to use large language model in this case AMA Lama 3.2 to Aid Us in this on top of that we're going to use swarm framework that allows us to create agents AI agents very quickly simply and to the point so let's go ahead and let's go ahead and build a recruitment agency all with AI agents so here's what we're going to be building so here is the user interface so it is indeed a UI recruiter agency so you can go ahead of course and upload things but most importantly you can see we have this about that we click it gives us some about this whole thing now of course here is saying AMA 3.2 the framework swarm framework and all the things so it says here our system uses specialized AI agents to do what well to extract information from rums and analyze candidate profiles and also match with suitable positions screen candidates and then provide details recommendations so this is going to be a full-fledged agency that we're going to be building using code and llama 3.2 okay of course the front end is going to be stream it which is what you see here so the idea is very simple and let me go back to the upload so here what we can do is we can go ahead and upload files now I already have a resume that I'm going to go ahead and just drop it right there so you can imagine now things are going to be happening in a back end so the analyzing of the resumé is happening well first of all different agents are doing what they need to do to get started so the first agent is going to go ahead and and pull information from this PDF file which is a resume and then it's going to pass on to different agents that will analyze and do all sort of things so this is going to take a little bit and at the end the main agent is going to be able to give us recommendations through analysis and there we go we can see that we have now this analysis complete so we have recommendations so so we have analysis I can also close this tab menu there so scale analysis analysis for Janine Nail's resume and gives us sales engineering industrial engineering project manager a management and all these great great stuff so it pulls in all the information from the resume and at the end here you can see recommendation to enhance J Na's profile consider following add more experience develop technical expertise increase Education and Training confidence is 85% wow it gives us the confidence that this person could potentially do well in a certain industry and of course I'll show you that results also have been saved locally but you can see also have other things here we have this job matches it tells us exactly this person matches well 80% in New York for this data scientist position all right and we have the software engineer position and says it the match is 70% and is remote so this is exciting that's exactly what we're going to be building and also we have the screening here screening results gives us a summary of everything qualifications and the percentage uh experience relevance and all of this information all right and of course we have another tab the final recommendation they give us the recommendation and all of this ladies and gentlemen is built using AI but most importantly using AI agents you can see how helpful how useful this tool can be by the way if you are interested in being a part of a community where you find like-minded people to build AI tools from scratch and you will have templates we have weekly monthly calls that we have for Q&A and many many other things in this community where people are actually building AI Solutions you'll have everything you need to build AI Solutions using code and AI tools is a place where I'm very proud about and there's a lot of people who are enjoying this community and I would love for you to join the community where you'll be able to dive deeper into building AI solutions that actually solve problem okay so let's go ahead and get started all right so I already have the code and because of the nature of this project uh there's a lot of moving parts and uh there's a lot of code as well not too much and so what I will do I will just walk through the code and no worries you're going to have access to all this code but what I want you to keep in mind is that you can take this and apply to something else so that is the beauty of using agents that's the beauty of building these Solutions AI Solutions so I have here inside AI recruiter agency and we have this folder called agents let's focus on that real quick but at the center of everything the way I wanted to organize this code is that because each agent will have to have access to the large language model in this case we're using AMA that's another Point here is that in this case we're using AMA Lama 3.2 which means you don't have to pay for inference or pay for an NPI key which is really great and it's really good because then you can build these systems build these AI Solutions locally and test them out before you can push them to production so that is one of the great things about using AMA models but it is still the same if you want to use different models Okay so at the center of everything the way I organize this code is a little bit more organized in a sense where you would find in a production application now there are a few things here that you probably will have to kind of work around to make it production ready but I put the code so that it is a little bit more organized we're using classes and everything now if you don't know a lot about classes bython it's okay um I have a lot of videos where I talk about python um but this is how you would usually want to put together a potentially production ready application at the center of everything we have this base agent here what is this well it is indeed a class make this smaller so you can see as you can see here it's a class called Base Class that we pass in a few things in this Constructor so when we call Base Class which is going to be that all agents are going to inherit from which means they're going to model after um this is what we have so each agent of course has a name instructions so this is the model uh way that we do with agents using swarm that is what we're using here and you pass in of course the opening eyes now because I have another video where I talk about how to use swarm and opening ey but override opening eye in this case so that we can use l 3.2 or AMA any AMA model okay so this is how you override that I have another video where I talk about that you can find somewhere here or you can just search on my channel okay so what we do here we pass a base URL and instead of having in this case the base URL that would have been for openi we have our own base Ur So this tells us that this is going to be locally using AMA in this case pointing to a llama and AMA model okay and then we pass API key here just AMA it's not requ required but it needs to be passed around so at this point here when we instantiate this base agent we're going to know that we actually going to be using instead of of open AI because we're using swarm framework we're going to be using our local AMA models okay and then we have this function here that is defined called run so this will get of course the message which going to be a list and then we have this query or Lama so at this point we're going to pass a a prompt as a string and then we're going to go through the process of calling our client or Lama client which was created here and then we say hit the chat in completions that create so in this case here you notice we passing the Lama 3.2 and we have messages in this case we have system and we pass the self instructions so these instructions will have passed along through the agent okay so this is how you structure it I know for some of you this may be a little bit Advanced but it's a good it's a good exercise and we're going to pass temperature and tokens and all of that all right and then we return the response so whenever we say query orama this is what's going to happen we're going to pass the model and then the messages all of that is going to be passed along also the prompt and the instructions okay okay so here is this helper function here par Jon safely this is just going to bring get the text that is coming in as I said safely pars Json from text handling potential errors that's all we're doing here so that is the base agent so now once we have the space agent what we need is to create the actual agent swarm opening ey agents and if I go back here you can see that I have a bunch of Agents here so these agents we have for instance the extractor agent as name imply is going to be responsible for extracting information from the PDF file and then we have the match agent which is going to match whatever we got from the extraction in this case the PDF and try to match it with the company or the position that the person may be a good fit for we have the orchestrator and we have profile enhancement recommander and Screen agent let's start with screen agent because all of these agents will essentially in terms of code codewise they will look pretty much the same now this is important look how beautiful this is so the screen agent here we are creating a class just to make things simpler and scalable and then it's inheriting inheriting from the base agent right because the base agent as we saw has all the properties all the functions or methods that needs for it to actually become an agent so that's what we're doing here we're initializing our things so we are calling initializing the names to be screener and we have the instructions here to say screen candidates based on qualifications alignment experience and everything so we're passing the actual instructor instructions for this agents we say provide comprehensive screen reports and all that and we have the run so this is just going to go print to say okay screener conducting initial screening that's all that is this uh the Run function is going to do and then we have work workflow context here we are evaluating getting information from our messages that we getting and then get the content so essentially we're going to get what the large language model in conjunction with the agent the results and pass that into the query AMA and if you remember if I command click query AMA what does it do query AMA model with the given prompt so now we get that information we got and then pass through AMA this agent here well it's a call essentially to this endpoint so that it knows what to do and then we get the response and of course we return an object or in this case a dictionary which is going to have screening report and we're passing into date here we could make this more Dynamic but this is okay and screening score 85 in this case right so let's go ahead to another agent let's go to extractor agent so what does it do well this extractor agent as name apply it just extracts the information from a PDF file okay we importing a few things here but the idea is very simple again it's base agent is the base agent that we pass right that's going to to be the model for this extractor agent and we have the name instruction extract and structure information for from reses focus on personal information work experience education skills and certification and all that provide output in a clear structured in format so it's important that we make these instructions very direct and very concise okay we have to run again so this case is going to show us this extractor is processing resume and we do the exact the same thing as we saw before so like like I said earlier most of these are going to be the same in terms of the code right and we extract everything and also we um extract the text in this case from the PDF file because we're going to pass that along because we take of course the raw text that we should have at this point and we pass along to query AMA as you know what it does and then of course we return again the raw text the structure data in this case the exu structured I should say information and the results so we're just returning a dictionary so we can see what's going on all right so it's pretty much the same let's go to matcher the matcher here you know what it's going to do it's going to match whatever it was extracted from resume trying to match with certain positions that they might have so it's a matcher the same thing again that's the beauty and the instructions here is that match candidate profiles with job positions consider skill match experience level location and everything return matches in Json format with title match score and location Fields okay the same thing as you see here this run it's going to print matcher finding suitable jobs and all the great stuff now here is where we just passing sample jobs so this is where you would perhaps hit a an API that might have somewhere with a lot of different jobs or or a PDF file or a CSV file whatever you have that would have different jobs so this case here we just have the samples jobs with with a few titles and everything so that's the beauty you can just plug in the source where you'll have a list of different jobs with requirements locations and everything okay very good so that's it that's what's going to be used for the matcher to be able to match it's going to look at the information that it's received from other people this case other agents and find the match okay so match response so this is where the matching results from a Lama come in so what we do we call the query or Lama and we pass this F string here analyze the following profile and provide jobs matching valid Json okay so we have the profile here it's going to be and passes in okay the analysis because in order to analyze in order to do the matching it needs to have the pieces that it needs in this Cas anal analysis results that were gotten from a different agent okay and then we pass the available jobs is this so here's return only adjacent object with this exact structure so it's very important to usually guide the large language models when it comes to the formats that you want okay and there we go so this is the format that we have here make it smaller so you can see everything and then we can parse the response to make sure that we get everything in this is PA Jon safely function that we saw in the um agent I believe the base agent okay we have some fullbacks here uh for errors and everything and then we just return the par response now before we go to the orchestrator here let's go to the en profile enhancer agent so what does it do well this is going to kind of enhance the profile as the name apply it's it's going to go ahead and pass in the extracted information it's going to copy that information and enhance essentially the user the profile of that candidate and return that enhanced profile essentially to extract what needs to extract and put all nicely okay and then of course uh the profile agent here that's what we pass we call agent profile agent and pass Lama 3 and we say enhance the candidate's profile based on the extracted information so this is where we actually call this is where then we pass this function that we created here okay and pass through the agent because you will know that is the function it needs to run very cool all right let's continue here and let's go to the recommender agent so recommender agent as the name imply it's going to be the same thing it's going to recommend right so we have the instructions here generate final recommendations considering extract profile skills analysis and provide all these information so again nothing new here and of course we're printing everything when we run and in this case here we do the same thing we pass we call the query AMA and pass the workflow context so essentially is the information that we're getting from the evaluation of all the messages come in okay and then we return the recommendation this is going to be sort of a a dictionary with a time stamp and confidence level in this case we just say hi okay of course you can add more things to make it actually um realistic but this is pretty good okay let's continue let's go to screener agent now the screener agent I think we looked at it well that's exactly what it does it screens to make sure everything is good and pass it along all right so that is what it does it's very simple the same thing again and there you have it now the most important thing here again to keep in mind is that everything is base agent so that means all these agents have a parent class that sets everything up so that is the best way for you to think about when you're building real world applications or Solutions all right okay let's go ahead and look at the orchestrator the orchestrator in this case is the one that orchestrates everything that is the the the myestro if you will okay and so it has a lot of things of course we have to import all of those but again it is still an agent so it has to um inherit from base agent so we give it a name we give it instructions Now instructions are very important for agents okay says it coordinate the recruitment workflow and delegate tasks to spe uh specialized agents ensure proper flow of information between extraction extraction analysis matching screening and recommendation phases phases maintain context uh important maintain context and aggregate results from each stage okay so we got self that set up agents so the a function that is been called that goes ahead initializes all the specialized agents all the ones that we' talked about look at that okay very good because as an orchestrator it has to know which agents that it has access to to start delegating we have the run again the same thing we've seen and then we have this process application so essentially it's going to just go ahead and pass some information here along and print out orchestrator starting application process and so forth so we extract the resume so it's going to go ahead and run to go and extract resume update in this case the work context workflow context and then we analyze the candidate profile okay called self analyzer to start the analysis right so this case we're calling all of those agents right you can have over can see it is indeed an analyzer agent okay and then we app upate the workflow context here so each step of the way as we're calling these different or the orchestrator is calling the these different agents is going to do what it needs to do okay delegate and create in this case add to the workflow context okay and does with matching jobs screening candidates and then we generate the recommendation all right so it calls the recommander and that's exactly the same thing and we have some exception just in case things don't work and that's pretty much it now we have other things here logs and everything but that's something that you can take a look yourself but this this is it and so once we have that we also have of course the app that why a app that py should say so this has some code with streamlet which allows us to look at something that is nice to look at as you saw earlier okay so at this point here let's go ahead and do a quick run so we say stream late run app.py and what will happen is going to go ahead and open our agency AI recruiter agency we have a broken link here but that's okay we can go to about for instance and tells us about this agency it's very very cool what it does and everything and all of this was created using streamlet and we go to upload now we can actually browse and upload something a resume so I do have a resume that we can go ahead and upload I'm going to upload here real quick and the moment you upload that drop it and it's going to start the process and the cool thing as this happens I have here logs that are actually being sent out and also I have what's happening in the whole orchestration uh showing here orchestrator starting application process and is analyzing everything and it's working it will take a little bit because there's a lot of things are happening and you can see all of that Happening Here Right tells us orchestrator starting analyzer did that matching screener and recommender and it's happening so we're going to take a little moment here until hopefully we get the final results okay so after a little bit you can see that then we have here analysis complete ah how cool is that so we have different tabs here with different information right so we have skills analysis is it tells us exactly what happened key skills and expertise level and goes over everything about this candidate two years of experience and it gives it so it's extracted everything from the resume and qualifications um and also even some subjections right however the fact that her master degree is not explicitly mentioned in her work experience section raises question about how much of her degree was applied in real world real world scenarios so this is these are agents uh just like you know real world agents real agents who would have to think about um whatever they are thinking whatever they are analyzing so career progression potation red flags look at that all of this okay and the confidence uh score is 85% and here if I go back to next tab look at this job matches data scientist 75% New York Senior software engineer about 60% all right we can look at screening so screening results 85% of uh screening results with confidence based on the provided information I will perform a comprehens comprehensive screening of Janine Nel's resume qualification alignment it goes through all of that so all these all these agents were able to work together to come to a certain uh conclusion okay and we can go through and all that it also says results are under result results analysis so we also create a textual file txt file with all these analysis okay and I can go recommendation and based on this analysis I would recommend that Janine now develop more explicit examples expand her Professional Network and all of these different things all right there you have it so just like that ladies and gentlemen if you not excited about this I don't know why really will make you excited this is something that you can actually use it's usable right you can imagine that if you have in fact here's what I will do if you have a friend of yours who is a recruiter show them this video and see if they could use something like this right don't make them feel like their jobs are in Jeopardy no but just some ask them if they could use such thing how much time they will save them um daily from vetting people and all that all right well thank you so much for going through this course and I really hope that this course was helpful and that you can see the power that we get when use o Lama because now we're able to pick and choose different models and we can build really good AI Solutions locally without having to spend a dime at least um you will have to have a computer of course you don't have to pay for opening ey keys and all of that so I hope this was useful I hope this was helpful to you the thing also I've been hinting throughout this entire course is that I do have a surprise for you which is what I call Ama startup pack which will have everything that you need to get started with AMA from code templates um and other things that are surprise so you should see a link in the descriptions if you don't see it you can you can just leave a comment as well I'll show you the link where you can go and get all of that again thank you so much for your time and I really hope this was helpful if you have any questions at all just leave them below and I'll do my best to um serve you to answer them thank you again till next time be well"
x4rFhThSX04,Learn React JS - Full Beginner’s Tutorial (2024) &amp; Practice Projects,https://www.youtube.com/watch?v=x4rFhThSX04,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,"Learn modern React basics in the most interactive, hands-on way possible in the full course for beginners. Throughout this tutorial ...",2024-11-20T18:25:12Z,"Bob zero is one of the most popular react instructors in the world and he's back again with this completely updated react for beginners course this course is the perfect starting place for anyone learning react you'll learn the basics of modern react and build a bunch of fun projects hey free code campers and welcome to this introduction to react course my name is Bob zero and I am super excited to be here guiding you through the wonderful world of learning react I have been working for the last 6 months to make this the most interactive react course out there in fact throughout this course you you are going to be working on over 170 challenges and building six larger projects now there are a lot of react video courses out there but this one is the only one that has been worked on and developed hand inand with the folks over at mdn web docs to make sure that it meet their standards I am just so excited to be teaching this react course I've been teaching react and web development now for over a decade and have helped Usher thousands of people into their new careers in web development so trust me when I say you're in good hands let me tell you for just a second about what you can expect from this course this react course and all of the courses that we make over at scrimba are super interactive instead of just teaching topic after topic we focus our curriculum on projects and challenges and we use those to drive forward the curriculum and introduce new topics along the way this makes it so that all of our content is very Hands-On as I mentioned you're going to be completing over 170 challenges and building six projects let's look at those six projects right now the first two projects focus on building static web pages in react allowing us to dip our toes into the syntax of react and then starting to transition into using reusable components which is one of the fundamental things that we learn in react in sections three and four of the course we're going to be transitioning away from just static web pages into web applications that are much more interactive with the user and to do that we'll be building two really awesome web applications one is called Chef Claude where the user can input a list of ingredients send that off to an artificial intelligence engine to give you a recipe that you can use with those ingredients and a meme generator where you can input the top text bottom text and change the name image if you want at that point we have not one but two Capstone projects that we'll be working on the first one is a dice game called tenes and the second one is called assembly end game it's basically a hangman Style game where the user tries to guess a secret word so I've mentioned how interactive the course is going to be you might be asking what's the best way to follow along well you really have two options you could stay here on YouTube and continue to follow the course here while doing the challenges and projects in your own editor on your own machine or you can hop over to scrimba and do the challenges over there either one is completely fine with me as long as you're doing those challenges and building the projects because the course was originally recorded on scrimba there will be times where I talk about clicking a link in the slides or clicking into the editor and typing down your answer obviously neither of which will work here in YouTube so I'll do my very best to make sure all of the links from those slides are down in the video description in this video now indulge me a little bit here I'm going to St up on a soap box and give you a little bit of a Spiel that I give to all of my students my main goal for this course is that you can finish the course open up a blank text editor and start building a react project of your choice far too many courses out there will just present information at you not requiring you to actually do any work and then leave you alone and underprepared to try and build a project the reason this happens is a phenomenon often referred to as tutorial hell where you watch tutorial after tutorial after tutorial feeling like you're learning something new but never being required to actually type down any code or practice what you're learning what this ends up doing is making you feel like you're learning something along the way but then you get to the end you open up an editor and your mind goes completely blank in fact it's kind of funny to try and imagine learning some other kind of skill in the same way imagine watching all of Wimbledon and feeling like you're somehow becoming a better tennis player that's not how it works in sports or language or music and and certainly not in software engineering so I found that there's actually two things that need to happen for you to avoid tutorial hell altogether the first one actually has to do more with me as your teacher it's my responsibility to make sure that I prepare this course and teach this course in a way that follows scientifically proven methods for you to retain the information I'm trying to teach to you so that's not something you're going to have to worry about that's something I had to worry about when I was creating the course the second one though is something that relies entirely on you and that is that you actually do the work every challenge every quiz every project that I throw your way I need you to actually do those challenges and quizzes and projects something I like to tell all of my students is that the easiest way to learn something new is to actually do it the hard way this means that instead of just coasting on by hoping that you're retaining the information you actually put in the work and the time and effort that it takes to learn that new thing practice practice practice is extremely important and I'm going to be up on this soap box reminding you about this many times throughout the course I think that the best way to do this is to have a bit of a paradigm shift and remember that you are not being graded on this course be curious it doesn't matter if you make mistakes you can always undo the changes that you've made and try again okay I'm going to get down off that soap box now but if you have any feedback about the course or if you simply want to connect with me the place I'm most active these days is on X bobso so feel free to give me a follow there you can shoot me a DM I'm happy to respond as much as I can okay I can't wait anymore without any further delay let's jump in and start learning react in this first section we are going to be learning everything we need to know in order to build static pages in react and I know what you're probably thinking but Bob I already know how to make static pages I understand that building purely static pages is not the reason that you're hoping to learn react but I have found over my many years of teaching people react that it's important to first learn how to think in react writing good react code requires a bit of a paradigm shift from how you might be used to building web applications in the vanilla Technologies of HTML CSS and JavaScript and so in my experience it's important to first get a solid foundation of how to think about react and think in react before we jump straight into the more fun and productive parts of react that really make it magnificent framework for user interactions and web apps in general in order to give some structure to the curriculum and in true scrimba fashion we are going to be building a project throughout this section called react facts and although it may look like a simple static page it's really going to help us get the solid foundation that we need and react to continue on to maybe some of the more exciting projects that we have in this course throughout this section we are going to be learning why you should even care about react chances are you found this course because you were were told that learning react is an important step if you're hoping to get a job as a web developer or level up your skills in the web development Arena and so I think it's crucial to understand why people are telling you to learn react naturally we'll be learning how to set up a new react project and this bullet point actually incompasses both creating a new react project in the code which you'll be doing directly here in scrimba or for those of you that happen to not be following along in scrimba we will be covering how to set up a new project on your local machine which of course will be helpful for anybody when it comes time to building your own projects outside of the scrimba environment then we'll be learning about the fundamental pieces of react which are react elements and a syntax that the react team has created to make it easier called jsx and we'll take those react elements that we learn how to create and build our own custom components which are reusable composable pieces of code and then just so our stuff doesn't look too ugly we'll learn how to style those custom components and we'll be using tons of Hands-On challenges along along the way while we're learning these topics so without further Ado let's jump in and start learning how we can build static pages and react before we dive into the nitty-gritty of how you set react up locally on your machine I want you to get your hands on react as soon as possible if you're taking this course on scrimba then you'll be able to just click into the same editor that I'm using and type along do the challenges and so forth if you're watching this on another platform like YouTube very shortly we're going to cover how you can set up your react app on your local machine so that you can follow along with these challenges in the meantime I would recommend coming over to sco.com just to try this first challenge out so you can get your hands on the keyboard and practice your very first react app assuming you have some experience writing HTML and CSS and some Associated JavaScript you should be very familiar with the idea that if you want something to show up on the browser this is our mini browser over here then we need to include it as markup in our HTML file so I would just add something like an H1 that says hello world I hit save and sure enough Hello World shows up in our markup with react we take a bit of a different approach instead of adding anything manually to our markup react will be in charge of taking our JavaScript and adding the associated markup to our HTML document for us in order for this to work I need some kind of placeholder we're going to add a div here which gives a place to react where it can insert all of the markup that we generate using react in our JavaScript files I'm going to give this div an ID of root and we'll see why in just a second and before we move over to our index file you might have noticed that the file extension here is jsx we're going to cover why that is in just a minute but for now let's just treat this like a regular Javascript file here in the scrimba interface the implementation of react is sort of hidden behind the scenes you can see in my dependencies I'm using react version 19 actually at the time of recording this the release candidate is all that's available right now react 19 is on the cusp of being officially released but because I have these dependencies installed and scrimba is taking care of all of the bundling details and everything behind the scenes if you have no idea what that means that's okay we're going to talk about it in just a few scrims now before we move on let me hit save we'll get rid of this hello world that was showing up there because we removed that from our markup and now to get the very most basic react app set up I need to do two things the first thing is I need to create a root and don't worry about the terminology we are going to be talking about this in just a second and the second thing is I need to render some markup to the root in order to create a root I'm going to import believe it or not a method called create root and this is going to come from the react Dom library but from a specific subm module called client so I need to import create root from react om/ client we can use this method to create a root we'll go ahead and call it a variable root and we'll call create root and here we are why is it called a root well since in react we are going to be rendering all of our markup using react inside of JavaScript files we need one central location where react can insert all of that content and as we mentioned this div with the ID of root that we set up is going to be like the root of our application it's the one place where react will insert everything so what I need to pass to the create root method is this Dom node and I can get it by doing any regular Dom node selection I can say document. getet element by ID for example and pass in the ID of root and now that I have a so-called root I can call a method on that route called render again I know we're moving quickly I'm just doing this so that we can get your hands on the keyboard and then we'll come back and practice this and revisit it so don't be too concerned about that okay so what do I pass to the render method well this is going to be a little bit weird but I'm going to pass what looks an awful lot like HTML inside of my JavaScript to distinguish this from what we had before we'll say hello react and here's the Moment of Truth we'll go ahead and hit save and look at that we get our first text showing up on our screen now I know we've done a couple strange things we're moving kind of quickly so now I want to just pause for a second I want you to look over this code and try to memorize it as best as you can the beautiful thing about scrimba is I can give you a challenge now to rewrite this code which is exactly what I'm going to be doing so take a minute now to try and memorize this code if you want you can type it right down here below to get a little bit of muscle memory go ahead and do that now and then it's your time for a challenge okay your challenge is to rewrite those first lines of react code that we just had on the page you can render anything that you want to the screen it doesn't have to be an H1 like we had before if I hit save we'll see that disappears now I'll put us on a new line here and now it's your turn to work on this challenge okay so we need to I'll just get rid of this challenge text we need to import create rout from react-dom client then we're going to create a rout by calling create root and what we pass to create root will be a way to select the Dom node that we want to put all of our JavaScript code or all of our markup from JavaScript into before I did that with document. get element by ID but just so we can see another way I could use Query selector and specify the hashmark root this works in exactly the same way and then I can use that rout to render something again that looks an awful lot like HTML maybe this time I'll opt for just a simple paragraph tag and we'll say hello from the world of react hit save and there's our paragraph showing up awesome as you might have guessed you don't necessarily have to do this in two separate lines instead of creating a separate variable I could simply chain these methods together also in true programming fashion there's usually many ways to do the same thing so you might sometimes see this importing the entire reactdom library and calling reactdom doc create root honestly at this point it really doesn't matter but I just wanted to show you a couple different ways in case you ran into it in the wild we'll go ahead and leave it like this for now all right one last thing before we talk about how to set this up locally on your own machine I'm going to give you a challenge and spoiler it's essentially going to be doing the exact same thing we just did but without the help of seeing the code ahead of time so if you want take some time to memorize what's here and in the next scrim we will redo this challenge with a little bit of a Twist okay it's challenge time I want you to set up a react app again from scratch and this time I want you to try rendering an unordered list with two or three lists items inside that enumerate why you're excited to be learning react at this point I'll give another plug for the benefits of using scrimba I really want you to try this challenge to the best of your abilities before you just simply click the button and move on you'll hear me say it a million times but you really will just be shorting your own education and your own practice if you decide to take the easy way out and there's absolutely nothing wrong with going back to the previous lesson to remind yourself of how it's done so that you can come back here and accomplish it or even to go to Google or chat GPT and ask questions there doing that Discovery process is going to be much better for your long-term memory and your skill building in writing react code then it will be to just skip this Challenge and move forward okay enough talking Bob let's start this challenge all right we'll get rid of this challenge text again we're going to import create root from react-dom client and then we'll call create rout we'll pass to it a Dom node I'll go back to using get element by ID we'll give it the Dom node with the ID of root and then we'll just go ahead and chain on our render this time however because I do have some nested elements I'm going to go ahead and put these on their own lines we'll create an unordered list and at this point it should feel pretty familiar cuz we are just going to be writing what essentially looks like HTML I'll go ahead and create a list item and let's see why am I excited about react well it's a super popular JavaScript framework or I guess you could say library there's a little bit of contention about that let's go ahead and call it a library and let's see it uh it will help me be even more employable learning react is going to help you think in a new way that most JavaScript libraries and Frameworks are adhering to these days anyway we're going to talk more about that and I don't know maybe let's do something a little more silly uh react has a pretty cool logo sure why not okay let's go ahead and hit save and look at that we get a little bit of strange styling but that's just from our CSS but we have our list items on the page this is great and we're starting to see one of the benefits of using react is we can lean on a familiar syntax in HTML with a couple tweaks here and there that we'll be discovering as we go through this course hopefully that challenge went okay for you again if you struggled through it this would be a perfect time to go back and to try it again now that we've talked through it it might stick even better in your mind if you go through it again and nothing's ever never stopping you from doing it as many times as you want get that muscle memory in get the repetitions in and remember to take breaks along the way throughout this course now that we've had a chance to get our hands on react let's go back and talk a little bit more about how we can set react up locally especially for those of you that are not following along in scrimba I mentioned how scrimba has some magic happening in the background so that react just kind of works in the scrimba environment however if you're coming from just learning HTML CSS and JavaScript probably being used to just being able to double click an HTML file and have it run locally on your machine things are not quite as simple as that with the modern front-end ecosystem that exists today now I do want your focus to be learning the syntax and the philosophy behind react before you start worrying about all of the tooling and how to deploy and what it means to build a project and all that extra stuff that is important to learn but kind of distracts a little bit from learning react itself self so if you're taking this course here on scrimba I recommend you just continue to do the exercises directly here in the scrimba interface that said there will obviously come a point at which you want to build your own projects and although scrimba is more and more capable of doing that when you go off to your developer job maybe writing react you probably aren't going to be building your production code inside of scrimba so I want to walk through how you can get a react project setup locally we're going to be using the recommended build tool called vit and yes it is pronounced vit that's French for quick or fast and to get started you're welcome to click the screenshot here which will take you directly to VJs dodev if you want to read a little bit more about vit but I also in this scrim will be walking you through how to get everything set up in order to use vit on your machine you need to have node and npm installed already on your machine if you open up a terminal you can type node space- V that's to check the version of node that you have installed if it gives you any kind of version that 18 and above then you're golden and you'll likely be able to skip the next few slides that I'm about to show you we also want to check if npm is installed although as far as I know once you install node you automatically get npm don't quote me on that for sure but go ahead and use npm space- V to check what your npm version is if your terminal essentially says I have no idea what you're talking about when you type this in that means you need to install node and npm and I'm not necessarily going to walk us through how to install node because there's a million YouTube videos that can help you out in fact if you click the screenshot here it will take you directly to the query on YouTube specifically installing nodejs with a package called NVM which is short for node version manager I have found personally that node version manager is the Least Complicated way to not only install node but also to update it as new versions of node are released now just for reference I've included screenshots here which you can click either one to take you either to the NVM Repository which is the node version manager you would use if you're on a Mac or a Linux machine and over here on the right is a link to a similar repository for NVM Windows which as I'm sure you have figured out is specifically for Windows platform now at the time of recording it does look like the NVM DWIs team is working on a new package called runtime which it says is the successor to NVM for Windows but since that is not yet released you'll just have to click on the screenshot and see if runtime is the new way to do this now I know I I'm not going to walk through this whole thing I'm not going to go through every single step but once you do have NVM installed you'll simply run NVM install D- LTS for the long-term supported version and that will just get you the most updated stable version of node once you've done that you can check again for your node version and your npm version and once those are showing real numbers you are golden and ready to move on and of course as with all version numbers you see here when you do this it's probably not going to be these exact versions of node and npm because the ecosystem is evolving pretty quickly and building your first project with vit couldn't be easier in your terminal You're simply going to type npm create vit at latest and this will jump you into kind of a wizard that helps you create your project It'll ask you to name your project so you'll put in something like first- react and hit enter then it'll ask you to select a framework as you can see there are other Frameworks that are supported by vit we're going to go down to react and for this you just use your arrow keys and hit return to submit once you do that it's going to ask you which variant you want to use we're just going to keep it as simple as possible for now and just use the regular JavaScript version hit return to submit that again and everything will get scaffolded and ready for you to run and helpfully enough it tells you exactly what to do we're going to first CD into our project then we're going to run npm install which will only take a few seconds to finish and at this point once we're finished I personally prefer to run the development server inside of the integrated terminal in vs code and so I'm just going to use codespace dot that's the shortcut for opening the current folder inside of vs code and once I'm in vs code I can run npm run Dev this will spin up a development server on Port 5173 and I can just go to Local Host colon 5173 to see the default project that is created with vit at this point you can interact with the different files and the code that you see if this truly is your first time interacting with react it might seem a little bit over in you would go directly here into the SRC or Source folder and find a couple files there essentially you can delete most of the content of those files but it's always good to kind of play around in a new I guess you could call it code base just to get a lay of the land and with that you should be completely set up to run a react app locally with vit again because I'm going to be giving you a number of challenges many of which include some starter code I still recommend being here on scrimba to do those challenges with as few barriers as possible the the more you can get your hands on the code the better you're going to learn react before we jump into some of the more theoretical reasons as to why people have really adopted react so heavily I want to sort of jump in a time machine and go back to see how this react looked in the very very early days of react we'll get a chance to get our hands on the keyboard and really dive into some code before taking another break and learning a bit more about the history of why we enjoy react let's spend just a minute talking about JavaScript libraries and JavaScript Frameworks at this point in your Learning Journey you may have heard these terms before and wondered what they were so I think we should go through them first let's talk a little bit about the difference between what a library is and what a framework is generally speaking a library is something that is just a collection of reusable code when you're programming sometimes you'll find yourself having to rewrite some logic over and over and over again maybe even across different code bases and this is kind of where librar step in the point of libraries usually is to reduce the need to write some repetitive or complex things from scratch over and over because it's just a collection of reusable code it's really up to you how it's going to be used when it's going to be used there really aren't any boundaries that you're expected to stay within its main purpose is just to simplify the task that you were already going to be doing a framework on the other hand is a bit more structured it usually has some kind of predetermined architecture and expects you to follow a specified pattern of development oftentimes it's pretty important that you're very familiar with the documentation for Frameworks because they do expect you to follow their patterns instead of essentially having no boundaries like a library often has you are expected to work within the boundaries that are set by the framework maybe put a little simpler there's kind of like a right way and a wrong way to use the framework itself so the question often comes up is react a library or is it a framework well if you go to the react homepage it specifically calls itself a library it says it's the library for web and Native user interfaces honestly react has been built out as a whole ecosystem these days to a point where one of the most common ways to use react is to do it using a framework like nextjs we're going to be talking about that in a second I think it could be really interesting for us to take a quick overview of the history of some very popular libraries and Frameworks in JavaScript we back in 2006 there was a really popular library that was introduced called jQuery and chances are you have heard of jQuery even if you're pretty new to web development I would not be surprised if you've heard of jQuery one of the main purposes of jQuery was to bridge the gap between different browsers and how they interpreted JavaScript to interact with the document object model or the Dom jQuery made it a lot easier to achieve that cross browser compatibility whereas before with regular JavaScript it was kind of a question you might write some JavaScript that worked well in Chrome but didn't work in Firefox or Safari jQuery definitely falls into the realm of a library its syntax essentially accomplishes the same thing that regular Dom JavaScript can accomplish but with a syntax that's a lot more tur and some would say more familiar or easier to deal with then around 2010 there was a bit of a surge in JavaScript Frameworks when angularjs Ember and backbone came out there were definitely others at the time as well but these were a little bit more closely aligned to a framework they expected you to do things a specific way and they started introducing the concepts of components on the web angularjs actually has kind of a funny history it was created by engineers at Google its original name was simply angular and then later around 2013 when react the new angular and vue.js came out angular the original angular angular one I guess you could say rebranded as angularjs so that the new version of angular could simply be called angular around the same time we also saw react and I think just a little bit later view JS came out and these three libraries slf Frameworks sort of represented the next wave of how to build web apps in JavaScript things definitely did not start slowing down at 2013 they only got more intense in 2016 we saw the release of spelt and nextjs which is a full stack framework that uses react as its UI library and from 2020 on we saw a lot more showing up in remix solid Astro quick Redwood Alpine there's so many others that have shown up since then each one of these has its own unique approach to web development both front-end and full stack web development and it definitely can be pretty overwhelming to consider the realm of possibilities that exists out there so of all the different choices that you have to learn why choose react for many of you taking this course you are probably looking at react because it has the highest job demand if you're considering getting into web development or you're trying to level up your skills as a web developer I'm sure you have noticed that react has probably more job demand than any of the other libraries or Frameworks out there this is why we at scrimba have chosen react to be the friend and library of choice in our friend and developer career path maybe as a quick aside it's also important to note that often times people hiring web developers they're not going to be turned off by somebody who doesn't know their specific stack they know that they're going to have to train somebody in their own stack and they're really just looking for somebody who has the capability of learning and building cool things that said it definitely doesn't hurt to choose a library like react that already has the highest job demand another thing that makes react a great choice is that it has a huge ecosystem and community that supports it between the react deflex Discord server the reactjs subreddit and the wealth of npm packages that were specifically written for react code you are definitely surrounded by a great ecosystem with react another thing that some people report they really like about react is that it has less magic that's happening behind the scenes don't get me wrong react is doing a lot of magical things behind the scenes but you as the developer are often expected to Simply rely on regular JavaScript methods to accomplish certain tasks and react whereas some other Frameworks expect you to learn their framework specific way of doing something as we go through this course I think you'll see a few examples of that this next one isn't specific to react but it's very composable and declarative this is a great reason to use react as opposed to just not using a library at all and lastly react is being very actively developed the team at meta were the original ones to create react back in 2013 and it's been actively developed ever since now a question that I very often see in our scrimba forums and subreddits where people are learning programming is asking do I really need to learn JavaScript before I learn react and my personal hesitating emphatic answer is yes you absolutely have to know JavaScript before you jump into learning react if you tried to learn the two at the same time it would become very easy to conflate what is Javascript and what is react and I think doing so would be a huge step backwards in your education in web development so that's why in the introduction to the course I specifically say it's important to already be familiar with HTML CSS and JavaScript before trying to learn react now Library and Frameworks they're not for everyone so let's talk about when you might not want a framework if you were just working on a simple static landing page for a business or your own personal website it might be fine with such a small project to just stick to the core Technologies of HTML CSS and JavaScript remember that Frameworks or libraries like react are a big code base of their own and they will have to be pulled down to the users's machine anytime they want to run your project on Modern fast networks that's not usually that much of a problem but if it's it's just a simple small project or if you do have Network load concerns maybe you need your app to correctly run on slow 3G networks in different parts of the world then those would both be good reasons to just skip using a library or framework altogether or at the very least to use a very lightweight one these UI libraries and Frameworks also come with quite a hefty learning curve compared to just the core Technologies so that's something you might need to take into account when you're deciding whether it's the right time to use a framework also where the core Technologies of HTML CSS and JavaScript are not evolving or changing that often Frameworks do tend to be improved and upgraded so you may find yourself spending a fair amount of time doing maintenance to your application upgrading to the newest version whatever it might be and it's possible that's not something that you want to spend your time doing and lastly if you are already embedded in a codebase it's possible that the framework of your choice may not be super compatible or at least not easily compatible with your exist existing code base in the decisions you make in all of web development you'll find that there's always tradeoffs and so these are just some of the concerns you might want to keep in mind when it comes to choosing your library or framework okay let's get back to talking about some of these reasons to use react by talking about this specific point here how react is composable and declarative when we first wrote this code I mentioned that it can seem a little bit strange for us to have what looks like h HTML directly here inside of our JavaScript and that's true in fact when react was first introduced there was a short amount of time when this syntax didn't exist at all instead react exported a function that was called create element now this is not to be confused with the document. create element although the concept is pretty similar you see within react we can call this create element function and it takes three parameters the first parameter is what type of element you want to create very similar to document.createelement the second parameter is something that's called props we're going to spend a lot of time in props a little bit later for now because I'm creating an H1 I'm just going to pass null here because I'm more interested in showing what gets returned from this than anything else the third parameter is what children we want our H1 to have in our case this is an H1 that's just going to have some text so I'm just going to put some text in here and we'll say this is Hello from create element okay I'll hit save we see we get essentially the same thing that we had before the syntaxes maybe not as familiar and a little bit more verbose especially by the way once you start to Nest these inside of each other but I'm not really planning to go deep down that rabbit hole instead what I want to do is take the returned value from this function and save it in a variable let's go ahead and call this uh react element I'll set it equal to this create element call and we'll go ahead and still render our react element but now that I've done that I can console log react element and let's open up the console and see what we get okay look at that so what create element returns is an object that has some information about the Dom node that is going to get inserted by react into our actual Dom notice this object is just a regular JavaScript object it needs to be structured in this way so that react can understand what it is but it's just a JavaScript object remember this because it will be key for us down the road when we start talking about jsx so long story short in the very early days of react they created this function called create element it still exists today as we can see we're in version 19 and we can still use it and create element returns a regular JavaScript object with a specific structure that makes sense to react now I don't have firsthand experience with this but I suspect that the react team realized that this wasn't going to be a long-term solution and so they created jsx which is that HTML looking thing that we saw in the beginning of the scrim let's take just a minute to look really quickly at jsx and then we'll pull up some more slides and we'll talk about some of the main reasons why we care about react so much as you can probably tell using Create element is not the greatest developer experience we didn't really go into it but if you wanted to Nest elements together like if you had an H1 that had I don't know maybe a span inside with some text well you would have to take your create element and then instead of the children being just a text node like this it would be another react element which you would have to get by calling create element and so then you would have your span it would have let's just say no props and then it would have its own children I'm inside the span and so forth definitely a far cry from how we're used to adding elements to the D with HTML and so pretty shortly after react was initially released the same team that created react also created the Syntax for jsx which allows developers to write what they're already very familiar with in writing HTML if you want to add a span in here just like in HTML you would simply add a span and under the hood react is going to take this set of jsx elements that are nested together and it's going to turn them into those create element calls that we saw before let's clean some of this up this one's just sitting outside here and we no longer need create element let me go ahead and change this H1 to just be a regular H1 that says hello from jsx and notice what the console still says this is from before we made this change and it still says hello from create element as the children we go ahead and hit save and we get an object with the exact same structure so the main point I want to get across is that jsx is simply what we call syntactic sugar on top of the create element call and under the hood react is taking this jsx syntax and turning it into calls to create element now there is a bit more to the object that we see here for example I can't just copy the object I see in the console and paste it in place of react element or try to type this out manually there is a little bit more happening behind the scenes but that's not really that relevant for you in this stage of your react Journey next we're going to pull up a few slides and learn a little bit more about some of the reasons that we love react but I don't want you to forget the syntax you see here because I will be giving you an exercise requiring you to write it all again from scratch we're going to be covering a bunch of different reasons why react is a great choice for libraries to be learning at this point in your Learning Journey but there's two main reasons I want to talk about why it's best that we graduate from just using the vanilla Technologies of HTML CSS and JavaScript so what makes react so great well the first major reason we're going to talk about is that react is something called composable all this means is that we have the tools available to us that allow us to easily create reusable and interchangeable pieces of the web that can be combined in a lot of different ways to create complex systems now I'll admit this next analogy is not the absolute Perfect Analogy but let's talk for a second about what is arguably the most famous statue in the world this is Michael Angelo's statue of David and I've had the privilege of seeing this in person in Italy and if you've never seen it in person you might not understand just how large the statue is it is a 14t tall solid marble statue when this was created Michelangelo had a block of marble and he carved away chunks of that until what was left was the statue that you see here my point in showing this is that the statue of David and all sculptures that were carved as a single solid block of stone or whatever material what you have left is a single unit and it can't be reused or repurposed in any way which for artwork makes a lot of sense now the reason this might not be the absolute best analogy is because this next picture is not nearly as beautiful as the original Statue of David if if we are to set Aesthetics aside you can see that someone has replicated the statue of David with Lego bricks again not nearly as beautiful but I think it encapsulates the principle of composability really well if you've ever played with Lego bricks you know that they usually come in a big jumbled pile and you can use those Lego bricks to create whatever your mind can conjure up each one of those little Lego bricks can be reused and repurposed in a lot of different ways some of which are really rudimentary and simple and some of which are pretty complex like replicating the statue of David in artwork obviously this is more beautiful but in web development it's a very powerful tool for us to be able to take little pieces and combine them together in complex ways let's take a look at a small piece of code here what you see here is a snippet from the bootstrap website if you have been in web development for a while you might be familiar with what bootstrap is it's just a pre-built CSS library and I took this directly from their website where it showed a bu of different examples of navigation bars this is over 30 lines of code that represent a single navigation bar that by itself is not that remarkable navigation bars can often times end up being this long or much longer but if you were around in the early days of the web you might have seen a series of HTML files Each of which was a different page on your website and anytime you wanted this navigation bar to be at the top of that web page you had to copy and paste this code to a separate HTML file this meant that the first 30 something or more lines of code were dedicated to a navigation bar and the only thing that really changed would require you to scroll way down the HTML page to find not only that but if you wanted to make a change to this navigation bar you might have to make it in a lot of different places now we can contrast that with what we get with react which is custom components you can even hear the similarity in the name there these represent components that are more composable I've given these kind of silly names here to really highlight the fact that these are custom there are things that I have created they're obviously not native HTML elements but instead a custom component that represents all of the code that we saw here this my awesome navbar encapsulates all of this code and then anytime in my document that I want to include a Navar I can simply render a copy of my awesome navbar and I will get everything that comes with the code that we see here and if I want to make a change I can make that change in one place and it will reflect everywhere my awesome Navar is used now we're not fully ready to jump directly into the syntax of react but I wanted to give you a chance to get your hands on this and really just kind of figure things out as you go interacting with code that is unfamiliar to you is a great way to obviously become familiar with it and to really create those links in your mind that will help you understand this in the end you can see in our mini browser that I have that bootstrap navigation bar showing up here and in root. render I have this my awesome Navar custom component if I scroll up we can see the code for that custom component and that starts right here on line four one thing you'll notice is that throughout the code I am using class name instead of just class that's not a mistake it's something that we do have to do in react we're going to touch on that later but for now what I'd like to do is give you a challenge that will require you to deduce what I have done here and try to create your very own custom component in react let's scroll down here and I will add a challenge here okay your challenge is to create your very first custom react component using the my awesome navbar component above as your template you'll call your new component main content and just have it return a simple H1 element that says something like react is great after you create that new component make sure that you are rendering it inside of root. render just like we are with my awesome navbar just render it right here below that okay I'll hand it over to you time to work on this challenge okay well we can look above to the example of my awesome Navar and see that to create a new component we just have to create a new function and that function will return some jsx in this example that jsx is much more complex than what we're going to do but that's okay so down here let's go ahead and create a new function called main content and we'll have it return some jsx we'll just have it return an H1 notice that in the case above we're returning everything collected together in parenthesis this is just a way for us to be able to start our markup on the next line we're going to talk more about that later but I don't necessarily have to do that if in this case I'm just returning a simple H1 let's go ahead and say react is great okay I can hit save and notice that our H1 is not showing up well we've created this function but we're not you could say calling it or rendering an instance of main content we can do that by surrounding the name of our function in what looks like HTML tags let's go ahead and hit save and there we have our react is great main content component is rendering to our mini browser this is awesome a quick note I do have to put this slash towards the end if I don't include it then I get some kind of scrimba Errors showing up here so it's important that for self-closing components which is mostly what we'll be dealing with in this course I do have to make sure I include that slash at the end and that covers the concept of composability and react as we prog rest through the course we are going to go a lot deeper into the concept of composability we'll see a bunch of different ways that we can make our components much much more composable than they are just as we see here but I think this has been a good start and a great way for us to get our hands on the keyboard next we're going to talk about another major reason why people love react and front-end libraries like react in general and that is that it's declarative so that's what we'll be talking about next another reason that we love react is because it is something that we call declarative declarative simply means that we can lean on the library of react to handle all of the manual tedious tasks that we otherwise would have to worry about ourselves and I think understanding declarative is most helpful if we look at its opposite which is imperative so with something declarative we can tell the program what should be done and we can think of it like the computer saying just tell me what needs to happen and I'm going to to worry about how to actually do it whereas with the opposite of imperative we need to describe how things should be done this is like the computer saying I need you to describe to me every single step along the way on how to do something and then I'll execute the steps that you tell me to execute let's see an example of this in code so we have here just about as basic of a react app as you can possibly have which is all we've really worked on so far but I want you to get your hands on the keyboard and try out a challenge okay your challenge is to recreate this above line of code which is actually still showing in our mini browser cuz I haven't hit refresh yet but by recreating it in vanilla JavaScript by creating the H1 using the create element method on the document giving it some text content just using the text content property of the new element you created then giving that new element a class name of header and then using append child to append this new element that you created to the with the ID of root and by the way just so that we really drive this point home I don't want you to use inner HTML to accomplish any of this using inner HTML is a little bit shady anyway there's some situations where you can get in trouble by using it anyway if it has been a while since you've done this kind of manual down manipulation it's okay to search on Google to figure out how to do this use chat GPT to help you out just don't let chat GPT write all the code for you and and then copy and paste it okay it's your turn work on this challenge okay so we can get our new H1 let's say this is going to be we'll just call it H1 and we'll use document.createelement we'll create a new H1 element we can add some text content to it by accessing the text content property and maybe we'll just say this is manual imperative coding okay I can give my H1 a class Name by setting its class name equal to header and then I can grab the div with the ID of root by using get element by ID we'll grab the root and then I can say append child and we'll append the new H1 there now I don't think I've actually set up a class of header but that's okay let's hit save and sure enough that works just fine this is imperative coding though as the header says and it's because we've had to manually tell it every single step of the way first create a new element then manually add this text content to it then add a class name to it and each one of these has to be on its own line of code then take this new H1 child that we have slowly built up over time append it grab the element with the IDE of root append the new H1 to it and as this says this is really imperative we have to tell it every single step of the way what to do the way that we have just seen how we do it in react is of of course quite a bit more declarative here we can simply say hey react I'm going to let you figure out how you should really turn this into a text node inside of an H1 element we of course would say the class name is equal to header in order to be consistent with what we have down below and react is going to figure out how to do this a really good analogy that I have heard of to illustrate the difference between declarative and imperative is if you were to go to a restaurant and tell the host I'd like you to lead me down the hallway by 50 steps and then turn right we'll walk another 35 steps and I'd like you to then seat us at the booth on the left in that case we have had to direct the host on every single step of the way how to set us down at a table at a restaurant the equivalent declarative way is to trust that the host will know exactly how to do their job and all we would have to say is something like we would like a table for four the host might then walk us to the exact same booth that we otherwise manually directed them to csat but we've been able to offload those specific instructions to a person or in the case of react a library that we can simply trust to do its job now of course with something as simple as putting a single H1 on the page well first of all we likely would just do something like that directly into our HTML but with react where most of the content on our page is going to be created in JavaScript this example already demonstrates how much nicer it is to do it in a more declarative way and especially if you think of all the steps that would be required to create even something as simple as this little section project that we're going to work on it's just going to be so much easier to do it in react where every element can be structured and look just like HTML without us having to do all of the imperative manual tedious task of creating these text nodes and appending them to text elements and appending those text elements to their parents and so forth speaking of the react FAA project that you see here it's time for us to jump in and start creating this from scratch before we jump right into our section one project of react facts there's just a little bit of I guess you could call it housekeeping that I want to take care of just so that we are set up to have success in working on this project and in my regular Style I want to start us off with a challenge I know you just did this exact same thing but we're getting those repetitions in so that you can build the muscle memory in your fingers I want you to set up a new react tap from scratch I've given you a couple hints here that should help you along the way and in the end I just want you to render a simple H1 element just like we did before okay I'll hand it over to you work on this challenge all right let's clean up this text and we need to import the create root method from react-dom client with that we can create a root and we do it of course by calling create root then we we need to pass to create root a Dom node where all of our markup will be stuffed inside of and react is going to handle all that for us so we just need to grab that Dom node by calling something like document. get element by ID or query selector we'll go ahead and use get element by ID to get the element with the ID of root once again that's in our HTML it's our actual markup right here and react will be in charge of putting all of our markup that we eventually create in react right inside of this div so this tells react where to eventually render the markup and we need to then call the render method on the root so root. render and this is where we tell it what to render we'll go ahead and put in our jsx and we'll just say this is react I don't know I'm not getting very creative here okay hitting save should make this show up it should say this is react perfect okay great job let's tackle the housekeeping I want to handle first I mentioned in the very beginning that you you might have noticed we're using this jsx extension instead of a regular JS extension I'm actually fairly certain this would work if I were to rename this to just index.js and hit save we're still working however under the hood we're using vit which we did see a lesson on how to set that up locally and in the documentation of vit they recommend that if you ever have a Javascript file in react that is using jsx in any capacity then you should use a jsx X extension instead of a regular. JS extension we won't necessarily go into why V expects you to do that just know that it really helps vit in its ability to bundle your code performant and just make things work smoothly in the end so it's now. jsx I need to come make sure that I'm referencing the jsx file and keep in mind before I wrote this line I really wouldn't have needed to do that and if we were using that old API using Create element and doing all of this manually without jsx then we wouldn't have to rename this to a jsx file but because we are using this H1 right here with jsx we need to make sure that it is a jsx file okay that was one of the things I wanted to cover the other little point of housekeeping I wanted to handle at this point was to talk something about images in the react fax project we do have two logos we've got the react logo up here in the header of this little project and then we also have the logo floating around down here on the right side with static images that aren't going to be changing or aren't coming from some kind of CDN or database there is a kind of unique way that you have to deal with them that's different than what you might be familiar with when using vanilla HTML CSS and JavaScript let me go ahead and take the project that you just built here and first of all we'll go ahead and put this on its own line so we can just deal with this single line here by itself and I'm going to change it to be an image element when you're writing static HTML you are probably pretty familiar with saying that your source is going to equal a string and then that is going to to be a relative path to where your image is living I've put the react logo PNG file on the same level as my index. jsx file and so I should be able to Simply say react-app file and run it locally install the dependencies it would be using vit in the background this would still continue to work however if you aren't really following along here in scrimba and you set up a new vit project there's a chance that putting a relative path in your image source like this wouldn't work correctly so I wanted to address that now if anybody who isn't following along here in scrimba finds that when I talk about putting your image path in the same way that I have here where it's just a path that's relative to the current file that you're writing in and you find that it's not working the quickest solution for now is to just make it an absolute path from your route for example if all of your code is in an SRC folder you might put slsrc and then keep working your way down to where this actual PNG file is maybe you have like an assets folder like that and when you do that this will start to work again now my point of housekeeping here is to let you know there is a better way to deal with static images in react but we're not quite yet set up to learn about that that's actually going to happen in the next section but again I just wanted to get ahead of it a little bit at this point so that there isn't too much confusion happening from those of you not following along here in scrimba and there is one final point of housekeeping I want to take care of now and that is to talk about what you do when you want to render multiple elements inside of your render it's really common for us to have components and react that render more than just one HTML element however you'll notice if for example I have an image and then I also try to render let's say underneath it an H1 that says this is another element I'm getting this warning here and if you have over it it says jsx Expressions must have one parent element and it's true when I'm trying to render something I cannot render two elements side by side in the way that I'm attempting to here remember when we learned about how jsx compiles down to that call to create element and this is a create element from react so I'll just go ahead to make sure that's clear we'll import create element from react well trying to render two jsx elements side by side like this would kind of be like trying to do this create element create element of course I have a problem here and I don't think this is exactly what it's trying to do but I find it helpful to think of it as a problem in terms of trying to call two functions back to back like this on the same line let me get rid of this syntax error so that we can deal with this other one and of course I'm not limited to only ever rendering one thing at a time I just need to make sure that it's wrapped together in a parent so in react this simply means means that if I want to have two elements I need to wrap them into a single parent element that can house both of those elements together this is kind of akin to how we saw we can have create element in this case it would be similar to saying we have a div we're not going to worry about props and then the children would be calling another instance of create element and this is okay to do now for accessibility reasons div should probably be the last resort of what you reach to there are a lot of other semantically correct HTML elements that we could use in its place for example maybe a main element would make a little bit more sense here or if it's a section it could be a section or an article it can be really helpful to go over to mdn and learn about these semantically correct containers and choose the one that makes the most sense okay we've covered a lot of ground in this random housekeeping lesson as a quick recap if you're ever going to have any amount of jsx inside of your file make sure that you rename your file extension to be jsx instead of JS secondly when it comes to images actually let me fix the path here cuz hopefully that didn't cause too many problems we can see that this is working if I scroll down we have our H1 there when it comes to images for now I'm just going to be using a relative path and there's a chance that doing so inside of a freshly created V project would cause problems so I showed you how to use the absolute path from your project route in order to make this work for now and we'll be seeing a kind of more accepted way to do this later and last of all you can only ever render a sing single jsx element at a time and that element can have as many children as you want but there does need to be one parent element that encapsulates all of the other elements you want to show up on the page with that we are now poised to start working on our react fax page and we're just going to take it one little step at a time all right I'm excited to get started on our section project as a reminder this is what we're aiming for and in this particular challenge we're aiming for this point there's some really rudimentary styles that I've included in our index.css just so that this didn't look quite so much like an isore but notice for now I'm just styling the core elements and you won't have to worry too much about this at this point you are starting from scratch again I'm sorry if that feels a bit obnoxious I do want to have your memory working so that you're not just cruising along through this course without putting in the effort some hints here if you're doing this here in scrimba for the image source you can just set it equal to react logo.png I've included that here in the project on the same root folder as everything else but as I mentioned in a previous scrim if you're following along locally with a vit project that you set up manually then you might for now have to put an absolute path to this logo we're soon going to be learning about another way we can pull in images when they're static images but for now we're not quite there yet also since we haven't officially learned about how to tie class names into our jsx or do inline Styles when you render this image it's going to be quite a bit larger than what you see here but you can just use the width property just like you can in HTML in my example down there I just have it set equal to 40 pixels in width okay enough talking I'll hand it over to you to get started on this challenge okay we can go ahead and import create root from react-dom client we'll create a root with create root remember when we're doing this we pass to it where we want react to put everything so we'll grab the Dom node where we want everything to get put inside of and that will be with the div that has the idea of root in our HTML right here and then when we call render we're telling react what we want to put inside of that div as a reminder I can't render an image followed by a sibling H1 followed by my unordered list but instead I need to make sure that I'm only ever rendering a single parent element that surrounds everything I could choose a div if I wanted to I usually tend to do that as a last resort for now I'm just going to call it a main because that feels a little bit more semantically correct okay let's surround these with the main like that and I'll go ahead and stub out my unordered list with my five list items let's start with the image and I'm going to add the source equal to react logo.png and we'll see when I save we get quite a large image here this is where I think normally I would resort to adding some CSS to style this but for now we can see that we can just add width like we would in HTML and set this equal to 40 pixels okay quite a bit more manageable let me go ahead and fill in the rest of the text and I'll just cut to a finished point for that so you don't have to sit and watch me do that and there we have it all of our text is added in one last thing I need to make sure I do is to add some alt text to my image so I'll just say this is the react logo and awesome now of course the project that we're working on here is very very small in scope compared to a full website or web app that you would normally see and right now we're just kind of stuffing everything right here inside of root. render and I'm sure as you have probably figured out or can imagine this isn't going to be the long-term way that we do this so next what we'll be doing is learning about how to make custom components which will allow us a lot more flexibility and certainly a greater sense of organization than just trying to stuff everything inside of root. render so that's what we'll be doing next but before we jump into that I have a little quiz that I want us to take just to reinforce the concepts that we've learned so far let's do a quick quiz before we move on and start learning about custom components in react and what I'm going to do is Mark this as a challenge in scriba which will pause the playback and give you an opportunity to actually click here into the editor and type your answers down and I would recommend actually typing the answers down because there's something about having to verbalize or write down your concise answer that requires you to think through it a little bit more rather than just kind of thinking within yourself I kind of get the answer to that question so when it pauses actually click in here read through the questions answer them and then we'll go through it together okay where does react put all of the elements I create in jsx when I call root. render remember there's two parts to creating this root and using this root the first part is creating the root and telling it where you want to put all of the elements that get rendered and then the second part is what you want to render in that spot so when react renders all of this it puts it all inside of this div with the ID of root because that's the one we selected when we created this rout and you can actually verify that even here in scrimba if you open your developer tools and you select one of the elements in the mini browser here if you dig deep enough you'll eventually find this HTML document nested inside of the HTML document of the scrimo window and you can find the div with the ID of root and you can expand it and you'll see this main element and it will have an image in an H1 and unordered list and everything so let me actually type down an answer here okay it'll put all of those elements inside of the div with the idea of root or of course you could choose a different element when you're calling create root and it'll put it inside of that element instead okay number two what would show up in my console if I were to run this line of code console log H1 with the text hello world I intended this to be a little bit more of a generic answer not necessarily giving me the exact structure but the answer is an object this object is just a plain JavaScript object it does have its prototype chain set up in a specific way that react can recognize and use it but it's just a plain JavaScript object if we were to create a new element or create a new text node or something like that in plain JavaScript and console like that it wouldn't be just a regular JavaScript object it would be an instance of whatever it was that we were creating like a new HTML element for example so let me fill out this answer a little more and I just wrote out essentially what we just talked about okay number three what is wrong with this code hopefully it was clear that I wasn't expecting you to say Well it needed to import the create root method or anything like that but instead the point is that we can't have two sibling elements being rendered together like we show here instead there has to be some kind of wrapper comp component or element rather so we might have a div or let's say a section Just for kicks so this would be the correct way and now nothing is wrong with this code let me type that answer down again you can only render one parent element at a time and as a reminder that parent element can have as many children elements as you want to put in there okay let's scroll down a little bit number four what does it mean for something to be declarative instead of imperative imperative means you need to tell the computer exactly how to do its job step by step you give it very specific instructions for it to accomplish the task whereas declarative we can lean on the library or framework or whatever it is that we're using to do the heavy lifting for us and we can write our code in a lot more of a descriptive way and let the tool like react handle the heavy lifting for us you might have participated in or seen one of those challenges where you're supposed to describe to somebody how to make a peanut butter and jelly sandwich and when the person takes the instructions very very literally it usually ends up as a big mess that's more like giving imperative commands to doing a regular task whereas the declarative way would be to say please make a peanut butter and jelly sandwich and you would just trust that the other person knows how to handle all of the steps along the way I think another helpful way to think of the term declarative is to use this word describe declarative means we can write our code to Simply describe what should show up on the page and allow the tool like reacts to handle the details on how to put those things on the page HTML for example is a very declarative language because you simply describe the contents of a page and we expect the browser to know how to handle displaying that in vanilla JavaScript when you're trying to create a bunch of elements on the page it's very imperative because without something like jsx you can't simply type out the structure of your page you need to create the nodes individually and append text to to them and add click handlers and all sorts of things like that I think I'm belaboring the point a little bit let's move on to number five what does it mean for something to be composable all composable means for us in web development is that we can take larger sections of what we're trying to build and break it down into smaller pieces we can make those pieces flexible enough to handle multiple different scenarios so that they can be reused in multiple different ways which allows us to in the end write a little less code which leads to fewer bugs and and allows us to make something greater than if we just tried to I guess metaphorically carve the final product out of one single giant block of stone so as an answer that might look something like this when something is composable it means that we have small pieces that we can put together to make something larger or greater than what the individual pieces themselves could possibly make great job on this quiz hopefully all of this was pretty straightforward at this point this is a great chance to do some self-reflection and see if you think you might be fall in behind then this is not the time to just keep pushing forward remember nobody's giving you a grade for this course you're not going to receive some kind of award by going through it quicker in fact in the end you're less likely to get the outcomes that you want if you plow ahead without understanding what we're learning keep up the great work and next we're going to look into making custom components in react when we first started talking about components we saw this example where we can encapsulate a bunch of logic inside of our own custom components almost like our own custom HTML Elements which gives us a lot of flexibility to reuse those elements whenever we need to make changes in one place and have it reflect that change everywhere and ultimately provide us a lot of composability with the way that we write our user interfaces so far we have not really been doing that at all we've been stuffing everything inside of root. render which has served us really well as we're learning the basic syntax but it's time for us to jump into creating our own custom component now it's not actually the first time that you've done it because you got your hands on super early in the course where you were able to create your own main content component and what we saw back then was that we use the concept of a function to give us the power of reusability and I'm sure this is a familiar concept because functions are used in every programming language that I know of and its purpose is to encapsulate reusable pieces of code allow you some flexibility with things like adding parameters to it and then to call that function whenever you need to accomplish that task and that's exactly what we do when we're creating custom components let's see an example of how we might into it creating custom components and then we'll see just some really slight tweaks to make it sort of the more accepted react way let's say I wanted to take everything here that I am currently rendering inside of root. render and put it inside of its own custom component well just like any other function let's go ahead and try this we'll say I want to return this markup and notice that here I'm starting with the main element right here on the same line as my return this is viable as long as I start on the same line with my jsx all of the other jsx will kind of follow as part of the return however it's much prettier to put this inside of parenthesis I can just wrap everything inside of parentheses and that allows me to keep my jsx markup on its own lines let's give this function a name maybe we'll just call it uh maybe temporary name for now clearly we're going to be changing this and I probably should spell temporary correctly okay well what would happen if inside of root. render instead of having all of my jsx there I just called temporary name let's make this a little bit larger and let's save it and see what happens and look at that it's working just fine and this makes sense because we're returning those JavaScript objects that get created with jsx code from our temporary name so it's essentially the same thing as if we just cut this out and pasted it in this temporary name function calls place however when we're dealing with react as you have seen this isn't really how we render these components the first thing to know is that with custom components in react we have to use something called Pascal case it's essentially the same thing as camel case where normally you would have a space you remove the space and put a capital letter the only difference is we need to start with a capital letter as well so we would have temporary name with a capital T at the beginning so let me go ahead and change this up here and then the only other difference is instead of calling it like a regular function with the parentheses we would surround it in angle brackets in very much the same way we would a self-closing HTML element okay let's hit save and awesome things are working exactly like they were not only that but now we're following the regular react convention okay guess what time it is it's time for a challenge and guess what I'm not going to make you write it all from scratch again at least not right now okay the first part of your challenge is to to create a new page component that page component should return an order list of the reasons why you're excited to be here learning react don't worry too much about this list just throw something in there and make it fun then after you've created the definition for that custom component make sure that you render it to the page so it actually shows up in the mini browser okay good luck work on this challenge okay well to create a new custom component we create a new function we call it page with a capital P and we can have it return some jsx I'm going to surround it in parentheses so I can put it on its own lines and we'll have it be actually supposed to be an ordered list and we'll just put in a couple list items here maybe for one we'll say react is a popular Library so I will be able to fit in with all the coolest devs out there awesome and I don't know for the other one let's say that I am more likely to get a job as a front-end developer if I know react and I think there's some truth to that react is the most popular UI Library out there knowing react doesn't hurt by any means when applying to jobs let's clean up this challenge text and let's see what happens at this point if I hit save notice that our page is still blank well that's because we've defined our component but we are not creating an instance of it we're not rendering it at all again I technically could call it like it were a function and we see that that kind of works however the of course much stronger convention is for us to render it as if it were an HTML element by surrounding it in those angle brackets while we're looking at this I think it's important to note that while throughout this course we're mostly going to be dealing with self-closing components like we see here any component that you create can also have its own separate closing tag like we see here and you can see if I hit save it's going to be working exactly the same in my Advanced course here on scrimba I do talk a lot more about this way of using components this is another example of how components are very composable opening up quite a bit of power to developers when it comes time to placing some elements inside don't worry too much about this because as I mentioned we're not really going to be doing a whole lot of this throughout this course so we'll just be sticking mostly to the self-closing syntax that we see here okay nice work on part one of this challenge in part two we're going to be adding a little bit more to the page that we see here this would be a perfect time to again do a self assessment to see if you are ready to move on one thing you could do and I'll mention this a few times is you could just delete everything and see if you can build the whole thing again from scratch without any help so I'll bring all this back but that is an exercise that you are more than welcome to impose upon yourself at any point through this course when you're ready let's move on and we'll start on part two of The Challenge all right let's get started on part two of this Challenge and actually at the end of this challenge our little silly page that we're making here is going to look an awful lot like the react fa section project that we're going to be building as well I've broken the steps down into three bullet points each one represents another section of our page so the first thing I want you to do is to add a header element that will be the first thing that we're returning from our page component and that will just have an image element inside make sure to read the text for any of the details here about setting the source the width or the alt text after that I want you to add an H1 to our main page that has something like Reasons I'm excited to learn react put it above the ordered list and then wrap both the H1 and the ordered list in a main element again this is allowing us to maintain some semantic structuring inside of our little page here then at the bottom you'll add a footer that just has some text like this okay I'll turn it over to you go ahead and work on this challenge I think the biggest trick in this challenge is that as soon as you add a header you're now trying to render two sibling elements at once if you hover your mouse over here on the closing parentheses where the red squiggly is it very helpfully tells us jsx Expressions must have one parent element for now what I'm going to do is just add a div to surround these but very soon we're going to talk about another way that we can accomplish this a div will work just great for us for now inside our header We'll add an image element and we'll just go ahead and add those three attributes we have our source our width and of course width is not a required attribute by any means very shortly we're going to learn more about how to use real CSS to do this sort of thing and as always we should make sure we include our alt text okay for our second bullet point here I'm actually going to work a little bit backwards I'm going to first surround everything in a main element okay and then I'll add my H1 here at the top I think my spacing is a little bit funny here because of the way I had it formatted let me fix this okay it's been a minute since we hit save let's go ahead and see how we're doing okay things are looking pretty good we have one final thing and that is to add our footer and this wasn't really part of the challenge I think I'm going to put this in a small tag like this just to provide it a little less emphasis and let's just go ahead and copy what we see here and at the time of recording we are in 2024 and uh my last name is zero so we'll just put that in there and awesome let me hit save good now we're protected from people trying to steal our really important code here let's go ahead and clean up the challenge text and awesome hopefully that wasn't too big of a challenge if it was that's completely okay and again that's a perfect sign that tells you that it's time to keep practicing this before pushing ahead now some of you seeing this might be wondering why we're just shoving everything together into this one large page component this doesn't really teach us about composability and how we can make our own smaller custom components that each do one little piece at a time and you would be right we are going to be doing this very soon soon and that should improve the composability and the readability of our code before we do that I have another quick quiz that I want to give and then we'll jump right into making multiple different custom components and talking about the relationship between parent and child components okay let's do another really quick quiz you know the deal I'll mark this as a challenge it'll pause the stream and I actually want you to click in and type your answers down under each one of these questions then we'll go over everything together okay number one what is a react component simply put a react component is a function that returns react elements okay so what exactly is a react element well a react element is a react version of what we see in the Dom you can think of it kind of like the react version of an HTML element and because jsx looks so similar to HTML elements we call them reactive elements however the main difference is when we're returning react elements like our div and our header and everything else that you see here well first is turning the jsx syntax into calls to react. create element and then the create element function is turning them into JavaScript objects that react then is able to interpret and turn into real Dom nodes under the hood so in answer to this question we say that a react component is simply a function that returns react elements and I think the pluralization here is key sometimes you'll hear people talk about how this is UI that the react component is returning this is just short for user interface it essentially means the same thing we just talked about okay number two what is wrong with the code that we see here well it is a pretty small change but we need to make sure that when we're defining our components in react we need to use what's called Pascal case and that is where the first letter is capitalized the rest of it follows the regular rules of camel casing all right and then number three what is wrong with the code that you see here the component itself is perfectly fine however when it comes time to render that component and render in this case just means to create an instance of this component and let react put it on our actual page we don't call it like a regular function as you see here instead we surround it in the angle brackets similar to regular HTML syntax this is a way to signify to react that we want to create an instance of this header component which under the hood essentially WS our component Returns the header element with the image inside these react elements as we talked about in question number one which then eventually get compiled down to those JavaScript objects which react then interprets as real elements in the Dom I know when I list out that many different steps it makes it seem a little bit inefficient but trust me react is very fast at doing all of this okay short and sweet hopefully you were able to follow along next we're going to be learning more about how we can compose our components together I mentioned that there would be an alternative to surrounding everything that we see here in a div like I did here to avoid that issue with multiple different jsx elements trying to be rendered all at once and this workaround is something that react has actually created itself we're going to import something called capital F fragment and that comes directly from the react Library this is a so-called built-in component from react that we can use and we can render it right here as if it were a regular HTML element we'll put the closing fragment down here at the bottom need to make sure I close this correctly and I can indent everything and we see that that error has gone away I can hit save and my page is going to display the same way it was before there's a slight difference though in the resulting HTML when I had a div here remember that I'm rendering that div and all of its contents directly here inside of my HTML and so what I end up getting is another nested div whose purpose doesn't really exists and then all of the other markup that I have here if I were to just copy and paste this into my HTML this is essentially what react would be creating when I use a fragment react will not actually insert another nested level of an element here it's a workaround that allows us to combine multiple different elements together but without creating creting another Dom node that it has to worry about so by using a fragment I essentially end up with this it's a little bit cleaner it doesn't insert unnecessary elements into the Dom as much it also can have a couple other random side effects like when you're dealing with flexbox or grid containers and child elements most of that is a bit beyond the scope of what we're concerned about right now let me clean up my HTML here since react is going to be doing that work for us and one final thing I want to talk about is this is is a little bit cumbersome to have to import the capital F fragment like this and so react has actually implemented a simpler way where instead of typing out fragment I can put an empty angle bracket set just like this and then I don't need to import anything so when you're looking at my code or other react code you might see these empty angle brackets just like you see here and under the hood that's just creating a fragment which essentially allows us to bypass that issue about rendering multiple sibling react elements together no real challenge with this one just wanted to make sure I covered that base as we've talked about it's really not ideal that we have a single page component and we're just stuffing all of our markup into that page component don't get me wrong in real react apps this is still a very very small component these components can sometimes become hundreds of lines long and there's legitimate reasons to do it that way but that wouldn't be a great learning experience for us as we're trying to learn more about composing our components together to help illustrate this I'm going to provide a quick mini challenge for you okay in this challenge I want you to take the header element that we're currently rendering inside of the page component and move it into its own component called header then in its place I want you to render an instance of that new header component so that when you hit save well everything will pretty much look exactly the same where you see it now okay go ahead and give this your best shot all right well if we want to create another component we won't want to do that inside of our page component here but instead outside of it so I'm going to create a new header function it will return the code right here these elements this header element and that does the first part of the challenge next all we need to do is create an instance of that header component and we'll do it in the exact same way that we've seen before and that we SE down here with the page component we'll surround the name of our function in these angle brackets just like that I'll hit save and my header is still up here at the top now of course when we're dealing with such a small application like we see here this is probably Overkill I think I'm probably prematurely optimizing to create separate components like this but I hope the idea is coming across when you're working on a larger application your header is very unlikely to be three lines of code it might include a lot more dealing with user interaction pulling in data from a database and all sorts of more complex things like that in those cases I think it becomes much more apparent that it's really really helpful to move that kind of logic into its own separate component thus compartmentalizing it and making it not only reusable but a lot easier to deal with as a developer okay let's continue on with this challenge just to get a little extra repetition in the continuation of this challenge is to move move both the main element into its own component that you call Main content and the footer element into its own component called footer then make sure that you remove that from the page component and render main content and footer in its place go ahead and work on this challenge okay let's go ahead and create a new function called main content and before I work on that I'll go ahead and create my footer component as well let's add a return to each of these okay we'll come down here and copy the or rather cut out the main element here and put it inside of our main content and we'll do the same thing with our footer again if I hit save at this point we'll see that I'm only showing my header because my page is only rendering my header component so we'll go ahead and render our main content and our footer hit save and we're back where we started again I know this might seem a little bit tedious hopefully getting the repetition in like that is a good thing as a react developer you are going to write hundreds and thousands of components so this is really just starting you out on that Journey also again this is pretty clear that it's prematurely optimizing to create these three separate components if you were to know that this was the extent of the page you were trying to create then you probably wouldn't do this however in most scenarios it really does make a lot more sense sense to have a separate header component maybe a separate footer component and then probably quite a bit more than just a single main content component that contains the main portions of your site let me go ahead and clean up the challenge text and before we move on I just want to talk about the terminology of parent and child components what we've done here is set up a bit of a hierarchy where we have a page component and that page component which we're rendering right here will on its own render a header component and the other two components and typically in a larger react app this will continue on down the tree where for example the main content component might be rendering other custom components and those ones will probably be rendering other custom components creating this tree hierarchy which results in what we call parent components and child components and you can take that analogy as far down the line as you want calling grandchild components and grandparent components which in the end allows us to really create a masterpiece of composed custom react components together which similar to that statue of David made out of Lego bricks allows us to create the website or web application that we want to create all right nice job on that challenge at this point I think it's well overdue for us to learn more about how we can style our components because right now we're not doing a whole lot of styling here we're doing some inline styling with the width attribute and I have some CSS that's just selecting entire elements and so let's go ahead and see what it takes for us to add some CSS to our components let's get started first by completing another challenge inside of our header right here where I've left a space for you I want you to add a nav element inside that nav element you should add an unordered list which should contain three list items and those list items should say pricing about and contact don't worry at this point about any kind of styling it's not going to look very pretty go ahead and work on this challenge okay okay so let's add a nav element like this inside that nav We'll add an unordered list and we'll have three list items those will say pricing about and contact okay let's see what we've gotten ourselves into we'll hit save and it's beautiful done ship it no let's learn about some styling so that we can make this look actually like a navigation bar instead of this weird 1990s website fortunately styling something in react is not that different than you are already familiar with using vanilla HTML and CSS let me clean up this challenge text and head over to our HTML file notice that we are linking our stylesheet here inside of our HTML file which means just like in regular vanilla HTML and CSS we can just add any classes that we want to our jsx over here in react and then access those classes in our our CSS file in order to style them however as we've briefly touched on there is one minor difference and that is whenever we're styling something in jsx we won't use class equals but instead we'll use class name with a capital N and there's actually a good reason for this I think a common misconception is that people think well we're inside of a Javascript file and the word class is a reserved keyword in JavaScript when you're creating a new class of something but that's actually not the reason that we use class name in react remember that react is going to take these jsx elements and eventually turn them into native Dom elements and when we're creating a Dom element like if I were to say we're creating a new unordered list I would use document.createelement unordered list and then in JavaScript if I wanted to add a class name to that I would say ul. class name equals and then set it equal to the class name that I want it to have of course in vanilla Dom JavaScript there's also things like class list where you can add properties and so forth but that's not what we're concerned with at this point under the hood I'm accessing the native Dom properties of this unordered list that I'm creating in jsx and so something you'll just have to become used to in react whenever you want to add a class to your jsx you'll use the property class name instead so with our unordered list maybe we'll give this the class name of I don't know n nav Das list maybe obviously in such a small setup it might be easier just to select the nav and then the unordered list inside of nav but that kind of defeats the purpose of learning about CSS with classes so with our unordered list with the class name of nav list we can go over to our CSS and let's select nav list just like we are used to doing with a DOT at the beginning because it's a class name and maybe the first thing we should do is take off those bullet points by saying list style none and sure enough there it goes our bullet points are gone okay and with that under our belts that brings us to the next part of our challenge the next part of the challenge is to use flexbox and lined our list items up horizontally so that they're in line with the react logo which should in the end look something more like this I think in this example I did bump up the font size but you don't have to worry about that if you don't want to as I've written in the note here just for practices sake I don't want you selecting any bare elements like selecting the entire nav or the entire unordered list but make sure that you add a class anywhere that you're wanting to do some styling all right it's your turn to work on this challenge I think the trickiest part with this challenge is having to create a couple different flexbox containers so let's just start right here with our unordered list which we already have a class name for so I should be able to say display flex and okay the items are lining up that's great I'm going to worry about the spacing in just a minute but for now let's get it so that the logo and the unordered list are in a line if we look at our markup again we have our logo right here and our nav is the next item that needs to be aligned which means that the parent of these two the header is what needs to become a flex container I could just select the header I think if I were doing this for real I probably would just select the header in this case but I'm going to give it a class name of header just so we can get a little extra typing practice in there and then in our CSS we will actually I'm going to put this above the nav list we'll say header is display flex and oh I need to uh hit save here so that applies okay cool those are now in a line of course it looks like things got a little bit squeezed with our logo which is just kind of what happens when you make something a flex container with an image in it it will stretch it to be the full height in order to fix that I can say align let's see items to the center and yeah that set my logo back to the same proportions that it was before because I just have the two items the image element and the nav element I think I can just say justify content space between and sure enough that pushed the nav over here to the right and then I think I'm going to have to style each one of these list items and only because I'm a man of my word I'm going to add a class name to each one of them in the real world I would just select the LI Children of the nav list element we'll go ahead and call this nav list item okay in our well let's hit save I have to remember to hit save on scrimo there and then we'll select the naav list item and my goal is to get some spacing here I think if I put a margin let's try margin right of 10 pixels and wow actually that looks pretty good I think I might bump up the font size to just something like 1.1 R just to see yep I think that's pretty good I actually think my margin right is putting a space over here on the right let's try margin left and I think that might be a little better I think my nav and the rest of my page is going to line up a little bit nicer that way now my image is looking a little bit smaller than I think I would like it to and so now that we know how to add styles with classes let's go ahead and do a third part of our challenge all right the last challenge in this scrim is to move the width style off of the jsx on the image here and over into the CSS using a dedicated class name on the image element then make sure to change that width to 55 pixels instead of the 40 pixels that we currently have let's pause now to work on this challenge all right let's give this a dedicated class name maybe we'll just call this nav D logo and I'll hit save we'll go over to the CSS and access the nav Das logo give it a width of 55 pixels and well look at that it automatically applied immediately as soon as I finish that we can go over to the element again and remove that 40 pixel width and okay that's looking pretty good now before we move on I want to encourage you to take some time to put some additional effort into styling the page that we have here obviously what we have is just about as basic as it could possibly get I did this myself and I put maybe 5 minutes of styling into this and I think it shows it's definitely not going to win any Design Awards or anything like that but give it your own little flare you don't even have to use this dark theme that we've been using you can switch it to something completely different and fun I want this to be not only an opportunity to practice playing in the code which is probably why you're here on scrimba in the first place but also to give you an opportunity to interact with the scrimba community especially the scrimba community over on Discord there's a dedicated I built this channel in our scrimba Discord server and that would be a great place to put your own design tweak on this post it over there in the ibuilt this Channel and really feel proud about what you've done so far in this course once you've had a chance to put some flare on this and post something in the Discord server then come back here to the course and we'll keep moving forward we've spent some time separating each of the parts of our main app into different components but these components are still kind of cluttering up our index. jsx file especially as these components were to get larger and larger as we built our site out we would find this not to be a tenable solution as I'm sure you can imagine fortunately moving these components into their own files is a really simple task here in the project explore I'm going to create a new file and we'll call it capital H header. jsx remember because the header component has jsx in it whenever we have a file that will contain jsx we need to make sure we use the jsx extension so that vit does a more thorough job when it comes to compiling our code down so like I said this process is going to be pretty pretty straightforward I'm going to cut the header component out from the index file and go over to my header file paste it in here now if I save this I'm going to get errors because I'm missing the header component that I'm trying to render in my index file it's trying to render header but it doesn't know anything about header so I'm going to place a challenge pause here just to give you a chance to think through what the steps are that need to happen in order for this to start working again you're welcome to actually do those steps if you want but it's not necessarily what I'm expecting at this point we'll do that in just a second with the other components I think there's just two small changes we need to make in order for our page to start working again so take a second to see if you can figure out what those are well currently our header is kind of trapped inside of our header file and so I need to make sure that I export this component there's a lot of different ways to do this one of the most common ways I see is just using export default in front of of your function of course technically because this is a default export we don't necessarily have to give it a name but I think for debugging purposes this actually ends up being pretty beneficial for us okay so now we have a way to send our header component out of the header file let's go over to our index and all we need to do is to import it and because I exported default I can just say import header I don't have to surround it in curly braces because I'm exporting it as a default and I will import that from do/ Capital H header if this is your first time dealing with exports and imports in JavaScript as a really quick highle overview when you default export something all you have to do is say import and then you can call it whatever you want at this point I could have said whatever component and then as long as I called it whatever component down here whatever component it should just work I'll go ahead and hit save and we'll see that we're up and running again naturally I like to just keep everything consistently named so of course I'm going to rename this to header also as a quick recap for imports and exports here because I'm beginning this with a do slash that's a way to indicate that I'm importing this from my own file and not from a thirdparty package that lives in my node modules folder it also has a default of JS for the extension and in this case it also tends to work with jsx so I don't have to include that part but I think some teams decide they do want to do that a lot of things just end up being conventions that you have to learn from whatever project or team you're on it's most important to stick with the conventions of your project and just to stay consistent okay I renamed that let's hit save we can see that we're up and running all right it's your turn let me type out a challenge okay not too shocking but your challenge is to move the main content component and the footer components into their own separate files probably just called Main content. jsx and footer. jsx and then of course you'll need to do whatever else needs to happen in order for our app to continue working go ahead and get started on this challenge all right let's create a couple new files Main content. jsx and footer. jsx it's probably helpful to note right now I'm just kind of stuffing everything here at the project route because we don't have that much often times you'll find people creating a folder that's called components and putting all of their designated component files into that folder and of course as your project gets larger and larger you'll have to come up with more intense ways to organize things so that it's not too overwhelming every project tends to be different so don't take what I'm doing here as gospel and be willing to be flexible as long as you understand the principles it should all be pretty straightforward okay let's take our main content component and we will put it into our main content here I'm going to just type out export default and then paste in the rest of the component we'll go ahead and do the same thing for our footer we'll take that out put it in our footer export default and we need to remember to import those things so I'll go ahead and do that because I chose the same names as what we had before I won't need to make any changes there our index file now looks really clean and everything is still working as always feel free to play around with this code if you want to move things into their own components folder and change your Imports just to play around with things that would be a great way to get your hands on the code even more then whenever you're ready let's keep moving forward when I'm starting out on a new project one thing that I really like to do is try to solidify a mental model of how I'm going to build a certain app or page at this point in the process I'm not trying to write out exactly what I'm trying to create I'm simply making sure I understand what needs to show up on the page and how I might go about creating that this is a great time to tackle any tricky areas of a specific design that I think I might run into and start thinking about that earlier rather than later so I'm going to Mark a challenge here I want you to take just a minute or two and see if you can figure out how you would separate each part of this page what kinds of elements you might use any specific CSS you might decide to use and stuff like that so go ahead and take a minute to think about that in web development there's always a lot of different ways to approach a specific problem so the way that I'm thinking about this may not be the same that you did and that's okay when I see this page I see two main parent components one would be this header which fortunately doesn't have a whole lot in there for us and then sort of a main content section this one unlike the practice one that we were doing doesn't have a footer inside the header I might just have a single logo that contains both the icon and the text a lot of Brands will make sure that their text is actually part of the image to make sure it's the same for no particular reason we're going to actually use this as a text element so we'll have two elements we'll have the logo image itself and then some text to me I can just see right now because I will have these in line I could either use an image and a span both of which are inline elements and I probably won't face too many issues with that of course if I do run into anything I usually just tend to Resort directly to flexbox and that's a great way for me to get things all aligned nice and neatly and then I just have maybe an H1 sitting here in the main content of our page and our unordered list and then of course in the background we have sort of a partial background image we're going to see how we might tackle that once I've started creating this mental model I can start thinking of Those portions of the page in terms of actual elements that I want to create often times I will put everything inside of some sort of container in this case I just have it as a div with a class name of container and then we have our two main sections our header section and our main section ction so those would be our header element and our main element in HTML and although we don't really have other navigation elements like we had in our practice app with the pricing about and contact very typically clicking the logo or the logo text I guess in our case would send you back to the homage of a website so that would be considered part of the navigation we're not going to bother with anchor tags in this case but it still would make sense for us to set it up correctly and put it inside of nav element that's where we'll have an image and a span perhaps and we'll make sure to apply some styles to those then in our main section as we said we just have a simple H1 and then an unordered list with some list items and everything should be pretty peachy from there it seems like it's going to be a pretty straightforward project by way of organization I probably will do a very similar setup as I had before where I might have some sort of app component which will be in charge of rendering essentially everything and then that app component will render a header component which will contain the markup in our header section up here and maybe a main or a main content component just like we had in our practice that renders everything on the main element hopefully that can be a helpful practice for you feel free to adapt it to whatever makes the most sense for you but I do find that it tends to be one of the best ways when I'm preparing for a new project to make sure that I get started off on the right foot with this quick mental outline of the project behind us let's jump into a series of challenges where you will have a chance to build each piece of this section project let's get the very Bare Bones of this project set up and as a little gift I'm not going to require you to write any more create root code hopefully you've had enough repetition now that if you needed to you could do that again so let me walk through the steps and then I'll hand it over to you to work on this first part of the project first I want you to create a separate app.jsx file it will be a sibling to this current index. jsx file and you're going to create a new app component it's just going to be called app this is a really common way to set up a react app where you'll have index. jsx which is involved in setting up things like the root and doing other more project configuration style things and then having a separate file like app.jsx which will export a component called app or something along those lines whose job it is to aggregate all of the other parts of your app that you want it acts as sort of a parent component to everything that will get displayed on your page after that I want you to create a separate components folder and you're going to create two different component files inside a navb bar. jsx and a main. jsx for now in those components all you'll need to do is render something like an H1 that says like navbar goes here or main component goes here make sure to export those and inside of the app component that you just created before this you'll import and render the navbar and main components then inside of this file index. jsx you'll import and render the app component right here in root. render as a final step and this one might require a little bit of extra research if you haven't done this before I want you to go over to Google font and get the inter font with the weights of 400 600 and 700 then just add the links to those Google fonts here in the index.html file and make sure to do it above this link element here so it'll go up here okay that's all the steps for this challenge it's quite a bit to do but I think you should be able to do it relatively quickly so I'll hand it over to you to work on this challenge all right let's start by creating some files I'll create a new app.jsx with a capital A and app and here we will just get set up we'll export default our app function and you know what let's take it one little step at a time I'll first render an H1 here that says app component here let's go over to index. jsx and import it we'll import app from slapp and down here let's just get it rendered this is kind of a nice intermediate way for us to just make sure that everything is working correctly okay cool app component here now let's create our components folder and inside components I'll go ahead and create a navb bar. jsx and a main. jsx and I'll just copy and paste this is kind of the cheater way but it'll save a little bit of time we'll call this Main and we'll say that's the main component and we'll do the same thing for navbar okay and then over in app.jsx we don't want this to be rendering its own markup per se at least not right now but instead we want to import our main component and that's going to be from SL components because we're inside the components folder SL Main and we'll import navbar from components SL navbar and then we will just render the let's see we'll do the Navar first and then because we have two siblings that we're trying to render we need to wrap them in some kind of parent we'll just use a fragment at this time and we hit save and awesome looks like that's working great okay then we need to bring in I think as a final step a little bit separate from everything else some Google fonts we're going to bring in the inter font with the weights 400 600 and 700 and actually it looks like at the time of recording this Google fonts has introduced something called variable fonts which allow me to bring in the font and then set a specific style to change the font kind of however I want with the weights so we'll just go ahead and bring in the variable font it's totally okay if you didn't do it that way during the challenge but I can just bring in those links and we're not ready to use these quite yet but I'll go over to index. jsx and just clean up our challenge text and cool we're in a great starting place in the next part of our section project challenge we will be working on the navigation bar styling at the top I wanted to give some fair warning about the next few challenges that we are about to do there will be a few points throughout this entire course where we're working on our section project and it does kind of turn into mostly CSS work I'm going to leave it up to you to decide if you want the refresher on CSS or you want the challenge of working on the CSS of course doing the CSS and styling is likely to be a large part of any front-end job that you have and so personally I think it's good experience but if you are coming to this course with quite a bit of experience in CSS and styling in general following a design and getting your project to look the way it's supposed to look then you have my kind of hesitant permission to skip the CSS portions of the upcoming lessons that it if you've never tried to mimic a design from a design program like figma or it's been a while since you've done any CSS then I highly highly recommend that you do complete the CSS portions of these challenges that we're about to do in this lesson we're just going to be focusing on the navigation bar at the top if you click the screenshot here that will take you to the figma design where you can see things like the font the sizing the colors and so forth I'm also going to leave this Google slide in the lower corner if you need to reference the figma design again in one of the future lessons that we do during this project so let's get started on the navbar your challenge is to to complete the Navar so that it looks like the design I have a couple hints here for semantic HTML purposes the Navar should render a header as its top level component and it should have a nav element nested inside then we can put the image and the text of react facts which in our case will be two separate elements they can both be rendered inside of the nav as children and semantically it makes sense because typically in a navigation bar your site's logo in the nav bar on the upper left will also include some kind of an that navigates the user to the homepage usually and then as a hint I've already mentioned this but make sure you reference the figma design so you can get the most accurate information about the colors and sizes and so forth all right it's your turn give this Navar Your Best Shot all right so instead of an H1 let's go ahead and render our header element inside the header we will add a nav element and our nav is going to have an image and we'll fill this out in just a second and then the text let's just go ahead and add this as a span we can type in react facts right now I think we can get rid of the challenge text we kind of have an idea of what we're doing let's hit save and okay all we see is react facts that's probably what we'd expect let's fill out the image and then we'll have a bunch of styling to do so first we need to make sure we have a source and remember image sources here in scrimba might end up being a little bit different than the way that you're doing them locally if you're using for example a vit project I think it will work if I type in a relative path I'm here inside of my components folder so I need to make sure to go back a directory and then I have my react-spring up I'm just going to leave it like this cuz I think this will work a majority of the computers and very soon we'll be learning about another way we can bring in this logo that will work across whatever platform you're using okay in our image we want to make sure we always include an ALT text so we'll say this is the react logo and from there we are just going to have some styling to do I think that's pretty much all that's left for this challenge so I could go through and add class names to everything more power to you if that's how you decided to do this challenge it's great to get practice with class name however because I know that this site is just going to have one header one nav and that nav is only going to have one image and one span inside I'm going to shortcut that a little bit and just access these elements so this is the point at which we'll mostly be working in CSS and again if you already feel very very comfortable with CSS it's okay you have my permission to skip this part otherwise please stick around and watch this process I've chosen to include this because I think it could be a helpful reminder and helpful practice for a lot of people taking this course so let's move over to our CSS file and this image is driving me a little bit crazy let's access the image inside of our nav and say that the width is let's give it 30 pixels and boy 30 just looks a little bit small I think the design says 30 but I don't know I think I like 40 a little better we might even bump that up a little more later okay so by default react fax is not aligned to the center vertical aligning like this I personally believe is best done with flex box so I'm going to access the parent and make it a flex container so that that's the nav element let me just make sure and yeah so our nav will be the flex parent or the flex container and the image and the span will become the flex items inside of it so this will be display flex and then we can align the items to the center and perfect that looks pretty good if I look at the design the entire header shows that it is about 90 pixels so I'm going to style the header and give it a height of 90 pixels and I think that makes it so the nav is not taking up all that space you know what before we do anything else I'm going to give it a background color and just bring in the say the background color from the design on figma which is this color and yeah we can see that that's not the correct height so now that the header has a height let's just make sure that the nav has a height of 100% so that it fills the entire parent container and cool now that's centered it's pushed pretty close up there to the left and that's because I had added this margin of zero to the body I kind of need that cuz if I don't then we can see we get that Gap around our header so let's leave this at zero but then we can just add some padding inside of honestly I don't think it would matter if it's the header or the nav let's go ahead and put it inside the header and let's give it maybe 30 pixels on the top and bottom and 25 pixels on the left and right I think that looks pretty good okay now I think the biggest eyesore is the text of act fact which is barely visible right now let's separate it from the image by about the seven pixels that the design shows so we'll give the image itself a margin right of seven pixels I guess we could also give the span a margin left of seven pixels I don't think it would matter too much either way and let's go ahead and select that text so this is going to be the nav with the child of a span and again I just as easily could have gone here and given class names to everything maybe just so I'm covering my bases just as a reminder we don't say class equals but we say class name with a capital N equals and then everything else is exactly the same as you're used to with regular classes in this case I am going to take the shortcut okay the color is driving me crazy let's switch it to the blue color from the design and let's bump up the font size a bit and the design does say that it's 22.25 pixels if we take that and divide it by 16 we can get the REM size which is a better practice to use for our font size anyway I'm going to round a little bit and say that it's about 1.3 REM and actually I think it more closely rounds to 1.4 so let's just bump that up again okay that's looking pretty good the font is not quite right though and that's where our inter font comes into play I'm just going to style the entire body to have that so we'll say the font family is going to be enter let me make sure that is yeah that's working okay great and maybe we'll just give a Sans serif back up for that if we look at the design that react fax text has a font weight of 700 and that is looking pretty darn good all right that's really taking shape great job working on this challenge next we'll naturally be styling the main content section all right I'm going to have the same caveat for this lesson we are mostly doing CSS in this challenge so do with that what you will if you could use practice in CSS then we would love to have you do this challenge either way I do want you to at least add all of the markup that needs to happen here so let's take a look at the challenge itself just like the navbar challenge we're going to be building out the main content section so that it matches what we see in the figma design there are two aspects of the figma design that I want you to skip for now because we'll be doing those as separate challenges one is having the bullets on the side be a different color and I believe a different size and the second is this side react logo over here don't worry about those two aspects but do worry about everything else that you see and try to match the design as closely as possible go ahead and get started on this challenge okay let's do the markup here I'm going to surround everything in a main element since that's semantically correct for the main content on our page and we will have the fun facts about react be in H1 here so I'll go ahead and type that in and then simply enough we have an unordered list this should feel pretty familiar cuz our challenges earlier on in the course were essentially doing this exact same thing and with that we'll just have five list items and I'll go ahead on a Mac and hit option shift down and that will let me copy this line and I won't make you sit and watch me type out all of the text here so I'll go ahead and copy and paste that in all right let's hit save and awesome that's a great start let me make this a little bit bigger so we have a little more space to see these items and we are just going to jump over to this CSS now and get started working on that first let's get the background and the text in the right color I think I'm just going to set a background color on the body If instead I were to style the main element which I'm sure we could make work but we'll see let me comment this one out and put it here on Main yeah we'll see that we have actually a couple issues that are highlighted here first of all we get some collapsing margin happening with our H1 the default margin on the top of the H1 one is actually pushing our entire main section down and so we get that white stripe there and secondly we're not taking up the full height of our page we might address that in just a minute but I think it makes a ton of sense to put the background color just on the body so we don't have to worry about that so that's what we'll do for now I am currently pushed all the way up to the left here because the body has a margin of zero and again I don't want to add margin to the body because that's going to kind of mess up our header up there so that's a perfect thing for us to do on the main element we'll go ahead and give this some padding and it looks like it's about 60 pixels on the top and about 30 pixels on the left we'll just let that go top and bottom and left and right and that's looking pretty far down I do think that's because of that H1 margin so I'll go ahead and select the H1 inside of my main and set the margin to zero and yeah that looks a lot closer because I set a dark background on the body I think I also am going to use the body selector to select the color and just change it to White that way if I did create a footer or something and wanted that text to also be white because it's a dark background then I wouldn't have to repeat that style but I don't know we're venturing into Realms where it really doesn't matter how you do it at that point all right let's set the font size here while we're at it and the design currently shows that it's 39 pixels that translates to about 2.4 Rim so that's what we'll set that at let me make this a little wider again okay let's start working on our list the lines look like they're pretty tight together and the design shows that there's about 20 pixels of space between them at this point I suppose I could say Main and then child selector of unordered list but at this point because I might have multiple unordered lists I'm just going to kind of do my own personal best practice and in my main section I'll go ahead and give this a class name and let's say it's the facts list okay then over in R CSS I can just select dot fact list and it looks like it's about 46 pixels pushed away from the header so let's give this a margin top of 46 pixels make this a little taller here and I think actually if I make this wider we can see this one starts to get a little bit wide in this case it's not so bad but if we were to add more facts for example that had a lot more words we would end up with a full width list item there and so maybe what I'll do is give this a Max width and let's just say something like 400 pixels that way when this gets really wide we are still limiting ourselves to the width of this list I don't know that's a design decision that might not make a big difference right now okay let's add some space above and below each of the list items I'll just go ahead and select the facts list and get all the list items inside of there and I can add a margin to both the top and the Bottom by using margin block so that will will allow me to say 10 pixels on the top and 10 pixels on the bottom of each item and that gives us a little bit of extra space there that's nice and in the design if we look really closely each of these also has a line height set and it says 19 pixels let's see if that really makes much of a difference and boy there's barely any difference there but it does make a little bit of a difference especially when it starts to wrap so we'll just leave it in there and one other thing I actually just realized is my items are not spaced as much as I thought they would be the design shows them as 20 pixels apart but I just realized that when I'm doing margin block the bottom margin for one item and the top margin for the other are collapsing together into a single 10 pixel margin so I can either set this to margin block of 20 pixels and that actually looks a little bit more correctly spaced or I think I can do padding block of 10 pixels and padding does not collapse in the same way I think I'm going to leave it just here at padding block so I don't have to worry about thinking about collaps margins in the future but either way should work just fine and okay this is in a pretty good place the only other two things we have on this project like I mentioned is to color the bullets here and then to add the little react logo on the right those do have a little bit of a gotcha to them so we're just going to do them separately in their own challenges I'll remove this challenge text and we will go ahead and start tackling those challenges next I was going to have coloring the bullets so that they were a little bit larger and blue be a challenge that I gave you and of course if you want to try and do it on your own you're more than welcome to do that a really common way to customize bullets like this are to completely remove the bullets from the unordered list and then to use a before pseudo element and create your own little CSS shape that is in the shape of a bullet but at that point it felt a little too I guess nitty-gritty to be really diving into doing that with CSS in the middle of the react course I know I said it's good to practice CSS but I think that might have been a little bit Overkill instead we're going to stray just a tiny bit from the design and we're going to use a special pseudo selector called marker so I can grab my list items here and I can use colon colon marker and this is a pseudo selector that's very specifically intended to add styles to your bullet points in list items I can grab the color of let's see our span right here and actually I can just grab this whole style I think let's go ahead and set the color and just like that our bullets are now the same blue color as react facts I am allowed to style any font properties like font size and I did find that 1.5 RS is about as large as I can go before these start getting misaligned we can see if I were to make this something really large like four rims that the alignment ends up being a little bit messed up and I tried for quite a while to get these two align and couldn't really do that if you know of a good way to do this then please reach out to me on the scrimba Discord server I would love to know how you did it but that said don't waste a bunch of time on it I'm just going to set it to 1.5 where they look like they're still pretty well aligned and we'll just leave it at that it does stray a little bit from the design cuz I think these bullets are a little bit bigger than what we see there they're probably more like two Rim but I just couldn't deal with the misalignment it was bugging me just a little too much okay you get that one for free didn't make you do any work there the last little design thing we'll add is the logo over here and that will pretty much wrap up the react fa section project for us we just have one more tiny thing that we're going to add and that is the react logo that's floating here in the background because this isn't an element that is really a semantically important part of our markup I'm just going to have you add it as a background image instead of trying to add it as an image element for example I don't need a screen reader to read that there's an image element here or have it be accessible via the keyboard or anything like that so I think it's okay for it to just be a background image on the main element the challenges that we've done up until now at least had a little bit of markup that you had to write react code or jsx code for this one is going to be purely CSS so I do give you permission if you feel completely solid with your CSS skills I give you permission to skip this one that said I think CSS can be fun so even if you are you're welcome to stick around and do this challenge I've given some hints about how you should use the background image with the URL and one thing I did add is the react logo half.png file here it is only the actual half of the logo like it looks like here it's not just bleeding off the side of the page that just has more to do with how I exported it from figma but honestly it makes the job a little bit easier to match the design that we see here one thing I'm going to do really quick just because it's bugging me is I'm going to create an images folder and I'm going to move my logos in to that images folder and that means I need to come over to my navbar and just fix my reference here we're going to start with Slash images hitting save and okay everything is working great read the challenge text here and I'll pass it on to you to start working on the challenge okay on our main element I'm going to add a background image and we'll set that to a URL I think in CSS I don't have to have my quotation marks so I'm just going to say slimes SL react logo half.png awesome there we go by default it is repeating so I'm going to add the background repeat property and just set that to the value of no repeat okay and that's making it float by default in the upper left so that's where the background position comes from and background position is actually a combination of two different properties so there's background position X X and background position Y in fact let's just use those to start and then we'll make it short so X would be the left and right or the horizontal positioning and one option I have here is to put it all the way to the right that looks pretty good that's halfway there and then I would add background position Y and right doesn't make sense there because we're talking about up and down so I could say top which I think is the default in this case I could say bottom that pushes it a little bit too far to the bottom I can say Center and that puts it directly in the center although it looks a little bit High compared to the design the design looks like it's not exactly in the center so what I can do is provide a percentage of where it should sit in that direction so I think if I were to put it at something like 65% that seems about right so maybe we'll just stick with 65% now I can combine these though and make these a little bit more straightforward so we'll say background position right space 65% and then I can get rid of my specific background position X and Y properties and now I'm just being pigy but I think this might be just a hair lower we'll go ahead and say yeah let's to get at 70% keep in mind we're not really doing any mobile first or desktop first designs if I start to make this really large then things I don't know they don't look great they're breaking down a little bit but for now this is going to work okay for us again CSS isn't really the point of this course again if you feel pretty comfortable with the background shorthand property then you actually can combine these three together and just say background is this value space this value space this value myself I always forget what order these need to be in so I either have to look it up or I just choose to do this three separate properties like we have here okay let me clean up the challenge text here and let's just navigate over to our index page so we can actually be looking at some react code again hopefully for some of you that was helpful to spend some time on the CSS we will be going back forth to CSS a little bit as the course progresses but I'm excited as I'm sure you are to get back to learning more about react we've just barely started scratching the surface of what react is capable of doing now we have a few administrative details to help set us up for Success through this course and then we'll be doing a recap of the actual react things that we've learned so far so buckle up we're just getting started and it gets more and more exciting from here hey yo you did it you built your first react project I know it might not seem like much but it's really exciting these first few steps of building a static page are really crucial in your journey to learning react as a quick recap the things that we've learned we talked about why we should even care about react in the first place we talked about how the composability Paradigm that it introduces is super helpful in how you can structure your applications going forward and how its declarative nature just really improves the developer experience we practiced time and time again probably too many times in your eyes how to set up a new react project but we also talked about how you can set things up locally on your own machine using V scrimba is a great environment to play around with your code and to learn very interactively like we're doing here but eventually you'll be wanting to build your own projects on your local machine so we made sure to cover that we talked about jsx and how it's a so-called syntactic sugar on top of react. create element and how in the end all it's doing is returning JavaScript objects those objects then describe what react should be placing on the page and it gives us react developers a really nice familiar syntax that we can use to describe what should end up in our web app we built our own custom components which is the Crux of having composability in react and truth be told we have yet only scratched the surface of the ways in which building custom components gives you the flexibility that composition gives and just so we're not left with something terrible to look at we talked about styling and spent a fair amount of time actually building the styles for our app if you haven't yet done so this would be an ideal time to head over to the scrimba Discord community and post a message about the accomplishment of finishing section one of the react course you can click on the screenshot you see here for an invite to the Discord community and a link directly to the today I did Channel this might be a good time to take a quick break from learning react if you have found yourself binging this course it's important for your brain to rest and relax so that it can actually digest the information you've already consumed and make some space for what is to come and we do have some really exciting things to come so once you're ready let's go ahead and jump into the next section with the basic concepts and syntax of building static pages in react under our belt we are now poised to progress forward and start learning about how we can write datadriven react apps you see in our previous project everything that was displaying on the page we had hardcoded directly into our markup and there certainly is still a place for hard-coded text on a page anything that is considered static or unchanging is going to be written directly into the code however we are soon going to learn about how the power of react comes not only from its composability and declarative nature but from its ability to receive information in the form of data and use that to produce reusable components on the page the project we'll be building in this section is going to be a travel journal and the primary thing that will make it different from the static page that we made in the previous section is that all of the information that we see on the page is actually going to be contained in a regular Javascript file in the form of regular objects and arrays this is the completed project over here and you can see that we have this data.js file where all of the information lives and then the react code that we write will take this array iterate over it and produce react Cod components with that information inserted in the correct Place feel free to peruse around this code to see if you can get a cursory level understanding of what's going on and as always you can click on the screenshot you see here to take you to the figma design so you can be prepared to start building this project based on the real colors and spacing that are defined in the figma file in this section we are going to be learning first of course why reusability is important and we'll recognize that it's actually something that you are exposed to in just about every website you visit then we'll dive into the Syntax for the primary vehicle for doing reusability and datadriven react components which is something called props then with an understanding of how props works we will create components from an array of data just like we were talking about earlier and of course this wouldn't be a real scrimba course if we didn't include a ton of Hands-On challenges along the way so warm up those fingers get ready to complete all of the challenges in this section which is what we'll be diving into right away we'll start working on this section project of the travel Journal by having kind of a softball challenge this will mostly be review of the things that we've learned previously our task is simply to make this header section for the travel journal the first thing you should do is click on the screenshot here that's going to open this design in figma so you can see the details for this design and I've tried to set you up for success with this project by including a fairly detailed description of the task at hand a couple things that I have done already for you if we look in our index.html I've pulled in the Google font of inter which is the font that you'll see is used here in the design and then I've also pulled in this little Globe image just right here as globe.png and so you'll be able to use that as your image source feel free to style this however you want you can use class names or because this is a relatively small app I'm okay if you want to use some element selectors assuming you're using some good semantic HTML for the app if it's been a minute since you finished section one this will be a great way to brush off the rest so I'll hand it over to you to work on this challenge all right so let's create an app component in a separate file so I'll just create a new file called app.jsx and before I jump back and forth I'll go ahead and import it even though it's not really exporting yet we'll get that in just a second so we'll import app from the app file and then I'll just go ahead and render my app right here all right I think I'll probably error if I hit save so I'm not going to do that quite yet we'll go over to app.jsx and I will export default my function app and just as a sanity check just to make sure things are working I like to just render something like an H1 that says I'm the app component okay let's hit save okay good no mistake so far we're importing the app and rendering it correctly let's go check out our challenge text okay so that's this first part done next we need to create a components folder and a header component which I guess I wasn't explicit about that being inside the components folder but hopefully you figured that out it's not a big deal if you didn't something probably important to point out is that our app is going to end up being really small there's not a whole lot to this page as you can see and so creating a separate components folder is maybe a little bit of Overkill or maybe you like doing it file organization really does end up being pretty subjective and so just make sure you're following the conventions of whatever project you're in or if it's your own project you can make up whatever conventions you want just to see it done a little bit differently than we have been I'm going to create this components folder and inside I'll create a header. jsx file and let's see what did the challenge tell us to do create a components folder header component render the header inside the app component okay that was a little bit vague but that's what I was trying to do so we'll export default function header and we'll have it also just return an H1 for now I'm the header component we're exporting it here now let's go over to app and inside our app we're going to import header from and now our path has to start with/ components SL Capital H header okay instead of our H1 let's go ahead and render our header and I'm the header component Perfect all right let's see what else we have that is done now let's go back to our header and instead of returning in H1 I'm going to return a semantic HTML header element inside the header I'll go ahead and put my image this is the little Globe image so my source is going to be now let's see I'm inside my header which is inside the components folder and I need to be outside the components folder so I need to go do/ globe.png and then we'll go ahead and I guess we can call our text for the my travel Journal we'll just call that an H1 and we'll say that's my travel Journal let's hit save and the globe is impossible to see because it's white on a white background let's see if we give the header a background of red okay awesome there's our globe and we have our text let's go back to our Challenge and I guess we can mark the second one off and the third one is basically all design at this point we've done all of the react specific stuff we're going to do with this challenge if you already feel really comfortable with your CSS skills then I do give you permission to skip the rest of this as we're just going to be doing CSS however even if a little bit you want to get some extra practice with CSS or watch how somebody else writes their CSS then please by by all means stick around we'll get through this pretty quickly because my page is so small and I only have one header I'm going to select the elements from the header just directly so we have our header and instead of a background of red if I go and look over at the design I can see that the color is actually this color and let's go ahead and get the layout correct I'm going to use display of flex just to get everything lined up and it's pretty huge right now but I'll go ahead and justify content to the center the text is actually white so we'll change the color to white I can see from the design that the height is 55 pixels oh okay and we need to also align our items to the center and I think that should be everything for this section itself now let's go ahead and style the image so I'll select the image that's inside the header again if you were to ever consider putting more than one image in here you might want to give this some kind of class name like I don't know globe or something I trust that you understand the concept of class name in react and selecting with classes in general in CSS so I'm just going to keep it simple for now it looks like the width of this little Globe is 24 pixels and if I look closely it has a margin right of s pixels and then let's go ahead and select my H1 we'll change the font size back down to one RM and actually the design shows that it's a little bit smaller than 16 pixels so maybe I'll I don't know just kind of estimate at this point 0.9 R we'll say I think the font weight is a little bit lower so we'll go ahead and say the font weight is 500 and that looks a little more accurate to the design and the font family is different too the font family is enter and let's see is that making a difference yes it is perfect one last thing that I just realized we didn't do we always always always have to put our alt text on our images so I'll say maybe Globe icon okay let's go see and yep we were able to do that one and so let's go ahead and check that off and I guess now that we've done that and scratched that itch let's go ahead and clean up this challenge text and awesome great work everything we've done so far should represent things that you have already learned by this point in the course if maybe you're picking up this course again after a little bit of a break and some of this feels unfamiliar this is the best time to go back and review what you might be a little bit Rusty on and I say that because we're now ready to move forward on our section project and start learning about how we can make the rest of this page here once you feel good and ready let's keep moving forward let's Jump Right In and start building an instance of our journal entry component the main purpose of this exercise is to highlight the fact that we're not quite ready to finish off the app as we currently have it at least not in a reasonable way that starts to use the potential of react so your challenge is to build out the entry component and there's a couple things that I've done for you since we last saw this code first of all I created the entry. jsx file already for you so you don't have to worry about that I also pulled in the little marker icon that's just sitting right here next to the country name or the location name and that's just right here inside of a new images folder that I created and it's called marker.png I also pulled the globe.png in there just because that made sense and fixed the reference to it in the header now since your task is going to be creating an instance of this component and filling out the data it will require you to hardcode that data for now and in an effort to try and make that a little bit less tedious I've included this japan. MD file we're going to delete this pretty soon but this just has the text here so you can copy and paste it at least without having to go back and forth between the design so much all right let's go back to our challenge text some notes I included I only want you to render one instance of this entry component and I guess I wasn't explicit about this but you will want to render that inside of the app just right underneath header you might already recognize that's going to include its own little challenge but I'm not going to say anything more about that as I've mentioned I pulled in marker.png so make sure you use that and then a reminder that the main purpose of this challenge is to show you where some of our limitations in our understanding of react currently are so don't worry about the fact that you're hard coding all of this data into the component some of you may not have been worried about that in the first place okay I think I've set you up with everything you need so I'll pass it over to you to work on this challenge okay let's go ahead and we're going to export default a new function called entry this is called entry because it's like a journal entry in our travel journal and when I look at the design I see everything in this entry as a surrounding div or I think if I were to be a bit more semantically correct this might work out as an HTML article element planning out the CSS ahead I might put this as two separate elements and use a flex box going this way and then the elements that are in here might end up just naturally flowing top to bottom if they're all block elements although this view on Google Maps I might have to do a little bit something with that and that's okay we'll figure it out as we go so I want to from each of my entries we'll go ahead and return a parent article element and you know what I'm going to build out the structure first and then I'll come back and do some styling which means it's going to look pretty terrible for a little bit let's just throw everything on the page so I have my main image and I just realized I didn't put the URL to the image in my japan. MD so hopefully that didn't cause too many issues with anybody but the URL is very clearly listed in the design and you should have been over in the design anyway so we'll go ahead and give it this URL there and we always need to include our alt let's go ahead and say Mount food okay kind of reading this left to right we next would run into our little image of the marker there and then the location name and the view on Google Maps link so I'm going to surround all three of these items in its own div just so I can give it some flexbox styling we'll go ahead and create a div and we'll fill out those images so we have an image source of we're inside of our components folder so I need to go out and then into images and then to marker.png we'll include our alt that says a marker icon maybe call it a map marker icon all right the next thing we had the name of the country that we were visiting and I don't know for now I think I'm just going to use a span because that's also an inline element let's just go ahead and do that we'll say this was Japan and then we had a link so that's my anchor and I'll need an href that goes to the link for Google Maps go ahead and just grab this and we'll put that in there oh and this is not self-closing we need some text on it so we'll say view on Google Maps now I'm Flying Blind a little bit here because I haven't created an instance of my entry component let's go ahead and hit save no errors that's always good let's go over to our app.js and let's import our entry I'll just copy this one all right so here is where there's kind of a little gotcha if you remember we can't put two sibling components side by side side like this now I don't think I have a reason yet to wrap everything if I need to add some Styles I might have to change this to a container div of some sort but because I don't want to add a bunch of extra stuff to it I'm just going to use these fragments and that solves that problem there let's go ahead and hit save and my image is ginormous let's go ahead and start styling that part up so over in my entry I'm going to buy myself a little bit of room by cleaning up this challenge text I'm going to start off by making my article into a flex container I think that will be an okay way to do it this is coding we might change things along the way oh and I do want to give my article a class name and let's call it uh let's say it's a journal entry just so it's really clear what we're doing here okay let's go to our CSS and create a journal entry sometimes i' like to put the name of the element here just so that it's really clear what we're doing I think it makes it a little bit easier to find and let's give it a display of flex okay so I should be able to scroll over to the right and see that and now let's go ahead and style up this image it's not the only image and I don't really want to just select the direct children so let's go ahead and give this a class name as well and we'll say this is I don't know maybe this is the main image yeah that's good enough all right back to our CSS let's style our main image and in the design we can see that the width is set to 125 pixels ah and I bet this was a little bit tricky because the URLs that we're using they have a different aspect ratio than what our design shows our design shows a portrait where it's taller than it is wide and the actual image itself is wider than it is tall the fix for this is for me to use the object fit CSS rule but it does mean that I need a container for it so over here I'll go ahead and and just create a little container and I can surround my image in that container will give this a class name of let's go main image container okay now that I've done that in my CSS we can select our main image container give it the height and width that we want so this is actually what we want here and we can specify the height which in the design show 168 pixels very specific and we need an overflow of hidden then we can tell the image we want it to have a height of 100% the container a width of 100% the container and object fit of let's use cover and actually that's looking pretty good we do need rounded Corners though so let's give this a border radius of 5 pixels just a little subtle rounded corner there we'll worry about our our spacing in a little bit I'm going to make this a little bit wider for us okay making good progress so far let's deal with getting the rest of the content on the page and then we'll do some final touches or I might just do the final touches for you let's go ahead and call each one of these an H2 that seems logical so in our entry let's see where are we we have this div H2S our Block Level so that should put it onto the next line for us and oh well let's see that needs to be inside this div if we want it to do that okay and let's see this says Mount Fuji let's just see where it is oh okay that's better than I thought it would be it's a good start then we'll give another block element I guess we could call the date an H3 well no it doesn't feel like a header let's go ahead and just call it a paragraph and we'll style it up to be a little more bold let's go grab our dates and we'll do another paragraph here all right let's see how we did oh well because we're using a display of flex our item here trunk in order to fit all of the long text here we can counteract that by in our CSS let's see in our image container we need to say Flex shrink of zero and at this point I'm just going to use the magic of editing and just like that with the snap of a finger all of the design for our entry component is done if only it were that easy in real life right I think I'll probably increase the size this just a little bit so we can see all of our text and awesome it might not be 100% perfect but that's okay it's good enough for us to move on hopefully as you were doing this exercise you could see that there's a pretty significant limitation to the way that we're hardcoding all of the data here in our entry component as it stands if we wanted to create a second entry we would likely have to create another entry component and that doesn't really make sense when it comes to using reusable components because well obviously we're not taking advantage of the reusability aspect of a component in react feel free to look at some of the changes that I made in the markup or the CSS although they're not crucial to your understanding of react it can sometimes be overwhelming to be tossed into a big change like what we just saw with the design then once you're ready let's move forward and start talking about how we can make this entry component more reusable as we've already discussed the way that we have our entry components setup is not reusable at all if we were to go to our app.jsx and create another instance of our entry component we're constrained to having another trip to Mount Fuji and that's because the way that we set it up is by hardcoding all of the information directly here into the component so obviously this isn't going to be our ultimate solution because we want our travel journal to have more than one destination in it the idea of reusable components can be found all over the internet if you go to amazon.com for example you can see we have this list of new releases in cell phones and accessories and although the information in each one of these products is different the structure of it appears to be exactly the same we have a little badge icon an image a product name a rating and a price and you will see this all over the web let's take IMDb for example when it comes time for a new movie to be entered as a fan favorite you can imagine there isn't a developer who's jumping in and typing the HTM code down furiously to try and get this new movie entered into the fan favorites list instead what's displayed here is data driven which means all someone has to do at IMDb is add a new movie to the database and the site will automatically update to display the repeated elements of that new movie here in this list which consist of a cover image a rating a title and so forth and as you can imagine react has a solution for structuring our code in a way that is more similar to this where it can be data driven we're going to talk about the datadriven aspect of react a little bit later but for now we can see that our component is so hardcoded that there's no meaningful way for us to have it represent different kinds of data and in react this is where the concept of props comes into play in my years of teaching react I have found that props tends to be one of the first hurdles for people that are just getting into learning react and so my plan is to take the topic of props and to spread it out a little bit thin we'll take one little step at a time and in typical scrimba fashion you'll get your hands on the keyboard and I think by the end you'll have a really solid understanding of how props works and react so without further Ado let's jump in and start learning one of the most impactful and exciting aspects of react let's start by understanding the basic concept of props and react what you see here is just a plain index.html file we haven't introduced anything dealing with react in this I want you to take a close look at the elements that you see here and see if you can figure out what's wrong with them let's start with the anchor tag an a tag an anchor tag is intended to link you to another place but currently we don't have an attribute like the href specified without an href this link is essentially useless we need the href property in order for us to send someone to another page maybe like google.com similarly the image element is basically useless without any kind of Source property we need to add this Source attribute or property in order to specify exactly what image will be here we could put the path to a local file or we could put the address of a file that's hosted somewhere on the internet input is interesting because I think on its own it actually will yeah it actually will put an input box that we could type into if we wanted to however there are attributes or properties that we can add to the input that will make it a lot more let's say beefed up or capable for example I can add a placeholder that says something like first name and that suddenly makes the first name text appear inside of my element on the page or there's ones that have even more consequence to them like the type property if I change the type of this input to something totally different like submit now it changes from an input text box to a button similarly it could change it to radio and it completely changes the visual look of this input these are Concepts that I'm sure you're already very familiar with let's look at a similar parallel example in JavaScript here I've written a function that's called add two numbers together and it just hard returns one and two think for a second what is wrong with this function it's syntactically correct but what's wrong with a function like this well it's very very limited in its capabilities right now if I call add two numbers together it will always return three essentially it's a useless function now you might already see where I'm going with this if I add some parameters like let's say A and B to this function now I can dynamically add and return the result or rather the sum of the two numbers that I pass in and with the small addition of these two parameters that I've added I now have sort of beefed up this function in a way that it's capable of adding whatever two numbers I want not just the hardcoded one and two that used to be there again these Concepts should be familiar to you by now but this is just a primer for us to understand the concept of props in react in both of these instances in JavaScript and HTML we can see that passing additional information to our maybe elements or in this case functions allows us to reuse these elements or functions in multiple different ways so with that primer under our belts let's look at another conceptual parallel that is a little more visual let's take a second to understand props in a little bit more of a visual way here we have a screenshot albeit kind of an older screenshot from YouTube and as we look around the site and honestly as you look around pretty much any web app you're going to find this repeated nature of different components on the page for example here in this top playlist we have a number of different videos Each of which has a very similar structure we have an image on the top half in some bold text right below that we have the title of the video and there's other aspects too like the viewership count each video also has a little Tim stamp in the lower right and the other visual aspects that you see here obviously you can imagine that whenever a new video gets uploaded to YouTube there isn't a developer that's going in and manually recreating any of this content but instead the data of that new video like the cover image the title the number of views and so forth is being stored in a database and this flexible reusable component is able to receive the information about that specific video in order to display it as a unique video on YouTube and as you become more familiar with this concept you'll start to see how these reusable components can be nested together for example not only do we have individual I don't know let's call them video tile components but we have repeated lists of those video tile components which maybe we would call it something like a video tile list or a video list component inside of those video list components are a nested list of video tile components and kind of as we saw on the Apple website there's this section over here on the left which albeit pretty small is probably a repeated component each one of these just has an icon and a title okay I think I've beat this concept into the ground I think you're probably starting to understand it now let's go back to some react code and see how we can actually implement this in the code there's one more quick thing we need to cover before we can start using props in react which is the way that we will be able to make our components more reusable we've learned about jsx and how this syntax that looks very much like HTML is able to be interpreted as a way to create new elements on the page and whatever we put in between our opening tag and our closing tag just like in HTML is what will actually get rendered as in this case text or in some cases other nested elements on our website however one of the most common things you'll find yourself doing is having some sort of variable or value that you need to have displaying on your page for example let's say in the process of creating our component we came up with a first name which let's set it equal to Joe and a last name which will set to Schmo and instead of saying hello world we wanted to say hello Joe Schmo when you're first learning react it might be tempting to try and just stick first name in here and then a space and then last name or maybe as we're used to doing it in vanilla JavaScript we might do some string concatenation so we might try to say first name plus a blank space and then plus the last name now I'm not going to hit save yet but I want you to think about what it is that will happen when I refresh this page some of you probably figured out that it's just going to literally display the text that I put between my opening and closing H1 element fortunately react has made it really easy for us to interpret JavaScript values in the middle of our jsx as opposed to literally displaying this text as if it were what I wanted displaying on the screen and the way I can do that is by simply surrounding any JavaScript values with a single set of curly braces so we'll see I'll be able to hit save and now Joe is correctly coming through so that brings us to the first challenge that I'm going to give you simply enough your challenge is to finish off this H1 below so that it says says hello joeo there shouldn't be any of these characters or the variable name last name or anything like that go ahead and work on this challenge all right simply enough all we need to do is get rid of those characters and then surround last name in a set of curly braces now let's talk for a second about what's going on with this line when react is being transpiled or compiled to regular JavaScript this less than symbol followed by the name of the element followed by the greater than symbol it's able to interpret that as the beginning of being in jsx I kind of like to think of it as entering into jsx land let's call it once we're in jsx land the code that we have that follows will be interpreted literally on the screen like we see with this word hello however once we run into this opening curly brace react says okay we're no longer in jsx what follows should be interpreted as regular JavaScript and thus we enter what you I guess could call JavaScript land and here in JavaScript land we have this variable first name which has been declared earlier just like we would in normal JavaScript and so it gets interpreted or rather the actual value that first name represents gets put into the place of this curly brace variable expression that we see here then with the closing curly brace we're now back in jsx land and we have a literal space here that gets interpreted as a space I guess I should probably hit save so we see that this is working so there's our space right there in the code or on the display and then with the opening curly brace we enter back into JavaScript land and we get a JavaScript expression in this case a variable that's set to the string Schmo and the transpiler will take everything here replace it with what its value actually is and that's what gets displayed on the screen let's clean up this challenge text and at this point it's important for our understanding to realize that the JavaScript that we put in here as long as some value is getting returned from that JavaScript we can run whatever JavaScript code we want inside of the curly braces that we put even though we're inside of jsx for example let's say we wanted to instead of saying hello Joo let's go ahead and clean some of this up what if we wanted to have it say it is currently and then whatever time it currently is well because I can run whatever JavaScript I want inside of a set of curly braces again as long as a value is being returned from that expression I can run code like okay let's create a new date and then I'm going to call get hours on that date and then well let's just see what this shows up as okay it is currently 15 if you're from a place that uses 24-hour clock that certainly makes sense we also might do a modulo 12 if we want to have that display in 12-hour time and there it goes it says it is currently 3: maybe we say it is currently about 3: and that makes sense because for me right now it is 3:23 p.m. now I would say with great power comes great responsibility and having a a bunch of logic stuffed into the middle of our jsx here is it my personal favorite and so my personal preference would still be to put my logic happening up here let's say maybe const hours equals and then we'll paste in that expression and then simply enough I would just say hours goes here and we get the same result and we can take this as far down this Rabbit Hole as we want for example let's say we wanted it to display either good morning good afternoon good evening or good night depending on what time of day it was all we'd have to do is simply write out our Logic for determining what this particular word should be and again I would prefer myself to do this up here before the return in our component and then we would simply display the text that resulted from our calculations right here in the code because this is more of a simple algorithmic challenge I'm just going to write out my solution and then I'll give you a really simple challenge for displaying the correct text down here inside of our H1 okay I just hit refresh so we can see our hardcoded good night right here and I've written out the following logic it's pretty straightforward I got rid of the modulo 12 so we could go all the way up to I think it ends at 23 hours I created this let variable called time of day and then all I did after that was create some conditionals that said if it's before 12:00 then we'll say this time of day text is morning if it's between 12: and 5:00 p.m. then it's afternoon if it's before 900 p.m. then we'll say it's evening and otherwise we'll say it's night I don't know maybe these aren't the perfect hours but now it's your turn we'll have a really simple challenge simply enough your challenge is to change this hard-coded word night to display the text that we determined from the logic above go ahead and work on this challenge all right all we have to do is get our time of day variable we'll put it in right here and then of course if we were just to hit refresh now it would say good time of day and that's not exactly what we want if we however surround it in curly braces now this will be interpreted as the JavaScript value of time of day which was determined up here in our logic and we get good afternoon because again it's about 3:00 my time and we can see that this is working if right now it's about 15 for me so if I were to change this this wouldn't make any sense but let's go ahead and say between the hours of 12: and 2 it's considered afternoon I'll go ahead and hit save and sure enough even though it's 3:30 my time we're getting a good evening let's go ahead and change that back cuz that's pretty weird okay now that we've gone through how to put Javascript inside of our jsx we are primed to look more into the actual syntax of props and see how we can make the components that we're creating more reusable in order for us to learn the syntax of using props and react we're going to use this little contact book that I made as an example as you can see everything right now is just hardcoded here inside of app so we have these article elements these articles represent each one of these contact cards and just like we saw before everything is hardcoded which again for a tiny app like this might be okay but if you had any dreams to scale this to a bigger amount than just having four different contacts in your contact book then this clearly won't be the way to go so to familiarize ourselves with the code I'm going to give you a fairly straightforward Challenge and then over the course of the next two scrims we'll be talking more about the syntax for props and react so your challenge is to First create a new contact component in another file in this list below choose one of them to move over to that new contact component that you create then back here in our app component I want you to import that new contact component and create four instances of it in the meantime you can just delete all of the articles that are here once you've moved one of them over into that contact component and don't be too worried about the data that's in these because we'll get it back in the next scrims while you're on this last step of the challenge where you import and render four instances of the contact card I want you to be thinking ahead of time what the problem is going to be when we do it that way there shouldn't be a syntax error or anything like that but there will be an obvious bug that shows up on our page okay I'll turn it over to you go ahead and start working on this challenge all right so first we're just going to create a contact. jsx file and I'll export default my contact component function we'll just have it return one of these articles okay paste that in I think that should be everything from this side let's go back to app.jsx and we will import contact from contact and let's go ahead and just delete the four articles that we have here and we'll render four of these contact components okay now if you didn't take a second to think about what's going to show up before I hit save I want you to think now what are we going to see when we hit refresh let's hit save and we have four Mr whiskerson as much as we love Mr whiskerson we really want all of our contacts to be in our contact book and naturally the reason that for Mr whiskerson are showing up is because we took the hard-coded data and we set that as what's being returned from our contact component this is not terribly unlike having a function that's called add two numbers and then just hardcoding having it return 1+ 2 this function can only literally do one thing and it has no flexibility to work with other numbers that we might want to add together as we've mentioned the way that I can make this function more flexible is by taking in parameters and then instead of hardcoding the data in here allowing the person who's using the add to numbers function to provide numbers A and B and then simply return the added sum of those two okay I think we've become pretty familiar with this little little contact example that we have in the next scrim we're going to focus on how we can pass our information into the contact component as we see it from this side of the equation then in the scrim that follows we'll go over to our contact card and we'll see how we can consume or receive the information that's being passed in to the contact component when it's being rendered from this side if you need a little more time with this code that's fine feel free to play around and when you're ready let's see how we can pass information into our cont contct component we need a way to pass data into our contact component otherwise we'll have to hardcode everything into that component and it basically ruins the whole purpose of having reusable components fortunately react has chosen a way to do this that makes a lot of sense for anyone who has done any kind of HTML in the past just like in HTML when I have a reusable element like a link I can pass in different attributes in HTML to alter the behavior of that link element I also can pass information into that link like an href so that the link can act a little differ from other links that have different values for their href now in HTML I can't simply come to my link and add whatever I want here and set it equal to something because well this whatever I want attribute is not something that's defined in the HTML spec for the link element that said the way that we pass data into a rea act component is going to look very very similar to how we do it in HTML however because a contact component is a custom component it's something that I created I can in fact pass in whatever I want as what looks like an attribute in HTML but in react is called a property or more commonly a prop and because it's custom I can create a prop that's called whatever I want and I can set it equal to whatever value I want it to have so take a second to think if I'm passing data into my contact component what kind of data would I want to be passing in the answer to this question is whatever information we need to pass in so that the contact component can finish its job it can display what it needs to display remember the goal is to take out any hardcoded data more specifically the image source the name of our contact the actual phone number of our contact and the email of our contact those four pieces of information don't belong here in the contact card unless for whatever reason we don't want to reuse this component let's go ahead and start with the image over in our app component let's get rid of this whatever I want and let's choose to pass in a prop called IMG I can set this equal to and let's go over to our contact we'll just take the path to our file and we'll set it equal to the path to that file now remember we haven't yet started working on how we can consume the props that we're passing into our component so in this scrim we're just going to be doing some work here on this side of the equation and in the next Grim we'll finally get to a place where we can see our contacts working the way that they're supposed to be working now I do have a challenge coming up that you might hate me a little bit for giving to you but just try to trust that I have your best interest in mind just like in HTML we're not limited to having a single attribute on our HTML elements we're not limited to to having a single prop on our react components I'll go ahead and put these on their own lines because I know I'm going to have a few of them and this is perfectly syntactically correct I'm going to go ahead and do one more of these props and then the challenge that I know you're going to hate me for is you are going to be in charge of adding all of the rest of the props for these contacts I guess we can just work from top down so we already handled the image next we're going to be passing in the name and the name for this first one will be Mr whiskerson and now the time has come let me type down what your challenge is I usually don't love giving out busy work but this is an example of a time when getting your hands on the keyboard and getting as much repetition as you can is going to be your best friend passing props into a react component is one of the most common things that you'll do in any react application so let's start off strong a little bit of a trial by fire your task is to add all of the rest of the data to the contact card instances and what I've done is I've pasted in the article elements that we had in the old version when we were hardcoding everything keep in mind each one of these contacts should have an image a name a phone number and an email and that's all the setup you need warm up those fingers and get started on this challenge okay let's go ahead and do this so I'm going to pass in a phone because I get to choose the names of these I could choose phone number like this although I think it's fairly clear what it means when I say phone so I'm just going to pass in phone and let's go ahead and grab the phone number and pass that in as data keep in mind what we're passing in right now is a string everything is a string in HTML you kind of have to do it that way you pass everything in as a string in react we're going to see that there's a way to pass in any data type to our components but for now everything we're displaying is a string so this will work great and lastly we have an email for Mr whiskerson and and here it is right here pass that in and that should be all the information we need for our contact card to work when again eventually we come to the contact side and consume the data that we're passing in I'll do one more of these by hand and then I'll speed up through the rest of it so you don't have to tediously watch me do this we add our props right here after the name of the contact and before the closing angle bracket make sure we leave a space there I'm going to pass in an image prop and I'll set this equal to the path of the image for fluffykins it's right there we'll pass that in awesome notice that I can do these in line as we're seeing here or if there's a lot of props I can put each one on their own line either way is completely syntactically right and correct I'm a little worried that you're not going to be able to see the stuff I'm typing behind the mini browser over here so I am going to put these on their own lines okay the name let's just copy it to make sure we don't get it wrong fluffy kins goes right there phone this one right here and email is this guy right here maybe just so I don't have to scroll as far I'll go ahead and delete these two articles now that I'm done with them and as I mentioned I'm just going to speed up through the rest of this so you don't have to tediously watch me do this hopefully you already put in your time so we'll try to get through this quick okay let's all be honest that wasn't really that bad let's go ahead and clean out our challenge text here now hopefully one thing you notice is just how much nicer the organization of this is we've been able to have more of a data Focus here where the data is most important and we've been able to have more of a layout and design Focus here in the individual contact card and if we want to make a change to how the contact card is laid out or add some new classes or anything like that we can do it from one place here in the contact component and out here in the app component it doesn't really care about that we're able to just pass in data and have the contact card handle everything else of course if we decide we want to add additional data as we're passing this in then we would need to make modifications to both the contact card and to the props that we're passing into the contact component but that's kind of true of the way that we were doing it before anyway okay is it time for the big reveal let's go ahead and hit save and of course we still have four Mr whiskerson don't worry your effort was not in vain in the next Grim we're going to be learning about how we can consume the information that we're passing in as props to our contact component so that's what we'll be doing next in the last lesson we learned how we can pass our own custom data into the components that we're creating using properties more commonly referred to as props in a way that's very similar to how we can pass data or information into an HTML element using the HTML elements attributes we also talked about how there's a difference where in an HTML element I can't choose to create whatever attributes I want on those HTML elements they have to be attributes that are recognized according to the HTML spec but with react as we're passing in data we can pass in whatever props we want we got to choose the names here we just happen to choose names that were really logical and easy to understand always a good way to approach your variable naming so how do we receive these on the contact side so we can finally get rid of all of the hardcoded data that we have in here well just like a function that receives a parameter my react components will receive something in the functions parameter which will be an object that represents all of the properties that we passed in really commonly I might call this something like props but just like any function parameter name I can call this whatever I want in fact let's see what happens when I console log whatever since that's the name we chose let me make this a little bit smaller here and open up our console we'll hit save and we can see that we have a JavaScript object that was console logged four different times now I want you to think for a second why did it console log four times if we only wrote One console log well it's because we have four instances of our contact component and remember although the syntax looks an awful lot like HTML really what's happening under the hood is this function is getting called this contact function component is being executed and because it's happening four times it's being executed four times and we have one console log that's being run four times let me actually copy one of these from the console so we can talk a little bit more about it and I'll just paste it down here and I'll go ahead and clean this up so it's a little easier to see what's going on okay so this was the first one that got console logged and I think this should probably be looking pretty familiar what we received as the parameter to our contact component or in other words what we're receiving as props I'll go ahead and change this to props because that's much more common is an object a regular JavaScript object where it's got properties that map to the values that we passed in in our app component right here keep in mind we got to choose the names of these props so if I were to for example change IMG to something like the full word of image we can hit save and now we can see that the first instance in our console doesn't have an IMG prop but instead has a an image prop or an image property to the props object that we're receiving now I don't want to go too far down that rabbit hole so we'll clean that up let's go over to our contact we'll clean up what we have here as well and now it's going to be time for a challenge let me go ahead and type that out now that we're receiving an object that has all of the data that the instance of the contact component needs in order to correctly display our contacts up here we should be primed now to update our contact component so that we can use that data instead of the hard-coded data that it currently has so your challenge is to fix the code below to use the props object and the values that it holds to replace the hardcoded values that we have below as a quick note there's going to be a small bug in the code so I want you to do your best to squash it just don't be disheartened when you hit save and you see a little bit of an inconsistency in the context this challenge does require you now to synthesize some of the information that you've learned previously with the information that we've just been learning it's okay if that's a bit of a challenge for you but I do want to encourage you again to give it your absolute best shot Don't just run into the first sign of trouble and decide to hit play and watch me do it instead turn to an AI assistant turn to the scrimba Discord Community ask a friend or Google it or go back and rewatch some of the previous lessons if that might help jog your memory all of those are yes more timec consuming but they will be a much better learning experience for you remember you're here to learn react and the only way to do that is to work through it the more difficult way all right all right enough of a soapbox speech I'll pass it over to you to work on this challenge I'll go ahead and clean up the challenge text here and let's actually start right here in the H3 at first we might decide just to try and type in props do name props is an object and it has a name property so I should be able to do that well don't feel bad if you fell into this trap I happen to fall into this trap all the time I'll hit save and we have literally props name showing up for every contact here of course when we're inside of jsx and we need to evaluate a JavaScript value we need to surround it in a single set of curly braces simple enough now when I hit save awesome even though the pictures and everything else is the same the names are coming through our contacts are becoming unique let's go ahead and do the same thing for our source now our source is a string but we're going to pull that string off of the props object which is in JavaScript so I'm going to get rid of my quotation marks and put a set of curly braces and then we say props doimg now this is where that little bug comes into play we'll hit save and look at that we have fluffykins Felix and pumpkin working but Mr whiskerson is not working why is that well it's a bug that we introduced when I was talking about how we get to choose whatever name we want for these properties and in doing so I changed this one to the full text of image so let's go ahead and change this back to IMG it's always going to be important that the names of our properties that we pass into our components are consistent across every instance of that component now we hit save and we've squashed that bug coming back to contact we can do the same thing now with the phone we'll go ahead and delete the hard-coded phone set of curly braces props do phone and for the email curly braces props do email hit save and awesome we're back to a working state for our contact book now hopefully I'm not belaboring the point but over the years of teaching props I have found it to be a sticking point for people in their Learning Journey and I don't want that to be the case for you so we're taking it one little bite at a time and we've basically come to the conclusion here we've been able to Define what information via Properties or props that we're passing into our custom components in the code of our custom components we're receiving that as an object that we're deciding to call props let's get rid of this console log and then we're accessing the data on that props object with regular JavaScript using props doimg props name and so forth if you feel like you've been able to follow along up until this point give yourself a big high five or a pat on the back that's a pretty big accomplishment I know we've put quite a bit of work into what now appears to be a fairly simple concept but writing props in react is going to be an everyday part of your react life so hopefully you can appreciate the extra time time and attention we're taking on it before we move back to our travel Journal I want to show you a cool little trick that we can do when it comes to the props that we pass in so that's what we'll be working on in the next scrim okay it's time to give you a prop quiz sorry I couldn't help myself like before your task is to read through each of these questions to actually click into the editor and type down your answers don't forget in scrimba if you have any changes that you make to the code you can always save it as a note so that you have access to it later you can even record your own voice talking over the top of the note if you wanted to keep an audio note and all of those are saved here in your account on scrimba so pause now answer the questions through this quiz and then you can hit play and we'll go through the quiz together number one what do props help us accomplish well just like parameters being passed into a a function props being passed into a component help us make that component more reusable as you become more and more experienced in react you'll realize that there are times when it makes a lot of sense to pass props into a component so that it's reusable and other times when it might be possible to pass props into a component but it's just not always necessary I can't tell you how much time I have spent trying to create a component that's very reusable and then ended up only using it one maybe two times that's just one of those things that will come with experience as you write more and more react code remember when we pass props into a component it could be data that actually gets displayed as a part of that component or it could sort of be like metadata that you're passing into the component that in a way configures it to act a certain way either way it helps us make any component that we create more reusable so that we can keep our code AS dry as possible okay so number to how do you pass a prop into a component in the same way that you pass attributes to HTML elements like a source attribute for an image you essentially do the same thing when you're passing props to a component so if I have my own component like let's say my awesome header I'm using a strange name just to make it very clear that this is a custom one you can pass a prop of your own choosing like maybe title into that component that brings us to number number three can I pass a custom prop like for example blah blah blah to a native Dom element so for example a div with the lower case D well the answer is no so we come to the next part why not and that's because under the hood when react sees a regular HTML element that we're trying to render we express that element through the jsx syntax and that jsx syntax actually returns an object and the object describes the actual Dom node that should be created when we add an attribute to a regular Dom element like a lowercase D div the object that this jsx creates is expecting to be able to add this property to the Dom element and since Dom elements don't have an attribute called blah blah blah I can't just choose the props that I want to add to Native Dom elements like this div so let me try typing out a summary of that so the answer is no because the jsx that we used to describe those native Dom elements we want react to create will eventually be turned into real Dom elements and real Dom elements don't have whatever properties let's say Properties or attributes specified in the HTML specification which as we all know doesn't include properties like blah blah blah okay I think we understand that concept how do I receive props in a component simply enough the parameters to that component function will receive a value called props which of course we could name whatever we want but by very strong convention will be props and that leads us to the last question which is what data type is props in the component when I receive it this parameter which we're calling props is an object which means if I want to access the properties of that object I use do syntax so Props dot whatever the prop was that I passed in let's use blah blah blah because that's what we said before okay awesome job on that quiz if you struggled with any of these questions of course don't hesitate to go back and review the things that we've recently learned and when you're ready Let's Move On by this point in the course you should already be familiar with the concept of object destructuring but just in case we're going to do a quick recap right now let's say we have this variable const person and it's equal to an object with an image name phone and email properties as we've already seen I can go ahead and access any of those properties by calling person the name of the object Dot and then the name of the property in that object like name and of course this works as we would expect with Mr whiskerson showing up because that's the name of my person object however in certain circumstances it can be kind of nice to destructure some of the variables out of our objects and use them directly I can do that by saying const and then using a set of curly braces specifying the names of the properties that I want to pull out of my object like image and name and then setting that equal to my person object what this does is it declares two new variables in one go IMG and name and it sets their values equal to the value of the property that has the same name inside of this object so if I go ahead and now just console log name not person. name but just name we'll hit save and we get the same thing Mr whiskerson I can do the same for mg and we get the path that was inside of this object but is now outside in a global variable it's important to note at this point that I don't get to decide what I'm calling these for example I couldn't just decide well I actually want this to be image the full word spelled out because we'll see if I try to get that from the object it's going to be undefined because there is no image property on this object now JavaScript doesn't just leave us high and dry there is some trickery I can do in case you weren't familiar I can say I want to grab the information from the IMG property but I want to rename it and I can put this little Co in here I want to rename it image and now when I do that I do correctly get the information from this IMG property but renaming it to image this isn't terribly important right now I just wanted to qualify what I said when I said we have to use the same names as the properties in the object let's back this part off to a working State here and I'll just leave this down here in case you want to play with it but let's let bring this concept into react by seeing how we can apply object destructuring to the props that we're bringing in remember props is an object even if you were to only pass a single property in your react component it would still come in as a props object with a single property on it and because it's an object I can choose to just destructure it right here in line I happen to know that it's going to have an IMG property a name a phone and an email of course now that I've gotten rid of my props object and instead have defined these four new variables and pulled their values from the props object my code below is no longer going to work so that leads us to a quick challenge okay your challenge is to fix the bug that we've just introduced now that we are destructuring the props object right here in line in the definition of our contact component go ahead and get started on this challenge okay should have been a pretty straightforward one remembering that we are no longer bringing in the props object all we really need to do is take all of the instances where we're saying props dot image or name or phone or email and get rid of the props dot part we can hit save and sure enough our contacts are back the main reason I'm taking time to show this is because it will be a really common thing as you're seeing react code out in the wild to see props being destructured in line the way that we've done it right here as far as I know there's no functional difference between destructuring them in line like this or having the props object like this it really would just depend on your own personal preference or more importantly the preference of the maintainers of whatever repository of code you're working in it's more important above everything else to be consistent with how you're writing it I personally oscillate between the two and I don't know that I have that strong of an opinion one way or the other however for the remainder of this course I will likely just be using the props object for a pretty simple reason when we get to a point where we're declaring other variables inside of our component code I find it does become a little bit easier to keep track of which variables are coming from outside from props and which variables are coming inside being defined inside the body of our component by signifying that something is coming from the outside with that props doob syntax before it so I'll go ahead and change this back to props we've already changed this back to props and although it does provide a little bit of extra visual clutter I do find there being a benefit in knowing very easily when something is coming down through props and when something is being defined in another way let's clean up our code a little bit here and although there certainly will be more for us to learn about props going forward it's time for us to get our hands on the keyboard and practice these props a little bit more all right I'm not going to make you spin up an entirely new react app completely from scratch but we are going to be starting pretty close to the beginning in my index. jsx I am importing and rendering this app component and the app component I've just barely scaffolded for you this challenge is going to require a little bit more than I have in the past but you should be plenty well equipped to complete this challenge we're going to create a little page where you display some of your favorite jokes and so first you'll need to create a joke component that will be in its own file and then here inside of our app I want you to import and render maybe four or five instances of that joke component each one of those joke components should receive two props a setup prop and a punchline prop and then render those inside of your joke component really however you want we just want to display the text of the joke on the page take some time to look up some of your favorite two-part jokes that have a little setup in a punchline or maybe you already know some off hand or if you need a little bit of inspiration you can go over to jokes. MD where I've included some of my favorites I do have a little extra credit here I'll let you read through this and decide if you want to do it or not it does touch on something that we haven't yet taught so it will likely include some outside research in order to complete all right the time is yours start working on this challenge okay I think I'm going to work a little bit backwards here so first we'll go ahead and you know what I kind of know what the challenge says so I'm going to buy myself some room here we'll import a joke component which we haven't yet created so we'll have to create that in just a second and inside here we'll go ahead let's turn this into maybe a main element and we'll render five instances of our joke component one 2 3 4 5 all right let's go over before I hit save and kind of Crash everything let's create our joke. jsx and over there we'll get started with our export default function joke and let's do a little bit of a sanity check here I'm just going to render an H1 that says inside the joke component okay hitting save I should see five times yep inside the joke component perfect and this Scrolls down a little bit for the fifth one okay so I need to pass the data for my jokes into my joke components so for each one of these I'm going to add a new prop called setup and we'll set that equal to a string I'm just going to go over to my jokes. MD and copy each one of these jokes okay I've copied those and then over in my app.js we'll go ahead and paste those in and I can already tell this is going to be a little bit too horizontally wide for the setup that I'm recording on so I'm going to go ahead and put each one of these on their own lines all right so I'm passing in a setup let's go ahead and also add a punchline prop and I'll just do the same thing where I copy the punch lines from over here in my jokes file and we'll go back and paste those in right there these are great jokes by the way I don't know if you've actually taken the time to think through them but there were some of my favorites okay job done right what do you think will happen when I hit save I don't think I fooled too many of you you're too smart for that so if I hit save we'll see I'm still seeing inside the joke component five times I'm passing my props into my joke component but my joke component is not making use of them so we'll go ahead here and accept our props and let's just go ahead and console log our props just to take a look at that okay cool we're getting five different objects again because I'm rendering five instances of the joke component and the props that it's receiving is an object with a setup property and a punchline property perfect let's go ahead and scaffold out the rest of this component so maybe I'll just create a div actually I might just create a fragment here we'll probably need to turn that into a div later if we want to style it but for now this will be okay and let's just put a paragraph for the setup a paragraph for the punchline and maybe we'll have a little separator with a little horizontal rule this will be a little bit rough for now but that's okay all right if I hit save we'll just have a bunch of horizontal rules showing up because my paragraphs are empty let's go ahead and say that I want to First display props do setup and then I want to display a props do punchline again remember we need the curly braces otherwise we would just be literally putting in the text props do setup and that's all that would show up five times okay Moment of Truth awesome we're getting our jokes displaying on the page I think I'm going to take just a second to add a little bit of style here all right all I did was add a little bit of margin to the body and then I gave a class name of setup and bolded the text I also gave this one a class name of punchline but I haven't actually done anything with that yet just trying to keep it simple for now and just like that we've been able to pass information from the outer component of our app or in other words the parent component that then renders well first renders this main element and then inside of that it has these children components of our custom joke component and we pass the data in through props a setup prop and a punchline prop now I did have a little extra credit and I figured I would go through this at this point although what we're about to talk about isn't necessarily something that we've learned yet for example let's say we have a joke that really only has a punchline it's just a oneliner joke and it doesn't have a setup my personal favorite that I included in the example is this one that says that it's hard to explain puns to kleptomaniax because they take things literally well in this case I'm not going to be providing a setup there's no reason to have a setup there however if I hit save we'll see that we just have this sentence that's kind of floating in here I guess it's not as apparent there but let's imagine in our joke we decided instead of just having the joke text there we were to say something like setup colon and punchline colon and then if I go ahead and hit save we see we just have this setup that's floating here without any text there again this isn't something that we have learned yet we will be learning this in the future but if you took the time to do the extra credit you might have come across a concept called conditional rendering with conditional rendering I can tell react that I only want to include this paragraph element if a certain condition exists one way I can do that there's a number of different ways but one way is I can surround the entire paragraph element in a set of curly braces and then at the beginning before I render the paragraph I can say if there's a props do setup or in other words if that is a truthy value then I want you to render or R return this paragraph element one kind of shortcut way I can do that is to use a double mersand essentially this says if props do setup is truthy it's an existing value it's not an empty string or undefined then I want you to return this in the place of this little expression that we have here it's maybe not a huge Improvement but I can go ahead and hit save and we just show our punch line here we don't have the floating setup that we had before the really nice thing about react is that it uses just plain JavaScript under the hood which means I could accomplish essentially the same thing in another way let's say instead of just removing this completely from the Dom if prop. setup doesn't exist i instead wanted to maybe add well let's say a style prop I can say the style is going to be display of none but only if and uh let me move this down for just a second only if props do setup does not exist one way I could accomplish this is by using something like a Turner a regular JavaScript expression of aary so I would say display is going to be well first is props do setup a thing if so then maybe we say that it will be a display of block but otherwise it will be a display of none we can hit save and see we essentially accomplished the same task although this way does appear to be quite a bit more complicated than what we had before I'll go ahead and reverse that back to the conditional rendering which is also something you'll see very commonly the point is react us using JavaScript under the hood and there's a lot of native JavaScript apis and techniques we are going to be learning about that help us display things on our page in the way that we want to I hope that this was a helpful exercise I'm really looking forward to seeing people's different jokes that they have and we have one more little thing that we need to learn about props before we're able to move forward and continue with working on our section project of the travel Journal we have just one more thing we need to cover regarding passing data through props before we can finally continue back on with our travel Journal project up until now we have only passed this string data type through our props and that's what we're most familiar with we've talked about how props are a very similar concept to passing attributes in HTML and in HTML we have to pass a string there isn't really another alternative in certain circumstances we can pass something that looks like it's not a string like a function for example but in reality we still have to surround them in these quotation marks so they're a string with react however because we're working in JavaScript we're not limited to just using a string and I actually wanted to make this into a challenge that will help you think a little bit more critically so your challenge is to think how you might go about passing in a prop that isn't of a string data type let's say for example we wanted to pass to each one of our joke components an up votes and down votes prop that is a number instead of a string as well as maybe a prop that is an array of comment objects and a Boolean of whether or not the joke is a pun with this challenge you don't necessarily have to go through and actually do this if you'd like then you're absolutely more than welcome to but I'm going to pause the scrim now and give you a chance to Think Through how you might do this and if you'd like play around with the code while we're here inside of our jsx as we've learned we can switch over into a sort of JavaScript mode by using a set of curly braces and I can do the exact same thing when it comes to passing props let's say I wanted to add an upvotes count I can create the upvotes prop and then instead of putting quotation marks because that signifies that I'm about to pass in a string since my upvotes may be something that I want to do some kind of math on like if I were to add a little thumbs up or heart icon that when a user clicks it it would add one to the existing upvotes then instead of using a string I'm going to pass in a set of curly braces and then put in whatever number I want to pass as my data type down to my joke component let's go over to our joke component and just console log our props again just so we can see what's coming in now and I'll open up the console here and awesome we can see that with the first one going to move this up a little bit with the first one we have just a punch line that's one we didn't pass a setup to but at the end of our object we have an upvotes that says 10 and it's the number 10 it's not a string 10 and because props do upvotes is a number if I needed to I could do some math on it so for example I could console log props do upvotes plus one and I think I'll probably get some not of numbers or undefined here because I only put it in one of my components on this first joke but we can see for the first one in the console we get 11 because it originally was hand and then we added one let me bring this back to just props let's go back to our app here and if we wanted to do something like a Boolean for this is pun property let's go ahead and say this one is pun and huh is this one a pun that's a little strange it's about puns and I think it is a pun too it's kind of a double on Tundra it's a great joke so we'll say this is a pun it's a true as a pun again not a string but the actual Boolean value of true let me go through and add the is pun property to the rest of these and jeez most of these are puns I guess this one isn't really a pun we'll go ahead and call that one false let's go ahead and hit save to see what we get for the consoles and sure enough we have a new prop called isun and it's either the Boolean value true or in the case of this last one it's the Boolean value false again because it's a Boolean I could do an operator on it like the not not operator or flip it from its value with just the single knot of course because it's a Boolean value I could do something like console log knot props do is pun and flip it with this knot operator we can see that we get the opposite of what we had before whereas if I had passed this in as a string it wouldn't really do what we were hoping that it would do and this goes just as well for things that are a bit more complex like if we wanted to pass in maybe an array of comments I can set a new prop called comments do one set of curly braces this can be a little bit confusing because it looks like the Syntax for a JavaScript object but remember this is just getting me into a JavaScript expression inside of that expression I can do my square brackets in order to start a new array and that new array might be an array of objects this is looking a little bit crazy it sometimes can help to put these on their own lines like this and these comments can be as complex as we need them to be maybe each one of them has an author that is some sort of author ID like a user ID it might have a body which is the text of the actual comment or maybe this would just say text it could have a title if for some reason your comment is owed to have a title and of course because it's an array we would probably have multiples of these we can come put our console log back I'll just log all of props since not all of them have comments and actually just to make it a little easier to see we'll go ahead and just console log prop. comments we'll get some undefined but there we see we have an array of two comment objects in the first joke that we put those properties in just for the sake of completeness I think it's helpful to know that technically it's totally fine to take your strings and also surround them in curly braces because a string is also a valid data type in JavaScript but I think because we're already so familiar with writing strings as our attribute values in HTML it's also completely valid just to leave the curly braces off and pass a string directly to your prop like this however I couldn't do the same if I wanted to pass in any other data type than a string like the value true this is going to be a syntax error and I would have to surround this in a set of curly braces okay I think you probably get the point here now we should be finally primed to get back to our travel journal and take the next few steps that we need to take I want to interrupt our regularly scheduled programming here and talk about how we can handle static assets outside of scrimba naturally I always recommend people follow along this course on scrimba docomo on your local machine or wherever it might be you might find that the way that we're referencing static assets like these images may not work in your environment using a build tool like vit is going to essentially rearrange where these images are being held and so referencing them with a relative path may lead to Broken links think of it this way when you're using a system like vit it's going to rearrange your code under the hood to make things a bit more performant and especially when you run a final build that gets deployed online it's going to essentially compress all of this code into single files like a single giant JavaScript file that includes all of the react Library as well as all of your code a single HTML file and a single CSS file and more likely than not a place for all of your images to live but the structure of your folders will be different at that time and so that's why these relative paths are likely not going to work to solve this problem what you can do is import your images from their relative path so that JavaScript is aware of where they were before all of this restructuring happened and the build tool in the process of building itself can fix the relative paths that you used when you were importing those assets if all of what I just said makes absolutely no sense really don't worry too much about it I just wanted to make sure I address it because I know in past versions of this course it has been a bit of a confusing point and handling static assets the way that vit does works here in scrimba because we're using vit as our bundler under the hood at least for these react projects all this means is that when I have something like this image that is a hard-coded string leading to the relative path of the Mr whiskerson PNG file if you're working locally on your machine what you can do instead is say I'm going to import let's call it Mr whiskerson from and then I'm going to use that relative path now I have a variable that I can use to replace this hardcoded string I'll put a set of curly braces and just say this is Mr whiskerson so I'll go ahead and do this for all four of them and we'll see that everything is still working just fine okay I've imported each one of these static images and now I'll go through and replace the image text that we have here okay we can hit save and sure enough all of the images are working just fine now throughout the rest of this course you may or may not see me doing this kind of import of static assets so I just want to warn you ahead of time if you are following along in an environment outside of scrimba you may have to take just one extra step to import whatever static asset I'm referring to whereas in scrimba I can just use the relative path as it is okay let's get back to our regular lessons all right we're finally back here at the travel Journal but we have learned so much about props and reacts in fact so much that it might look strange that if we look back at our entry component we still have everything hardcoded let's go ahead and fix that over in our app.jsx we have our challenge text your challenge is to pass props to our entry component right here so that it can display its data I've put all the data that you need over here in data. MD so that you can find each prop name and its value one thing that's a little tricky about data. MD is this image prop IMG prop it's going to be an object so make sure that you pass it in correctly and that object will have both an SRC property and an ALT or alt property then when you go over to the entry component just make sure that you remember that that IMG is not going to be a text data type it's going to be an object so you'll have to deal with that accordingly then of course after you pass in all of the props that entry needs to display its data make sure as I mentioned go over to entry. jsx receive those props and replace any of the hardcoded data in that component to use the incoming props instead this is one of those refactors that when you hit refresh it's going to look like nothing changed but that's just a normal part of web development all right it's your turn start working on this challenge all right I already know I'm going to be passing enough props here that I want to put them each on their own lines and let's go to data. MD okay we'll start off with our IMG which will be an object with a source and an ALT all right so IMG prop is going to be equal to and this is where things might have been a little bit tricky remember if we're going to use a data type other than a string we need to start our set of curly braces in order to get into a JavaScript expression and then my object is also going to have a set of curly braces hopefully that didn't throw too many people off if it did that's okay it's something that we'll just take a little bit of time to get used to our image is going to have a source property which I'll just leave empty for now and an ALT property which I'll leave empty let's go grab that data from right here okay I'll put these on their own lines just to help so that when I paste it in it will work correctly all right let's hit paste and perfect okay that's passing in correctly let's get to the next prop Let's see we have title and Country I think I can remember those well enough so we'll pass in a title this is a title for our entry and it's going to say Mount Fuji and oh it looks like I have an extra comma over there let's get rid of that and oh I've got my curly braces messed up okay let's go back to data. MD and let's see our next two are title and Country so I think I can remember both of those our next prop we'll start here on the next line we'll start with title and that's going to be equal to Mount Fuji and then our country this is for the little name next to the map marker there is equal to Japan okay let's see what else we have Google Maps link I'll go ahead and copy both of these and we will put in a new prop Google Maps link and we'll set it equal to the link that we just copied and I think almost done I think we just have the dates and the text there so yep dates and text and we'll just add those in all right it can be a little deceiving if I hit save now it'll look like everything's the same but that's not because we succeeded in our challenge which I can remember so I'll get rid of the text but because we haven't changed our entry component at all looks like we're already receiving props so I guess I did a little bit of that work for you just to make sure things are coming in correctly let's go ahead and console log our prop okay cool our image is an object that has a source and an alt we have a title a country Google Maps link which is rather long our dates and our text at this point the rest of this is just replacing any of the hardcoded data we had with the new incoming data let me minimize this just to buy some room here on the image and we'll go ahead and change some of these so for the image source I need to put a set of curly braces because I need to evaluate the JavaScript expression that's coming in through props and we had img.src I think this is probably the trickiest part of this but shouldn't have been too bad we'll go props img.com our image is coming through and I can only assume that our image alt text is coming through as well all right let's do the rest of this so right here we have hardcoded Japan we're going to instead put props do country for my Google Maps link I'm going to leave the text as hardcoded cuz every one of mine will say the same thing but this hre is what can get replaced so I'll put a set of curly braces and we'll do props dog Google Maps link I think is what it was let me just double check that Google Maps link yes okay here we have our entry title let's go ahead props do tile the dates will become props DOD dates and the text will become props . text is it text yeah text perfect okay the boring Moment of Truth we'll hit save and everything looks the same but of course we know as the developer of this component that the data is no longer hardcoded but instead being pulled in from the outside although this particular update might seem a little boring it does mean that we now have the power to reuse our entry component to create more instances which aren't just duplicates of Mount Fuji this is a huge step in our journey and react learning props is one of the more difficult things as I've mentioned for beginners to grasp hopefully this exercise has been helpful if you were able to get through this exercise without too much additional help then giant kudos to you that's a big step if not that's completely okay remember you're not here to get a grade or to set any kind of speed record through this course go back practice what you need to practice take the time you need to take because we do have a lot more to learn but the new things that we'll be learning will be hinging upon the knowledge that you've learned thus far once you've done a little happy dance and congratulated yourself then we'll keep moving forward this lesson is basically a spoiler alert for what we're about to learn because we are going to see how we can use the array.map method to take regular JavaScript data and turn it into jsx elements that can be displayed on the screen and so this felt like a really natural time to do a quick review of the map method if it's been a while or you're feeling a bit hazy about the do map method you can click the screenshot here that will take you to the mdn docs on the map method and I would just recommend going through Reading everything they have playing with the interactive demos they have and everything like that to help bring you up to speed on do map so what we'll be doing is a series of challenges I've got three challenges here but instead of just going through everything in one go I'm going to have you do challenge one first then we'll we go through it together then challenge two go through it together then Challenge three remember the goal is to look at our input data and try to turn it into some output data using the map method so pause now and start working on challenge one okay so the first thing we'll do is run nums mapmap takes a callback function and I'm going to use a function declaration just for now to better understand exactly what's going on here and this callback function is going to run for every item in my array that I'm running map on and then whatever I return from this function so I'm going to add a return inside here whatever I return from this function will get placed at the same index as the original item with whatever kind of modification we make to it and then in the end map returns a brand new array that will be the exact same length as the original array and so we should probably be saving that let's say const and these are squares so we'll say squares is equal to the array that comes back from calling nums map and then this function will be taking a look at every item or probably better is to say it's going to look at each number or num inside of the original array and then we will have it return num * num that'll give us the square of that number now if I console log squares we should get our output of 149 16 and 25 in an array and sure enough there it is okay let's move on to challenge two I'm going to comment out this console log this time given an array of strings return an array where the first letter of each string is capitalized at this point you might be recognizing we're essentially just doing some JavaScript algorithm challenges here obviously do a quick search on Google if you need to so now it's your time again pause and work on Challenge number two well let's set everything up we'll say maybe capitalized it's not really capitalized but I think you get the idea we'll run names. map and this time I think I will use an arrow function whether or not you're really familiar with arrow functions I think by now it's probably time that you become versed in Arrow functions so I'm going to use that syntax and over time I think you'll just get used to it the more you see it I'll start out by opening up the body of this function and using a return but then we'll use some of the benefits of an arrow function by removing some of these extra characters that we don't need now this function is going to be looking at each of the names inside of the names array so we'll call it name and like I mentioned now we're essentially just doing a JavaScript algorithm challenge so I'll say we want to return and we can actually index into Strings as if they were an array so I'm going to say get me the first character of this name and we'll call do2 uppercase and then I bet many of you came across the slice method so I'm going to use name. slice starting at index one now if I don't provide a second parameter it means just start at index of one or in other words the second character of the string and get me everything from that point until the end honestly I'm winging it a little bit so we'll see if this is working I'm going to console log capitalized and let's run it and see how we did okay that looks awesome great now that brings us to challenge number three and this is the one that's really intended to prepare us to understand how we can use the map method alongside jsx in react to turn regular JavaScript data into something that gets displayed on the screen by react this time you have another array of strings we have a few different Pokémon names here and your job is to use the map method to return a new array of strings this time the strings are kind of like HTML strings where they're surrounded with these paragraph tags opening and closing tags keep in mind we are not doing anything react specific there's nothing special about putting the paragraph elements or the paragraph tags around the text that you want but this will be very similar to what we do when it comes time to do this in react so pause now and work on Challenge number three all right hopefully you found that was maybe even easier than Challenge number two let's start off by creating a new variable maybe let's call it paragraphs and we'll set that equal to the array that comes back from calling pokémon. map and this time let's use an arrow function again I'm going to look at every single well let's see I think Pokemon is both the singular and the plural form of Pokemon so maybe we'll just call this mon for individual monsters and let's start out by opening the body of this function like we did before and then I think we'll go through and clean up some of our Arrow function extra characters that we have so I'm going to return and essentially all I'm doing is taking the string of my individual monster man and surrounding it with the paragraph opening and closing tags so I'll use a template string here and we'll put in our paragraph tags like this but then in the middle I will just inject the individual string of the Pokémon and now if we console log paragraphs okay we get an array of well they're still just strings but they look kind of like paragraph elements awesome work now if I wanted to clean up my arrow functions I only have one parameter so I don't need those parentheses surrounding there and then I could take advantage of my implicit return by moving up the return value here and getting rid of my curly braces and sure enough that's much more concise I can do the same thing up here now this return value is a little bit longer so you can decide whether or not you actually want to do this but I can put that up on the next line or if you want to use the next line you can surround your return value in parentheses and then start that on the next line and that should work just fine too let's just double check that okay looking great in fact I suspect that these aren't actually necessary in the first place yeah I guess the parentheses really aren't that necessary I think I like them there just for maybe my own sake in keeping things balanced but you can do it however you want okay now that we've reviewed array. map we should be perfectly primed to jump right into the next lesson we just did a review on how we can create arrays from other arrays now the next thing we need to understand is that reacts knows how to render arrays let's say for example I had an array let's say this is the Ninja Turtles and for now I'll just set this up as an array of Str and this is an example of a time when it can be kind of helpful just to see what happens scrimba is a great environment to do this in so let's see what happens if I want to render this array of Ninja Turtles as I said it's just an array of strings but of course if I were to just type Ninja Turtles like the variable name then I would just get the literal text Ninja Turtles so let's go ahead and Surround this in a set of curly braces and see what happens okay look at that react was able to render it of course it just mashed everything together because it's trying to render these strings and it looks like it just concatenated them and stuffed them on the page as bare text of course there's no difference if we wanted to instead of setting this as a variable ahead of time we just wanted to hardcode an array directly in here I can comment this out and see that we get the exact same result let me put this back so we're using our Ninja Turtles variable and although for our example we're using an array of strings it could be an array of any data type well that's not actually entirely true if I were to change this into just a regular object let's say first name Bob and uh I don't even need to go more in depth than that I wish I were a Ninja Turtle but I'm just a regular person let's see what happens when we try to render an array with objects in it okay we do get an error and that says that objects are not valid as a react child so that is an error that you will likely see often in fact this has nothing to do with arrays react simply can't render objects unless that object is of a very specific type remember way back in the beginning of this course we learned that jsx simply returns an object so if I were to say H1 and let's go ahead and put donatella's name in here and then console log jsx let me get rid of this for now we can remember that jsx is an object so although react isn't able to render the objects that we create or maybe that we pull down as data from an API somewhere it is able to render a specific kind of object and that is an object that was created with the jsx syntax or if you remember under the hood the object that gets created with a call to react. create element so let me pull this back to when we had our array of Ninja Turtles and I'm going to give you a little challenge okay this is bordering on the realm of busy work but for this challenge I want you to manually turn this array of strings into an array of jsx elements so you'll actually get rid of the quotation marks by surrounding each one of the Ninja Turtle names with I put an H2 element but you can choose and play around with whatever element you want then before you hit save try to think what's going to render to the page and see if you can make sense of what it's doing go ahead and get started on this challenge okay I'll go through this pretty quickly just so you don't have to sit and watch me type out some jsx code okay let's clean this up to buy some room here so in this case all we've done is we've taken an array and we filled it with jsx elements or in other words we filled it with those special react objects that get created when we use jsx and if we go ahead and hit save we can see that we actually get our H2S displaying on the page so react was able to take an array of jsx elements and render them exactly how we might expect it to in the end this would be really no different than if I were to take this list and to just paste it directly in here of course I'd have to get rid of my commas for that to work but we can see hitting save gives me the same results let's back this off to using the array again and I'll hit save you might have noticed that there is a little warning that says each child in a list should have a unique key prop we're going to cover that a bit later so don't be too concerned about that now all right so combin in what we just learned about how react can render arrays of jsx elements specifically is what we're most interested in and what we were just reminded of previously with the capabilities of using array. map we can take those two topics and we can apply them to our react apps so that instead of taking this data and hardcoding a new instance of a joke component and putting in the punchline and the setup we can instead pull in all of the jokes data from an outside source which is what might happen if we were pulling the data down from an API for example as an array of data and turn that array of data into an array of joke component instances where we pass the specific data down to those joke components through props that might have been a little bit hard to follow just for me talking so let's get our hands on the keyboard we're going to do some challenges in the next scrim let me walk you through a couple quick changes that I made before we take what we've just learned and apply to react first of all as you probably already noticed I took all of our hardcoded instances of our joke components and just moved them outside here and commented them out then where we used to have jokes. MD I created a jokes data.js file we're not quite ready to learn how to pull data down from an API and use that data in our react apps we are going to be doing that in the next section so for now we're just going to kind of mimic that I'm exporting an array of joke objects from this file this would be kind of similar to the data that we're pulling down from an API then all I'm going to do in my app component is import jokes data from that file and we can see if we console log jokes data then we do successfully pull in the array of joke objects great so now what I can do with this jokes data is I can create a new array of elements let's go ahead and call it joke maybe joke elements and I'll set that not equal to an array that I'm going to Define with my square brackets here but instead with the array that gets returned by calling jokes data.map map takes a callback function so we'll just stub that out for now and it's going to look at each joke and as it iterates over the array of jokes data I'm going to have access to each joke in that array we'll call it a joke object and that's going to be an object so this is a joke object well it's not a joke object object it's not a fake object it's an object that represents the data for a joke so what I'm doing here is I'm taking this array of regular JavaScript objects and I'm going to turn them into an array of joke elements so for each item in my jokes data I'm going to return a joke component and then I can pass the data from this JavaScript joke object down through props to my joke component and by I can do that I mean you're going to do that so that's going to be a challenge let me type that out all right your challenge is to see if you can correctly pass the necessary props to the joke component in the do map and render the joke elements array so that the jokes show up on the page again you can look down below to see what the structure of our joke components looked like and after you finished passing those props as it mentions don't forget to render the joke elements array that can be kind of a pain to not realize why nothing's showing up I'll hand it over to you now to work on this challenge okay well if we look below we can see that our joke component is able to receive a setup prop and a punchline prop and if we look at the jokes data that's coming in we specifically have a property in each object that is called setup and another that's called punchline so in my jsx I'm going to include a property called setup and I'll set it equal to the data that I find inside of my joke object do setup I think it's really important to make a distinction at this point the data that we're pulling in from jokes data this one has a predefined property called setup let's assume I were pulling this down from an API that I don't get to control I'm sort of beholden to the property name that they chose on their joke objects if for example these weren't called setup but maybe something like question then when I'm trying to render this data I can't use joke. setup just because I thought setup was a better term I have to use the one that they said joke. question in fact let's just verify that this is working I'm going to skip ahead and render my joke elements right now I hope we don't get any errors because we're not passing in a punch line let's just see what happens okay my punch lines are empty but my setups are working so the distinction I think is important to make is that the array of joke data that we're getting in that array has a question property I'm going to change this back in a second but our joke component which we got to Define we can choose whatever prop name we want to to pass in because I'm calling it setup inside of my joke component I'm still going to be using props do setup whether the data coming in used the phrase setup or not just so that we're not getting our terminology crossed or any kind of confusion happening I am going to put this back to setup and then we'll go ahead and change this back to setup but I remember in the beginning that being a confusing distinction just remember that you get to determine what you call your props in the components that you write and when you're in control of the data you also get to choose its structure very often you'll find that you're not in control of the data and you are stuck with whatever names they chose when they were creating the database we can hit save and see that our setups are still working okay let's just go ahead and finish this off by adding our punchline prop and that is going to be equal to joke. punchline we'll hit save and awesome our jokes are working again now we can see if we do a little bit of cleanup let's get rid of our challenge text and all of this comment out old stuff that we were hardcoding before we can see just how much simpler our code now is because we're pulling in data from an external source which is often times what you'll find yourself doing and we can use regular JavaScript methods like the map method to create an array of joke components and pass that data in keep in mind our code here wouldn't change even if we had a thousand jokes in our jokes data unless of course you decided you didn't want to immediately display all 1,000 jokes on the page then we'd have a little bit of work to do pagination or whatever it might be all right now we're equipped to go back to our travel journal and not just be stuck with our single Mount Fuji trip but instead we can take more trips and we can store that data in an external Source in this case just like a Javascript file and then iterate over that data to display all of the different entries that we want to display in our travel Journal so that's what we'll work on next but before we do that I do want to give you a little quiz about what we've learned regarding using the map method in our react apps all right it's time for another quiz this time specifically about what we were just learning with map make sure to actually click into the editor and type out your answers and when you're done you can hit play and we'll go through it together okay number one what does the map array method actually do the map array method is a vanilla JavaScript array method it's something that's built into JavaScript and has nothing specific to do with react and you can run that method on top of any kind of array in JavaScript you pass to it a callback function it will iterate over or Loop over every item in that array run the function that you pass to it and whatever you return from that function it's going to put in the same index of a new array that gets returned from the map method a key part of that is that it returns a new array and I'll go ahead and kind of summarize what I just said so it returns a new array and then whatever gets returned from the Callback function provided is placed at the same index in that new array usually what we end up doing is taking the items from the original array and modifying them in some kind of way okay question number two what do we usually use map for in react usually in react we receive some kind of array of raw data usually from an API in our case we're just stuffing it inside of a Javascript file and exporting that array but we we receive that raw data and we turn it into jsx elements that can be displayed on the page okay and number three I don't believe is something we've explicitly talked about but it would require some critical thinking why is using map better than just creating the components manually by typing them out well I'd say there's a few reasons first of all we don't always know what data we're going to have ahead of time in our case we know exactly how many jokes we have and what the jok's data says so we technically could manually type it out in fact we did manually type it out however in my experience that's not usually how it works so I guess answer number one we could say we often don't have the data ahead of time when we're building our app so we simply can't manually type them out even if we wanted to a second reason though that I think is maybe a little more important is that by using the dot map method we can make our code a lot more self- sustaining in other words if we were to manually type out all of our jokes like we had in the original version and then our jokes data were to update we would have to go back to our code and type out new jokes because new jokes got added to the data however when we're mapping over the array of data we are accessing that array directly which means that if there are new jokes added to the end of this list simply refreshing the page is going to pull that joke into the app it will render this array including the new jokes that we added If instead of adding it here it for example got added to a database that we pulled that data down from an API all we would need to do is fetch that data and the new jokes would be included and our app would render those new items so let me try to summarize that here it's not terribly unlike when we're writing a c style for Loop let's say we had let I equal Z and often times we'll find ourselves looping over the length of an array so we'll say I is less than some array. length and then of course i++ and fix this typo here the reason we're using some array. length is because we don't want to know how long the array is we just want it to iterate over an entire array no matter how long that length is so let me try to summarize this here essentially it makes our code more self-sustaining it doesn't require additional changes from us the developer to change the code whenever the data changes great job on this quiz hopefully you were able to answer all these questions now let's finally get back to our section project and start applying what we've learned all right everything that we've worked on so far has come to this point before we start let me just walk you through a couple things really quickly first of all instead of having the markdown file that we had before with some of the information I've created this data.js file this is exporting an array of objects each object represents one entry in in our travel Journal I've also added an ID property to each one don't worry about that for now we're going to be talking about that really soon but for now you should have all the data that you need when you import this array which is part of your challenge let's see right here to import that array from data JS map over that array to create an entry component for every item in that array and then to render that array of Entry components imp place of the current entry component this current entry component is displaying our Mount Fuji right now but after you've mapped through the array of data and displayed that in place of this one you should have all three of them showing up I believe there's actually one really small style change that I want to make I'm going to add a margin bottom here of 36 pixels just so that they're not shoved up right next to each other okay the time has come I know that you can do this challenge it represents a culmination of everything that we've learned so far throughout this section so it's possible this will be a little bit of a challenge if you do find that it's way too hard of a challenge for you then that's a good indication that you should probably pause doing this challenge go back revisit some of the lessons and the examples and the practices that we've done throughout this section practice them again and reach out to the scrimba community if you have any questions at all head over to Discord there is always someone from the community online that's willing to help okay I'll hand it over to you okay let's start by importing our data we'll just call it data and we'll get it from the data file I can get rid of my challenge text and I'm not sure if I've explicitly covered this or not but I'm going to be doing the mapping inside of the body of my function but before my return it probably would have worked out just fine if you had done it outside of the component but common practice is to do this as part of the body of the functions let's go ahead and start right here by creating a new variable let's call it entry elements since this will represent an array of J X elements and I'll set it equal to data. map so map again will return a new array and we want to use our callback function inside here stub that out and for every one of the entries we'll just say it's a single entry we want to return some jsx so we'll return and I'm going to wrap this in a set of parentheses just so I can start this on its own line we'll go ahead and return an instance of my entry component and we can start taking the data from the entry and putting it into our entry component our image is going to equal I'm going to use a set of curly braces because I have entry. IMG and oh no see I almost made the same mistake we are actually passing an object into our image so I want to pass an object remember the first set of curly braces puts me into JavaScript and the second set represents an object and I need to pass in a source so my source is going to be let's see entry that's this entry object. image. SRC okay great and then we have an ALT which we will set to entry. image. alt now this is clearly the lonand way to do this because our data does happen to match up we have an image property which is an object with an SRC property and an ALT property I actually can shorten this quite a bit instead of repeating each of the properties here I can simply say my image is going to be entry. image so I guess the way that I was starting it in the first place was actually going to be right this might be a little confusing the entry component is expecting the image prop to be an object and that object needs to have a source property or an SRC property and an ALT property and if we go and look at our entry. image let's see right here in data JS entry. image it is exactly shaped that way it's an object with a source property and an ALT property so because our data happens to line up with exactly what our entry component is expecting then I can just pass in the whole object this is actually kind of foreshadowing of something else we're going to see soon okay so I also need to pass in a title and this is going to be entry. tile we'll do country and I'm just kind of looking down here to see which properties I need so the country is going to be entry. country the Google Maps link entry. Google Maps link oh and I need my curly braces here oh and uh this is not an object these are my props so I need an equal sign okay my dates is going to equal entry. dates and my text entry. text of course if I hit save we're still going to be showing just Mount Fuji and that's because I haven't yet replaced this so let's get rid of this entry component and instead grab our array of jsx elements and stick them right here so a set of curly braces to go into JavaScript and then we'll Supply our array This Is The Moment of Truth keep your fingers crossed let's hit save and awesome look at this we have all three of our entries showing up on our page the images make it clear that we have different data for each one of the components but we can look and see each one is unique to its own entry data awesome this is some great progress and actually we've covered a majority of what I want to talk about in this whole section of the course mapping data in react is one of the most common things you'll find yourself doing and I personally think it's really neat that react has given us JavaScript primitive ways like the array.map method to accomplish the repetition of our components while passing in unique data to each one I do have a couple of extra topics that I want to talk about that's more of a sneak peek into the next section but I do want to give another soapbox speech that says if this was too big of a struggle for you first of all that's complet completely okay but second of all it's a good indication that it's time to go back and restudy this ractice it until you feel like you could do this from scratch if you needed to as I said reach out to the community for help or to Simply post a win that you were able to finish sort of the MVP of our travel journal app once you've come down from this high of accomplishing such a great task we'll keep moving forward the coolest part about the way that we've set this up in react is that the dis play is a function of the data that we're pulling into our app this just means that if we were to come to our data JS file and let's say just copy and paste these last three items I can hit save only changing the data and we come to our app and check it out we actually have those extra components showing up on our screen of course as I've said usually we'd be pulling this data in from an API but that's beside the point at this time we'll be getting there soon let me undo this so we don't have so many of the gang hope I'm saying that right and let's hit save so we just have our three items there again now we notice that when we're hitting save we're getting this warning in the console and it says that each child in a list should have a unique key prop and it even tells us where we're rendering that list and this is a common warning that you'll likely come across many times when you're writing react code anytime you take an array of data and turn it into an array of components or an array of react elements react has an interesting system under the hood that it uses to keep track of what order everything is in when you give it an array of react elements it's a little bit outside the scope of this course to really discuss why but from a really high level overview if you were to ever include functionality where the user could add new items to this list or maybe remove one of the items from the list react needs this unique key prop that it talks about in order to keep track of which one you're actually removing or where you're adding new elements again it's a bit outside the scope to get into the nitty-gritty of why but it's really easy to implement because all we need to do is pass a unique prop called key and it actually has to be KY I know we've talked about how we get to choose the names of our props well this is an exception it has to be key and the value that we pass to it has to be unique so I can't pass for example a hardcoded one to it because then every one of them would have the same number and you can see the warning says they encountered two children in this case it probably should say three children with the same key one well a really common thing for us to do especially when we're getting data from a database is that data or that array of data will usually have an ID attribute associated with it and this is actually managed by the database it ensures that these IDs will be unique across the entire collection in that database or the entire table of that database and so if your data does have an ID in my case I just typed them in manually then this is the the first place to start when it comes to providing a unique key so I can just say entry. ID hit save and our warning goes away of course in our case because we only have three entries I could have used pretty much anything here the title dates text link to Google Maps the country these are all unique across these three but of course if I were to visit another place in Japan and have another entry for Japan then that clearly is not a good key to use because it would be repeated over multiple elements in array whenever you can just stick with IDs while I'm talking about that if you do happen to have an array that doesn't have an ID something I often will see beginners do is they will access the index which is something that map provides to your callback function if you need it and then trying to use that index in place of having an actual unique property about your data and I'll be completely honest with you this is recommended against but if I hit save you can see I'm not getting any kind of warning in my case because I'm not going to be adding or removing any of these elements at least not from the UI itself the index will kind of get the job done in a pinch but generally speaking if you can avoid it just don't use the index as your key I'm actually pretty sure there's an entire article on the react talks that talk about this or at least a section somewhere so in a pinch it will work but whenever you can use an ID instead okay all the warnings gone our app is looking good there's just a few miscellaneous topics that I want to make sure I cover while we're still on the topic of props so that's what we'll be doing over the next couple scrims one thing you might have noticed especially if you were typing this all out from scratch is that the amount of properties that we're passing to our entry component it's getting a little bit lengthy and I'm sure you can imagine if we were to have a lot more data included in each one of these objects imagine an object that has something like 20 or 30 or more properties to it it would become way too cumbersome to try and add a new prop for every single one of the properties in that object one way that we can make this a little bit more concise is by noticing that what we're doing here is creating a prop for image for example and passing entry. image title entry. tile country entry. country well it sounds like our entry is interested in every property of the entry object object that we're passing to it which means instead of passing down every property of our entry as a separate prop what I could do is just create an entry prop and pass the entire object down notice that I do need to keep my key here this is something that's specific to react as we talked about so even though I am passing a part of my entry down I need to tell react that it's got a unique key that it can grab on entry. ID but the rest of the entry object I can pass as a single Le prop called entry in my case of course I got to choose this name I could have said something like obj for object or just the word object but let's keep it as entry of course because I'm changing the props that I'm sending down if I hit save sure enough everything is broken gosh we're not even displaying a single thing I thought at least some broken links would show up here so let's go over to entry and have ourselves a little challenge there it is your challenge is to fix our component I am intentionally being a bit vague here because I want you to think critically and use this as an opportunity to gauge your understanding of props what's being passed down as props and how we can make changes to the code of our components so that everything starts working again I believe in you I know you've got this I'll hand it over to you to work on this challenge well if we open our console and something that can be helpful on scrimba is to open your actual browser developer tools console on a Mac I can hit command option J and it will open those directly but I can see down here in the console it says that it cannot read properties of undefined reading source and that makes sense because before we were receiving an IMG prop which was an object that had a source property but we're no longer receiving IMG which means this is undefined and we get an error trying to read the do Source property on top of the undefined value in JavaScript if I want to temporarily bypass this error I can use optional chaining and I think this will yeah so this shows some elements at least showing up on my screen we can clearly see that things are broken so this will give me a chance to console log the props which is always a good place to start when you're debugging something okay and sure enough if we look really closely it's a bit of a mess when it's all in line but we can see that we're receiving a single property called entry and that entry prop has a value of an object where all of the other data is being stored which means all I really need to do is everywhere I have props dot go ahead and select everything on the page all I need to do is add an entry in front of that and then access the properties of that entry as it's nested inside let's clean up this console log I'm actually going to remove my optional chaining there and we'll go ahead and hit save and awesome we're working again now although everything is working I think it's helpful to notice at this point that the reason we're magically working is because the data that we have inside of our data array match mates exactly in terms of the language or the property names that we're using matches exactly with what our entry is expecting as a reminder if we were to change what properties we were passing down then we would have to make a change here to reflect how the data looks because we're passing this entire object down we're now essentially stuck using the exact property names that are here sometimes when you're dealing with an API you might have something that isn't truly conventional JavaScript like you might be pulling in something that says Google Maps link but with snake case instead of camel case I'll go ahead and hit save and we can see now that Mount Fuji at least in the display we no longer have an underline under view on Google Maps and that's because the object that we're passing down expects it to say Google uncore msor link in in our entry we're not doing that let's see where's our link Source right here we're still using camel casing so just something to keep in mind when you are passing down entire objects you will be stuck using whatever properties they give you let's go ahead and change this back we can hit save and now our link is working again so there's certainly trade-offs one really nice thing is that we just have a single prop here we're passing the entire object down and if you really don't like the way that the data is structured or rather the way that the property names are set up there are ways that you can rename them just for the sake of your own code but we won't be worrying too much about that right now all right we are so close to done there is one little thing that I wanted to show you regarding exactly what we have here it's another relatively concise way that we can pass down all of the properties of our entry item here and it does look a little bit unique so I wanted to make sure I covered it just so that you weren't super confused by it if you did see it in the wild so that's what we'll be touching on next there's one last little syntactic trick that you can use when you're passing a full object down through props and I wanted to touch on it just in case you did see it in the wild because the syntax looks a little bit confusing the trick uses the JavaScript object spread notation but instead of spreading the object itself this is our entry object that we're pulling from our data instead of spreading the object itself like this what we actually can do is remove our prop entirely put a set of curly braces and spread in our entry object react will look at this and it will take all of the individual properties of our entry object and create a new prop that matches each of the properties of this entry object so essentially it would see that our data has an ID property an image property a title property and let's just start with those cuz that's all I can remember offand and it would be essentially like doing exactly what we had before where we say ID equals entry. ID image equals entry. image and remember image in this case is an object that's totally okay and title equals entry do title and so on and so forth until it covered every single one of the properties of our entry object let me put this back to use this new spread syntax that we see here but of course we just went through changing this so that it passed down an entry object through props and we have props do entry. everything so if I go ahead and hit save then we can see we're completely broken and I considered having you do a challenge to do this but I just made you do this work so I'm going to go ahead and do this for you everywhere I have entry dot I'm just going to multiple select and we'll delete that so essentially this is back to exactly the way we had it I'll hit save and awesome everything is working again in some ways this is kind of like The Best of Both Worlds you don't have quite as much clutter here by having to say props do entry. image. source and so forth throughout the code of this component and on the other side of the equation over here we get to Simply say curly braces dot dot dot entry so this is more concise and this is more concise however in certain circumstances I find myself personally struggling with this method only because it really obscures what data is coming down through this entry object in my case I have to go all the way to my entry component and console log my props just to see what data is coming in if I were to make alterations to this like say I had a new property in that entry object that I needed to display somewhere I'd have to make sure I understood exactly what was coming through I guess it's really not that big of a deal when I say it out loud but for the sake of this course I'm going to leave this here for this scrim but going forward I'm likely either going to create a separate prop for each of the data points that I want to pass down or I'm going to pass down an entire object and just kind of live with the more verbose syntax that we have to have here on the component side of the equation and all right right folks that marks the end of our travel Journal I'm sure there's lots of improvements that you could make to it I would love to see them if you want to make your own design changes or more interestingly I'd love to see what places you have visited fortunately all you have to do is go to data.js because of the way we structured this and make changes directly to the data hit save and your own information will show up here head over to the Discord post a screenshot of some of the cool places that you visited or if you don't feel like going in that depth just post a screenshot of your progress here with the travel journal the scrimba Discord Community is one of the most welcoming places ever the last thing we have to do is do a quick recap of everything that we've learned throughout this section and if you're a scrimba pro member we'll be giving you a solo project that you can work on that will be in a similar scope to what we've worked on in our section project with the travel journal and will give you an opportunity to really test and push yourself to see if you're able to recreate something similar to this from scratch if you're not yet a scrimba pro member I highly recommend testing in it out and trying one of these solo projects because they make all the difference in not only this react course but the scrimba frontend career path in general what a great job you've done on the Travel Journal project I hope that it's been an inspiration to you to get out there and do a little bit more traveling too what we've learned in this section has enabled us to build some pretty cool stuff we started out by talking about why reusability is important in the first first place we saw that probably most of the websites that we visit have some component of reusability that is driven by its data as opposed to just being hardcoded by a developer somewhere there will likely always be static portions of whatever web page you'll build but more often than not you will find yourself using data to drive the content of your website or your web app and we learned in react a primary way of being able to reuse our components is by providing props just like how functions have parameters that give that function the ability to be reused with any kind of data that's passed to it props give react components that same power and we learned how react can render an array of components which allowed us to create an array of components from a raw array of data in our case we had our data just directly in our project but more often than not you would find yourself calling out to some kind of API to get that data map it and then display that data to the page this marks a giant step forward in our understanding of react and also the level of cool projects that we can build with it so this would be a perfect time to head over to the scrimba Discord community and post your accomplishment in the today I did Channel go there to celebrate your own wins as well as congratulate others on the wins that they've been having recently too once you've had a chance to do that this might be a good time to take a break because what's coming up is a really meaty section the topics we are about to cover will really step up your react game and Empower you to create truly amazing interactive web apps with react once you've had a chance to celebrate your wins and rest your brain a little bit we'll Dive Right into that in the next section you have done an amazing job so far in this course and now we are finally approaching probably the most exciting section in this course which is building interactive web apps in react I am so excited because this section really unlocks a huge section of react that allows us to create really Dynamic exciting web applications what we've been working on so far is First Learning the fundamental building blocks of react by building static websites this was really important for us because we needed to learn the syntax of creating our own components and generally of course how to spin up a react app from scratch how react is even working behind the scenes and what its main philosophy is then we moved on to how we could build reusable components we learned about props and how we can pass data into those components this allowed us to use static data to generate portions of our web page which is what set up the foundation for what we are about to learn and I've done my best to make these sections really exciting and hopefully you weren't like our grumpy friend Stanley here bored out of your mind while learning these topics now the Crux of what we are about to start learning lies in understanding the difference between static web pages and dynamic web apps we've been mostly working with static web pages in react so far and you can tell something is a static web page based on the fact that it is usually readon in other words there's no user-driven changes to the data behind the scenes some really common examples that come to mind of this are blogs when I'm visiting a Blog I'm usually just consuming or reading the content on the blog now there might be tiny interactive elements on most blogs these days but I think you get the idea that's not the portion of the site I'm talking about the same goes for news sites it's presented to us we consume the information in a readon way but we're not updating the news that's written on the news site recipes are another good example of this and I'm sure we could come up with many more we are totally capable of building the front ends of these kinds of websites in react however what we are about to venture into is understanding how we can build Dynamic web apps in react you could classify something as a dynamic web app when it has read and right capabilities or the user has ability to change the data as such these kinds of dynamic web apps tend to be highly interactive typically these kinds of apps will have portions of the site that will display your data specific to you as the user of this app some examples that come to mind are a bank website you log into your bank website it displays your information your account balances allows you to transfer actual money or at least the ones in zeros that represent money and so forth also pretty much any SAS product or service like Airbnb there's portions of their site that will display static information to you like a list of properties but you have the ability to filter through them and organize them by Price or rating you can click into them and maybe most interactively you can book the Airbnb and pay for it this kind of leads into a whole section of sites that are e-commerce sites the ability to add items to your cart and purchase it with your money are telltale signs of a dynamic web app and these days I'm sure if you were to look around you would find probably hundreds of different web apps that you have signed up for and at least used in the past to guide our curriculum through this section we are going to be making a really exciting web app called Chef Claude Chef Claw is a recipe app where you will input a list of ingredients that you have on hand and at the click of a button send that list of ingredients off to an AI API to generate a recipe for you based on your ingredients and this project is actually going to have two options for different AIS you can use one using claw AI through the anthropic API and another using mistal AI which we will access through the hugging face API boy that was a lot of acronyms this project is super exciting it's actually something I find myself using and it's going to help us really grasp all of the concepts from this section in creating Dynamic web apps with react so without further Ado let's dive in and start learning sometimes when I'm starting a new project that might feel a little bit overwhelming I try to find parts of the project that I already do know how to build up until now we've only been building static pages in react and the truth is that there are parts of this app that are completely static so I'm going to give you a challenge Now to create this header section it's mostly just meant as I guess both a continuation of the previous section to make sure we're still practicing and as a way just to warm us up for learning all about how we can make this app a really nice interactive app by the end of the section so your challenge is to start by building the header components you're going to do it in a separate file and then render it here in the app component if you click on the screenshot here it will take you to the figma design file and there's a couple things that I'm setting you up with just because it's a little more tricky first of all I've already included the chef CLA icon.png file that's the little robot with the chef's hat here in the logo so inside of your header component you can import that as we've seen with handling static assets you can import it and then render it as the source for this image element in the CSS I've also put a little bit of starter CSS here maybe most interestingly I've set the font family to enter already which is being imported in our HTML file so you don't have to worry too much about going to Google fonts and grabbing that also figma has recently changed where it has obscured a little bit some of the CSS rules that you might need and one that I found a little bit challenging was the Box shadow that it has underneath the header right here there's a tiny little box shadow that helps separate it from the rest of the body and although it's a small detail it actually makes a pretty big visual difference and so the code for it is right here just feel free to copy and paste this into the box Shadow of Your header also keep in mind the design on figma it is a little bit more optimized for a bit of a wider screen if you want you can follow exactly the sizing and just pull your mini browser a bit wider or there's the feature where you can maximize it it to show up bigger inside of this scribo window either way is totally fine if you do decide to keep this a little bit on the smaller side which is what I'm going to do I'm probably going to change a couple of the values that are in figma just to make it fit better on the mini browser the changes are minor it's not that important to our learning so feel free to do it however makes the most sense for you okay it's your time to shine go ahead and get started on building the header component okay I'm going to work a little bit backwards and pretend that we have already built a header component that I can import and render here so let's go ahead and let's see we'll just call it header. jsx it'll be its own file in the same folder as the app component because we have a relatively small scoped project I'm not going to worry at this point about creating a separate components folder or making a really deeply nested structure in our project so we'll just keep it like this if we need to we can always refactor later and then right here I'll go ahead and render my Capital H header component and I'm not going to hit save cuz we'll crash cuz this doesn't exist yet so let's create that file header Capital H header. jsx and there it is we'll create our function we'll export default function header and we'll do a little sanity check here we'll say we have an H1 that will return that just says header component here hit save and sure enough it's showing up awesome let's get the content on the page and then we'll worry about styling it so I am going to use a semantic HTML header element and we have a very simple header often with real businesses just to make sure everything stays exactly as their brand needs it to be the logo or the icon and the text will all actually just be a single image in my case what we have exported is just this little chef logo so we will need to put some text there so we'll render an image and we'll render I guess we can call it an H1 it's kind of like the site header again usually this is part of an image so that's not what we would dedicate our H1 to but I think we'll be okay so we'll say this is Chef cloud and the source is going to be equal to the icon I could in scrimba give a path to the icon and say/ images SL Chef cloud icon.png and I think that should work yep there's our Icon better practice though as we've discussed is to import any static assets so I'm going to grab let's see this text here we'll import it and call it the chef CLA logo and we'll import it from that icon or that path to the PNG and put Chef Cloud logo here it should be exactly the same yes perfect we have the content let's do some styling I'm going to access my header we'll give it a display of flex we'll justify everything to the center I guess in both directions so we'll align items to the center as well the design shows that there's about an 11 pixel gap between the icon and the text we're going to make this icon smaller in just a second see I'm having trouble seeing exactly what the header and the body is let me just temporarily give this a crazy background color we'll say the background color is red okay that's pretty good the height seems a little bit large to me it looks like in the design it's set to 108 pixels oh that's even larger let's go ahead and uh use our discretion to change this to something different 80 pixels seems a little more reasonable and then we can go ahead and fix our image and oh let's grab this box Shadow code while we're here and stick it there change the background color away from Red we'll get rid of that line I think I'll look ahead a little bit and change the background color of my body to the background color that is in the design and wow that is very subtle oh it looks like it also is coloring the header so we'll need to specify that this needs to stay white so this will be a background color of white and yeah that's working perfect okay let's get access to our image uh because I'm only going to have one header and it's only going to have one image I'll just select those directly as a descendant or I'll select the image as a descendant of the header I think that won't be a problem but we can always classes if we need a little more specificity the width on this I think it says it's 40 something let's see what it looks like as a 50 pixel width that looks pretty manageable yeah let's go ahead and stick with 50 for now and then I will do the same selecting my H1 inside my header okay in the design it has the font size set to 32 pixels which is two rim and I think that might be the default size for an H1 so I don't think I actually need that let's try the font weight it shows us 400 and yes that does make a difference and it looks a little more Sleek being not quite as bold so let's keep it like that sometimes we get issues with default margins but it looks like that's not causing a problem here so I don't even need to say margin zero we've already got the font family set to enter let's comment this out and make sure that's working it's subtle but it's working so I guess that's it we've got our header all set up I know it's a lot to spend this much time doing CSS in the middle of a course on react I really do try my best to integrate some of the past lessons that you've had especially here on scrimba if you're taking the friend and developer career path just so things don't get stale you know what I mean it's better to practice it now even though it's not technically what we're learning and as I've mentioned before you do have my permission to skip some of the CSS that we do if it's something you already feel completely familiar and comfortable with okay so we finished this top section and although we are going to add some interactivity to our tiny little form here the structure of the form just being an input and a button as well as the looks of it can be started as static so we're going to do that next before we move on to more of the meat of the section when our users first come to the chef Cloud app they're just going to see the header and this little form here we might decide to add a little blurb that explains what this app is supposed to do but for now the only other static thing that we need to really worry about is creating this form it will of course have some interactivity with it and we're going to learn all about how we can deal with forms in react a bit later in this section but for now let's go ahead and get this form added now I have made you do a lot of this manual work I know that it's just repetitive CSS work mostly and so I'm going to give you a little treat I'm going to work through this I will keep it here in the recording and it will be the remainder of this lesson so if you're interested to see how I create and Design This little form then by all means stick around if you're ready to move on from the static stuff we about to jump into some really exciting things so that can be what you do next so you're welcome to skip ahead to that if you want I'm going to get started first let's see let's head to our app and underneath our header I'm going to include another component called main now I need to wrap this in something because we can't render to Sibling elements like that in react I need to import main from Main and then of course I need to create that so we'll create a new file called main. jsx and spin up our component as I usually like to do I'll just return something simple to make sure things are hooked up okay great we're showing main component there the content that we're concerned about at this point is very simple we are going to probably be doing most of our markup here inside of the main component but for now we can just create our form and so first because this is the main section of our app we're going to surround it in the semantic main element and and then we'll add a form I know this is just a simple single input and a button but even stuff like this I much prefer to put in a form first of all it's more semantically correct we are creating a form here it makes it better for assisted Technologies to understand what's going on we also get some built-in functionality when we put it inside of a form for example when a user fills the input out and then hits the enter button it will automatically submit the form it will have access to the form data if we need it and it's just a whole host of benefit s by using an actual HTML form okay so in the design we just have an input and a button typically for accessibility reasons we would want to make sure we also include a label or another option that we can do is to add an ARA attribute to our input that's called ARA label and so I'll set that equal to add ingredient so that anybody using a screen reader can very easily understand what they're supposed to do with this input okay let's put this on its own line because we're going to add some extra properties here we want this to be a type of text we'll give it a placeholder just like we saw in the design we can say something like for example oregano as a reminder a placeholder is a great place to put an example of what should be entered as text into that field and it isn't a great place to put the actual label so I wouldn't want to say something like add ingredient as my placeholder okay by default forms are are pretty ugly so let's hit refresh and yeah oh our button has no text we might want to say add ingredient there okay let's see what we're working with perfect well not quite perfect yet let's go ahead and style it up chances are I'm not going to be adding any more forms to this page so I could just select the form element but I'm not sure why I'm feeling like I probably want to give this a class name so I'm going to give it a class name of add ingredient form okay I'll hit save so that applies we'll go over to the CSS and start styling this let's access our add ingredient form and I'm going to add a display of flex even though we do already have inline elements just so that it makes it a bit easier for me to Center things so I can justify content Center We'll add a gap of about 12 pixels I think the design shows and it's sitting right against the header so let me also add some padding to the main element we'll give it maybe 10 on the top and bottom and 30 on the left and right and I guess I need to specify padding and oh when I did that I see that my elements are stretching now that's a default with display Flex so if I were to instead say align item Center that should fix that issue of course our button is a little large you know what I'm going to cheat and just make this a little bit wider I should probably add some kind of no wrap rule to the button but for now I'm not going to worry about it okay let's access our input I'm going to grab the style for my form and then specify the input on it and let's give it some border radius of about six pixels the default border is a little bit crazy so we will add our own border styles of one pixel solid and then I'm just going to grab this color from the design okay that looks much better the padding is a bit tight there so we'll add a padding of about 9 pixels on the top and bottom and 13 on the left and right awesome looking good I'm going to make this a little bit wider so add ingredient doesn't wrap again the design does have a little bit of a box Shadow around it so I'm just going to paste that in from my Dev mode inigma which you likely don't have access to for this design and then one thing I noticed from the design is the input does get pretty wide as the screen gets wider so I do want it to grow I can use the flex grow property we'll just set it to one so that as the screen expands it does get wider although I do think I want to add a minimum and a maximum cuz it can get a little bit squishy right down there and a little bit too wide way out here so let's give this a minwidth of let's say 150 pixels and a Max width of maybe about 400 pixels so as we get wider it should stop growing yeah perfect okay the input is looking pretty good let's go ahead and style our button and then we can move on so we'll access the button and for whatever reason I'm sure there's a good reason for it but buttons do not take on the font family that's specified elsewhere even if you specify it in the body here so I'm going to make sure I specify the inter font family for our button we'll also give it a border radius of 6 pixels just like our input the border is looking a bit intense so I think for now I'm just going to say border none on the button let's give it a background color and this is a color specified in the design of course the text is now impossible to read so we will specify the font color with the color rule all right that's looking a little better and H the button is pretty squatty I could try to add padding to it although I don't really want to add padding and try to guess to make it the exact same height as my input uh maybe what we can do is take away the Align item Center and well actually that just kind of makes it work that just makes it look better it's using the default of stretch as it's align items and that actually looks pretty good I'm not sure that this will make much of a difference but I'm going to specify a height on my whole form the design looks like the input is 38 pixels tall so we'll just add that it doesn't look like it's making a change but maybe any other structural changes that we make that height might be good or maybe it'll be bad and we get rid of it for now let's leave it in now the design does show a plus before the add ingredient and it looks like our button is quite a bit wider now the design does show this little plus icon on the button button before the add ingredient and I could just go in and type that into the markup but it feels almost decorative to me so I think what I'm going to do instead is use a before pseudo selector and just say that the content is a plus and then maybe give it a little bit of margin right just to separate it a little bit and I need my semicolon here okay that's looking good all right with this behind us let's keep moving forward and start jumping into the meat of the section and actually our button is still looking a little bit squished so let's see if maybe we give it a width of 150 pixels I think the design shows quite a bit more oh and I think the font size is a little bit smaller the font size looks like it's set to 14 pixels which comes out to 0.875 Rim and oh yeah that makes a big difference it also looks from the design that the font weight might be adjusted looks like it's set to 500 let's see if that's making a difference oh it's a very slight difference but we'll go ahead and leave it in oh and one last thing I'm noticing that our form is shoved up pretty close to our header it looks like in the design there's about a 70 pixel space between those I think that's going to be a little bit large for such a small site here so I'm going to call an audible and let's see our padding on our main element is 10 on the top and bottom 30 on the left and right I'm going to go ahead and specify let's see 10 pixels for the bottom and then change this to yeah let's say 30 pixels on the top this is a little bit less common if you have just three values then it's top left and right and bottom kind of a weird way I'm honestly not sure how I remember that but it's working great okay we're done with the static portions of our page we have a lot to dive into still I think a really good idea is for us to take a step back and get a highle overview of the project and make sure that we understand and how we're going to go about building it that'll be something we do really quickly in the next scrim other than just building the static parts of your page it's a really good idea when you're starting a new project like this to try and take a step back and think about how you would approach solving the problem assuming you're fairly new to react that might not be entirely possible at this point because you still have quite a bit left to learn but I thought it would be helpful for us to get a highle overview of how we're going to approach building this project when the user First shows up as I've mentioned they will simply see our header and a little form like this where they can start adding ingredients once they start adding ingredients we're going to change the layout of the page a little bit we'll include this header that says ingredients on hand we're going to map over the array of ingredients that they've entered into the form and we're going to have a call to action down here where they can click this get a recipe button this is where things get pretty fun clicking the get a recipe button will send the list of ingredients embedded in a prompt that we send to the Claude API from anthropic CLA is an extremely capable text completion AI that will take the prompt we send to it which will include the list of ingredients and it's going to generate a recipe now on this next screen I had to split it because we're going to be scrolling up and down the page but you can see it will have a suggested recipe it's going to have a basic text at the top that tells you what it recommends that you make and then it will have a formatted list of ingredients and a formatted list of instructions the way we're going to handle this formatting is fairly simple but it's not something we have to be too concerned about right now now there's still a lot left we have yet to learn so don't let all of this feel like it's too overwhelming I promise we're going to take it one step at a time and by the end of this section you are going to be able to complete this entire project from scratch if you needed to all right I'm too excited to wait any longer let's jump in the primary thing that sets apart a static website from a web application is the user's ability to interact with the things that they see on the screen and one of the primary ways that we do that is by listening for events so let's talk about how we can add event listeners to our components in react first of all based on the prerequisites for this course I expect that you already are familiar with the concept of adding an event listener in regular Dom JavaScript where you would select some elements and you would use the addevent listener method this method takes two parameters the first one is the type of event that you want to listen for like a click event and the second is a function that should run should the click event ever happen on this specific element another way that you can add event listeners to elements is directly from the HTML if for example I wanted to well let's say we have a button here and it'll just say trigger event inside the HTML I can add an attribute to my button called onclick all lowercase like this and set it equal to the string of a function that exists in my JavaScript file maybe called handle click and I use a set of parentheses here to indicate that I want to run that function when the onclick is triggered or rather when the click event happens and although I seem to find this HTML method of adding event listeners a little more rare than using the add event listener method in JavaScript the way that we're going to do this in react is actually more similar to the way that we see it here the syntax is very similar to how we do it in HTML so let's go to our JavaScript I'll get rid of this line here and the way that we can add an event listener is one of the properties that we passed to this button so I can add an onclick but this time I'm going to use a capital c as a reminder sometimes it's easy to forget that we're actually inside of a Javascript file even though what we're writing looks a lot like HTML and this jsx code that we have will be converted into a regular JavaScript object that JavaScript object will then by react be turned into an actual Dom node that displays on the page but because we're here in jsx any of the attributes that we add to our react elements are going to be accessing the actual Dom nodes attributes or properties and in JavaScript that accesses the document object model it does use camel casing like this that's the same reason that we're using class name because class name is the actual Dom node property now because we are here in JavaScript I don't need to set this equal to a string of a function that I'm trying to run instead I can set it to the actual JavaScript expression that I want to run which means if I want to I can just stick a function right here in line and whatever I'm going to run here let's say console log clicked the body of this function will run anytime a click event happens on this button let me hit save and oh we have our trigger event button let's go ahead and get rid of this okay so if I hit click me then we get the JavaScript that we put inside of our function actually running on the click event now I don't person Al love to put my functions right here in line sometimes I'll find myself doing it more often than not I will create a function outside at the top level of my component above the return and so I might have something like function handle click and we'll go ahead and just put our console log back and this leads us to our first challenge your challenge is to add the new function that we just created handle click to the button go ahead and give this one a shot now some of you might have been a little bit tricked by adding handle click followed by a set of parentheses I had mentioned that this is the way that we do it inside of our HTML however because we're here in JavaScript if I include this set of parentheses it's going to run this function as soon as the component loads or is rendered let me go ahead and hit save and watch the bottom of your screen for the console and you'll see it immediately ran I was clicked even though I didn't actually click the button we don't want to include the set of parentheses here because that does indicate that we want to run the function immediately as opposed to passing the contents of the function or the functionality of the function to the button element so that it will only run when the click event is triggered so I'll go ahead and hit save and now it will run I was clicked when I click the click me button awesome before I get too much further I do want to point you towards the documentation on responding to events click the screenshot if you want to head to the react documentation for this and I also included a slide that leads you to the mouse event handler functions which give you an example of different Mouse events that you can respond to in react and this documentation is going to be helpful for you for the next challenge all right your next challenge is to log something to the console whenever the mouse hovers over the image now because we're hovering it's not going to be the click event which is why I gave you the documentation here feel free to go check that out and with that I'll pass it over to you to finish this challenge in that documentation we can see that there is an event called on Mouse over and there's also on Mouse enter either of these would have worked just fine for this challenge let's clean up this challenge text so we declutter a little bit and I'll go ahead first and create my function here we'll say handle Mouse over and then on my image I can add an on Mouse capital M over capital O equals and then my function of handle Mouse over let's have this console log I was hovering let's hit save and cross our fingers and sure enough when we hover over the image we get I was hovered we can do that really fast and get lots of console logs awesome it can be kind of fun to check out all the different events that you're able to respond to I think a lot of them you likely haven't even heard of and could probably find some really cool ways to use them so feel free to poke around the documentation for the different Handler functions this site will take you to the section on mouse event handlers but if you were to scroll up or down you would see other ones like touch event handlers and pointer event handlers keyboard event handlers and so forth so lots of really cool stuff there hopefully this is fairly straightforward enough we're going to be doing a lot of event handling it's one of the cruxes of having a web application over just something that's purely static so lots of really fun things coming up as we just discussed when our users first come to our app they're going to be presented with a pretty simplistic UI and their task is to type in an ingredient and click add ingredient when they start adding ingredients they're going to be presented with a new section of the site which will list the ingredients that they've entered out for them if you think critically back on what we learned in the last section you might recognize that what essentially we're going to be doing is adding the ingredients that the user is submitting through this form to an array and then we'll be mapping over that array to display a list item for every item in the array so with that in mind I've set up a bit of a review challenge I created an array of ingredients and I want you to as part of your challenge map over this list of ingredients and then render them as list items I've added a little unordered list it's going to be completely unstyled but you can render your array of list items right here as a quick note if you are already a little bit familiar with react you will recognize that we're doing this in a weird way I wanted to point that out now so nobody got confused as to why I was teaching it this way by the end of this lesson we're going to see the limitation we have but for now don't worry about that and I'll hand it over to you to work on this review challenge I will go ahead and create a new variable let's call it maybe ingredients list maybe ingredients list items just to be really explicit and we'll set that equal to the array that comes back by calling ingredients. map for each ingredient which is just going to be a bare string I will return and I'm going to use a set of parentheses here so I can take advantage of the implicit return with with arrow functions I'm going to return a list item and I can just put the ingredient directly inside there because it's just a string for now I am going to add my key cuz I know I'm going to get a warning so I'll make sure to add the ingredient later when we actually do this we will figure out a way to make sure that ingredients are unique in our array okay so I'll take my ingredients list items and render them right here like it told me to do let's hit save and awesome our ingredients are showing up let's clean this up well we just learned about event listeners so I have another challenge for you I'm throwing a little bit of a curveball here because in the last lesson we only really practiced with mouse events the on Mouse over and the onclick events but between me giving you the exact event handler name and exactly where to put it on the form I think you'll be able to figure this one out so your task is to add an onsubmit to the form element and have the function which you can Define right here simply console log form submitted for now all right let's get cracken I'll go ahead and create the function first we'll call it the handle submit function it's going to console log form submitted and I can add the onsubmit Handler to my form and we'll set it equal to handle submit this is tangential but you might be asking why are we doing a handle submit on the form instead of a handle click on the button I'd say there's at least a couple reasons primarily it feels more semantic we're submitting a form we've created an actual form element and clicking the button will submit the form so what we should be doing is handling the submission of the form maybe more importantly if a user hits enter in the input well that's not going to trigger a button click event however it will trigger a form on submit event and so for free we essentially get the capability to type into the input and hit return or enter without having to handle a separate vent on the input we haven't really done anything to handle the text that's in here so it doesn't matter what's there I'll go ahead and click well I have to save first I'll type in here I'll click add ingredient and awesome we get form submitted we also can type in here and hit enter and sure enough we get form submitted now later on in this section we are going to do a much deeper dive on forms so there's going to be a couple things that I add to my handle submit I'll explain them briefly but especially if you're not familiar with how forms native work on the web I'm really not expecting you to memorize this stuff right now for now let's start by cleaning up this challenge text to buy ourselves some room and the first thing that I actually forgot to put on my input is a name property whenever we're submitting a form our inputs all need to have a name we'll see why in just a second but I'm going to call this ingredient secondly when I submitted my form you might have noticed that the form actually refreshed the page and now that we have a name on our input we we can actually see a URL change if I were to say I don't know a cumin I'll hit enter and sure enough the page refreshed and if you look up in the little mini browser URL you'll see that it says question mark ingredient equals cumin this has to do with the way that forms natively submit on the web however in our modern framework of react we actually don't currently want this page to do a full refresh and so I can prevent that from happening by grabbing the event that is passed to my handle submit function and and calling event.prevent default let me hit save and put this back to just a slash we'll go ahead and I can just say testing and hit enter and awesome our form didn't refresh our URL didn't change and we did get our form submitted running awesome okay in order for us to do the next challenge which is hopefully going to drive home the point that I'm trying to make in this lesson I'm going to do a little bit of hand waving coding again if you're not familiar with this and it doesn't make sense it's completely okay please don't be too concerned about it my goal is to have you do a challenge where you take the ingredient that was typed into the input and try to add it to the ingredients list in order to grab the ingredient that was entered into the input I need to grab the form data that was submitted with the form that was submitted in order to grab the text of the ingredient that the user put into the input box and submitted with the form I need to grab that through form data I can grab that form data on the form itself and I can access the form Dom element itself through the event that was run when the handle submit function runs so I can get the form data by creating a new instance of form data and passing the event. current Target then I can get the ingredient so the let's call it the new ingredient by calling form data doget and then passing in the name which is ingredient this is the name of the input from my form let's go ahead and just console log new ingredient we'll hit save I'll type testing hit enter and check it out we got our form submitted of course we can actually probably get rid of that console log and we got our new ingredient which is testing that's pretty boring let's add I don't know what's a more exciting ingredient let's say jalapenos oh come on we can get an NA in there let's do that perfect okay jalapenos again this wasn't intended to be something that we actually learned in this lesson so I went through it really quickly please don't be too concerned about it but do be concerned with your upcoming challenge okay this is the challenge that is really going to drive home the message that I'm trying to get to in this lesson we have access to our new ingredient instead of console logging it I want you to add it to our array of ingredients after you've done that I want you to add a console log of your ingredients because spoiler alert what we might be hoping would happen which is to have the page update with the new item that they added it's not going to work now this hint says that it's a on liner solution so don't overthink it I guess technically it's two lines because I'm also asking you to console log the ingredients okay let's get your hands on the keyboard again and work on this challenge okay so inside of our handle submit we might be thinking well I can just push to the ingredients array the new ingredient we'll go ahead and as asked console log the ingredients array and let's hit save we'll put in our jalapenos add ingredient let's look at what we got and sure enough it got added to the list however and maybe this was a really really roundabout way to make this point we clearly have not updated our page in a more imperative system like if we were not using react and just building the site with regular JavaScript accessing the Dom properties we commonly would find ourselves pushing a new ingredient to the list of ingredients and then either manually adding a new Dom element to our unordered list or running some kind of function that does this operation Maps over the new updated ingredients list and pushes all of those elements to the Dom however with the declarative nature of react we don't want to have to do that we want to be able to just update our data or the list of ingredients and have react recognized that change and reflect it on the page for us so that's the ultimate goal I know this was kind of long but trust me what we're about to learn is maybe the most important feature that you will learn as a beginner in react so again this was a very roundabout way to get to this point but what we're about to learn which is the concept of react state is the key to making all of this work for US state is one of the most important things that you will learn about react and so I'm using that fact to justify all of the Hoops that I had you jump through in this lesson so get excited we are finally about to jump into State and learn how we can harness a major part of the power that react brings to web development over my years of teaching react I found that one of the major confusions stems from not understanding fully the difference between props which we have talked about in the last section and state which we are just now learning about so I want to spend a little bit of extra time understanding the differences between props and state and we'll start the comparison by talking first about props in react when we talk about props we're referring to the properties that are being passed down into a component in order for that component to work correctly similar to how a function receives parameters from above another way you could word It Is by saying that properties not only are being passed down into a component in order for it to work correctly but almost in a sense in order to configure that component to work in the way that you want it to work or to display what you want it to display an important point when it comes to props and something that distinguishes it from state is that a component that receives props is not allowed to modify those props using a more technical term props are immutable or unchangeable and when we stop to think about it this makes a lot of sense for example if we have our classic add to numbers function we came to the conclusion that this function really is only useful to us if we're able to accept some parameters like numbers A and B this is exactly what we're doing when we pass props down from above including parameters here of course makes it a much more flexible function that can do a lot more than just adding two hard-coded numbers like if we were to say return 1 + 2 instead as we've talked about a number of times of course I would use my parameters instead to make this function a lot more flexible to use with any number that I might want this is the function definition but the real values are being passed down when I call add two numbers this is where I might put my one and two in and let's just go ahead and console log the results here and of course this is going to return to us three however we need to think of these values as immutable especially when it comes to props and react because as you would expect it would be pretty strange for me as the first line of my function here to say actually the value that you gave me for a doesn't matter at all I'm going to set that equal to something completely different and then naturally that's going to really mess up our function the person using our function add to numbers is going to expect the result to be three but instead they're going to receive a 44 which makes absolutely no sense so just to be clear don't do this because the parameters coming in should be immutable similarly in react I wouldn't want to have a function let's say it's our navbar that receives props and then to have any part of the body of my component say well I know you gave me a props dot let's say logo icon but then we say I don't really care what you gave me so I'm going to set this equal to some other icon.png this would be pretty confusing if we're expecting to receive a prop called logo icon and when we use this Navar we create an instance of it and we passed down a prop called logo icon and you know we set it to I don't know I'm kind of stretching here uh let's say spatula. PNG doing this we're trying to configure our navbar so that it will use this specific logo icon but the contents of our navbar component are saying I don't care what you had I'm going to set it equal to what I want it to be equal to so just like above don't do this to be clear this doesn't mean that whatever component is rendering your navbar couldn't have a value that changes like if you had a button on your site where the user could click it and it would change the logo in the Navar I'm reaching a little bit with this example but that would be completely okay changing the value that we're passing down to to our Navar is a very normal thing in react in the same way that when we're calling add two numbers I might be able to click a button and change the numbers that are being passed into this function but specifically the props that are coming in or in this case the parameters that are coming in should not be changed in the body of the component okay I think I might be beating a dead horse here so let's move on and now we'll talk about how state is different from props in that state is intended to change so that's what we'll be covering next if props are referring to the information that's being passed into a component for it to work correctly or as we mentioned to configure it and if props are not meant to be changed from within the component that's receiving it State on the other hand refers to any values that are managed by the component itself kind of similar to any variables that are declared inside of a function I say kind of similar because there is a difference and we're going to talk about that in just a second but it's important to note that anytime you have a changing value inside of your component that needs to be saved between renders and more often than not displayed or used as logic to figure out what needs to be displayed you'll be using something called state within react so even if the quick description that I gave here doesn't fully make sense to you that's okay I bet at the end of this section if you were to come back to this lesson it would suddenly start to make sense for you there's a phrase that you might come across when it comes to understanding State and reac act and that is that the view or rather the user interface the actual page that you get to see as a user is a function of the state of your component and there are three main points to consider here first of all is this term called render I've said it a couple times up until now but you can think of the term render as simply running the function remember all of our react components are simply functions and we have to return some sort of jsx or user interface from that component well when react runs into an instance of our component in other words if it sees something like this that looks like an HTML element it's going to run our in this case app function and that app function might create some functions within its body it might set a couple variables and usually in the end it will return some kind of view once react has run this app function it's only going to run it again if either the props that it's receiving change somehow imagine if we were passing in a dark mode prop to our app component and maybe it starts out as true and then a user clicks a little toggle that switches it from dark mode to light mode and then this would change to false if that prop value changes then react is going to rerun our app function or in other words it's going to render this app component so that's one time that react will render or rerun that function is if the props that it's receiving do change from above or it will also render if internally it has a state value that changes now a state value is different than just a random variable that you declare within the body of your function you might remember when we had our favorite things list we had just declared an array of strings and changing that array did not update the view and that's because that array was not being saved as a state value it was simply saved as a variable Within the component and don't be confused we really haven't talked much about the syntax behind how to create state yet so we are going to get there I promise a second key point is that changing a local non-state variable does not cause react to render the component I guess I kind of hinted at that at the end of Point number one however if you use a react provided set State function in order to change a state value not just a local non-state value but an actual State value calling that set State function will update the view it will rerun the code in the function of your component so that logically leads us to point number three where the view or what the user sees is simply a function of the state from within your application if State changes then react needs to rerun or render your component so that something new gets returned and replaces whatever used to be on the page so you can see that this concept of state is really powerful in react if we we update our state then react will automatically react to that updated State and it will display a new view it might not be super apparent on its face but this is a really awesome thing as a web developer because it means that we don't need to imperatively update the view ourself all we need to do is make sure that the state of our application or you could kind of think of it as the data of our application is as up to-date as we want it to be and as long as we do that then react will handle the rest it will update the view for us it will change whatever parts of the Dom need to change as a reaction to the change in state and we don't have to do any of that manual Dom manipulation at least for the most part A really simple maybe overly simple analogy is of a light switch and a light bulb a light switch represents the state of the I guess electricity in your room if the light switch is turned off there's no electricity running to It's associated light bulb and therefore the view is well a dark room a light bulb that's off if you change the state of the light switch by flipping the switch on then the view will automatically update in other words the light bulb will turn on and the room will be illuminated I think this is about as far as I can go with just explaining it and so in the next Grim we're going to dive right into the actual syntax and I promise if what we covered here didn't make perfect sense it's going to clear up as we get to see the syntax of it see see how it affects react see how it's used within the react ecosystem how Changing State updates the view all of that's going to make a lot more sense when we get to get our hands on the code and actually practice it so let's Jump Right In we saw in an earlier lesson that it's not going to work for us to Simply create new variables here like let's say we have a variable that we're calling State and we set it equal to the string yes we can use this variable to display what gets shown here so I'll just put state in its place and we'll see that we do get the value yes and to be totally clear If This Were changeable and then right below it I were to set it equal to something else like heck yes this actually probably isn't going to look very good in there this is technically okay I'm not sure why I would do this but I can hit save and we get heck yes I don't want to say no because of course state is important to know the problem comes when as a response to a user Interac I try to change the state for example if I were to add an onclick inside of my button and maybe I have a function called handle click and all that did was change the state actually let's have clicking the button change it to heck yes like this and we put handle click down in our unclick let's hit save and watch what happens I'm going to click yes and check it out nothing happens this is exactly what we saw with our array of Favorite Things simply change in a local variable is not going to make react rerun our component or in other words it's not going to make react react to the change of state and display the updated value that it has instead we have to use a function that's provided by react to save these variables in an actual State as far as react is concerned this is just a local variable no matter what we decide to call it to set up a variable that react will place in the view and reender whenever that state changes we need to pull in that function from react a very common way that you'll see this is to import a destructured use State Hook from the react library in fact I would bet that as you're looking at react code out in the wild this is probably going to be how you'll see it the most often however just to be totally clear that this US state function is coming from the react Library I'm going to import the entire react Library this is a little less performant when it comes to to tree shaking and not pulling in all the stuff that you don't need although with modern build tools that doesn't matter but if that makes no sense don't worry about what I just said but I just want to be clear I'm going to be importing react and then using react. use state in order to access that function and actually let me clean up some of this extra stuff we'll be adding some of it back but for now this will just clear up any confusion let's change this because we don't have State anymore we'll change this back to a hardcoded yes and okay let's be curious and we'll save the result that comes back from calling react. State and let's just log it to the console okay interesting what we get back is an array where the first value is undefined and the second value well scrimba displays it as F parenthesis but it simply means that it's a function let's see what happens if when I call use State I provide a value let's put a string hello and hit save okay interesting we get an array back but this time instead of undefined for the first value we get the string hello when we pass in a value when we're calling react. us state it provides an initial state so if we know that our component needs to start with the state with a certain value then we can pass it in here great well before we talk about the second value the function that that's being returned in our result I'm going to give you a challenge okay this challenge will require you to do some critical thinking your task is to replace our hardcoded yes right here with some state that you initiate inside of react. state and we don't want it to say hello we want it to say yes so go ahead and get started on this challenge the first thing we need to do is not say hello we'll go ahead and say yes and secondly instead of hardcoding yes here we want to use curly braces so we can evaluate some JavaScript and then currently we're saving this array that we get back from UST State as this variable result so we'll go ahead and say result but we only care about the first item of the result array so index zero quick aside for people who are already familiar with UST State yes we're going to be changing how we're doing this we pretty much never index into the array that gets back from UST state so don't worry too much about that let's clean up the challenge text because I'm confident this is going to work and sure enough we get our value yes that is now a state value as opposed to a local variable value we can test really quick that this is working so if I change this to heck yes and hit save sure enough our state is correctly displaying there and awesome okay well there's a couple of problems we have because first of all changing the code like this in order to change the state isn't viable it's not something the user can do and also this way of doing this is kind of clunky so as I mentioned we're going to learn a better way to reference our state and give power to the user so that when they interact with the page they can update the state and therefore change what's in the view so that's what's coming up next when we call react. usate we're receiving an array in return and as we mentioned it's a bit clunky to access the index of zero of that array so what we do more often is leverage array destructuring in JavaScript in order to get back what we actually need in order to give more meaningful names to what gets returned from our UST State call so let me go ahead and destruct structure this by putting a set of square brackets around it and since we know that the resultant array has two items I'm going to put a second item here let's just call it funk for now because we know that it's a function that we're getting returned now that I'm destructuring this array result is no longer an array which means that I don't need to index into that array in order to get the value I can simply call result if you're feeling a bit lost when it comes to array D structuring I would highly recommend taking a pause and doing a quick chat GPT or Google search about array destructuring to see if you can better grasp what's going on one thing that's nice about this being an array that we're receiving in return is that we can call this value whatever we want and as long as I update my code to say whatever we want it's going to work just fine if what was getting returned by react. usate was an object instead we wouldn't have the same flexibility we would have to use our curly braces instead of our Square brackets because it's coming back as an object and then we would be forced to use whatever properties that object had when we're destructuring it so having an array is really useful in that case because we want to give this a name that is more indicative of the state that we're trying to save so maybe let's call it something like is important and once again we'll make sure that we update that in everywhere it exists of course hitting save gives us the same result next let's go ahead and Tackle understanding what this function is and how it will will play an important role in using State inside of our react components we've seen a couple times already how we can't just set up a value like important set it equal to yes and then have some kind of user interaction like a button click that changes the value manually of important to something else while it will change the value in memory it's not telling react in any way to reender the page and in fact this is even true of values that we save in state let's change this to a let so that we can manually change it to something different we'll say is important equals heck yes and if I hit refresh it will show heck yes here but it would never react to for example a button click if we wanted the user to be able to click a button on the page in order to update that state I'm not going to go down that rabbit hole just take my word for it I can hit refresh and see it says heck yes but adding an on to try and change that will not update the screen just like we saw it before when we weren't even using State however the function that we get pasted from react. state if we call this function and provide a new value it will reender the page it will successfully update State and Trigger reacts to reender the page with the new state displayed let me hit save so that we don't have heck yes there anymore and let's talk about the conventions for this function name because just like is important we get to choose what we call this function and there's a really strong convention where we start the function name with the word set as in we're setting a new value and then you continue the name from the state variable itself so it would be is important and set is important I'm going to fix my I here so that it is capitalized just to make sure my camel casing is correct and in order to use this function I can simply call set is important and provide the new value that I want and I guess it's already Yes this will be heck yes however I'm not going to hit save and let me tell you why we talked about how running this function will update the state to the new value and it will have react render our component rendering our component essentially just means it's going to run the code inside of our function so I'm going to put a pause here to give you a chance to see if you can think through what would happen if I were to hit save and react were to render this component hopefully some of you actually took a chance to hit save and see what would happen I'm going to hit save and we can see that we get an error that says too many renders react limits the number of renders to prevent an infinite Loop why do you think an infinite Loop happened well remember when we call this function react is going to update the state and render rendering means rerunning this code rening this code means calling this function which then updates the state and renders which updates the state and rerenders and on and on and on so let me comment this out and we'll get our state app back into a working State and now I'm going to provide a challenge for you okay this challenge comes in two parts first I want you to create a function called handle click that runs set is important and let's just give it the value of definitely for now and then you'll add an event listener to the button so that it runs handle click whenever the button is clicked go ahead and get started on this challenge okay let's go ahead and create our function called handle click it's going to call the function that we were returned from UST State this state setting function sometimes referred to as a set State function we'll go ahead and call set is important and because I definitely don't want to put no here because state is very important to no so we'll say definitely then down on my button we'll give it an onclick event handler that calls handle click clear up our challenge text and we'll hit save and let's see what happens I'll click this and The Styling is not really working out for us but we can see that the state changed maybe let's go back to uh heck yes click heck yes and at this point we've hit a bit of a dead end we were successfully able to call the state Setter function that we got back which we chose to call set is important and in its simplest form we were able to just provide a new value for state so that when the user clicks the button it changes to that new value of State renders and displays the new value of State on the page however we're stuck because we can't get out of heck yes if the user keeps clicking the button obviously we have nothing else to change to we've manually set it equal to the string HEC yes however just because we're temporarily at a dead end doesn't mean we can't learning so in the next lesson we're going to get our hands on the keyboard a lot and do a series of challenges to try and help us reinforce the idea of state and setting State you know this whole section is all about State and I think it might be useful for us to have a little app where you count how many times I'm going to say the word state in this entire section but we do have an app that's a little bit more Dynamic than what we were just seeing and so this will be a good way for us to step by step practice setting up our state and practice including some event listeners where the user can change that state so the first part of your challenge is to create some new state that will track our count value where the initial value will be the number zero and don't forget to replace the hard-coded zero that we currently have with the state that you create as the first part of this challenge okay go ahead and get started with this to create some new state we will simply call react. use State we'll set an initial value of zero and what this returns is an array so we'll go ahead and destructure that array immediately when we receive it first we'll receive our count and I guess you could call this something like State count but let's just keep it simple and call it count and the second thing is the setter function that they provide to us so that we can change that state and trigger a render in react by convention I will use the same name as my state but I'll start it with the word set so I'll say set count and lastly I can use my new count variable right here and I'll hit refresh this won't change much for us because we still don't have any interactivity with our buttons but if I do change the initial value like setting it to 10 awesome okay we can see 10 showing up there let's go back to zero for our starter Point okay let's jump to the second part of this challenge I want you to create a function that's called add that will run when the plus button is clicked and for now it can just consol log the string add or something like that no need to worry about changing State quite yet as a reminder it's a pretty strong convention to create any functions that your component will need to run inside of your function but above the return so instead of coming outside of your function up here and creating a function called add you would want to do that inside your function probably below where you're creating state so right here okay take it away okay let's add a function called well add and for now the body of it will just console log the text add and then on our plus button which is let's see not this one that's the minus this is our plus button right here we'll go ahead and add an onclick and set that equal to add all right let's hit save and clicking the plus good should console log add perfect add add add and minus of course does nothing quite yet okay this brings us to the next challenge up until this point we've touched a little bit on what you could do in order to update the count although we haven't explicitly talked about how we could do something like this where every time they click it a different value gets displayed in other words in the past we've done a thing where we said something like set count and then hardcoded the number one in there or I think in the last example we had changed the text to heck yes for it being important to learn state but of course that meant that every single time we click the button it just kept resetting the state to the same value so that brings us to this challenge where I want you to see if you can figure out a way so that when you click plus multiple times it will continue to increment the number so give it your best shot see if you can figure out how to do this challenge okay hopefully that challenge went okay all I need to do is call set count and then for the value that I pass in here it turns out I do have access to what the current value is with count and so I'll go ahead and put in count but I don't want it to set to the current count I want it to set to one above the current count so I'll say count plus one let's hit save we can hit plus and awesome this is working now I do want to address a common misconception with beginners and react and that is those of you that tried to do count Plus+ first of all if we try to run this we'll see that when I click plus we get an error that says you can't assign to a constant variable so you might have gone up here and said well let's change it to let and I'll hit save and look at this I get some pretty funny behavior I'm clicking it two times and only after clicking it two times will it actually increment let's see what happens if we were to put the Plus+ before the count in case you're not familiar with that trick it simply increments one to count before returning it and so the value becomes the new incremented version so let's hit save and okay technically this is working but I don't want you to get too Ed to this because this is a big no note in react remember doing count Plus+ is the same as doing count equals count plus one and in react whenever you want to change State you will never ever ever change it directly in the way that we're doing here where you say here's my state variable set it equal to something different it's a big no no in react so try to remember that if you are ever modifying the value directly then you're doing it wrong on the contrary saying count + one it's not directly modifying count it's simply providing the new value that we want our count to have to set count which will then update State rerender the component and display everything correctly let me go ahead and change this back to a const in fact that should have been our first red flag when it was warning us that we were trying to change a constant hit save and we're back to the way we were before but at least now we're doing it the correct way okay that brings us to the last challenge your challenge is to add functionality to the minus button of course the functionality that it should add is to decrease the count by one give this one Your Best Shot I'm doing essentially what I had in the add function so I'm just going to duplicate my logic there we'll change this to maybe subtract I'll change this to minus one and then we will add an onclick actually let me just copy this whole thing we'll add that directly to our minus button and changes to the subtract function hit save and awesome we're going up and down perfect awesome work it's great to get our hands on the keyboard and be practicing this we had a lot of practice in this one if you need it's completely okay to go back and redo all of these practices from scratch if you really want to add a little extra challenge this would be a great time to come through and just delete all of the code that we've written regarding State and see if you can create it again from scratch I won't leave you in a broken State like this so I'll put it back but just remember that you're here to learn and learning comes through lots of practice once you're ready we're going to move forward and see another way that we can use our state Setter function the way we have our code structured right now it's technically working just fine I can hit plus it's incrementing I can hit minus it's decrementing and the way we're doing this is by calling our state Setter function which we're calling set count and providing a new value for the state that we want it to have once we call set count it will change the state to the new version that we provide and it will rerender with count now being that new version that we provided however there is another way we can use our state Setter function set count in this case where instead of providing the new value we provide a callback function in the body of this callback function we need to return the new value that we want state to be on the next render of this component if I were to essentially recreate exactly what I had before four I would just return count + one which is basically no different than what I had and we can hit save and see this is working as we might expect however the difference comes in the fact that this callback function is going to be past the old value of the state before your set count function ran and so what I can do is take this old value and instead of using count which is my state variable I can use the temporary version which is old value in place of what used to be count I'll hit save and we'll see this is also working now instead of old value I like to use preve and then the name of my state variable so pre count in this case this is a fairly common convention that I have seen quite a bit in the code and it's one that I try to adhere to I think it's a little bit more clear what state value we're dealing with and at first glance it might look like this is just a ton of extra work but if I take advantage of the more tur syntax of Arrow functions I can simply say PR count and then an arrow to return pref count plus one and in the end it's not terribly different than what we had before so why exactly are we doing this let me actually type this out as a written note for those of you that are maybe more visual Learners it'll give you something to refer back to and read through as we talk about it together so a general rule of thumb is that if you ever need the old value of your state in order to help you determine what the new value of State should be after calling your set State function or in our case we're calling it set count then it's a good idea to pass a callback function to your state Setter function instead of using the state value directly like we're doing down here still the Callback function that you pass to it will receive the old value of State as its parameter which allows you to then determine the new value of your state this is going to seem a little bit crazy let me bring this back down to zero let's hit save and I'm going to show you a difference that doing this makes even though honestly it's not something you're like going to run into very often let's go ahead and duplicate this line three times and I'm going to duplicate the old version that we have down here three times as well I'll hit save and I want you to think what do you expect will happen if I call the add function or rather if I click the plus button which then calls the add function and when I hit the minus button which calls the subtract function well you would think that it would increment it three times if we hit the plus button and check it out it does we immediately go up to three however if I I hit the subtract button we only go down one time all three of these set counts get batched together the reason and specifics as to why are a bit outside the scope of this course but this is a admittedly overly simplistic example of how using a callback function if you need access to the old value of state to determine the new value of State helps behave kind of the way that you might expect whereas using the state value directly doesn't now I don't want this to be anything that hangs anybody up let's go ahead and get rid of this I simply wanted to show that there is a slight difference in the way that react handles the two but again for a majority of the time you won't notice the difference but this is a good rule of thumb to stick by and it's the internal rule I'm going to use for myself as we continue through this course okay that was a lot of talking let's do a challenge simply enough your challenge is to update the subtract function so that it uses a callback function instead of using the state directly to determine the new state go ahead and give this a shot we took a kind of roundabout way to arrive at what we have currently for our ad function but we can see that if I simply say pre count Arrow preve count minus one we really only had a few extra characters to type and now we have adhered to a little bit of a better practice anytime we're setting state that relies on the old value of state I'm going to clean up this challenge text but I'll leave this note here for anybody who wants some additional reading and again this would be a great time if you really want to challenge yourself to just come through and delete everything and see if you can recreate it from scratch and I really mean that that's something you should do it's not just me saying that would be nice if you did it I mean you should do this again you're here to learn this stuff deeply not just to passively watch me teach you about it and kind of think to yourself yeah I think I get it prove to yourself that you get it by doing it it's not just going to give you those warm fuzzies when you actually complete it and everything's working it's also going to strengthen you as a developer in react and frankly assuming you plan to look for a job it's going to make you a more viable job candidate there's so many benefits to getting your hands on the keyboard and practicing it would just be a tragedy if you skipped through all of these practices instead of doing them and finding ways to challenge yourself outside of the challenges that I give you all right stepping off my Soap Box again I think we have thoroughly covered the concept of state so it feels like it's time for a little quiz okay it's time for another quiz as always I'm going to insert a pause here I want you to click in and actually type down your answers to these questions taking quizzes like this is scientifically proven to improve your ability to retain this information and recall it at a later time so don't skip answering these questions okay I'll hand it over to you all right number one you have two options for what you can pass into a state Setter function like the set count function that that we had in our counter app so what are those two different options well for one we can simply pass the new version of state that we want to replace the old version of State this works great for any kind of state where we don't care what the old version of State used to be we simply want to set it to some new value that has nothing to do with the old value later in the section we'll be talking a bit about forms and we're going to see where we make use of that there's also lots of other applications for this first way of updating State the second way is to pass a callback function to our set State function this callback function needs to return what we want the new value of state to be and this callback function is going to receive the old version of State as a parameter and the purpose of that parameter is to then help us determine what the new value of State should be okay numbers two and three I think we kind of touched on these already but when would you want to pass the first option from the answer above in other words simply passing the new version of state that we want it to become and this would happen anytime we don't care what the previous value was we simply want to set a new value and naturally and conversely number three when would we pass the second option it's the exact opposite it's whenever we do care about the previous value of state and we need it in order to help us determine what the new value of State should be okay hopefully that was pretty straightforward if not that's okay maybe go back through this quiz again and see if the repetition will help out out once you feel good about this let's keep moving forward at this point it's going to be really helpful for us to review the tary operator in JavaScript if you feel like you've already got a good handle on it then this challenge should come pretty easily to you if not then I'd recommend going over to the mdn docs on the conditional operator also known as the Turner you can click the screenshot here to go directly to the documentation on that we'll be using it in this pretty simplified example this makes a slight tweak to our app from before now it asks if we feel like going out tonight we're not using any kind of state here we're not handling the click of the button to change that state or anything like that we're simply practicing the Turner here so your challenge is to replace the if else that's right here with using a Turner right here on line 8 instead we have a variable called is going out and we have a variable called answer which will contain the text if is going out is true then the answer will be yes if it's false then the answer will be no it's being displayed down here in the center of the button again don't worry about clicking the button to change the answer or anything like that you'll simply include your Turner here hit save and it should show the correct answer there and then of course you can test it by changing this to false to make sure that your code is working okay it's your turn if you're not as familiar with the Turner that's okay we can see that the syntax actually consists of two different parts one is a question mark and the other is a colon and it's really just a simplified way to have an if else statement in a single line so what I can do is I can say I want answer to equal and then first we're going to check if is going out is true so we'll say is going out equals true and if it is true then what I want answer to equal is the string yes so that's essentially my if if this condition evaluates the true then this is what should get returned my else is going to be separated with a colon and then I'll have my string no now you can actually Nest Turner's multiple levels down as a way to replace an if else if else if else if block but I personally find that a little bit more difficult to understand and follow so I tend to stick to a Turner if I simply have an if else statement but otherwise it's totally fine to use an if else if or a switch even so let's go ahead and get rid of our old code here we can see it's quite a bit simplified first let's make sure that everything is working so I'll hit save and sure enough we get yes if we change this to false we get no okay now there is another way that I can simplify this just a little bit more we know that is going out is already a Boolean and so I don't necessarily need to equate it to the Boolean true I can simply say is going out and that's already going to be the bullion that I need so we H save we see no we change false to true and we see we get yes and actually because I'm not block scoped anymore with the curly braces of my if El I could change this to a const if I wanted now in this case I've set aside a separate variable just to figure out what the string should be and then I'm rendering that variable down inside the return of my component but there's another way to do this and that is to Simply move my Turner into my component itself and it will figure it out on the Fly this should be a pretty straightforward challenge but we'll go ahead and keep our fingers warm so that you can keep learning your challenge is to move the Turner directly inside of the jsx remember once I go into my curly BRAC inside my jsx I can run any JavaScript expression that returns a value that makes sense in this context so go ahead and give this challenge a shot simply enough I no longer need my answer variable I'm just going to take this expression and put it right in place of answer we'll go ahead and clean this up and the challenge text too and awesome this is quite a bit simpler than what it was before this might seem a little bit out of place but we're going to see in the next lesson why this is helpful for us this challenge will be a collection of the past few things that we've been learning we're going to make it so that our users can actually click the button and change the answer from yes to no or no to yes so your challenge is first to initialize some State for the is going out we initialize it as a Boolean you can choose true or false I guess depending on what your mood is like right now then and the language I'm using is a little bit vague I want you to make it so that clicking the button will flip that Boolean value for from True to false or false to true and then right now I just have this back as a hardcoded yes you're going to display yes if is going out as true and know if it's false okay I believe in you give this your best shot first we need to initialize some states so we'll need to import and as a reminder we could just import the use State function from react this is a very common way that you'll see this done as I mentioned before I'm going to actually import the entire react Library just so that I can use react. state only for the purpose of keeping it clear that this is a function that comes from react I'll initialize the value to true well who am I kidding I don't really feel like going out tonight let's set this as false and what gets returned is an array so we will destructure that array when we save it in variables we'll say is going out and then by convention I'll start my Setter function with the word set is going out okay awesome and you know what I think I'm going to skip to this last one it's completely fine if you didn't do that but I want to display this as either yes or no depending on my value of is going out and to do that I'm just going to do an inline Turner like we just did in the last lesson so I'll say is going out question mark in other words if is going out is true then I want it to display yes but otherwise I want it to display no let's see if this is working I had said false so let's see if it changes to no and perfect okay let's see let's buy ourselves some room here we got done with those parts of the challenge now we need to make it so that clicking the button actually flips that Boolean value similar to how we are just doing this inline expression if we want to we can add our onclick function Handler directly inside of the curly braces that we have here I'm going to start by doing this and then I think we'll see in a second why my personal preference is to put these functions up above the return section of our component so I can just do this as an inline Arrow function and when the button is clicked I want it to call set is going out and if you remember we just learned how there's two different options I have when I'm calling my state Setter function I can either provide the new value that I want state to have or I can provide a callback function I want to synthesize the quiz that we recently took and give you a chance to think through this which of those two versions do we want to use in this case well we can simply ask ourselves do we need to know what the old value is in order to determine the new value and in this case yes we we need to know if it was false so that we can flip it to true or if it was true so that we can flip it to false and I guess it's kind of a mixed answer because the truth is I have a way to just flip a Boolean to its opposite so what I can do is say it's not is going out and that should get the job done in fact let's test that out we'll hit save we have no we click it and it says yes okay it's working so you know what maybe this is a little bit of a gray area in that question of do we need the old value or not because we do need the old value and I can just access the old value and this will work fine maybe for completeness sake we'll also see what this looks like to use an inline function and you know what I can already see this is getting a little bit crazy we have our inline click Handler function and that is calling set is going out which is taking a function and I don't know about you but this is maybe one level too much of inception for me I think it's going to be clearer to move this outside of our return so let's create a function and call it something like change mind and we'll take what we have here let's see how far do we need to go all these curly braces and parentheses are also really confusing when it's in line like that and okay I missed one we'll clear out everything in here except that outer set of curly braces and simply call change mind this puts my mind much more at ease than what we had before okay so if I'm going to use the Callback function version of my state Setter then I can get the preve state and maybe just for brevity we'll just call it prieve and I can just immediately return the opposite of prieve hit save and no yes no yes no awesome let's clean up this challenge text and one last thing I want to do before we move on is address this button first of all I admit this is not a very good user experience with our silly little learning app here it feels weird to click no and have that be the way to change the answer so if you're designing a real website with a user interface maybe don't choose a button that clicking it will flip it to its opposite value but since that's where we are right now one thing that will be really important for us is to address the accessibility of this button I'm going to put some of these values on their own lines so that we can add an ARA label to anyone using assisted Technologies like a screen reader the purpose of this button is going to be pretty opaque and so I'm going to include an ARA label that will both clarify what the state of this button currently is and describe what will happen if you click it so I can say something like the current answer is and then I'll just stuff in the yes or no value that we're determining right here so actually I can just copy my Turner and put it right there so that's what the current answer is and I could say something like click to change it little additions like this make a huge difference for a number of people so this is an important thing to keep in mind while we're developing our code frankly I should have included this earlier or probably just changed our button to something like an H2 so this might be a little bit overdue glad that we're adding it in now okay great job with these challenges if you did find yourself struggling to complete that challenge then this is one of those perfect opportunities to take a break go back a couple lessons review what we've learned try to practice them again from scratch and eventually you'll get to this point you'll be able to do this challenge with no problems and that's a great time to Pat yourself on the back go take a walk get an ice cream do something celebratory because we've made some awesome progress here once you're ready we'll keep moving forward up until now the examples of State we've been using have used pretty primitive values like booleans or strings but a very common thing that you'll find yourself doing is including more complex data like arrays and objects in your state variables and it warrants a little extra attention to see how we can update more complex State like arrays and objects so let's start with arrays and hey this looks familiar this is the little app we were using when we first started learning how we can't just save the values we want to display on the screen in local variables like trying to do this but instead if we want those values to display on the screen and to update when we change those values we need to use react state so we'll get started with a quick challenge I want you to convert the code below so that instead of using this My Favorite Things array in a local variable you should instead create some State and set that state as an initial value of an empty array don't worry right now about the ad favorite thing function we'll get to that soon go ahead and get started on this challenge I'm going to save this variable name so I'm actually going to destructure what will get returned from our array we'll go ahead and also include our set my favorite things and instead of this being an empty array we're going to use react. use State and we'll put that array as the initial value and then of course I need to import react because I'm not currently doing that so we'll import react from react okay I think hitting save should be fine of course add item doesn't quite yet work I can do a quick test of this by taking maybe a couple items from the all Favorite Things sort of database of favorite things there and just sticking them here inside of my Ed State and sure enough okay hitting refresh shows raindrops on roses and whiskers on kittens perfect I'm going to undo that just so we don't get duplicated items when we do start adding to the array okay none of that was technically new but the reason that I wanted to record this scrim is so that we can see how we can make updates to our array well at first it can be tempting to Simply say well I know how to add something to an array I can say my favorite things. push however there's a couple things wrong with this first of all even if we do try to put something in here like a test we can see it's not actually working and the reason is because simply modifying the state value directly doesn't also trigger a render in react there's something special about the setter function that we receive when we're calling react. state that does trigger a render in react so I'm curious if I were to maybe console log my favorite things and try this out we'll see that sure enough it is adding those items to our array but because we're not using the set my favorite things function it's not triggering a render there's something else that's wrong with this though besides the fact that it's just not updating what we see on the screen and that is that it's a pretty hard and fast rule in react that you never ever want to directly modify State using something like push it's a destructive action to arrays it modifies the original array it doesn't just return a new array with that modification it actually modifies the original one and just like when we had a variable called count and we decided we never wanted to do count Plus+ even if it was inside a state Setter function like set count we talked about how this is a replacement for count equals count + one and saying count equals something different is just a bad idea in react similarly using something like My Favorite Things ray. Push is always a bad idea in react assuming My Favorite Things is a state variable okay so to modify anything in state as we know we have to use the setter function that we receive so we'll use set my favorite things okay so I'm sure you remember we have two different options we have to decide between when it comes to using the state Setter function do we want to provide just a bare new value or do we want to provide a callback function I'm actually going to put in a pause here so you have a chance to think through this which of those two options do we want to do in this case we provide a new value if we don't care about the old value at all we provide a callback function if we do care about what the previous value of state was or in other words if we need to use the previous value of state to help us determine the new value of state and in this case we want to start adding items from the all favorite things to our favorite things or My Favorite Things array and so we need to remember what was already in the list in order to not only determine which of the new items we want to add but also so we will continue to display the old items as we add new items to our list so we'll go ahead and include a callback function and we'll just call the previous state maybe previous fave things or pre fave things that's kind of a mouthful we'll include our arrow and now we need to think how are we going to update this array without modifying the original one because I still wouldn't want to say pre fave things. push even though it kind of seems like I'm accessing a different array this is a reference to our original Favorite Things array or My Favorite Things array so this is also not something we want to do but in true functional programming fashion the way that I can update the array in react is by providing a brand new array and then I can use all of the items from the previous array and then I can start this array out by taking all of the items using the spread operator from the previous Favorite Things array and then I can add my let's just put this in angle brackets so that you know this isn't the real syntax I'll put in my new item here what this does is it accesses the previous version of my favorite things array and it returns a brand new array so it's not going to be modifying the existing My Favorite Things array it's returning a brand new array that includes all of the items that were previously there plus the new item that I want to add just for test sake I'm going to just include the string test here and we can see that this is working awesome it's of course not interacting with the all Favorite Things array yet but we're going to get there in just a second however because I did kind of just blow through this and didn't ask you to put any critical thought into this surprise I have another quick challenge for you okay I cleaned up the old challenge text moved it down here and your challenge is I shouldn't be doing this you should be doing it every time the add item button is clicked it should add another string test to the list on the page like we just saw it doing see if you can remember what we did before you just scrub back and see how I did it think critically spend at least 3 or 5 minutes trying to figure it out see if you can remember what we did hopefully this is a good wakeup call for anyone who was maybe passively watching okay I'll hand it over to you anytime we want to change State we need to use our state Setter function so the first thing I'll do is call set my favorite things I need access to my previous array and so the safest way to do that is to use a callback function I'll just stub out this empty inline Arrow function now this callback function is going to receive the previous state maybe we'll go ahead and call this pre fave things even though again that's quite a mouthful and we'll use an implicit return here so we can get rid of our curly braces and we are going to return a new array that includes all of the pre fave things and adds test to the list now don't be too confused we're not yet using these emojis so the first time I click add item I'm starting with an empty array and then adding the string test the second time I'm clicking add item I'm starting with an array that has just the single string test in it and I'm adding a second one and then a third one and so forth let's see how we're doing we'll hit save add item awesome it's showing up of course we have key issues because we're not having any repeated items here but now we are having repeated items there that's okay for now awesome work this wasn't a super simple challenge so hopefully it wasn't too frustrating Kudos if you were able to write this without even looking back but it's completely okay if you did have to go back and study again okay let's clean up this text so we buy ourselves some room back and I'm actually going to put this on its own lines just so that it's a little bit easier to read and oh looks like formatting bumped everything out that's great that's okay okay so I'm actually going to do this part because it deals with indexing into this all Favorite Things array honestly this is not really something you'll find yourself doing in react so I don't want this to become a challenge I'm going to use the pre fave things array to figure out what index in the all Favorite Things array I want to add the new item from so when the pre fave things array has nothing in it it's going to be the index of zero which is the same index of the new item in all favorite things that we want to add so I'm just going to say all favorite things at the index of pref things. length again this is sort of where this example starts to break down because this is not something you'll find yourself doing super often because react is just a lot of JavaScript this is kind of a fun challenge at the same time let's cross our fingers hit save and see what we have we'll go ahead and add items Raindrops on Roses whiskers on kittens bright copper kettles and warm woen mittens awesome please Disney don't sue me awesome work on these challenges updating an array in state is something you'll find yourself doing quite often in react so this is a great thing for us to learn and a great thing for you to practice as much as you can next we're going to take a look at how we can update another complex data type and state which is objects all right finally at long last we're back here with our Chef CLA app and now we're armed with the knowledge that we need to make this work as you might remember where we left off we just had this local array of ingredients and we tried to do an ingredients. push to push the new ingredient onto that array and of course we saw that it didn't update our view now we understand that react doesn't update The View when just little local variables like this change instead we have to put these values in state then as long as we use the state Setter function that react gives to us we can change the data and rely on react to update our view to reflect the new updated data to our users so your challenge is to do exactly that update our app so that when the user enters A new ingredient and submits the form it will add that new ingredient to our list I added a note down here just like before I don't want you yet to worry about what's going on in these two lines of data just take the new ingredient and be grateful that you don't have to know this no I'm totally kidding we're going to cover this later by the way when you work on this you don't have to begin the array with these three items you can put whatever you want it can be empty you can add a couple just to make sure it's working whatever you want so go ahead and get started on this challenge all right let's go ahead and import react so that we can pull in state and watch this trickery I'm not even going to delete this line I'm just going to refactor it to use state so we'll say ingredients set ingredients and that's going to be equal to react. use State and then we will wrap our array and let me make this small for a second I think I'm going to keep this empty actually yeah we'll just keep it empty for now okay so it's being saved in state I think I can hit refresh and everything should still be working awesome of course we lost our items because we removed them from the array you might have noticed also that I did remove the ingredients. push line because as we've learned we do not want to directly modify any of our state variables we always need to do it through calling the state Setter function so at the end of my handle submit right here I'm going to call set ingredients and I do need to know the previous list of ingredients so that I can use that list in my updated list so we'll say previous ingredients and this will be a function and I can just return a new array that's going to include all of the previous ingredients and it's going to stick the new ingredient right there at the end so jeez in the end we really just added one line of code and refactored this line of code let's clean up our challenge text we'll hit save and moment of truth let's say we have some chicken awesome chicken and up right there now of course our form is not emptying we're going to address this a little bit later when we talk about forms so for now I just kind of have to annoyingly delete the old entry myself let's say we have some limes and maybe some salsa awesome great work on this challenge shift CLA and myself are really happy with your progress in this section so far so we had a chance to apply what we just learned about updating arrays in state next we're going to see what it takes to update a different complex object and state which is objects now let's take a look at what it's like to save objects in state we have an example of a little contact card here and we're holding an object in state which represents the information for this particular contact the first four properties are all pretty self-explanatory they display the actual information first name last name phone number and email this last one is favorite we are going to ignore dealing with that for now at least in this first challenge But ultimately it's going to determine whether this star is an empty star or a filled star but before we get there I want to give you a challenge where you're going to fill in the values that are currently being hardcoded so we've got the name phone number and email and instead use the values that are being saved in this object and state from that we're currently calling contact so go ahead and get started on this challenge of these four properties the trickiest one might have been the name because we're saving the first name and the last name under different properties all I really need to do is do a set of curly braces and we'll pull in the first name by doing contact. first name and then outside of the curly braces I can do an actual space because we're outside the curly braces this will represent an actual space in the text and then I'll do another set and add my last name the tricky thing about this challenge is I'll hit save and it will look like nothing changed but now it's using the dynamic values from our state okay then we'll go ahead and just do the same same thing for our phone number contact. phone and our email address which was contact. email hit save and awesome okay now let's deal with the is favorite property and ultimately our goal is so that we can click the star icon and it will flip the value inate from True to false or false to true and following the declarative nature of react it will also update the actual icon here from an empty star to a field star and vice versa we're going to do that actually in two parts so for the last challenge in this lesson we'll be making it so that the icon of the star will represent whatever the current value of state is so if this is false it will be an empty star and if it's true it will be a filled star let me actually type that out as a challenge okay so your challenge is to use a Turner so that you can determine which of the two star images which we're importing by the way so either this star filled value variable or this star empty variable should be used based on the value of contact do is favorite for now you can just test how things are working by manually flipping this to true and of course when you do that it should update the star to be the filled in Star so your turn area will be here I'm going to be a little bit vague on the rest that you should be working on because I think you'll be able to figure it out so I'm going to pass it over to you to work on this challenge okay let's put in our Turner here and we are going to be looking at contact. is favorite and if it's a truthy value in this case it will actually be the Boolean value of true or false then we want it to be star filled because I have this set as a variable as I'm importing it it should just work out as far as becoming my image source and otherwise I want it to be star empty let's clean up this challenge text and lastly I need to take the star icon and come down to my image source where it used to be coded as star empty and now we'll use whatever the value of star star icon is let's hit save and okay we're empty we are not yet set up to make this click actually flip the value there we're going to be getting to that very soon but for now let's change this hardcoded value to True hit save and awesome we have a filled star okay well while you were changing the star icon in our image source you might have noticed that we have an ALT attribute here which has a hard-coded value saying empty star icon we also have an accessibility property called Aria pressed which is defaulted to false and actually you know what this button should also have an ARA label associated with it because this button doesn't have any text that makes it obvious what clicking it will do so staying in line with the assumption that everything is not favored currently this I guess would say something like add to favorites however we want all of these values the ARA pressed the ARA label and the image alt to change all based on the current value of contact. is favorite so before we move on and learn how we can programmatically flip this by clicking the button let's go ahead and do a challenge that updates those things as well okay in this challenge I've given you the tasks that you need to complete but I'm not going to give you any starter code or any hints as to what to do because I believe at this point you should be able to accomplish these things again the reason that we're doing this extra work work is so that we can really take advantage of react's declarative nature where the state that we're maintaining up above is what determines the display and the functionality of some of these elements on the page so give this one your best shot and we'll come back and do it together afterward okay I think the Aro press is probably the easiest because it should track one for one with whatever the value of contacts dot is favorite is this button is going to be represented as a pressed button to assist of Technologies if the contact is favorited and that just kind of makes sense with the ARA label I can either say add to favorites or remove from favorites and we've seen an example where we're doing our Turner up here I think I'm also going to show an example of just doing an inline Turner here I'll use a set of curly braces instead of my quotation marks so that I can evaluate some JavaScript and we'll take a look at contact. is favorite we'll put our question mark and if it's truthy we want this to say let's see if it's favorite then we want it to say remove from favorites because it's already favorited and otherwise we'll say add to favorites and then we can just do the exact same thing with our image alt we'll surround this in a set of curly braces we'll check contact dot is favorite and if so then we want it to say fill star icon but otherwise it should say empty star icon most of this fun functionality is stuff that just sits a little bit behind the scenes and is only really viewable if you're looking at the source code or if you're using assist of technology so I think we might just have to assume that it's working and we'll clean up this challenge text and we're in a pretty good place however most of this has just been prepping for what we're actually here to learn which is how we can update our state when what's being saved in state is an object we're going to see in the next lesson why that might not be as simple as we think and how we can go about doing it we've set up our markup so that it will react to the changes in state and this is exactly what we want the only thing we're missing is the user interactivity with this star icon the goal is of course to be able to click the star icon and have it flip from True to false or false to true and by having it flip I mean the is favorite property on our contact object so down here in our toggle favorite this is where I would probably want to use my set contact and we have to think to ourselves do I need to know the previous contact in order to determine what the new contact is and the answer is yes I need to know what the is favorite property was so that I can flip it from its old value to the well opposite of its old value so we'll go ahead and use a callback function in here and we'll grab the previous contact and we will return an object and the contents of this object can be a little bit tricky so that's why we have a dedicated lesson for this it can be tempting to think that I'm changing the is favorite property so I'm going to return an object that has not the current is favorite value but looks at the opposite of preve contact do is favorite and there is a bug with the way that we've written it here before hitting save and even before testing it out I'm going to insert a pause here and give you a chance to see if you can figure out what the problem is with the way that we currently have it written remember in my callback function for my state Setter function the goal is to return a replacement State and in this case my state is an object that has five properties first name last name phone email and is favorite however what I'm returning is not an object with five properties but an object with only one property which means let me go ahead and hit save when I click my star icon all of the other information disappears however it does look like our star is working as we might expect I can flip it back and forth It's correctly pulling in the opposite of what it previously was but of course our contact is now just an object with one property the best way for me to make sure that I copy all of the old properties is to Simply spread in everything from the previous contact and then I will include a new version of is favorite if you're feeling a little bit Rusty on the object spread syntax like we have here it's essentially like taking the old version that we had up here and just copying and pasting it down we'll indent this correctly and what we're returning is a new object that has all of the properties from the old one first name last name phone email and the old is favorite but then we're overwriting that is favorite property with the opposite of what it used to be and believe it or not this is not a syntax error in JavaScript it will simply take the last one that's declared if you have multiple instances of the same key in an object it will just take the last one that's declared and use that value as the final value for the object now we don't actually want this hardcoded because we don't at any given time know what these values are going to be so we'll come back to using our spread syntax here let's hit save we have all our information back cuz it's a fresh render of this component and moment of truth let's click the star and awesome it's flipping back and forth as we would expect perfect okay well I would be doing you a disservice if I didn't give you a chance to write this so I do have a quick challenge for you your challenge is simply to rewrite what we just did if you're not entirely sure how you should do this then I would recommend rather than just skipping the exercise Al together and watching me do it for you scrub back in the lesson and get a refresher on how we did it and then come back to this Challenge and try it again for yourself all right it's your turn to shine take it away we need to use our set contact function we do care about the previous version of state so we'll access preve contact and use an inline function here rather than opening my set of curly braces and saying return object I'm going to make use of the implicit return by using a set of parentheses and wrapping inside of that the object that I want to return I'll pull in all of the pre contact properties and then switch the is favorite to be the opposite of pre contact. is favorite I probably should default this to false I think that's more logical for a new contact in a contact book but we'll go ahead and check it out it's working just great awesome some work on this we have learned quite a bit about State how to set State some complex data types in state and how we can make modifications to those and now we're ready to move on to the next topic which is dealing with forms Although our Chef Claud app has just about as simple of a form as you could possibly have it's got the single input and a button to submit the text from that input you'll find that creating forms of one type or another will be a really common task that you end up doing in your react applications whether it be something that's very clearly a form like a sign up or a login page or something that's maybe a little bit more subtle of a form like when you favorite a tweet or upvote a post on Reddit any kind of interaction with the data that exists in a database from your application will often times be handled by submitting a form and if you've been developing for the web for a long time you'll know that forms have been around for a very very long time here in our HTML file we just have a regular form element it's got a couple of labels that are associated with a couple of inputs and then an input type submit which is our button at the bottom the form property has a method attribute that you can give to it by default this method is get and submitting a form with a get request actually let me get rid of my action and my method the default method is get and I'm going to comment out my script here so I'll refresh this and type in my my first name and last name hit submit and you'll see that first of all there was a full page refresh that happened it cleared out our form but it also tried to navigate us to a different location if you look in the URL it says slash which is my homepage but then it stuffed the information that I put into the form into a query string in the URL so commonly in the early days of the web we would include an action property that would specify some kind of server code maybe a PHP file for example and let me actually let me just say this is a get request so that it stays the same as it was I'll comment this back out and let's go back to our homepage here I can fill out my information and we're going to get an error because we don't have a PHP file but we'll see we hit submit and it attempts to go to /iy server code. PHP and then it puts the information from the form into the query string after that point this is where a PHP file would then take that information do some sanitizing checks on it submit to the database or whatever it might be process it somehow and likely return another HTML page that the browser can then display on the page for the user fast forward a little bit and JavaScript became a little bit more of a popular way to gather information from a form and send it to some kind of backend so let me get rid of this action because we don't have a PHP file and I'll leave my method there for now I'm going to have to manually go back to my index page here and now we can look at our JavaScript and see that we have set up an event listener for the submit event on my form when that submit event happens we're going to capture the event which has a bunch of information about the event that we're listening for and the first thing we do is prevent the default which includes refreshing the page so now that we have that we can see I can put in my name and hit submit and instead of the page refreshing and everything clearing out or attempting to go to a different URL we intercept accepted that in JavaScript we maybe did some processing of the data from the form somehow submitted it to this fake API which of course is just console logging the data and the text submitted we can see in the console we did get an object that contains both the first name and last name well what comes next in the history of web development is a little bit Rocky in fact when I was recording a course about react router I included a whole lesson that I called hot take forms in react are bad I'm not going to dive into how react used to deal with forms because as you can tell I really didn't like the way that it did it it was cumbersome it was a little difficult to teach but after the last about 8 years of teaching react I can confidently and happily say that now forms were bad they are so much better now in react 19 than they ever have been by the way I do need to point out that we are currently in a scrim with a Google slide of a screenshot from a scrim that had a Google slide which included a screenshot from scrim I think this is about as deep of an Inception we've ever had on scrimba so you are learning react in a golden age because you will not have to learn forms the way that I had to learn them and the way that I've had to teach them for nearly a decade now because react has shifted to using the native capabilities of form over the next few lessons we'll be talking a little bit more about what I mean by that but in the meantime if you'd like you can click the screenshot here which will take you to the react documentation on the built-in browser form component and you can kind of dip your toes into what we're going to be learning with form again the form that we're building with Chef Claude is very simplistic but we are going to dive a bit deeper into forms than we need for this project mostly to cover our bases but trust me when I say it's going to be a much more pleasant experience than it ever has been in the past react 19 has changed the game it's truly amazing the improvements that they've made okay without further Ado let's jump in and start learning about forms and react the next few lessons are actually going to be kind of a hybrid review of forms that you should already be familiar with at this point and how we deal with them in react honestly because of how react 19 can now deal with forms this is going to be a little bit closer tied to just a review of forms in HTML so to get us started let's just start building out this form and actually I was going to get rid of this H1 let's go ahead and call this a signup form and I'm going to have more elements maybe I'll put everything here inside of a section okay so to start out a form we will always start with a form element an HTML form element we're going to discuss some of the attributes that we can add to our form but for now let's also get an input in here input is kind of a crazy component or element in HTML because it's very overloaded in other words there's a lot of different types of input and depending on what type of input you use what gets displayed in the form is drastically different from another type for example if we have a type of text it's going to show up as a regular input box if we were to instead do a type of radio we get a little circle that you can click and these are intended to have multiple different options I'm a little bit torn how I feel about this it feels like maybe they tried to get input to do too many things but I'm certainly not an HTML expert so there's probably a good reason for it okay so type is one of the most important things that we're going to add to our inputs I would say maybe the second most important thing is to give it a name attribute the name attribute is how we're going to access the data that is input into this input Box by the user so after the form is submitted we'll need to make sure we have a reasonable name so that we can access that data since this is going to be a signup form let's go ahead and put email that will be the name and actually if I'm going to make this email there's a dedicated type of email that I can use use for this input I think what that does mostly on mobile devices it will pop up a slightly different keyboard that has that little at symbol that's really accessible and maybe a couple other little things with the keyboard change either way it's a good idea to put it there oh I also think it might be helpful for password managers although I'm not 100% sure on that either way you should always strive to put the correct type for your inputs so we'll go ahead and use email okay we can hit refresh and see this input is very unclear what it should be doing and it can be tempting to then say well I'm going to use the placeholder attribute to say this is going to be where the email goes in fact I think this is something you will very commonly see but it's a habit that I'm going to try and weed out of you right now a placeholder is not the correct tool to use as a label for your input a placeholder instead can be a great place to put an example of what should be filled in like let's say Joe ato.com but for accessibility reasons it's much more difficult for screen readers for example to make any sense of an input it won't read the placeholder text and so it's going to be difficult for anyone using a screen reader to know what they're supposed to do with this input I can get around that with an ARA label but whenever possible we should just use a label element this is where we can simply say email and if we actually take our closing tag for the label element and put it on the other side of our input in other words wrapping our input as a child of the label then this label will automatically get a associated with this input and we can tell that easily by clicking email and see that our cursor is then focused inside of the input box the design here is awful so don't judge me for that we'll fix it up soon I'll probably fix it up after this lesson so you don't have to watch me doing more CSS with a form but for now this will get the trick done while we're talking about labels if you can't put your label around your input the way that we did there but instead would prefer them to sit side by side as siblings you can still do this but we do have to take a couple extra things into consideration first of all we need to associate this label with this specific input and we can do that with an HTML 4 attribute if you're familiar with regular HTML forms and HTML labels you'll recognize this as the four attribute in regular HTML but because we're dealing with dom elements here it's not the JavaScript label element doesn't have a four property it has an HTML for property and so in react because we're dealing with JavaScript we will use that property HTML 4 its value needs to be the ID of the input that you want to use so we'll give this an ID of email and say that this label is associated with the input with the idea of email so I can hit save and you'll see I click on email and my cursor gets focused inside the input as well I personally prefer the look of this even though it does require me to do a little bit of extra work I think it also makes doing CSS for this just a little bit easier but honestly whichever way you choose is going to be completely fine okay I feel like I've been talking for a really long time this might be a silly challenge but I think it's time to get your hands on the keyboard okay this is pretty straightforward I want you to add another label and another input for our password field and because we haven't done any styling on here I'm going to just manually add a Brak element and then leave some space here for you to do your work make sure you use the correct type when you're adding your password input and don't forget to fill in the other attributes that are necessary too go ahead and get started on this challenge all right simply enough and maybe I'm going to be a cheater for doing this I'm going to copy all of these properties and we'll update the data so we have HTML 4 we'll call this password and then set the ID to password for our input this will say password the type there actually is a dedicated password type this is the one that will put in the filled in dots instead of the actual characters just to keep it a little more private we'll give it a name of password and the placeholder I don't think we need a placeholder for password hit save and sure enough we get the password field working this lesson is getting a little bit long I'm going to touch on one more thing we'll dive just a little bit deeper into some of the other input types that are available to us but the last thing I want to talk about is the button element the button element is a little bit unique and it has a quirk that is important to remember if you've been doing any kind of HTML for a long time you might recognize that there is a different type of input called a type of submit and as I mentioned different types of inputs can dramatically change the way it's displayed on the screen well input type submit is no different because uh let me comment out this button and I think I have to move this out we'll hit save and check it out it doesn't really look like an input it looks like a button and that's true if I wanted to change the text on it I would have to add another attribute called value well the default is submit let's I don't know say click okay we see that's working but this is where our button comes in because buttons if they're placed inside of a form they act like an input type submit or rather buttons also have a type property and by default outside of a form the type is button inside of a form the type is submit so a button makes a lot more sense to me and I'm just going to give it the text of submit all right we have a super basic form I'm going to give this a little bit of love in the CSS and I'll see you in the next lesson there's a few interesting things happening to our form when we try to submit it first of all let me go ahead and type in an email let's just put in bb.com and I don't know password 1 123 we saw this before but if I hit enter or I press the submit button I'll go ahead and hit enter this time we see that we're actually directed to a different address or a different URL and it serialized the data from the form and put it up in the query string of that URL native forms on the web work this exact same way if we don't specify a different type of method the default is going to be a get request and a get request involves getting information from a URL in this case even though we're trying to send data up to the server the kind of tricky way that the web works is it tries to get a request from a URL and then includes a query string with the information that we're trying to pass to it this actually works in a lot of cases and actually is a good idea in a a lot of cases for something sensitive like an email and password for a signup form it's probably not a good idea to serialize and put that information in the URL if we instead change this to a post method and you'll notice that I'm typing these in all caps that's actually just a convention in HTML I can just keep it in lowercase if I want in fact I think I will leave it that way if instead I use a post method then it doesn't put the information from the form up in the URL but instead it creates a post request and it puts that information in the body of that request which is not something that we'll be able to just see right here in our user interface let me go back to just regular slash I'll enter the same information and hit enter and we can see we are still getting a full page refresh but we are no longer putting that information up in the URL okay how can we stop this full page refresh so we can process this information in JavaScript instead of as the web was built trying to send it directly to a backend file to process it well as we saw in the chef Cloud app we can add an on submit Handler to our form and we can prevent the page from refreshing by using that prevent default that we saw before let me go ahead and create a function called handle submit it's going to take the event and before I do anything else let's go ahead and set this up as our submission Handler for the form I mentioned this before but even for the most simple of forms I prefer to be watching for the submit event on the form rather than something like the Click event on a button for a number of reasons that I've already outlined with that event we can stop the page from refreshing by telling it to prevent the default and we call that as a function this makes it so that the page will not refresh again hit save put in the same information and hit submit and sure enough nothing happens really at all let me just go ahead and console log submit Ed just to make sure that that's actually working okay good our function is being called successfully now this event that's being passed to the handle submit function is actually pretty powerful it has a lot of information about it first of all I can get access to the actual form Dom node so I can say something like const form maybe it we'll say form L for form element is equal to event. current Target or in this specific case you also could just use Target it's a little bit safer to use current Target in this case and with this form element I can actually create a new set of form data so let's go ahead and create some form data and I can create this by setting it equal to a new instance of the capital F form data this is something built directly into JavaScript you could go over to mdn and look it up and learn more about form data but if I pass the entire form element to it then what I get back is the data from that form this form data object will give me access to each of the values of my inputs by using a simple get method so I can say my first name and no we're not doing first name last name my email is equal to form data. getet and then I can use the name property this is why name is so important to put in our inputs I can use that name property of email to get the data from the form so let's go ahead and console log our email I'll hit save and we'll put something in hit submit and sure enough we're able to console log our email address okay so we're able to listen for the submit event on our form we have a function to deal with it we're preventing the default refresh of the whole page we're getting the form element from the current Target of the event we're then creating a set of form data we're able to get the information from that form data and we'll notice that the form is still filled in so I'll have to manually call something like form l. reset which is a method on form elements that allows me to reset the form one thing to keep in mind as we go forward about this reset method when you're doing challenges and you run this line of code it's going to work just fine and when you're doing it on your local machine or pretty much anywhere else it's going to work exactly as you'd expect for some reason on scrimba in the recording it's not actually recording the form reset so I'll probably mention at some point that the form successfully reset and it's probably not going to look like that in the recording but just keep in mind that it really is working behind the scenes in fact I just reset this I'll go ahead and type this information in type in my super secure password of password and I can hit submit and sure enough for me the form did successfully reset and then of course instead of console logging our email we would gather the info from the form and probably submit it to a backend this backend would be in charge of doing data sanitization and submitting that info to a database or in the case of a signup form maybe sending a confirmation email or something like that awesome got a working form but you might be thinking hey Bob this doesn't really look that great this seems to be bleeding into that realm of imperative coding as opposed to declarative coding and you would be right but keep in mind that prior to react 19 it actually used to be quite a bit more difficult to gather form information or maybe I should qualify that the traditional way of gathering information from a form which used something called controlled components which we'll actually be touching on in the next section was quite a bit more cumbersome than first of all what we're doing here and more importantly what we're about to learn in the next lesson react 19 has introduced a much better way to gather form information so feel free to play around in the code here as always and when you're ready we'll jump into the next scrim if you remember we were talking about forms back in probably the original spec for HTML there was a property or an attribute that you could add to your form called action and this is where you would tell where your browser should send the information from the form to often times this would end up being for example a PHP file and the code in that PHP file would then receive that form and process it save it to a database return some kind of new HTML whatever it might be with our onsubmit that we're handling here we're able to do a lot of this on the client side and that's pretty nice but we do find ourselves handling a lot of things imperatively within our own code base for example if I'm handling the submission in my Javas script of course I'm going to want to prevent the default of a full page refresh and since this is a form that I'm submitting of course I'm going to need to get the form element and create some form data from it if I'm submitting the form of course I'm going to want the form to reset at the end there's a number of sensible defaults that we kind of just wish were being handled for us and in react 19 we can react 19 allows us to not only use a regular action for a backend file if we need to like we have here but we also can pass a function to it maybe instead of sticking with the name of the event that I'm trying to handle like handle submit and onsubmit I'm going to go ahead and get rid of my onsubmit entirely and maybe we just make this a little more declarative like this is my sign up function now because I can pass functions to my form actions I'll go ahead and pass this signup function and when you're passing a function to your action it doesn't receive an event because we're not handling an event per se but instead it's just automatically going to receive the form data this is awesome behind the scenes the action function is going to prevent the default for us so we can get rid of that these next two lines of code Were Us trying to get access to the form data which it's already giving us so we can get rid of both of those and it's going to reset the form for us automatically so I can get rid of that let's go ahead and console log our email and just see if this really is all we need we'll hit save and oh that warning actually brought up a good point we had our method of post but if we're specifying a function in the action then we don't need to do that manually so let's hit refresh again I'll fill out this form and hit submit and check it out in our console we have our email address and we were able to do that in a single line of code also the form reset and the page didn't Refresh on submit if I sound probably unreasonably excited it's because I've had to do it in a much much more difficult way for a really long time so bear with me and my excitement which probably seems pretty silly to you but something feels so good about just going back to the native web with a little bit of benefits mixed into it from react because I've been talking so darn much I'm going to give you a very simple Challenge and then we're going to come back to our Chef Claud app and apply what we've learned over there currently we're just getting the email from our signup form but we're going to need the password as well so I want you to get the password from the form as well and log it to the console just to be sure that it came in correctly short and sweet I'll hand it over to you all right easy enough I can get the password by calling formdata doget and the name value that we chose for our password input is logically enough password so we'll just say password and I'll console log the password we'll hit save I'll put this in I've just been kind of mashing the keyboard for my passwords and so yep sure enough we get the password in awesome of course there's a lot more that needs to be taken into consideration when it comes to forms but for now this is going to be good enough to help us refactor our Chef Cloud app so let's jump into that all right we're back with Chef Claude and your challenge is to use a form action instead of the onsubmit in this handle submit function that we're currently doing in the onsubmit Handler we have on our form I want you to use the form action capabilities that we now have with react 19 so I'll pass it over to you to finish this challenge you might remember or as you were testing it out might have noticed that we are able to add items to our list but we actually didn't even put our form reset down at the bottom here fortunately when we transition this over to use actions instead we're going to get that for free so instead of onsubmit let's go ahead and set this up as our action and I'm going to call this add ingredient we'll change the name of our function changing the name of the function by the way is not required it just makes it a little more I guess semantically sensible so don't worry too much about that okay we're going to receive the form data we don't have to prevent the default we don't have to create our own form data we can leave this line of code in and this line of code and we don't have a form reset from before but we should just get that for free let's go ahead and clean up our challenge text hit save add oregano and I'll hit enter first and sure enough that added to the list and our form cleared maybe all add basil and try clicking the button and same thing awesome that was such a quick challenge that I'm actually going to take some time to tell you how things used to be in react we're not going to dive deep into it but the way that we used to do form handling and react is we used to track the state of every one of our inputs and on every input element we would add an onchange event handler every single keystroke that happened inside of an input or the clicking of a radio button or checkbox or whatever it might be any single change to the information in the form we would update our local react State instead of using the internal state that already exists in forms which meant every single one of our inputs had to have an onchange it also had to have a value property so that we could make sure the input's value or the actual text of the input was correctly updated whenever State changed and this whole setup was called controlled components this was because react was in charge of controlling the state of the inputs and the form in general and the truth is there are still times here and there where you might find that useful for the most part you're not going to have to worry about that and we can delete a lot of code compared to what we were required to have before now although Chef Claude doesn't have any more requirements as far as our form goes there's still a bit more that we need to learn about forms and react because as I've mentioned includ forms and react is a very common task so I want to make sure that I cover those bases even though our Chef CLA app isn't going to require these I wanted to cover some other form input types just so that we have those under our belt in case we ever need them we won't be covering every single one of the types but this will be a good way to get our feet wet with other ways of collecting information from our users the first one that we should talk about is a text area element one thing that's unique about text area is well first of all it's not an input type text area or anything like that it's simply its own element also it actually isn't a self-closing it has a separate closing tag which is the text area closing tag the difference between a text area and an input is that it's intended for longer form text you'll also notice that in the very lower right there's a little handlebar for the user to change whatever size gets displayed here here but you also can set a default size in your CSS is kind of the preferred way or there's a property called rows and columns where you can change the size directly here in the HTML well I guess we're in jsx but it has those properties still I'll go ahead and add a label for this one and maybe since this is a longer form text we'll I don't know say it's some kind of description that the users going to be entering in and we will need our HTML 4 because we are not wrapping the lab around our text area although that would be a legitimate way to do it as well we'll say it's for description which means we need to give this an ID of description and assuming we want to actually gather this information from our signup function up above we will need to also add a name property which will also be description cool looking good we'll keep this lesson kind of short and sweet because we are going to be diving into other input types that have a few extra considerations we need to keep in mind but before we move on there is something that I remembered now that I added to this code since we last saw it and that is this default value property in my case I'm adding this default value simply so that I don't have to type new things in every time I submit this form when we come back around to seeing what information we're getting in our form data it's really helpful when testing this not to have to fill these values in every single time default value is a way to initialize this element with a default value and this default value is still changeable I could change this to whatever I want but you might also be able to see some value in the default value property if you were loading up a form that you needed to pre-populate with the user's data for example I've seen apps where I go to maybe my profile section and if I want to change maybe my address it will show me a form but it will pre-populate it or set a default value to the data that I had previously entered but still allow me to change it and resubmit that form so that's all that's happening here with the default value I'll probably add more default values to the other elements as I go on just so that it makes it easier to test submitting my form okay in the next lesson we're going to jump into radio buttons and see how they can be a little bit different than the other inputs that we've dealt with the next input I want to talk about is an input of type radio we'll hit save and see that we get nothing all that special here I'm certain this isn't the first radio button you've seen radio buttons are used when you have multiple options for the user to choose from and you only want them to be able to select one at a time let's put a label on this button so that it doesn't look so silly just as a circle sitting there on my page and maybe just to show that it works totally fine to wrap our labels around our inputs I'll go ahead and wrap a label around this particular input let's indent that input by doing doing so I think we lose a little bit of neatness in terms of the structure of our HTML but we also gain back some of the fluff that we have to add just to associate the two together in this case I'm going to put my label text and for now let's just say label text after my input that way once I've made another little change we're about to see my radio buttons will be able to align neatly on the left side and the label will be on the right side even without any label text I think because of the way my C SS is set up if I hit save we'll see that that's going to align to the left and I think that radio buttons look a lot better if you have all of your radio buttons aligned on the left and then you have the label on the right of course you can change that around and use some CSS grid maybe to get them all aligned on the right side but uh let's just keep it like this and for now I'm just going to say label text cuz we're going to see what we're using this radio for and awesome we get label text now let me go ahead and duplicate these so we have a few different options here and as I mentioned one of the standout features of a radio button is that we're only able to select one of them however if we check I can actually select all of these so why exactly is that well in order for them to be exclusive from each other I need to give a name property to my radios but that name property has to be the same for all of the radios that I want the user to only be able to select one of now I'm going to make these radio buttons represent an employ employment status so I'll go ahead and give the name of employment status to all three of these the same exact name let's hit save and now I can only select one of these at a time selecting a different one will change which one it's selected of course one thing that I really like to do when I have radio buttons like this is to surround them in a field set element so I'll go ahead and take this closing tag and just wrap all of these in a field set and then do a format indent those and we'll just go ahead and hit save oh and it looks like maybe we need to make a little change to our field set let me go ahead and add a display of flex and a flex direction of column on that okay that looks better okay so the field set gives us this little outline when we're inside of a field set we also can give a little label to the entire field set with a legend property or element I mean and in that element we'll go ahead and say employment status and awesome now you can change the design for this this is sort of the default I've updated some colors and such but I'm not going to worry too much about the rest of the design okay instead of label text let's go ahead and include our different options we'll say unemployed part-time and fulltime awesome and because they have the same name we can only select one of them at a given time time now there's a couple things we need to take into account first of all before we move on in this text area I'm going to add a default value and maybe I'll just say this is a description so we'll hit save I'll go ahead and check part-time and hit submit oh and in our function we're only conso logging the password so actually let me throw in a quick challenge here okay the challenge I want you to try and do is grab the employment status from the form and log it to the console just when you're submitting the form remember to choose one of the options cuz we haven't yet discovered how to create a default selected option however before anybody jumps into this and starts pulling their hair out I want to give you a caveat or a note here to let you know that it's not quite going to work the way that you might expect and we're going to fix what this problem is so I just don't want to set you up for failure just know ahead of time it's not going to work quite yet so give this challenge your best shot and if you'd like you can see if you're able to fix the problem that we run into when we try to do it the way it currently is written go ahead and get started on this challenge okay well let's just give it our best shot we'll go ahead and try to grab the employment status and that will come from form data. getet and we'll pass in the name of employment status is that the one we chose yeah employment status right here I'll just copy it and paste it just in case and let's go ahead and try to log employment status and see what happens so I'll hit refresh I'll choose part-time I'll hit submit and all we get is on interesting so our radio buttons by default they don't come with their own value per se or rather the default may not be exactly what we need in fact let's hit save and to refresh the form and I'll hit submit and you'll see that the other option if we don't select something is null but I'll go ahead and choose full-time hit submit again and now that value of on comes in when we're creating radio buttons we need to provide a value property and this value is what we want the data to be when this form gets submitted for example if we're here on the unemployed we might want this to say unemployed as the value think of this value as the actual value that you might save to a database so I'll go ahead and fill these in as well we'll say this one is part-time this one is full-time we'll hit save we'll choose maybe part-time hit submit and now we actually get the value that we associated with the input that we ended up selecting and that's the value that we were able to pull in from our form data okay that's a lot of information that we just talked about and all we've covered so far is radio buttons however they're pretty important and it's good to know some of their nuances that we run into the only other thing I want to touch on before we finally move on from radio buttons is how we can automatic ly select one of these or I guess if you were pulling in existing information and wanted to prepopulate the correct Choice instead of using something like default value which is what we have used above instead we choose the input that we want to have the selected option already and we use a different one called default checked and we will set this equal to a Boolean value of true actually well let's hit save we see that we automatically get fulltime selected I think we might be able to do the string true and yeah that works as well but because we're here in react and we can put in real JavaScript values let's go ahead and use a real bullion okay let's move on from radio buttons and talk about the radio button sibling which is the check box a very close relative to the radio button is a checkbox let me go ahead and create something very similar to this actually I'll just copy this whole F set here let's change the legend to something where a user might select multiple boxes maybe something like I don't know dietary restrictions I'll go ahead and change all of these to a type of checkbox and update the names let me get rid of the default checked that we had here although actually I guess this is an important time to note that let me go ahead and hit save default checked does work the same as it does with with radio buttons we can see that fulltime here has a check mark even though we haven't selected that with checkboxes though because we can have multiple checkboxes selected at a given time I can put default checked on multiple different items and so we can have multiple different things selected at once let me go ahead and get rid of these default checks just for now actually I'll go ahead and leave it on that third one we're doing essentially the same thing we were doing before so I will update the labels that I have here and let's say maybe we have a dietary restriction of kosher let's say Vegan and maybe glutenfree and I'll update the values as well remember when I submit my form whatever I put in the value if the box is checked will be what gets sent to my form data so with this one we'll say kosher and in this case I'm choosing a lowercase k here I guess it just depends on what data you actually want showing up in your database that's what you would put here as your value we'll say Vegan and the other value is down here so that will be gluten free okay so far so good let's hit save we have our gluten-free checkbox already checked because of the default checked and let's see what happens when we submit our form so up here I'm going to grab let's see I'll just duplicate the employment status one we'll change this to dietary restrictions let's see did I use an s yes dietary restrictions and so that's what I'll do my form data. getet with and let's see what happens when I hit save and hit submit we look at the console okay so we did get gluten-free showing up as one of the checked items what happens if I check another one let's say kosher submit interesting I am only getting kosher and actually Let me refresh this form to clear that out we'll do both kosher and actually let's just do all three submit and check it out we are only getting one of our options showing up in the form data when we get it this is something that I think is pretty unique to checkboxes and there's a really easy way around it the form data object that we're calling this.get method on it also has a method called get all with a capital A by including that if I hit save we'll check all three of these and hit submit now we get an array with all of the values that we expect to be getting with a checkbox that can have multiple things checked at once so when it comes to checkboxes they're almost exactly the same as radio buttons each one has the same name property each one has a different value we can use default checked to automatically check it when the form loads however if we want to get an array of all of the checked items then we will need to use form data. getet all instead of just doget the fact that we have to do this a little differently will play a bit more of a significant role in a lesson that's coming up very shortly on on how we can more concisely get all of the information from a form but for now hopefully what we've done here makes sense as always please feel free to play with the code that you see here and when you're ready we'll keep moving forward there are a ton of different input types and it's certainly outside the scope of this course to talk about every single one of them however I do want to cover the select and option elements just as one final Harrah here with forms we'll talk quickly about submitting the form and then we'll kind of get off this little side trail that we've embarked on and get back to our project and the topics that more closely relate to this specific project let's say I want to add a dropdown where the user can choose their favorite color we'll go ahead and start with a label like we usually do this time I'll go back to having a label that's separate from my select elements and here we'll say what is your favorite color because my select is going to be a sibling element let me just get that started I'm going to give an HTML 4 attribute to my label and we will call it fave color and I'll have to give this an ID of fave color okay so a select will give me the box but in order to have a drop- down list with different options in it I need to use an option element I'll go ahead and fill these out for every color in the royi Biff color spectrum let me go ahead and hit save you won't be able to see this in the recording but if you were to come click on this form and click the drop down you'll see a browser implemented version of this dropdown box which I'm sure you've seen a million times by now a main thing that's different is in order to gather that information up in our function I need to give a name attribute not to my options but to my select if we think about it this makes sense because we need to gather the one chosen option and the only place that we could give a name to that would make sense with that is the parent select box let's give this a name that is also fave color however in order for each one of these to have its own value each one of the options needs to have a unique value so I'll give each one of these a value property and I'm just going to copy the color and I guess I don't need this to be uh curly braces like this we'll do a string pass in the color and then I'm going to be particular I guess and lowercase each of these values since I've been lower casing my values before okay awesome we'll hit save let's go ahead and choose blue we'll hit submit and oh you know what I forgot to update this function let's not conso log dietary restrictions now instead let's get fave color is equal to form data. getet fave color and then we'll console log fave color okay let's try it again hit save go down to something like blue hit submit and sure enough we're getting the value of blue with the lowercase b cuz that's what we set our value to for that option now we can see that it's defaulting to the first item in that list if I want to change that I can simply add to my select let's see that's right here default value and set it equal to one of the values down below like Indigo now if I hit refresh we see indigo is the default value that shows up you also might be familiar with select boxes where what it actually says is something like choose your favorite color or choose a color we can achieve that same thing by creating a new Option at the very top we'll give it a value of an empty string and we'll give it the text of something like choose a color okay we're partly there and oh we're still showing Inigo let's get rid of our default value here actually I'm going to leave this as a default value of empty string since technically our choose a color is the value of empty string and so awesome that now shows up we actually wouldn't need this here I don't believe in order for it to show that since it's the item in the top spot but it doesn't hurt to leave it there and lastly assuming we don't want a user to be able to submit choose a color as their final answer here we can add a property to the option that says that this is disabled if I hit submit now I'll hit save and in my dropdown box and you will probably have to click into this form to see this but it says choose a color at the top but it's grayed out it's not an option that the user can select we can still submit the form though we get a value of null and so if I need this to be a required field then I can simply on my select add a required property we'll hit save try to hit submit and we get a browser implemented warning that you might not be able to see here in the recording but it says please select an item in the list so I'm forced to come down select an item and awesome as I mentioned we're straying a little bit from our main topic of learning react but forms in react can be a little complex fortunately as of react 19 now that we're able to use this form action we can finally rely on forms to maintain their own State and to Simply collect the data using the form data object that we get inside of the function that we pass to our form action as you can imagine if our form had say 40 or 50 fields it could become a bit annoying to have to select the data for every single one of them there is a quick shortcut that we can use to more concisely grab all of the data from the form it's not a silver bullet sometimes you will need to select all of the individual items by themselves maybe for example ex if you had to do some kind of Manual sanitization of your inputs although in the end you would probably want to use something that was a little more robust like using the Zod library but that's definitely a different discussion so let's see one way that we can more concisely grab our data currently we are going through every one of our inputs and grabbing the information from them one line at a time and as I mentioned there are times when this may be necessary but if we had a a form that was 40 or 5050 or more different inputs maybe first you would want to address why you have such a long form but let's pretend the size of the form is outside of your control and you just need to Simply grab all of the data there's a utility that we can use built into JavaScript called object capital O object. from entries all I have to do here is pass in the entire form data object and let's see what we get if I console log the object or the results from object. from entries I kind of gave it away we'll hit save we'll submit our form oh I have to choose the favorite color and submit and we see that we get an object back the object has all of the name values as properties in the object and the values in the form as the values to those properties in the object if I'm trying to build up an object to then send to a database it looks like I am most of the way there however if we look really closely we'll notice and you know what I'm going to copy this object from the console since you can't see my arrow down there and we'll just paste it down here okay we can see with dietary restrictions what we get back is just a string gluten-free and remember sometimes with checkboxes we want the user to be able to select multiples however if I do this and hit submit and we look closely at the object that comes back we still have the same structure it just says gluten-free remember with checkboxes I had to use that form data. getall in order to get the property from there so I am unfortunately still going to have to do that let me go ahead and save most of the data we'll just save it as The Returned value from object. from entries and then individually I'm going to get the dietary let's just call it dietary data and that's going to be by calling form data. get all and separately I'm going to get the diet let's call it dietary data actually let me make this into a challenge it looks like my old challenge text is up here anyway so we'll just clean that up and give you a new challenge I'm sorry that it's been so long since I've given you a challenge hopefully nobody got too complacent in the meantime since we are on a bit of a detour here this is going to be a fairly straightforward challenge I want you to see if you can remember how to grab an array of checked items from the dietary restrictions check boxes you should be able to then console log dietary data and get back an array instead of a single string all right get started on this challenge I think it's more of a mini challenge at this point all we have to do is say form data. getall get all is the key here we'll give it the name of dietary restrictions and let's go ahead and console log it just to make sure it's giving us what we want you know what I'm coming down here to change my default value to let's say blue just so I don't have have to keep selecting that all right I'll select another one vegan hit submit and awesome we get our array of selected items from our checkboxes now that I have an array I can combine the object that I got with data with the array that I got with dietary data at the Key of dietary data essentially overwriting what data. dietary restrictions used to be so I can just say maybe const all data is equal to an object that takes all of the properties from data and then includes a property called dietary restrictions and the value is going to be dietary data I also could simplify this a little bit just by choosing to name this dietary restrictions instead and then I can go like that and I'll just get rid of this console log because it's referencing the wrong variable name I guess before we assume it's all working out we'll console log all data hit save let's select all three of these hit submit look at what we got and awesome if we look closely dietary restrictions is an array that has kosher vegan and gluten-free in it okay let's finally be done talking about forms let's get back to the main project that we're working on and start diving deeper into a topic that we did briefly see before but now we'll actually take the time to understand it and that is conditional rendering over the next few lessons we are going to be doing sort of a minseries on this topic called conditional rendering and although it's going to span a few different lessons mostly we'll just be talking about what it is and how we do it seeing multiple different ways that you can accomplish conditional rendering depending on your use case and your needs fortunately understanding conditional rendering is not that difficult in our Chef CLA app the user is first presented with a simple input and a button and only after the user adds some ingredients to the list will they first be presented with this ingredients on hand header with the unordered list below it as it wouldn't be as intuitive to have just an empty unordered list and this ingredients on hand with nothing after it unless something is added to the list also after some ingredients are added we can actually set this up to be after a certain number of ingredients if we want we then will present the user with this section down below that says to get a recipe again it wouldn't really make sense to show this on the screen unless there were some ingredients on hand and lastly we have an entire recipe that we need to display but we will only have that recipe after the user clicks get a recipe and makes that roundtrip call to the anthropic API so everything in the suggested recipe and the recipe itself that all needs to be I guess you could say hidden or not rendered to the page unless we actually have a recipe to display so this is where conditional rendering comes into play as you can kind of into it from the name it means that we render parts of our page based on a condition if that condition evaluates to true then react will render that portion of the page if it's false it simply won't be rendered and as a reminder when I say it won't be rendered I mean it it won't even be added to the document you could search for it in the dev tools but it wouldn't be there at all I guess you also can set up conditional rendering so that it hides elements that actually are on the page but for the most part we're just not going to render it to the page at all if those conditions aren't met so let's dive into this topic of conditional rendering and then we're going to come back to the chef Cloud app and apply what we've learned here we're back in the Jokes app that we created in the last section and I wanted to give us a challenge so that we could make it where the user could click a button and clicking the button would display the punch line to get us started I have a quick challenge for you I want you to create a state that's labeled as is shown and it will be a Boolean type that defaults to false and then I want you to add a button underneath the punch line for each one of the jokes that when clicked will toggle the value of is shown back and forth we're not going to worry at this point on any conditional rendering so just so we can more easily tell that this is working I'm going to console log is shown but I won't hit save because it'll break your app okay your turn get started on this challenge we're going to use use state from react so I'll make sure I import react from react again a very common way that you'll see this done is simply to import used state from react just while we're learning I'll keep it as import react from react so we can tell that this is state from the react Library I'll create my new destructured array we'll say is shown and set is shown is equal to react. use State and we'll create an initial value of false while I'm still up here I can probably clean this out we'll create a function and maybe we'll just call it toggle shown this isn't strictly necessary I could do an inline function on my button actually you know what let's do that first so I'll create my button we'll have it say something like show punchline I'll add an onclick to it this onclick is going to be a function and this function's job is going to be to call set is shown we do care about the previous value of state so that we can flip it from whatever it used to be to the new value so I'm going to say previous shown and this is going to be an arrow function we'll say previous shown and then return the opposite of previous shown now we can see this is why I like to do my functions elsewhere this looks a little too crazy for me so I'll go ahead create a function toggle shown we'll take the code right here paste it in and we no longer need this Anonymous inline function instead we'll just call toggle shown now notice at this point nothing relies on is shown in order to be be displayed and so that's why I have this console log here just so I can see that it's working we see that it's false but let's open the console and we'll see something really interesting we actually see false five times I'm actually going to insert a pause here and give you a chance to think why is it that we're seeing false five times Well if we go to our app.jsx we can see that we're mapping over some data and for every item in this array we're displaying a joke component or rendering a joke component means that we're calling this joke function if we go to our jokes data which we're mapping over we can see that we have an array with five items in it so this joke component even though from our app.jsx it kind of looks like we just have one of them the fact that we have an array means that however many jokes we have in this array is how many times this function will get called which means inside of our joke function this console log is going to get called one time for every instance of our joke component I'm guessing that was probably clear for most of you but I just think it's good to reiterate stuff like that okay let me hit show Punch Line and we only get one new entry in our console and we can see that it was set to True perfect okay for this next challenge I'm actually going to do this a little bit backwards let me start by typing out the challenge now your challenge is to make it so that this paragraph only gets shown if the value for is shown is set to true the reason I say this is backwards is because we haven't officially learned how to do this but when we were just finishing up with this app in the last section I left in this little snippet of code here that shows you exactly how to do it we're going to talk about why this works in the next lesson but for now you have a perfect templates to help you complete this challenge oh and uh let me just make sure this is clear this is the challenge so go ahead and give this your best shot and then we'll talk through it well in this previous example we had been talking about jokes that may not have a setup but were just kind of a oneliner joke that was more of just a punchline and inside of our jokes data we included a joke that didn't have a setup property and so what we did is we surrounded our jsx in a set of curly braces and we included first a condition this double emper sand and then the thing that we wanted to render if this condition had a truthy value so we can do this exact same thing let's surround our jsx with a set of curly braces that will allow us to evaluate some JavaScript and I can start by saying if is shown is equal to true then or and this paragraph again we're going to talk about why this double emper sand Works in this case but first let's go ahead and hit save I'll click show punchline we can see that the punch lines are missing now I'll click show punchline on this one and awesome the punchline shows up now many of you are probably thinking I can simplify this is shown is already a Boolean so I don't need to compare it to the value of true if is shown as true we get exactly what we need here and just to show that's working maybe this time I'll hit the punch line on the second joke and because this state is being saved inside of the joke component each one gets to maintain its own State we're actually going to be diving deep into that idea a little bit later but for now it's simply means that I can click show Punch Line on just this one joke and it's the only one that will show the punch line not only that but I can actually click the button again and it will hide the punch line we're going to address that user experience in just a minute so this lesson has gotten a little bit long already but before throwing you into a challenge I want to talk more about why this works we're more familiar with the double emper sand being a way for us to compare one value with another when we're doing something like an if else if statement as opposed to in this case where we're using it for conditional rendering so why exactly does this work that's what we'll be touching on next we're pretty familiar with using the double mersand when we have something like an if statement I don't know let's just say true and true and you know if we do a console log here uh everything was true we often think of this emper sand as a way to check the truthiness of the thing on its left and the truthiness of the thing on its right if both of them evaluate to true or a truthy value then this if statement will run however that's not entirely true even though this condition would suggest otherwise what's really happening here is a left to right evaluation inside of our if statement the computer will first evaluate the truthiness of the leftand argument of course the Boolean value true is truthy so then it sees there's a double emper understand and because the item on the left was true it's going to continue evaluating through the next expression if this one also is truthy then we know the whole thing will evaluate to a single true value and the if condition will will run this drives with our understanding if we were to change the second one to false like this we can think of it as a left to right operation okay that's truthy and well that tells the computer that means that the item on the right hand side also needs to be truthy then it reads false and it says oh nope this whole thing will evaluate to false and the console log will not run so I guess this would have to say everything was not true so does it jive with our understanding if instead we were to change this first one to false if we go from left to right we might think well this is false we then get the double emper sand it notices that this is true but because both items on the left and right were not truthy values it evaluates the whole thing as false however we can see that this isn't precisely what's happening let me go ahead and change this true this is not something that you'll see very often but we'll change it to an operation that we can know if it ran or not let's say this code is running I'm actually just going to comment out this console log so it doesn't become become confusing let me change this to True we'll hit save we can see that in the console we do get this code is running okay well what happens if I change this to false I'll hit save and the console log did not run at all what's really happening is that left to write operation it notices that this is false it sees that this is a double emper sand but because the first condition already evaluated to false it kind of short circuits the rest of this line and it doesn't need to even eval valate this because it knows that it's going to evaluate to false or some kind of falsy value so in JavaScript this console log won't run at all of course if we were to reverse this we put the console log first and then say and false we will get the console log running because it's the first thing that it evaluates it runs the console log function it sees it's a double emper sand and it says well this was not a falsy value so I'm going to continue evaluating and then it gets false it returns this falsy value to the if statement here and it becomes false so this property of the double emper sand short circuiting the rest of this line is exactly what we're taking advantage of when we're using conditional rendering in the way that we're doing here the double emper sand can be a quick way to either display something or not display something if is shown is falsy then this expression will just return a falsy value and and in our case because isown is a Boolean react will interpret this as meaning nothing should be rendered in this spot however if is shown is truthy then the double emper sand says just return whatever's on the right side here if this is falsy then the whole thing will evaluate to false and nothing will get displayed but as we know since we wrote this code we're not returning anything falsy we're following up our double emers sand with what we want to get displayed so that was kind of a long- winded way to talk about this but hopefully that helps make some sense of why the double emper sand Works in this case and as I mentioned it can be a good way to either conditionally render something or not render it at all in a little bit we're going to quickly touch on a shortcoming of using this method for conditionally rendering but before then I want to get your hands more on the keyboard and have some practice so that's what we'll do in the next lesson this is a pretty straightforward challenge your task is to only display this H1 if there are unread messages in state right now we have two items hardcoded in here we're not actually displaying the text of these messages anywhere so it doesn't matter what it is as long as there are items in that array it should display this H1 and if there are no items in the array then for now we're just going to have it be a blank page this H1 won't be rendered at all let me put those back in there and I think that's everything you need to know so go ahead and get started on this challenge well in this case unread messages is not a Boolean value and even an empty array is a truthy value so we couldn't simply wrap this H1 in curly braces and say if unread messages and display the H1 because let's go ahead and hit save we do have the H1 showing up but even if it's an empty array we still have the H1 showing up it's best to be really explicit with what exactly we're looking for in this case because it's an array we need to know if the length is greater than zero so if the length is greater than zero it will display this message let's actually get rid of this Blank Space here and we'll say unread messages. length and this is wrapping a little bit so let me go ahead and put these on their own lines like this hit save and awesome we have two unread messages and then of course if we added to this array it would update that number so we've seen how using this sort of short circuited way of using the and operator gives us a chance to determine whether something should or shouldn't be rendered at all however it does turn out there are some limitations to this and to highlight those limitations I'm going to give you another challenge I'm fabricating this scenario a little bit here just to prove a point but for this challenge if there are zero unread messages I want you to display a paragraph not an H1 but a paragraph that simply says something like you have no unread messages in this case I do want you to use the and Operator just like we did above and you'll just do it right here below the previous one that we did and as it says the logic is going to be the opposite of what we have for the H1 so that if there are unread messages it will display this H1 and if there are not unread messages it will instead display the paragraph that you're about to create for anyone who's already familiar with conditional rendering and react I know this is a silly exercise I'm building up to another way that we can do conditional rendering okay take it away I can just copy the logic here down below and in this case I'm going to say if the unread message count is equal to zero then I want to display a paragraph that and I'll just copy the text here okay we'll hit save we have two unread messages if I get rid of those in state okay a paragraph you have no unread messages perfect okay well what we've done here is highlighted an issue where we essentially have an if else statement if unread messages. length is greater than zero then we display this H1 but the only other option is if the length is equal to zero because it's an array we can't have negative length in it however it's a little bit verbose what we're doing here we are repeating oursel for this unread messages. length check and in this case we're only ever displaying one item or the other so as you can probably tell that I'm driving towards a point that in this case when we're trying to decide between displaying one thing or another thing The Logical and operator is not going to be our best choice not only that but let me actually clear up this Challenge and clear up this that we just did but it can be really tempting to see something like unread messages. length and try to infer a truthiness out of it in JavaScript the value zero is considered a falsy value and so it's tempting to say that if unread messages. length is a truthy value then I want you to display this H1 and we might Pat ourselves on the back and think that we're doing a great job here you know we might hit save see that it looks like it's working and ship it however let's see what happens if I empty my array and hit save again we simply get the number zero displayed when this evaluates to the number zero react will choose to display that zero instead of just considering it a falsy value and not displaying anything so unless we're very sure that we're being explicit in our condition and ensuring that that expression will evaluate to a real Boolean value and not just a truthy or a falsey value there's potential for bugs to show up in our code like having a random zero floating somewhere on our page kind of in summary the and operator can be a good way to quickly either display something or not display it if you use it make sure that your expression will always evaluate to a real Boolean otherwise there's another option that we can use to conditionally render things and react and that's what we're going to be talking about next we have Kind of a Funny UI bug right now where if we click show punchline it does show the punchline but the button still says show Punch Line furthermore clicking show punchline again actually hides the punch line so knowing what you know now and what we've learned with the and operator to do conditional rendering I'm going to put in a pause here and I want you to think about how you might change the button to say hide punchline instead of show punchline of course only at the appropriate time when things are already shown I'm not going to type this down as a challenge cuz I'm not necessarily expecting you to write the code for it although you're more than welcome to go above and beyond and do so so see if you're able to figure out a way that you could change the button to say hide punchline if the punch line is already shown one way we could go about this is duplicating this button having one that says show Punch Line and one that says hide punch line we then would have to conditionally render one button or the other button based on the is shown property so I would say if is shown is true and uh well actually let's see if is shown we want this to say if not is shown so if it's equal to false then we want to say show Punch Line and if is shown is true then we want to display hide punch line and we should see that this will work it says show punchline we click it and now it says hide punchline if you think about it when the state changes react is actually removing the old button and putting a new button element in its place but we can already tell by the duplicated code that we can probably do this in a better way and the better way that we can do that is by using a Turner in this case I wouldn't even have to duplicate my button so I can just get rid of this and the only thing that's really changing about this button is that first word so let me back this off I'm going to get rid of everything that we just added and instead of saying show punchline I'll go ahead and determine what this word should be in JavaScript so I'll put a set of curly braces to jump into JavaScript and I can use a Turner to say if is shown is true then I want this to display the following string let's see if it's true then I want it to say hide but otherwise I want it to say show let's hit save and we'll click show punchline and awesome it now says hide punchline not only that but because we are only changing the text of our button and not actually swapping out the entire button element itself after clicking it we still have tab focus on that button so I could hit spacebar and it would toggle that button back and forth to hide and show the punch line for that one specific joke so that's kind of an extra benefit because we're not swapping out the entire button element but just changing the word on the button so now that we know about the Turner there is one last thing that I want to talk about and that is that there is a little bit of push back in the react Community to using the and operator at all because of that little bug that we saw before where if your expression evaluates to a zero it actually would display a zero on your page bugs like that can be completely gotten rid of if we simply choose to use a Turner instead so instead of an and operator I'll use a question mark and as an alternative in my else basically the second part of my Turner or I guess the third part the first part is the expression second part is the truthy value that gets returned in this third part we'll say null it's a little bit of extra typing but it is kind of a prevailing thought in react these days to do this just to avoid any potential of having that Zer show up on the page or just generally having your expression maybe not evaluate to what you think it's going to evaluate to so there are some who would say just don't use the double emper sand at all and just always use a tary with null as your alternative option and we'll see that this is working exactly as we would expect we're currently showing or hiding the punch line correctly the button says hide punchline and show punchline I think what I'll probably do is just leave this example with the double emper sand and I'll leave this one with the Turner just so you see the alternative and between these two options with the and operator and the Turner I would say probably 90 95% of your conditional rendering needs will be met with that if you do have something a bit more complex like if based on whatever value you have you might display more than three or four things in that case it might be better just to put your logic up here inside of your component to determine either what element should get displayed or what the text should that gets displayed do all of that logic work outside of your return above your return I should say save it in some kind of variable and then just display that variable down below because we're just dealing in JavaScript here you also could do something like create a function that takes a parameter and determines what the output should be and then inside of your JavaScript expression down here you could simply call that function and that function would be in charge of returning the jsx or in this case just the string that should get displayed there's a million ways to do it and it's kind of hard to go over every single one of them because well there's always a lot of ways to solve the same problem everything that we've covered here so far is going to be plenty for us to get back to our Chef claw app however before we jump back into Chef CLA I do want us to get some hands on the keyboard here and practice conditional rendering we'll also have a quick conditional rendering quiz so stretch out those finger muscles or do whatever you need to do to be ready to complete a challenge okay let's give this one a shot your challenge is to display the correct kind of text inside this H1 if there are no unread messages so if this is an empty array it should display you're all caught up if there's exactly one unread message in it then it should display you have one unread message and message will be singular you don't have to display the singular word there actually let me put the quote on the other side there and if there's more than one unread messages then you want to display you have and then the number of unread messages but the word messages should be plural there's definitely more than one way to solve this problem so so give it your best shot don't be too concerned if the way that I do it is going to be different than yours just see if you can get it to work so I'll pass it over to you to work on this challenge one way I could choose to go about this is to decide which H1 I'm going to display one of these three based on the conditions that it has I also could potentially choose to do a Turner but because I have three different options here it would likely have to be a nested Turner which I personally kind of despise nested taries I think there's always a better way to do things in the last lesson I briefly mentioned at the end that one thing you could do is to set a variable for what text gets displayed and then run your logic here above your return in order to determine what that text should be if you chose to conditionally render your H1s using an and operator or some kind of Turner that is 100 % okay but just for the sake of seeing it a different way I'm going to go ahead and create a new variable I'll set it as a let variable so that I can change it and maybe let's have this say uh we'll just say text and I'll just leave it undefined for now then I can just use a regular if block to say if messages. length is equal to zero then I'll go ahead and set text equal to this message that says you're all caught up else if my messages. length is exactly equal to one we'll set text equal to this message instead and that needs to be a string and not have this formatting here and otherwise we are certain that it will be greater than one so we will just copy this down here we'll change this to messages and I'll use messages. length inside of my text which means I need to use a template string so I'll go ahead and put that interpolation there and change this to a template string and the word messages is plural okay so by the end of running through this logic text is going to be exactly the text that I want so I'll put a set of curly braces and just say text let's clean up the challenge hit save and we get an error and that's because I'm checking message. length not messages. length Okay cool you have two unread messages let's lower this down to one one unread message perfect and if we make it an empty array you're all caught up if this logic were to get much more complex than this I might put this inside of a function and say something like determine text we can simply put all of this inside and then we'd want to make sure we returned the text and actually by doing that I don't need to save a separate variable so I could simply say return this string and we could just do that in each of those cases and then all I would have to do is call determine text with my set of parenthesis there to immediately execute it upon this getting rendered let's just see if that's working so okay we get you're all caught up if I add a single item back in here then I get you have one unread message and a second one two unread messages perfect again I actually didn't expect anybody to do it this way if you did Bravo in kind of thinking outside the box I just wanted to show that there's a lot of different ways to handle this and now that you understand the concept of conditional rendering simply using JavaScript to determine what should get displayed to the screen or if something should get displayed to the screen at all the whole world of possibilities is going to open to you in how you actually accomplish that task just to shift gears a little bit I do want to give a quick quiz about conditional rendering so that we can start thinking Less in terms of the code and More in terms of the highle concept and then as I promised we'll get back to our Chef Cloud app and apply what we've learned before moving on let's do a quick quiz about conditional rendering just like before I'm going to put in a pause here I want you to actually click in and type down your answers it's a great way to think outside of the specific syntax that we've been working with so go ahead and answer these questions and then we'll go through them together okay number one what is conditional rendering in a highly Dynamic web application we often have changing dat data or changing local state and we may choose to display something different or not display something at all depending on that state so one way we might answer this is that conditional rendering is when we want to only sometimes display something on the page based on some kind of condition okay we also talked about two of probably the main ways that you'll see conditional rendering being used one is by using the and operator so when would we want to use that well it's ideal for either displaying something or displaying nothing at all so it's good for when you want to either yes display something or not display something when it comes to either displaying option A or instead displaying option b that's when number three a Turner is best used so we can say it's good for when you need to decide which of two things to display and yes you can use nested taries to determine any number of things that you might want to display but personally that's where number four comes in what if you need to decide between greater than two options on what to display in which case the world kind of opens up to you you could use an if else if else conditional and of course in that case you can have as many else ifs as you need or you might decide to use something like a switch statement or kind of implicit in this answer is basically any other way you might want to do it okay great job on this quiz let's finally get back to Chef Claud and apply the conditional rendering that we've learned all right that was a long Sidetrack on learning conditional rendering but as I mentioned it's something you're going to be doing quite a bit and we're going to apply it right now in our Chef Cloud app we have the input and when we add ingredients let's just say testing it displays the list of ingredients it seems like it's conditional rendering but what's really happening is we have this unordered list that is always being rendered to the page and it simply has no list items inside of it which is why it looks like nothing's there but what I'm going to do is paste in a more finished version of this that includes this ingredients on hand the list of ingredients like we already have and then this little call to action at the bottom that says ready for a recipe so let me go ahead and paste in some pre-written code we'll walk through it so that it's not too jarring and we'll see that we are in dire need of some conditional rendering all right I replaced our simple unordered list with this new section and let's take a second to walk through it I know sometimes if someone just throws a bunch of code up here it can be a little bit jarring and I don't want to lose anybody here first of all I am going to make this a little bit bigger just just so we can maybe separate those words a little bit so what we've added into the section first is a little H2 that announces the below list is going to be the ingredients we have on hand of course it's a little bit weird because it's just a colon and then there's nothing after it we do have our unordered list currently being rendered to the page but because our ingredients list items is an empty array nothing is displaying and then we just have this little call to action that says are you ready for a recipe generate a recipe from the list of ingredients and it's got this get a recipe button there's no onclick on it yet we're going to get to that in a little bit but clearly what we have here is not a great user experience it's really cluttering up the page with irrelevant information at the current starting point with having no ingredients in our list oh and I almost forgot I do have in the CSS some Associated class names and styles which is why it looks like it's styled already okay let's apply what we've learned with conditional rendering and make it so that ingredients on hand and this ready for a recipe section don't show up unless there are items in our ingredients list I'll type this out as a challenge just to buy some room I'm actually going to minimize this for now if we want we can bring it back up or even make it really large so that we get a little bit better spacing for now again I'm just going to minimize it okay your challenge is using conditional rendering I want you to only render this entire section if there are ingredients added to the list of ingredients assuming you went through the conditional rendering sections that we just finished and were able to do the challenges this should be a prettyy straightforward challenge for you there's always more than one way to get things done especially in react so as long as when you first load the app this whole section doesn't appear and when you add an ingredient it does appear then you should be golden of course when you do that the ingredients on hand should have one item in the unordered list all right your time to shine we can know if we have ingredients in our list if the ingredients array that's being held in state has a length that is greater than zero and so I will surround my entire section here in a set of curly braces and I can set up a condition that says if ingredients. length is greater than zero then I want to display the section we learned two main ways that we can do this I think I'm just going to use the double emper sand and let's see if that's working first okay well that section is gone so that's good let's hope it comes back we'll add oregano to our list and perfect we get it showing up on the page as I mentioned you want to be careful when you're dealing with the double emper sand if you have a habit of not being quite as explicit as using the greater than zero so that this will actually turn into a Boolean and you're relying on the fact that ingredients. length of zero is a falsy value and might Short Circuit the rest of this you're probably going to be disappointed we can see if I hit refresh I get a zero actually showing up on the page so you can either make sure that you're always very explicit and this is evaluating to an actual Boolean or you can use a Turner if you want to be extra cautious so you can say if ingredients. length is greater than zero then display this but otherwise display null and we'll see that this is working as well I can add oregano that shows up but if I were to rely a little more heavily on the fact that ingredients. length of zero is falsy then I wouldn't actually render a zero instead I would get the expected behavior and I can add oregano and then get the rest showing up on the page there are just different schools of thoughts you can choose which ever one you want I think I'll go ahead and stick with the double emper sand and simply remember to put my greater than zero in here we'll just make sure that's working again perfect just to really drill this in we are going to do another challenge but we will do it in the next scrim towards the very end of this project we are going to be sending this list of ingredients to a real AI API so that it can determine a recipe that we could make given the ingredients that we passed to it however if we just have a single ingredient the chef might not really know what we're supposed to do with that it also would probably generate a recipe that has a bunch of ingredients we don't have which might still happen anyway but try to imagine telling a chef to make something and the only ingredient you have on hand is oregano however currently we're prompting our user if they're ready for a recipe by having a single ingredient on there so maybe for the sake of our users Ultimate culinary experience let's update our app so that the get recipe container div which is this one right here will only get displayed if our ingredients list has at least four items in it because fewer than that and we might just not get very good results again this is super similar to the last one but I think it does help illustrate a little point that we'll see in just a second okay go ahead and get started on this challenge we're doing essentially the same thing that we were doing before we're just going to surround this div in a set of curly braces and put a condition and that condition is the same as the last one well almost the same we're looking at ingredients. length but we want it to be greater than three this time and I'll put my little short circuit and operator there let's clean up the challenge text and hit save and give this a try I'll just add in some oregano maybe chicken some jalapenos and maybe we have some cream of mushroom soup awesome okay with the fourth ingredient added we now have this ready for a recipe thing showing up down at the bottom and that experience seems a lot more reasonable to me all right well we do still have additional parts of our site that we need to render including this entire suggested recipe section so what we'll do is put a bit of a placeholder in its place for now before we start integrating any kind of AI and later we can replace it with the real thing so let's Jump Right In and tackle that next challenge as you know once the user has input a few ingredients they're going to click this get a recipe button that will send send an API call out to the anthropic Claud API or as we'll see there's other options as well and return a recipe that we can display down below we're not quite ready to reach out to the API but I do see a chance for us to make some progress in our Chef Cloud app that will give us a chance to practice both the creation of state which honestly it's been a minute since we've done in this course and some conditional rendering which you're probably pretty sick of doing by now so I'm going to give you this multi-part challenge that will kind of be a placeholder for now and then we'll be refactoring this and building upon it as we make this app a little bit closer to its final form the first part of your challenge is to Simply create some Boolean State you can call it recipe shown and it's just going to represent whether or not we've gotten the recipe back from our AI Chef to start it out you'll default the value to false then I want you to go over to recipe code. MD this file here and you're just going to Commander control a and Commander control C to copy the entire contents here what I've done is taken the response that I've gotten back from an AI when I was testing this out and I've wrapped it in all of this HTML or I guess jsx code so you're going to grab everything here head back to main. jsx and down below you're going to paste it in place of this comment right here if you hit save at that point it's going to display it on the mini browser but the next part of your task is to make it so that when the user clicks the get a recipe button it will flip the recipe shown state from false to true and you'll use conditional rendering to only display that entire recipe code content if recipe shown is true a couple things first of all yes this is just a placeholder in the future we will not be using recipe shown to determine if the content should be displayed or not instead we're going to save the response from the AI in our state and if that response is not null then it will do the same thing it'll display the recipe content section secondly and this is more administrative you'll notice that I just hardcoded a few options in here so we didn't have to add four different ingredients every time we wanted to click get a recipe okay I think you should be all set up to get working on this challenge it's a little bit longer it has a few more steps than normal but I know that everything here should be something that you're capable of doing so I'll pass it over to you to work on the challenge all right first let's create our Bull and state so I'll do that here we're going to create recipe shown and and use set recipe shown as the state Setter function and that's going to be coming from react. State it's just a Boolean and we're defaulting it to false I'm going to kind of clean these up as I go just to buy a little bit of room okay now we need to go grab the markup in recipe code. MD I'm just going to grab and copy everything come back to main. jsx and it's going to look a little bit bloated but we'll just stuff it all here inside of this file and I think I'll do a quick format here yeah there we go for anybody who is feeling pretty concerned that this file is getting pretty long and trying to attend to a few different needs for our app you have a very good point and we are going to be addressing that very soon but for now we're just going to have to live with the Clutter a little bit okay so that was step two copy and paste pretty straightforward all right when the user clicks the get a recipe button I want to flip the recipe shown state to true I'll go ahead and create a new function we'll say toggle recipe shown this will call set recipe shown it will look at the previous value of shown and flip it to its opposite we could have also done this as an inline function it's pretty straightforward but I kind of prefer this way personally and now let's come down to our get a recipe button and add an onclick Handler to toggle recipe shown okay that should be everything from three and then we are doing some conditional rendering so we will surround our entire Chef CLA recommends portion let's see that goes all the way to this section we'll surround it in a set of curly braces and we'll say if recipe shown is true then display this section all right let's clean this up hit save cross our fingers and hope for the best we've already got our ingredients there cuz they're hard coated in let's click get a recipe and look at that we can scroll down and see the recipe that Chef Cloud recommended for us or at least the one we're pretending it recommended for us well that's not entirely fair this actually came from the AI it just didn't do it right now awesome this user experience is actually turning out pretty great however I'd say there are three main issues that we have yet to solve and this is going to set us up for what we're about to learn for the rest of the section the first one is kind of a developer experience issue that that we're experiencing here and that is what we just talk about this file has gotten quite long I mean in the end it's only 81 lines of code that's not actually that bad I've seen much much longer react components than this but it does kind of feel like we're dealing with a few different things first of all this whole recipe shown section it could probably be its own component and the same goes for the ingredients maybe not I could see an argument for keeping it here but for the sake of practice we're going to move this into its own component I guess we theoretically could do the same thing with our form I imagine I'm probably just going to keep this the way it is but we have some cleanup to do so that our code is a little bit easier to reason about in doing so we also have some topics to learn that are regarding where State should live in our react component hierarchy how we can pass State down to the components and still have them be able to change the parent State and just generally understanding what all that means in the first place another maybe more user Centric issue that we're facing is if I'm scrolled to the top here let's go ahead and hit refresh I can't scroll down cuz my recipe section isn't displaying currently if I click get a recipe well I don't have a lot of visual indication that the recipe is ready other than suddenly there's a scroll bar and so if I start scrolling then I realized oh it actually did respond with the recipe so that user experience could be improved by having the app simply scroll down for us to let the user know that the recipe is ready for them we also eventually will want to add some kind of loading state currently clicking get a recipe just immediately displays everything here but when we're dealing with the API it's going to take some time for that response to come back and we want to give the users some visual indication that it is trying to work in the background and lastly I guess this is both a developer and a user experience well we want to get the recipe from the real AI API not just from this hard-coded thing that we currently have so we've made great progress awesome job on the challenges that you've had so far I hope that you're still keeping up with them learning to code should not be a lonely task you should be reaching out to the superactive scrimba Discord server and asking your questions there getting help from people it is totally worldwide so at any time of day or night there is always someone awake and active on the scriba Discord server feel free to play around with the code that you've written here and when you're ready to dive in we will first start tackling how we can improve the developer experience by offloading some of this code to separate components here we are back at our very simple counter app I even removed the text that was saying how many times would Bob say the word state in this section and that's because I just want to focus on the core elements that we need now I'll be the first to admit this challenge is pretty contrived essentially the task is to take this H2 and put it inside of its own component and then pass our count value through props to that component so that by the time you're done everything should work exactly the way that it is currently working read through the specific directions here that should give some hints as to what you need to do and I guess before we start I'll just promise you that this isn't just meant to be busy work it's actually less about getting repetition and practice in this time and more about building to a point so go ahead and get started on this challenge I think I tend to like working backwards on stuff like this so I'm going to cut out the H2 and render this fictional count component and we will go ahead and pass it a number prop whose value will will be the count that is being held in state okay that does not exist so let's pretend like it does for a second and import it we'll just import it from a file that we'll call Capital C count and we'll create that file count. jsx and there it is we'll go ahead and set this up we know that we want it to take props because we need access to that number prop I'll go ahead and return if I can spell it right will return the H1 that I cut out earlier but now instead of count I don't have that anymore cuz I'm not in a file where state is being created instead I'm receiving that state through props and specifically a prop called number all right let's see if we made any mistakes we'll hit save and okay it seems to be working as we would expect okay as I mentioned that was pretty contrived a component that just renders an H2 is probably Overkill for most instances I suppose there are times when you want your H2 to always be styled a specific way and I don't know maybe have some specific functionality attached to it but the reason that we did this challenge is because I wanted to take a chance to talk about rendering let me go ahead and add a console log and we'll say app rendered and then I'm going to do a similar console log inside of my count of course this time we'll say count rendered we have briefly discussed what rendered means in react and I don't plan on doing a super deep dive into everything that happens when react is rendering components but the crucial things for us to understand at this point is when we talk about something being rendered we can think of it as the function of that component being run here we're rendering the app component which essentially tells react hey I want you to go to the app functional component the function and just run through the code there run that function so if we go to app we see it's going to be setting up some state it defines a few functions here that we use within the body of this component in our case we also put a console log here and then we return some jsx which represents the elements that will eventually get turned to Dom elements that get put on the page and then it renders jsx which represent react Elements which eventually will get turned to Dom elements that get placed on the page and that's what the user actually sees so let's see what happens when I hit save and open my console okay we see we got app rendered so the app function ran because our console log ran so we know that it ran and our count rendered console log the one that's here also ran and that's because inside of the app component we are rendering or creating an instance of the count component which means react ran the count function and therefore our console log ran okay well let's see what happens when I change the state inside of my app component so I'll go ahead and let's click plus and check it out in our console we got app rendered and count rendered again both of them ran again so changing the state inside of our app component is rerunning this function although a really interesting thing to note is that the count value is now updated it's not rerunning it and setting it back to zero that's one of the main features of state it maintains its value from from one render to the next which is happening behind the scenes in react if this were just a plain function and nothing else special about it then of course our value would keep getting reset back to zero but that isn't happening not only that but our count rendered again as well and let me scroll down a little bit so you can see the instance of the count that we have and I'm going to insert a pause to give you a second to think why is it that count rendered even though it was only state in the parent component or the app component that changed try thinking through that see if you can make sense of why the count component rendered well intuitively we probably think well it's because it relies on this count value that exists within the app component in order to correctly display the number on the page whatever the current value of state is and that is true it's a bit of a partial truth but it makes sense if we go to the count component if we didn't rerun this component with a new value for props do number then what gets displayed would never update now the reason that I say this is a partial truth and I'm starting to flirt with the line of going outside the scope of what I really wanted to teach in this course is because the truth is any components that we have inside of our app component in this case will get rendered whether they rely on the state or not they will by default get rendered by react there's a little bit of controversy about this and quite a bit of misunder understanding the truth is even if you have a component that doesn't technically need to render doing so by react is super super fast and it's not something that often leads to any kind of performance issues and if it does there are things that you can do to improve the performance again that's outside the scope of this course it's most important to know that if we have a state change inside of one component like we have inside of our app component react will render its own elements that that component is in charge of rendering and it will render all of the child components that are nested inside of the return of this component if those components have their own children to display those also will get rendered I go quite a bit more in-depth on this topic in my Advanced react course here on scrimba so once you finish this course assuming you are planning on continuing to learn react that will be a great resource for you but in the meantime what we've discussed here is good enough for us and opens a door for us to now start talking about State and props and how they relate to each other and how data gets passed around in a react application let's look at a slightly more realistic example than the counter that we just saw back in our contact card if you remember we had our little star icon and clicking the star would fill it in or empty it out essentially toggling the is favorite property on our state object but let's say we wanted to move this star element to not just be the button with the image ins side that we have here but into its own component so that we could reuse it in other places in this app so at this point I'm going to type out a challenge for you to start working on okay your challenge is to move the star image which is actually this button with the image inside into its own component which you'll call Star the star component should receive a prop called is filled that it uses to determine which of the two icons it will display as a reminder you will need to make sure that you take the two import statements and move them into the component that you create the star component while you're working on that I'll want you to get rid of this onclick this is what I mean here when it says don't worry about the ability to flip this value quite yet so in doing so you can actually just get rid of on you know what I'm just going to get rid of onclick right now here after you've created that star component here in our app.jsx file I want you to import and render that component in place of the button element that we have here and then make sure you pass the correct prop to it so that it will work as we expect or at least it will reflect the value of contact. is favorite so you can switch this value to true just to make sure that that star suddenly fills in go ahead and get started on this challenge I think I've done a lot of working backwards where I cut this out and render a component that doesn't exist so maybe this time I will start forwards I'll create a new file called star. jsx and inside star actually before I forget I'm going to import these two lines here I don't need them in here anymore so we'll go ahead and import those and then I'll create my component I do know that I want this to receive props because I'm going to have an is filled prop sent to it and then I'll say return we'll come back over to app let me grab this button and paste it in the return of the star component and format and we used to be looking directly at the contact object in state but we are now going to be receiving essentially this value of is favorite from props so this will be props Dot and I think we said to call it is filled so let me go ahead and change everywhere that we had contact. is favorite to props dois filled and over in app I can now import that component so I'll just do it right here we'll import Star from dostar and render it in place of the button and I'll hit save I still need to pass the prop to it but let's just see oh it's going to struggle a little bit because I don't have that prop pass to it so let's go ahead and add is filled is going to be the value of contact. is favorite and oh nope I do still have a bug let's see reference eror star empty is not defined and oh yes I have this right here this line is no longer needed but I do need to put that logic over in my other component so let's see I know what I'm doing here let's clean up that challenge and go back to Star and okay perfect right here we'll paste in that line of logic and yep it was expecting star icon and we're no longer looking at contact. is favorite we need props dois filled I have star filled and star empty let's try again okay cool now we get our app back up and running or I should say it's partially running because I got rid of my onclick on my button we can see that clicking the star doesn't actually do anything here we do need to test it though let's make sure we change is favorite to true and hit save cool our star is filling in so now we just need to try and think how are we going to make it so that our nested component the one that is now inside of the star component how can we enable the star component to make a change to its parents state in fact I'm going to put in a pause here so you have a chance to think through that you don't necessarily have to write any code you're welcome to if you want but think for a second how might we be able to add some functionality back to our star component so that clicking it will then change the state that lives here inside of app I remember when I was first starting out I thought well I just need to add an onclick Handler to my star component and let's just see where that takes us so I'll go ahead and add onclick and we'll just pass in the toggle favorite function hit save and click the button and not quite it's still not working why do you think that is take a second to think why is it not yet working for us remember how the properties that we're adding to our jsx elements map directly to the Dom elements that exist in JavaScript in JavaScript elements that we pull from the Dom they have a class name property that we can change and Dom elements like an H2 or a regular button or an image or any of these regular Dom elements they also have a Dom property called onclick well we're not quite directly working with a Dom element here we're working with a custom component in react any of the properties that we put on our custom component in react they're chosen by us and so despite the fact that we named this on click with a Capital C just like we would if it were a regular bare Dom element or in this case a react element because it's jsx which gets turned into a Dom element this onclick is simply going to be yet another prop that we need to receive inside the star component so that it will work this on click is just another custom property or prop that we're passing to our star component which we would then need to receive as one of the props in order to actually do something with it inside of my star component this is where my regular react element of the button that I want to add an event listener to exists so in order to get the onclick here I need to put it on top of my button so I'll go ahead and use onclick with the capital c and the value that I'll pass to it is the function that I'm receiving through props called onclick one thing that I sometimes do to clarify exactly what's Happening Here is I'll go to my custom component and instead of giving it the exact same name as what would be placed on a regular Dom element I might change it to something that's obviously more custom like handle click doing so won't magically fix it I need to come over to my star and realize that I'm not receiving a prop called onclick anymore I'm receiving a prop called handle click so I'll change just a handle click and let's just see what happens I have my star I click it and it empties out awesome we've talked about how we can pass any JavaScript data type down through props and functions like we're doing here are no exception we're passing this function down to our star prop so that we can put it on the native element this lowercase b button element so that it can correctly listen for the click event and run this function running this function will still interact with the parent state in order to change it so over the next few lessons we are now going to dive a little bit deeper into State and props the react hierarchy and what the component tree looks like and all kinds of really fun stuff we'll get lots of chances to see different ways that we can structure our state and our props and as a reminder all of this is bringing us back to our Chef CLA app where we had kind of a long component and a desire to move some of those sections of the component to their own individual components that then get rendered by the main parent component so without further Ado let's jump in and start seeing how react handles State and props and the component tree at this point I think it's helpful for us to look at how we pass data from one component to another in react let's look at a sample diagram of a react application we can imagine that the rectangles closer to the top represent parent or grandparent components and the lines simply represent that that component is rendering an instance of another component below it the name of these components isn't important in this example the name of these components isn't that important it's just important that we understand the hierarchy that's here as you're building your application you might realize that this bottom component here is in need of some states so that the user can change something and react will reender that component as you continue building you might also realize that there is a sibling component or in other words a component that is also being rendered by the same parent that is also in need of the state that you just created in its sibling component we're going to do a challenge in this code in just a second but this is a perfect example of this in our index file we're rendering an app component the app component is rendering a header component and a body component and as we were building this in the header component we initialized some state for our current users username we set it equal to Joe and that's what's being displayed up here in the upper right however as we we started building out our body component we realized that we need access to the currently logged in user so we can fill in this text where it says welcome back and then blank we want this to say welcome back Joe so think for a second is there any way that we are able to pass the state that we created from this component over to its sibling component well as it turns out in react no we can't this isn't how data Flows In react in react data can only flow downwards it only works in one direction from a more parent component down to Children components so take another second to think how could you make it so this component that is currently saying data please can get access to the state from its sibling component because data only flows downward the easiest thing that we could do is simply to bump that state up to a parent component and then pass that information down through props this way both of these bottom level components can have access to the information that it needs well what will inevitably happen as you continue to build out your app is you'll find that you have yet another component that needs access to that information and once again we find ourselves being unable to pass information from the component that we just gave state to to its so-called sibling component that now needs access to that state and it's important to note that we certainly can't go from any child component up to a I guess you could call this an aunt or Uncle component because there's not even a reference in the code from this bottom component to any other component in the hierarchy so this also is not something that we can do which means once again we are forced to pull our state up to a higher level and pass down through props to the components that need it the information from that state as you can imagine this can get a bit cumbersome over time and there are a number of different solutions that can help us avoid having to pass props many levels down tools like context which is built into react or thirdparty libraries like Redux or Zoo stand which were created to help this data management problem all of those topics are outside the scope of this course and so we are just going to be sticking with State and props however I can offer a little plug for my Advanced course here on scrimba where we do dive into context and we learn how we can use context to avoid having to drill props through so many layers of our component tree so let's apply what we just learned about moving State up and passing its information down through props by working on a challenge here we are in our header component which is currently the location of the state that we created for our username your challenge is to raise this state up a level and then pass it down to both the header and the body components through props and then the last part of this challenge will be to make it so that in the body component we aren't looking at this Blank Space here but instead we're able to render the username in its place go ahead and give this challenge your best shot in this hierarchy we can imagine that this box right here is the app component and it is rendering the header and the body but right now our state is living down here in the header so as we saw we need to lift that state up so that it will live in the app component let's go ahead and cut this state out we'll go over to the app component and we will just put it right there and I had already imported react from react in these components just in case you wanted to play around with putting it in different locations but at this point we can get rid of those and I guess while we're here we'll clean up this challenge text too okay let's come back here where we just put our new state and we can pass that state down through props we'll just maybe call it a prop of username and we'll set it equal to the value of username from State and now let's see what happens I'm going to hit save I'm probably going to get an error that talks about how username is not defined so we can go through and fix those in our header we are referencing username but we don't have state here anymore instead we are going to be getting this from props so I can just add props do username in its place and let's see if that works yes our header has Joe in it let's go over to our body we will also accept props here and once again instead of these hard-coded underlines we are going to get props do username Moment of Truth hit save and perfect our body also says welcome back Joe we can also double check that this is working by changing Joe to something else like Bob and perfect it changes in both locations with only one state change understanding that data flows in a single Direction and that direction is always from parent to child components or downward in the tree can be extremely helpful for you as you start working on architecting your react applications I think the last important thing to touch on with this before we move on is to know that it's best practice to keep your state as locally defined as it needs to be in other words if this component down here on the bottom were the only one that needed State then that's a great place to put state if its sibling needs access to that state then moving it up just one level is the best way it might be tempting to think well I'm going to stop refactoring this I'm just going to shove my state at the top of my application and then pass it down as many levels as I need to but as a rule of thumb that's generally not a good idea and if you do have state that is truly Global across your entire application that's usually the time to start looking at one of those alternative solutions that I mentioned like context Redux or zoo or something like that okay with this under our belts I think it is time for us to do a round of challenges to help us really cement in what we have been learning about when it comes to props and state and react this is the beginning of a series of challenges that we are going to work on so that we can reinforce what we've learned in the past up until now and so we can prime ourselves to learn some new information and we're just going to be building a silly little series of buttons that actually was inspired by my roadter Pro which is what I use for mixing the sound from my microphone and it has these eight buttons over on the right side that are kind of fun pastell colors and they are just for doing sound effects I literally never use those buttons although I think they're programmed with sounds let me see what they do the funny thing is while this is recording I actually can't hear what it's doing so I'm going to turn that off we've got some funny sounds over here the point is when I press these buttons they light up and when you press them again they turn back off and so that's the inspiration for the project that we're working on the first part of this challenge is first to initialize some state with a default value that is the array of pads that were pulled in I called them pads because they're technically called sound pads so don't let that be confusing if we go to pads. JS where we're playing this in it's an array of objects they have an ID a color which we're going to use eventually and an onv value which we're also going to be using eventually for the purposes of this challenge you should find yourself only needing access to the ID although I'm not going to tell you why yet that's going to be part of your challenge so you'll be creating some State inside of this app you'll initialize the value of that state with this array that we're importing this is honestly kind of a strange thing to do we're going to see exactly why we're putting it in state later but then what I want you to do is to map over that state array and to display each one of them as a button element I've already written some CSS for you so it should show up in a 2x4 grid and as it mentions here don't worry about the on Prop or the color property quite yet once you've mapped over that array you'll put the elements right here or I guess if you want you could just map over it right here inside of the markup so go ahead and give this one Your Best Shot all right first things first let's go ahead and create some State we'll call these I guess pads and we'll use set pads as our state Setter function that'll be equal to react. use state of course I need to import react in order for this to work so let's do that not impro let's import react from react and initialize this with the array of pads okay that is part one part two let's go ahead and create some I don't know maybe we'll just say button elements and that will come from pads. map for each pad I'm going to return a button element I'm going to use a set of parentheses so I can do an implicit return on the next line and we'll bring in our button and one thing I always find myself forgetting to do is to actually render my elements after I have created them so let's go ahead and do that now we're going to have a little error or a warning I guess oh you know what uh pads to that's funny I chose a bad name here because that's exactly what I'm calling my objects coming in you know what you probably chose a different name for this I'm actually going to change the name of this one to pads data just so that I can still call this pads inside of my component okay let's see if we hit save and get the warning I was expecting yeah each child in the list should have a unique key prop and that's because we're mapping over it we need to make sure that we provide a key and fortunately I gave you the IDS for each one of these so that's what we'll use in this case because we manually did it we know that they're unique so let's give that an ID so or a key of pad. ID we'll hit save that warning goes away and awesome okay this is really just to partially reinforce what we have been working on up until now and also to set us up a little bit more to learn about State and some ways in which we will often times find ourselves dealing with State inside of a react application great job on this challenge let's jump into part two okay sorry if I led you astray before we move on to part two of this challenge we actually need to spend a little bit of time to finally learn about inline Styles in react this isn't something that we use terribly often in HTML but in HTML you can provide an inline style directly on your HTML attribute by using the style attribute whatever I put inside of the quotes inside of this text will get rendered by the CSS engine and so I could say something like background Das color colon and I don't know let's do something crazy like red okay I'll hit save and we see that it's applying and actually this inline style is taking precedence over the CSS rule that I already have changing the background color of the body let's go ahead and undo that it's a little bit of an eyesore we hit save okay that's a little better we can do a very similar thing in our react code anytime we have a jsx element that is going to be turned into a native n element basically anything that is a real HTML element we can pass a style prop to it however because we're in jsx we're not going to set this equal to a string where we say something like background-color but instead we're going to set this equal to an object now I have found this to be a tricky thing for beginners in react if you remember when we do a set of curly braces inside of our jsx it first puts us into JavaScript so this is not setting it equal to an object it's simply saying I want you to evaluate some JavaScript inside here the JavaScript that we want to evaluate in here is an object and so I need my second set of curly braces in fact sometimes what I end up doing just to avoid that confusion is I'll create a separate variable let's call it Styles and set it equal to an object and then replace that kind of silly double object looking thing with my object that I defined elsewhere you definitely don't have to do it this way it might not be that confusing to you to just have your object nested inside but let's just see what it looks like like this now I'm creating this object in JavaScript so if I want to access the background color an important thing to remember is that I need to use my CSS properties as the camel cased version of those properties first of all because well it won't make sense for us to have a key that tries to do background- color but perhaps more importantly we need to remember that we are working inside of a Javascript file even though it looks like we're typing HTML if you remember in regular Dom JavaScript if we wanted to get an element we'd say something like document. getet element by ID something and if if we wanted to alter the style of that we would say do style and then we could access the background color property of it and set it equal to something the reason this is camel cased is because that's how they have it set up in Dom JavaScript and so I need to camelcase my CSS properties I think you understand that let me go ahead and get rid of that and let's just see that this is working we'll remember we're styling the button elements right now so if I change this to the string red awesome we get our red button all right well in this case we're just hardcoding a color to change the background color of these buttons however usually in react you'll find yourself doing something like this adding an inline style when you need it to be something that's more Dynamic let me show you an example I'm actually going to clear out the button Styles there and we can just get rid of this object and I'm going to set up a little challenge for you and I want us to imagine that we want to enable a feature for for our app that allows it to receive maybe a prop called Dark mode let me actually put these on their own lines just to buy myself some room okay so here in our index. jsx file this is where we're instantiating our app component and let's go ahead and imagine that we are adding a dark mode feature to our app and we want this to either say true or false let's go ahead and say true for now and we will come over to our app component and we'll make use of that incoming dark mode prop to change the background color and well really I mean that's something I want you to do so I'll type this out as a challenge okay these are still read from the previous time we refreshed let's go ahead and change it or save it so that it updates and your challenge is to use a Turner to determine what the background color of the buttons should be based on the incoming dark mode prop if it's set to true then set the background color to this color and if it's false then set it to this color go ahead and get started on this challenge well we're passing a dark mode prop to our app component but we are not receiving it at all so let's go ahead and grab props and you know what as a reminder I think what I'll do this time is I'm going to destructure this immediately and just grab dark mode directly from the incoming props object either way is totally fine I just wanted to remind us that this is an option let's go ahead and create our Styles object we also could have done this in line directly here in our button and we'll change the background color camel case two and then we'll take a look at dark mode we'll use our Turner here we'll say if dark mode is true then I want it to be this color and otherwise we'll have it be this color lastly I need to include my style attribute here and we'll set it equal to the Styles let's clean up this challenge text hit save okay so they are dark because dark mode is set as true and if we come over here and change it to false they are light awesome hopefully you can start to see that this can be applied in a lot of different ways the way that we've done it here is pretty simplistic we're going to apply this idea to our soundpad over the next couple lessons and we're also going to see how we can do Dynamic class names feel free to play around with this and just experiment with the different kinds of things you can do dynamically with your styles for example maybe you make it so that if there's an even number of pads that are coming in from pads data then they display in one color and if it's an odd number then you display it in a different way I don't know the world is your oyster doing stuff like that though is one of the best ways to just explore what's possible really exercising your curiosity is going to be one of the best ways that you can learn so play around as much as you want when you're ready we will move into part two of our sound pads challenge these buttons are looking a little bit boring especially if we compare them to the buttons on the roadter pro that are nice and colorful and bright so let's address that now your challenge is to First create a separate component that we'll just call pad and replace this button element with that new pad component I want you to pass this pad component a prop called color whose value will be the color property from our pad objects that we have and inside the pad component that we're about to create I want you to apply an inline style to the button and maybe that wasn't entirely clear when you create the new pad component you're going to take this button and that's what will be returned from the pad component I want you to apply an inline style to that button so that it can set the background color of the button to the color that we're passing to our component we're not yet dealing with the on property we're going to be doing that soon you might have to read through this challenge a couple times there were some things that I skipped out on to give you a chance to figure them out on your own and so I'm going to pass it over to you now to work on this challenge all right I'm going to copy this button we have a bit of change to make we'll create a new file called pad. jsx in that file let's go ahead and set up our component since I copied that button I'll go ahead and return that directly and I'm going to remove the key because I'm not going to be doing any repetition here inside of the pad component but instead we'll be doing that in app.jsx let's go ahead and import our pad from the file called pad and we'll replace our button with an instance of this pad component we don't need a closing tag here because it's going to be self- closing and yes the key can stay on here that should fix the issue with needing a key actually I'm trying to think if this would be broken let's hit save and okay yeah we've got our buttons on the screen okay so that is number one number two let's pass the pad component a prop called color okay let's do that right here color is equal to pad. color and we are passing the pad component a color prop but we are not receiving it at all so let me go ahead and receive props and we could either do our inline style actually yeah let's just do our inline style right here on the button we'll set style equal to an object and that object needs to be inside of the first set of curly braces also it's important to remember that we don't want to call the this Styles or something else weird currently we're dealing with the actual button element so we need this property to be correctly spelled okay inside this object I'm going to set the background color equal to props docolor and before I hit save let's go back over to app we'll see how we're doing we passed the color prop and we applied it inside the component we'll deal with on soon okay let's clear some of this text out and cross our fingers we should see a little bit more of a colorful display here all right let's hit save and that looks so much better sorry for any of my OCD friends who are wishing that the order was exactly the same I'm kind of feeling that pain too well the order is the same it's just in a different orientation and the way that I marked down the buttons was left to right and top to bottom I don't know I did it in a weird way I'm sorry still our buttons are looking great in the next part of the challenge we're going to finally make use of that on propop and apply some something similar to our Dynamic styles that we have but instead this time it will be a dynamic class name so once you have made sense of what we've done here and you've had a chance to play around in the code let's jump into that next part of the challenge oh no our buttons are not lit up anymore and that's because I added some CSS that turns them off by default or in other words it just adds this opacity of 0.1 by default to the button however I did give us a way to include an opacity of one and that is if our button is to have an on class name let me bump this up here and we'll see if the button is supposed to be on then it will have this full opacity and the colors will be nice and bright but I need you to work to make that the case so part three of this challenge is to update the code so that if the button is on or in other words if the data says that on is true then the button should get a class name of the string on this is even a little more vague than last time so I'm hoping that you've been paying attention in doing the challenges if not that's okay go back try them again it should be a good primer for this challenge so I'm going to insert a pause here and you can start working on challenge part three in order for this component to know whether it's on or off we have to pass that data in to our pad component just like we did with the color so I'm going to add a new prop called on and set it equal to the value of pad. on remember this on property is coming directly from the pads data well maybe I should say indirectly from the pads data we're saving pads data in state as this value of pads that's going to be the same thing we're going to talk about why we're doing that really soon in an upcoming lesson and so this pads is the array of objects and we're mapping over it so each one of them has an on property we're passing that down to our pad component so so let's go ahead and receive it in props and we can always do something like conso log props Doon just to make sure that's coming through and we see that we did get eight instances of this console running because we have eight instances of our pad component and if we were to map this closely to pads. JS we'd see that it is in order as we would expect okay let's close the console get rid of this console log and in order to add a dynamic class name I can access the class name prop that I would pass to my button or attribute I guess that I would pass to my button but this time instead of hardcoding a class name here I can evaluate some JavaScript there's a few ways that I could do this I could say first I need to check props Doon and if that's truthy or true in this case then I want to add the string on as my class name otherwise I guess I could do an empty string this should work so I'll hit save and awesome some of our buttons are turned on and let's see it's buttons number 1 3 4 and eight if I were to come here we'd see that 1 3 4 and eight are the ones that matches perfectly okay now instead of an empty string Just for information sake I could put null here and that would work as well now some of you may have tried to use the double emper sand as we learned in conditional rendering to only include the string on if props Doon is truthy and let's see what happens I'll hit save our buttons are working but let's check out our console it says that it received false for a non bullan attribute class name remember when we're using this double emper sand if this is a falsy value it will return whatever that value is and in this case it returned false and so it's like we were setting the class name to false and react wasn't super happy with that in fact it even has a super helpful message that says if you used to conditionally omit it with the class name condition double ERS value pass class name condition question mark value otherwise undefined instead and oh that's an interesting way to do it using undefined I guess since the documentation or the warning says to do that maybe instead of using null we'll go ahead and just follow what they said I think null would also work just fine here all right let's save our warnings gone awesome great job by the react team for including such a helpful warning great work my friend again play around with this code as much as you want and when you're ready believe it or not we still have more to learn with these sound pads over the next two lessons we are going to be seeing two different ways that we can architect this silly little app that we're making with regards to having multiple of these pad components and having some state that controls whether or not they are turned on or off we're receiving their initial values through this array here but we do want the user to be able to click them and have that onv value flip from True to false or false to true so in this lesson and in this challenge we're going to see one possible way that we could do this and in the next lesson we'll see another way we could do it and we'll talk about which one is likely the better option for us so what we have right now and I've created this diagram to make this a little easier to comprehend we have our app component which is where we are importing our pads. JS data we're mapping over that array of data which in this case I've simplified to only show an on property we're mapping over that array and we're creating our pad components of course we have eight of them this diagram has four for space sake and as we're mapping over the array of pads we are passing down to it a prop called on which passes the correct Boolean value down to each of these components those components are then using that on value to determine whether or not the class name of on should be displayed and we can see we're doing the same with color but let's just focus on on for now the first option for how we can have these pad components control their own on state is by initializing new state in each one of these components we would then take the value of props Doon that's coming in from above from our app component and set that as the initial value in our state for each one of these components then we would have a function defined inside of the pad component code that that would allow it to flip its own value from True to false or vice versa of course because we are rendering multiple instances of this pad component each one would have its own state which react would be keeping track of and clicking each one individually would change just that one component's value in state so let's implement this by working on this challenge your challenge is to create some State inside of the pad component which will control whether it's considered on or off to initialize the state for the initial value of that state you'll use the incoming props Doon value then you'll need to create an event listener so that when this pad is clicked it will toggle from on to off or of course the other way around and by the end everything else should already be set up so that clicking the pad itself will make it flip and you'll be able to turn them on and off each individually so go ahead and get started on this challenge we need the use State Hook from react so we're going to import react from react and let's just initialize it right here we'll just say this is going to be on and set on is equal to react. use State and the initial value is not just going to be me deciding to hardcode something but instead we're going to set it as the value of props Doon let's clean this challenge text up I already know what I need to do so I'm going to have a function that I'll choose to call toggle and and it's simply going to call the set on function it will need to know the previous version of it and just flip it to the opposite so we'll just say the opposite of preon and then I will add an onclick Handler to my button which calls toggle fairly straightforward how we have this set up at least let's hope it works I'll go ahead and click these and oh of course I missed one last thing I don't want to be looking at props Doon I just want to be looking at the state of on let's try that again and awesome look everything's working perfect okay well this seems pretty darn straightforward so why would I care to try a different way of doing this as I mentioned there's more than one way we could approach this problem there's probably more than just two ways even as there very often is in web development and programming in general so in the next lesson I want to see another way that we can structure this and my goal here isn't to First teach you a bad way of doing it and then teaching you a good way it's simply to help drive a point home when it comes to the interaction between props and state and just architecting react applications in general as always play around with the code as much as you need to in order to understand what we just did if you want it doesn't hurt to scrub back to before I did this and try it again on your own from scratch when you're ready we'll move on there's actually a name for how we set this up in the last lesson where we're taking an initial source of Truth this array mapping over it and creating components passing information to that component through props and then the most relevant part to what we're talking about here setting State based on the initial value of the incoming props and then of course the reason that we would set State internally is so that this component would be able to change that state the name of that is called derived state which makes sense it's deriving its initial State based on incoming props well as it turns out you probably don't need derived State this is a screenshot from the Legacy react blog and you can see in a couple places it warns you that this is an old version of their blog but in reality the information on this page still holds water pretty well today you can click on the screenshot if you want to read more about it but we're going to be talking about the biggest problem with derived state which is that you can end up with multiple sources of Truth you see the way that we have this written we have the state living in the app component which is supposed to represent the current state of all of the pads but in reality once we derive State inside the pad and allow it to update itself as soon as any of these pads gets clicked it's going to be out of sync with the parent state that we had and because of that we have two different sources of Truth on its face this is probably the most straight forward way to get something that looks like it's working so I can click these they appear to be updating just fine and maybe that's all the features we want at least for now however because we have two sources of Truth certain potential features in the future suddenly become a little bit more difficult to add for example let's imagine that we wanted to include a button down here that simply said turn all of the pads off because this exists outside of the individual pad component it would be here in the app where we'd add that button maybe just right here down below the rendered array of pads however actually implementing this feature would involve some kind of crazy seeming workarounds and that's because if we were to Simply set pads and turn every one of those pads off well our pad components wouldn't care they're not making use of this pads array state in fact let me take a second to implement that feature at least how it should be working if everything were working the way we'd expect just to I guess prove a point that it's not going to work okay so here I've included a button that says turn all off clicking the button right here will run this turn all pads off function that function is running this console log just so that we can see that it's running and then it's calling set pads which if we look is the first time we're calling set pads and updating this pads array in state it looks at the previous array of pads and then it Maps over them and basically says just give me all the data from the previous pad just so we don't lose the color and such but then it changes on to false for all of them let we hit save we'll click turn all off and we can see our console log is running but of course our pads are not turning off don't worry too much about the implementation details of this function we're going to be writing something very similar to this but the point I'm trying to make is if we need any kind of control over all of the data in these pads then we are going to be better off structuring our code in a different way so what we're going to do is we're going to remove the state from the individual pad components and as such they won't need to update their state so we'll be able to get rid of those toggle functions and instead we're going to make use of the state that already exists inside of our app then we will still create a toggle function inside of our app which gives us the ability to toggle one of the objects in this array and will update the local state of this aray inside the app component by using set pads because we're updating this local state it's going to reender all of the pads and almost all of them will receive the same on Prop that they received before except for the one that got clicked the way we'll know which one got clicked is by passing this toggle function down to each of the pads when the pad gets clicked it will send a signal up to the parent component it will tell it which pad got clicked based on some ID number that will pass to it the toggle function will update that one item in the array everything will get rendered and that one item in the array will then be different from its previous value and so it will flip now believe me I know this sounds more complex and that's because it is however this is the best practice in react when you're dealing with state in this way it's better to have a unified source of truth because now we don't have a separate source of Truth on each pad they are simply reflecting this single source of truth that exists in state on the app component now I'm going to give you a challenge that will get us part of the way here and then we'll be working through the actual implementation details of this toggle function together so let me go ahead and first I'm going to get rid of this turn all off code and then I'll include a challenge text here okay your challenge is to First create a toggle function and for now all it needs to do is log clicked to the console then I want you to pass that function down to each of the pad components and set it up so that when that individual button gets clicked it will run the function that we passed to it all right I'll hand it over to you to work on this challenge all right let's do this we'll create a function that we call toggle and it's just going to console log clicked then when we're mapping over our array of pads data we will add let's just call the propt and we'll set it equal to the function toggle okay we'll head over to our pad component and now we're receiving a prop called toggle and well look at that that's the same function name we gave it here let's go ahead and delete this and then instead of toggle this will be props do toggle we're going to lose the ability to flip that state but that's okay let's go ahead and click it and okay we're getting our console log running so this is been a great way for us to get a high Lev overview of the approach we're going to take but it feels a little bit like this scrim has gotten long so in the next lesson we're going to talk about how we can implement this toggle function so that instead of just console logging clicked we can make it toggle the state of the button that was clicked we're currently passing the toggle function which we defined in our app component down to every instance of our pad component currently all it's doing is console login clicked and that is definitely working of course that's not the ultimate goal now one thing that's important to note is that each of these pad components has access to props do toggle the toggle function that we're passing down to it but because this toggle function is defined in the parent component there really is only one toggle function it's not like we've duplicated this toggle function eight times which means there isn't any built-in connection for the toggle function to know which button triggered this function I think technically we could try to grab the event and use something like event.target to figure out which button it was that caused the click event but as you become more experienced in reacts you're going to learn that accessing Dom nodes like this is kind of a code smell it just doesn't feel right it's not really the react way to do this so let's say in our toggle function we receive the ID of which button was clicked then we would be able to look through the array of our pads find the one with the ID that was clicked and flip its onv value to the opposite of whatever it used to be in fact sometimes what I like to do is write this out as sort of pseudo code or comments in this case so we'll say map over the pads array if the current item has the same ID as the one passed to this function flip its on value okay so let's start thinking about this we're passing the toggle function down and if we come to our pad component we have a tiny roadblock first of all I can't just say well now I want props do toggle to take a parameter because if you remember when we first learned about event handlers we don't want this set of parentheses here it's going to call it as soon as this function runs so I'll hit save and oh of course I got rid of my console log to demonstrate that let's say toggle function okay let me hit save okay we see that immediately without me even clicking it it ran this props do toggle function that's not exactly what we want and I guess a second problem is even if we could do this we don't get to choose what gets passed as a parameter to our event handler functions this is something that's built into the Dom it will always be the event that gets passed to these functions so how can we work around this so that we can pass an ID we don't have this ID defined anywhere we're going to get there in a second but how can we write this so that we can pass an ID to this function instead of it automatically receiving an event object well a super easy way to work around this is to say I'm going to create an anonymous inline function here and this is the function that the event handler will run this is the one that will receive the event as its parameter I don't need this but the only thing this function will do is run props do toggle and now because I'm outside of the event handler function I can pass whatever parameter I want to this function okay so all we're missing now is this ID and then of course the code for the toggle function how can I get access to this ID well you might be thinking hey we're passing the ID down through this key prop well there's one little problem let me come here and console log props dokey and I'm going to get rid of my console log for the toggle function we'll hit save and we get an immediate warning that says hey key is not a prop you can't access it it's going to be undefined so don't try to do that if you need to access the same value then you should pass it a different prop okay so we can't access prop stock key but of course Nothing is Stopping Us from passing another prop let's call it idid and we'll pass pad. ID just like we did with key now over in my pad component I can console logs. ID and I get my one through eight these are the ID numbers of these eight color pads perfect so now instead of passing the ID I can say prop. ID we'll get rid of this console log let's go over to our app and console log the ID that we're passing to this function hit save click it and look at that that was number six 1 2 3 4 5 six perfect should be 1 2 3 and so forth awesome everything's working and now inside of our toggle function we have access to which of the elements in our pads array was clicked and we can start executing our plan here and you know what I was planning on doing this one for us but I feel like I've been talking for way too long so I am going to type this up as a challenge all right we're stepping up our game a little bit I did briefly show you an example of what we're going to be doing here earlier but I definitely didn't expect you to memorize it so this is going to be a bit more challenging of a challenge than we've done before but don't let that discourage you I know that you'll be able to do this it's definitely one of those opportunities where you might want to turn to chat GPT or Claude or some coding assistant or ask in the scrimba Discord Community if you need a little extra help as opposed to just skipping ahead and watching me do all the work you could say it's where the rubber hits the road this is really where the progress is made and I did try to give you a little bit more step-by-step instructions instead of being vague like I've done before so the overview of the challenge is essentially to make everything work again but the steps to do so is I want you to call set pads and update the state of the one pad that was clicked based on its ID to do that you're going to map over the previous pads array and if the current item that you're iterating over has the same ID as the one that is passed to this function then you're going to return a new object with all the previous values staying the same as they were if you need to refer back earlier in the section to how we update an object in State this would be a good time to do that make sure you return a new object where all of the other values stay as they were but the on value will be flipped to the opposite of what it was before if the IDS don't match then just return the previous item as it was completely unchanged take your time with this one it's completely okay if this takes extra time extra brain power it's completely expected I know you can do this one I'll hand it over to you to work on this challenge all right let's clean this up to buy ourselves a little bit of room the first thing I'm going to do is call set pads I need to know what the previous array looked like so we'll say preve pads and this will be an arrow function and I think the thing that makes us more challenging than some of the other challenges is that we're going to be then calling pre pads. map and whatever we return from pref pads. map is the array that will replace the original pads that we had thus setting State and rendering all of the pads in this array but the part that makes this tricky is map also takes a callback function and so because I'm getting tired of seeing the word pad let's maybe call it item a little bit more generic this time and this is going to be another callback function um well actually I'm going to open this up on its own line here all right so now that we are looking at the individual items within the previous pads array this is where I can start to look to see if item. ID is equal to this ID that's being passed into toggle and if you remember in the instructions it said if the IDS match then return a new object where the on value is flipped and if it doesn't match then just return the item as it was before well if we think about it this is a perfect time to use a Turner and it might get a little bit long horizontally here but what we can do is return and then we'll check if item. ID is equal to the ID passed in and if it is then we're going to return a new object that has all of the properties of item but where the on property is the opposite of item.on this should look very familiar I think the structure might be a little bit different but this is very similar to when we were updating our contact card as we were learning about updating an object in state we're getting an error because we need to finish off our Turner if the IDS do not match then we can just return the item exactly how it was we don't need to make any modification to it if you're relatively new to software development and maybe new to JavaScript in general this might look kind of crazy to you but trust me if you take the time now to Think Through how this is working and the longer you are writing code the more easily your brain will simply be able to make sense of what's going on here this is not a terribly uncommon thing to happen in react and there certainly are other more verbose but possibly easier to understand ways to write this but I promise it's going to be best to just take the time to understand what we've written here maybe before I go too high up on that That Soap Box let's make sure that this is working okay Moment of Truth all right and there's one more thing that probably made this challenge a bit tricky we can see I'll hit save I'll click one of these and geez it's not quite working yet let's go over to pad and see if we can debug it well notice first of all that we still have our state that we're using and we're using that state as the expression that should be determining whether or not the onass is added so let's get rid of this state I'm sorry if that threw anybody for too big of a loop and we'll change on to props Doon the version of on that's being passed from above now and let's try again hit save cross your fingers and click these buttons perfect now I know that we wrote a lot of extra code especially compared to the way we were doing it before where each pad component had its own state and its own way of updating that state however now we're set up in a much more react like way where we have a single source of truth that data flows in Just One Direction it passes down through props to the components that need it and those props can trigger changes through these callback functions or these functions being passed through props which will trigger a change to the main single source of Truth in the state of the parent component I completely understand if that seems absolutely crazy but do remember if we now wanted to add a feature like like for example a button that said turn all of the buttons off we could do that really easily we would just have a button when we click it it would do something very similar to this except instead of checking if the IDS match it would simply return what we have here but a hardcoded false and that's it it would change every item in the pads array and by changing the state react would automatically react to that change updating our button elements and the displaying new buttons on the page where they're all dimmed and turned off all right we've made some great progress when it comes to our understanding of state and react and props and how the two can work together where it's best to keep your state although there's a lot more to talk about with that topic but we are long overdue to get back to our Chef CLA project and find some ways that we can apply what we've been learning to that project we're in a pretty good spot with our Chef CLA app if we scroll down we can see it has gotten a little bit long mostly that's because we're hardcoding in a response from the CLA API for now but for the sake of practice what I'd like us to do is refactor our app so that a couple of these sections get put into their own components this will help make things look a little bit cleaner and for the most part it's just going to be some good Hands-On practice so your challenge is first to move the entire recipe section into its own CLA recipe component and that is this section let's see right here everything from this section tag down to this closing section tag again this is hardcoded for now we're going to change that up when we get real results from the cloud API and the second thing is for us to move the list of ingredients or the section that has all the ingredients in it into its own ingredients list component doing this is going to be more than just cutting out parts of the markup here and putting it in its own component than rendering that component because remember those components are interacting with state in one way or another so that's going to require you to think a little bit more critically about how you're going to communicate between the parent and child components whether or not State needs to move down to a child component or live in the parent component I'm going to leave all of that up to you while you work on this Challenge and then of course as always we're going to be going through this challenge together so let's go ahead and I'll put in a pause now you can start on this challenge all right I'm going to buy myself a little bit of room by cleaning up this challenge text but I will do that right after I create those components so we need a claw recipe component and an ingredients list component and I didn't make this part of the challenge but I'm actually going to put these under a folder called components mostly just so that it's a little easier to find in my list here in fact I might end up moving Main and header into this components directory as well but for now let's not worry about that okay so I'm going to create first a CLA recipe. jsx file and I'll also create an ingredients list. jsx file I'll stub out a function here so we'll just export default function ingredients list and return this is sort of my version of a console log for new components ingredients list component I'm going to just copy this and paste it here and then change this to Cloud recipe and looks like I spelled ingredients list wrong right here okay we'll fix that then in our main we'll go ahead and import those new components and we'll make sure that's coming from the components directory and we'll do the same thing for cloud recipe actually I'm going to put cloud recipe on top here all right let's hit save I don't think anything should change because we haven't rendered those yet okay I'm going to clean up this challenge text and let's see for the cloud recipe oh actually you know what I am going to put cloud recipe below ingredients list because that's how we're rendering them on the page so we'll do the ingredients list um actually let's do the cloud recipe first because I think this is going to take a little less work for us so I'll take out this entire section I'm going to render the claw recipe component and then let's hit save and uh I need to click get a recipe for that to show and okay we're getting the claw recipe component in our H1 okay let's get rid of this H1 and paste in that section we'll hit save click get a recipe and okay we have that section done now notice that in this case I'm doing my conditional rendering on the parent component here in my main this recipe shown is only being used to determine whether or not this component should get rendered but I don't have any data to pass down to Cloud recipe at least not yet because it's all hardcoded the ingredients list however is going to be a little bit different let's go ahead and this section right here I'll cut this out and replace it with an instance of ingredients list and then in my ingredients list I will get rid of my H1 actually let's hit save and okay we get our ingredients list component that's perfect okay let's replace this now with the section that we cut out and we will likely find that we're going to break I'll hit save and sure enough in fact I know what the problem is but let's look at the console ingredients list items is not defined and that's because it's right here ingredients list items okay so we have some things that we need to pull down we can kind of see from this view that we have ingredients list items missing we have ingredients missing and we have this toggle recipe shown function missing now if you got stuck on the challenge before getting to this point I'm actually going to put in another challenge here now that we've gone partway through I want you to give it another shot just in case it didn't work out for you the first time if you were able to get this all working great on you you don't have to do this challenge but if not this is another great opportunity to get some real practice in so I'll put in a pause now for you to give this another shot all right so these values are defined on our main component and we need to either bring them in from the main component through props or there might be some things that we can actually compute here inside of the ingredients list let's see let's start with this ingredients array this seems like a pretty important thing for our ingredients list to have knowledge of and we'll remember those ingredients are coming from our form and the state is being set here in the parent because the form does not live inside the same component ingredients list I don't think there's going to be a meaningful way that we can move all of that down into ingredients list instead let's go ahead and pass the ingredients through props so I'll say ingredients is equal to ingredients and for the sake of my horizontal space I'll go ahead and put some of this on its own lines and then we'll go to our ingredients list let's pull in props and this will now be props do ingredients all right so I'm probably not going to get anything yet when I hit save because we still have a couple of other undefined things this ingredients list items let's check this one out if we go back to our main component and find where we were creating ingredients list items we're doing this based on the ingredients array well we have access to this ingredients array inside of our ingredients list items so why don't we take this out of here and make it a little bit more locally scoped I guess to our ingredients list it seems appropriate because our ingredients list should probably be the component in charge of creating this ingredients list items now I need to change this from ingredients. map to props do ingredients. map and let me actually comment out this button for now and hit save look at that okay that's working and our ingredients are showing now the reason I commented this button out is because we oh let's see where was it right there yeah we get this toggle recipe shown that we don't have inside of this component yet so let's think for a second do I want to bring this toggle recipe shown function uh let's see where did we Define that right here do I want to bring this function down inside of ingredients list or do I want to pass it down through props well my main component it needs to know whether the recipe is shown or not so that it can conditionally render the clawed recipe if I were to bring all of this state down into the ingredients list component there wouldn't be a great way for me to pass that value of recipe shown back up to my main component and then use it for conditional rendering so it makes sense to live here and so we will need to pass that value down through props let's give this a new prop we'll just give it with the same name of toggle recipe shown so that'll be toggle recipe shown equals toggle recipe shown let me put these on their own lines then we will go grab it from props and this will be props do toggle recipe shown we'll hit save and look at that I think we should be at a working place I can click get a recipe that shows my hardcoded recipe and awesome this was a long challenge we had to do a lot of work here and in the end it is maybe a little bit questionable whether that was worth it or not we did get to remove quite a bit of code from our main component and sort of offload that work to a couple of components that are maybe a little more honed in on what they're supposed to be doing so it's neither right nor wrong per se architecting your react application will just take years and years of experience to figure out what you like best and what makes the most sense for your team but I do think this was a good exercise in thinking through where should State live how should we get information down to our other components if they even need them in the first place where should things like this map that we're doing live so hopefully you understand what I'm trying to get at here and at this point the only major feature we have left to add to Chef Claude is actually getting the recipe from the AI this is super exciting this is where we actually get to make this app work the way it's supposed to work instead of having a hard-coated recipe like we currently have so in the next lesson we'll be seeing how we can sign up for these different AI engines there's going to be a couple different op options for you to choose from and then we'll get to see how we can Implement actually calling out to those AIS sending them our ingredients list and getting a recipe back in return so get excited that's what's coming up next all right let's finally add AI to our system so that we can be pulling in a real recipe rather than the one that we have hardcoded in this Grim I'll walk you through two different options for AIS that you can sign up for and the only reason that I'm offering two different options is because when I first started creating this project anthropic which is the company that created Claude AI was offering a $5 credit to anybody who would confirm their phone number and although $5 may not sound like that much it goes a really long way especially with the version of the Claud API that we are going to be using however since then they have taken away that offering so if you're okay putting $5 into a Claude account then you can sign up with Claude I promise you it's going to go a lot further than it seems the grand total that I have used in all of my creating of this project and testing has been I think less than 1 cent also Claude is a very capable AI it's one of the best that's out there but as I mentioned if you're not interested in putting $5 into your anthropic account then I'll be showing you another option using hugging face which will be completely free so I'll help you get set up with an account on both anthropic and hugging face let's start with anthropic you can click the screenshot here to take you to this very page to create an account with anthropic and once you've gone through this initial phase it will take you to a sign up page where you'll want to make sure you put in your full name and whatever nickname you want to include here make sure to check the box and click continue this will ask you questions about your organization if you don't have an organization then I guess you could just put your last name here or something these other two inputs for industry and website are optional anyway so once you put in an organization name you should be able to click create account once you click create account it should drop you into sort of a dashboard prompt page and from here you'll want to go ahead and click get API keys this will take you to your settings specifically under the API keys for your settings there as I mentioned in order to create an API key and make any use of it you will have to add at least $5 to your account so the first thing we'll do is go over to plans and billing and there you can see the little warning up there that says to get started you have to upgrade your plan and purchase some credits so click upgrade this will pop open a modal you'll want to make sure you choose this build option on the left I think that's the default and then click continue and then it's just going to ask you a couple questions you can see I put in my organization name as scrimba once you fill these out and scroll down to the bottom go ahead and click continue then you'll be prompted to add your billing information and once you fill all that out you'll be able to click continue and you'll have some money in your account okay with that behind us we can click over on API Keys click create a key you can give the this key a name something that will be clear as to what you were using this key for so it really doesn't matter what you name it I guess I chose to call this my first key you could choose to call it recipe app or Chef Claud or something that's specific to the project if you'd like then we'll click create key and this model is very important you don't want to close this model before you have a chance to copy the key once you close this model as it says you won't be able to view it again make sure you copy that key and maybe temporarily paste it into some kind of text editor so you can reference it again we're going to be talking about this pretty soon but this is a key you want to make sure doesn't get published on GitHub with any of your repositories is never really referenced in your front-end code at all again we'll be talking about that in an upcoming lesson so for now just make sure you copy this key before you close the model or you're going to have to create a new key from scratch once you have that key assuming you are following along with us here in scrimba you'll want to go over to your scrimba account so in version two of scrimba this is kind of the homepage that you're dropped into go ahead and click your own little Avatar in the upper left and in this submenu here you'll see the option for settings click settings and you might need to scroll down just a little bit but under scrim settings you'll see this button that says edit your environment go ahead and click that and this is a place in scrimba that allows you to add environment variables that are accessible from any of your scrims when we as the teachers are recording anything that requires an API key for example we're going to use a variable shorthand which will be referencing your own personal environment well for us it was referencing our environment when we recorded it for you when you run the code it will reference your environment so you'll go ahead and click new key and from here you'll need to include a name and a value the name will be what is referenced in our code base and I'm going to be using anthropic aior key all in capital letters so assuming you are following here in scrimba and you're using the anthropic API make sure that you get this exactly right the same way that I have it here otherwise you're going to have to change it every time you do one of your challenges then for the value you will paste in the API key that you copied from the model before right here once you've pasted that in you can go ahead and click save then in any scrim when you see me writing with this saved in your environment inside of any scrimba with that API key saved to your own scriba environment anytime I reference process. env. anthropic API key just like I did in this line it will look up that environment variable in your own environment and use it instead of the one that I used when I was recording now as I mentioned the CLA API is one of the best AIS that's out there at least at the time of recording this I've noticed that it's giving me excellent results and even though I did have to put $5 into my account it costs me essentially nothing to use it like I said I've used I think a total of 1 cent since I first began creating and preparing this project however I did want to include an option that was completely free as well and in the admitted ly limited testing that I've done with it it also is producing great results and that is by using an AI model that's hosted by hugging face you can if you haven't heard of hugging face you can kind of think of it like the GitHub for AI models some of the AI models that are hosted by hugging face are free and some of them are paid so creating a hugging face account is free and the model that we've chosen is also a free model so you can click on the screenshot here to go to the sign up page for hugging face and just like before you'll go through the account creation process it's going to ask you for some information about your profile it looks like the only things that are required here are a username a full name and then to agree with the terms of service in this check box at the bottom once you've done that you can click create account which will drop you into sort of an introductory page but you'll notice that at least at the time of recording this there was a little alert at the top that required me to confirm my email so I went to my email I clicked the link that was there and that dropped me into this page where it says my email address has been verified successfully at this point you don't need to worry too much about creating an organization or joining an organization instead we are going to create an access token similar to the API key that we created with anthropic click on the sort of placeholder Avatar in the upper right and from this menu you'll go ahead and click on settings in the submenu on the left we'll go ahead and click on access tokens and from there we will create a new token on the create a new access token page the only things that you'll need to worry about is giving your token a name I've chosen this this time to call it recipe app and the only checkbox that we need to worry about is this one right here under inference that says we want to make calls to the serverless inference API so make sure you check that box we can scroll down a little bit and then see nothing else is checked we can just click create token just like with anthropic this is going to give us a modal that once we close it we won't be able to access our API key again so make sure you copy this paste it into some kind of text editor just temporarily until you have a chance to put it in an environment variable either in a EnV file on your machine if you're doing everything locally or inside of scrimba just like we did before with the anthropic API key in our environment variables just like I did with anthropic I'm going to be using the name HF accessor token so make sure you type this in exactly the same way or it's going to be a little bit annoying to have to go back and forth changing the name from the way that I recorded it and of course don't forget to hit save now as I mentioned I'm going to offer a really easy way for you to have one or the other of these so for the remainder of this project I'm going to be offering a way to make your API calls to either one of these and I'll try to make it as simple as possible to switch I'm going to be using the Claude AI because I have already added money to my account and I've been getting pretty good results with it but I'll be trying to make it as easy as possible for those who want to follow using hugging face to do so in a really easy way all right that was a lot of talking and not enough coding let's jump in and start making calls to the real Claude API so in the next lesson let's finally start sending our prompt to a real Ai and getting back a real recipe so we can replace the hard-coated one we have let's finally make use of AI to generate our recipes when given a list of ingredients as opposed to this silly hardcoded thing that we've done so far now because this isn't a course all about Ai and how to use AI apis I'm just going to have the code written for you which I'm sorry if that's a little anticlimactic but the truth is I wanted to stay focus on learning react here and not getting too sidetracked by learning AI that said I did include a link here to a course here on scrimba called intro to AI engineering taught by Tom and it's an excellent introduction to help you get your feet wet when it comes to AI engineering you can click the screenshot here it's just a short 90-minute course but I would recommend doing so maybe after you finish this section in react so I've written the code that will use both the claw API and the hug face API and we can find that right here in a file that I've called ai. JS now in the last lesson you should have created an environment variable either for the anthropic API key or for the HF access token and a quick warning that I wanted to make sure I got out of the way at this point is that if you're following Along on your local machine instead of here on scrimba I need to remind you that you do not commit these API keys to any repositories here on scrimba we have a dedic dedicated system setup for creating environment variables that are specific to each user they don't get exposed to the public but if you're following along locally and you're using let's say a file called EnV and you have your anthropic API key in there you need to make sure that you get ignore that file if you don't know what that means it's outside the scope of this course but a quick Google search should help you out additionally because the API calls we're making are coming directly from a browser environment to the respective apis you can see I added this property here called dangerously allow browser that means that we can make API calls to anthropic directly from our browser as opposed to having to relay it through a server this means that if you were to deploy your project anywhere live online like netlify for example anybody who comes to your site could dig around through the code and find your actual anthropic API key or hugging face access token or whatever private variables you think are private but actually aren't really the only way to secure these a API Keys is to relay these requests through some kind of server whether it's a server that you have created or a serverless function on whatever deployment platform you're using so here inside the scrimba environment you have nothing to worry about but locally make sure you heed this warning that I've given you okay let's walk through this code so that you at least get a highlevel overview of what it's doing when you're interacting with an AI you need to give it some kind of system prompt that helps set the stage for the AI to know what it's supposed to be tasked with as you can see I've created this system prompt that says you are an assistant that receives a list of ingredients that a user has and suggests a recipe that they could make with some or all of those ingredients I did end up having to specify that the AI does not need to use every single ingredient that is mentioned and it's allowed to include some additional ingredients that they didn't mention but as I said try not to include too many of those another really important instruction that I added to the end here is to format the response in markdown so that it would be easier to render to a web page we're going to come back to this and see how this is really helpful for us oh and something I just realized is I'm importing things like this anthropic Constructor or this HF inference Constructor from these libraries but I have not included those as dependencies so I'm just going to go ahead and make sure I add those as npm packages to my dependencies here in scrimba I just add the dependency here in the interface if you're following Al locally you'll need to npm install exactly what you see here and here now with anthropic I'm creating this anthropic instance this is all part of the software developer kit that they give me I had to pass my API key so that it knows who I am when I'm making requests and because I am making these requests directly from a browser I had to include this property dangerously allow browser and set it equal to true you can see with hugging face I do something very similar down here I have to pass my access token to this new instance of HF inference again the details of this are not that important for you to know but do make sure you follow these comments because if if you didn't follow along in the last scrim where we add these to your environment variables on scrimba you will need to do that before this will work then I just have two custom functions that I wrote this first one get recipe from Chef Claude which takes an ingredients array and makes a call to the anthropic API to create a new message or down here I'm using get recipe from mistol now hugging face is like a host for different AI models and in this case I found that mistal AI was actually a really good model that came from hugging face and it was giving me pretty good responses depending on when you're watching this chances are this model may have been updated so you might want to go to the hugging face website and just see what mistal models there are and you might need to change the model that we're using here with anthropic I did opt to use this Claude 3 High cou version and at the time of recording this is actually the cheapest version that they have with anthropic and it was giving me great results so it was fast extremely cheap and giving me great results so I think it's a great one to stick with as far as I can tell there isn't too much of a benefit with one of the more expensive models which can be 10 times the cost per API call in each of these cases in one way or another I'm passing in that system prompt variable the one that we defined up here above sending this off to the respective apis and then just kind of drilling down into the responses to get the content that comes back from the AI guy it looks like I have a little bit of error handling here on the mistal side I probably should include that in the chef Claud side too okay again that was just meant to be a highle overview you do not need to understand everything that's going on here if you would like to learn more or practice with it you can go to the intr AI engineering course and learn a little bit more about it there so what does this mean for you well it means that inside of our main file when we want to use an AI to generate the actual recipe all we need to do is import one of the two functions that I wrote here in our ai. JS file then in the appropriate spot I'm not going to show you exactly where because that's going to be an upcoming challenge all you have to do is call the function and pass to it the array of ingredients that we're saving in state here in our main.js file so this is awesome yes I've done a bit of this work for you but you can see that it's not that much code we're working with less than 60 lines of code here and that includes two different AIS that you can get these recipes from we truly are living in a modern age this is awesome okay now that we're all caught up on what's happening in the background with this ai. JS file we are now going to jump in and well make use of these functions this is where it starts to get really fun so in the next lesson I'm going to have a challenge for you this is a really fun part of this project actually pulling a real recipe from the AI because we're pretty far through this react course I'm going to make this challenge a bit more vague and give you a chance to really think critically and and synthesize all the skills that you've been learning and practicing up until this point to solve this challenge mostly on your own now just so that it's not completely overwhelming we're going to go through a bit of the problem solving process and to do so I'm going to give you this kind of in challenge mini quiz so I have two questions here just like our regular quizzes I want you to click into the editor and type down your answers hopefully this will help guide you in the correct direction so that in the next lesson when you actually start writing your code you'll at least have a good idea of where you should be starting so go ahead and answer the questions in this mini quiz all right for number one I want you to think about where the recipe response should live inside of our react app and how you're going to make sure that it doesn't disappear between each state change in the app or I guess another way to say it is to make sure it doesn't disappear every single time the app gets rendered I'm not talking about if you were to hit Refresh on the browser because that would probably require using some kind of browser storage like local storage and that's a little bit outside the scope of this project well once I get the recipe back from the AI I'm going to save that in react state so that can be my answer here I'll say I'm going to save the response in react state by doing this I can make sure that if I were to add another ingredient and then click get a recipe again the old recipe wouldn't just completely disappear or any other state changes that I might decide to include in this app react state allows me to save information from one render to the next and if I ever change that state it will cause a reender so for now in react state is going to be a great place for us to save that response number two what action from the user should trigger getting the recipe we have these functions that I pulled in get recipe from Chef Claude and get recipe from mistol at what point am I going to call these functions well I know it's not going to be as soon as my app loads because I need my list of ingredients I need the user to be able to add to the list of ingredients but it's when the user clicks this get a recipe button hopefully that was pretty straightforward based on the UI that we've chosen here with a button that literally says get a recipe so for number two when the user clicks the get uh recipe button although this question seemed a bit straightforward when you actually go to work on this challenge I think you'll find that it might be a little bit more involved than you might think when we refactored things we passed our function that get a recipe button is calling down through props to another component that's all I'm going to say for now because now we should be set up in the next lesson to have you actually work on the code for this challenge all right here we go our challenge is to get a recipe from the AI and this time you're actually going to write the code so either using the get recipe from Chef Claude function or the get recipe from mistro function make it so that when the user clicks the get a recipe button the text response from the AI will be displayed below currently we have it hardcoded so that when we click get a recipe it's just toggling the recipe on and of course this is just hardcoded but what it should be doing is displaying the real recipe from the AI currently we're using this recipe shown State I'll leave it up to you to determine whether or not this is still important to have and keep in mind that we did ask the AI to return markdown so it will just be displaying raw markdown it's not going to look very pretty quite yet we're going to end up using a package that will render the markdown for us this is a bit more of an involved exercise but I know that you'll be able to do it don't be afraid to reach out to the Discord Community if you need help or to look back on previous lessons if you're forgetting some of the syntax that's a completely normal and okay thing to be doing also don't hesitate to use a tool like Claude or chat gbt to help you out pretty much any of those things would be much much better than just skipping the exercise because you got a little bit stuck you got this go ahead and get started on this challenge sometimes when I'm building a new feature like this I like to start at the point where the user is interacting with the code which in our case would be this get a recipe button so let's go down and look at that button and actually it's over here in our ingredients list we're passing this toggle recipy shown function down to ingredients list and it's pulling that in through props and right here our onclick says toggle recipe shown this was always intended to be a temporary measure and the state that is changing when we click that button this recipe shown State we could continue to use it in order to conditionally render the recipe from Chef Claude but honestly I think we'll be better off just saving the response from the AI in state and if that response is truthy or is not an empty string then that's the value we can use to conditionally render this whole section down here so the first thing I think I want to do is rename this function because we're not just toggling whether the recipe is shown we're actually getting a recipe so let's say get recipe and yeah that's good enough I was going to say get recipe idea but get recipe gets the job done so now that we've changed that function name we'll go ahead and pass the real function down we might as well change our prop name while we're at it to the same name get recipe and we'll need to go over to ingredients list to fix that so Props dog recipe okay that was all just for changing the name let's go back and change how that function Works instead of setting the recipe with whether it's shown or not we are going to call get recipe from I'm going to use Chef Claude And if we remember these functions are expecting a list of ingredients which we are saving in state so I can just pass in my ingredients to the AI function now assuming you did this Challenge from scratch without too much help or skipping ahead to watching me do it you may have run into an issue because the functions that we're pulling in they are async functions which means by default they are going to return a promise let's let's go back to our main this means we can either use a then to unpack the promise afterwards or a little bit more of an updated syntax as we can use async await so I'm going to make this an async function will await the response and we'll save that as a recipe idea or maybe let's call this something that's clear it's from an AI we'll say generated recipe and this should be in markdown so I'm going to say markdown uh that might be Overkill Let's uh let's just call it recipe markdown okay that's good enough okay I like to do sanity checks whenever I can before I get too deep into a feature without having tested it and then have no idea where I've broken things so let's go ahead and console log recipe markdown we'll hit save and see if we need to fix any bugs okay let's click get a recipe we're waiting a little while while the AI is responding to us and let's open the console awesome check it out this is the response text from from anthropics claw API and sure enough given the exact same list of ingredients it keeps recommending spaghetti bolog if you look closely you can see the text includes things like hash marks and dashes this is all part of markdown and so we are going to be displaying that correctly later but we'll notice that if I try to scroll down nothing is there because we're no longer setting the recipe shown inside of our get recipe function so instead of console logging our recipe markdown let's go ahead and save this to State and let's create the state first instead of recipe shown let's just call this recipe because this is where we're going to save the recipe text instead of starting this as a Boolean we'll start it as an empty string and then I will call set recipe with the recipe mark down so we'll just do that right here and then we can use the state of the recipe to determine what should get rendered right now we're saying recipe shown and Claud recipe will just make this say if the recipe has a truthy value or in other words as long as it's not an empty string then we'll display the cloud recipe we haven't yet of course replaced the hard-coated stuff in Cloud recipe but let's make sure that our conditional rendering is working I'll click get a recipe and after just a little bit of time we can see that we can scroll down and it's displaying the chef Cloud recipe Let Me Close Our console to buy a little bit of room and now what we can do is pass this recipe down through props to Cloud recipe so we'll just say recipe equals recipe and over in our Cloud recipe we are now going to be receiving props and I'm actually just going to get rid of everything that was hardcoded here and let's just render the text from props do recipe hit save click get a recipe and here we go okay much less beautiful but it's markdown we're going to format it in a really easy way using a third party package but for now this is working awesome and it's really exciting to have a real recipe coming in of course currently we have the ingredients hard coated so just for fun let's let's go over to our main file we'll get rid of the hardc recipe ingredients and actually let me get rid of this challenge text to we'll say that this is an empty array and uh probably doesn't need to be on its own line anymore let's hit save and I don't know let's come up with some good stuff let's say we've got some chicken we'll still say we have all the main spices just so it knows that we've got what we need on hand for spice uh maybe we have some corn maybe some heavy cream and we have some pasta I don't know let's go ahead and give this a shot we'll click get a recipe takes a little bit of time now that it's reaching out to the real API and let's see it wants us to make a creamy chicken and pasta bake boy that sounds really good great work on this challenge hopefully you were able to get through it and honestly I don't even feel bad if it was a struggle because that is where the Learning Happens let's go ahead and format this so that it doesn't just look like a giant wall of text and we'll essentially be at the last phases of this app at least for now let's get this crazy block of text formatted so that it actually looks presentable for our user and the really good news is we aren't going to have to do any of this manually because we ask the AI to return the recipe formatted in a markdown format we can use a package called react markdown I think there's a number of other ones but this is a very popular one to turn the markdown format of text into something that renders as HTML you can click click on the screenshot here to go to the npm package for react markdown I believe it will automatically bump you down to the section that shows you how to use it and since you will often find yourself using thirdparty packages to help you out in your react codebase we are going to turn this into a challenge first let me come over to the cloud recipe here and I'll type out the challenge text you know reading documentation is one of the most common things you'll find yourself doing as a software engineer and and often times other people have written code that does the task that you are trying to do so it's really common to find a thirdparty package like we have here with react markdown that can just accomplish our task and allow us to complete features a lot faster so I think this will be a good exercise even though it's more react adjacent using a thirdparty package so your challenge is to see if you can figure out how to use the react markdown package I've included it here in the list of dependencies but if you're following Along on your own machine you will need to make sure that you npm install react Das markdown all of that information is going to be here on the npm page anyway but I want you to use react markdown so that you can render props.com that getss turned into react elements a little bit nicer this means all you'll have to do is add this suggest recipe container class to the section right here I guess I should probably type that Ino okay that should be pretty straightforward all right it's your time to shine go check out the documentation for react markdown by clicking this screenshot and give this challenge your best shot all right over in the documentation we can see that what we need to do is import react markdown from react D markdown and this thing that we're importing is a component unlike all of the custom components that we have been using so far like our ingredients list component is a self-closing component our CLA recipe component is self-closing as well if you look in the documentation we can see that this react markdown component has an opening and a closing tag and so we will go ahead and render react markdown and on the other end of props recipe which we're passing in we will render the other half of react markdown and this is small enough I don't think we need this to be on its own line we'll just do that this concept of having separate opening and closing tags for your custom components it's something that you'll see pretty regularly in react it's using a concept called children but for the most part I'm not going to be covering react children in this course instead that is something that I cover in my Advanced react course okay let's hit save you can see I put back in my default ingredients from the last scrim that we created and I'll click get a recipe once that recipe comes in let's scroll scr down and wow look at that that is looking so much better than it did before let's go ahead and add our class name here just to see how that changes things this was I'm not going to guess it let's go over here suggested recipe container and let's try again we'll hit save click get a recipe and we can scroll down and awesome okay this looks a lot more like the design that we saw in figma the last thing that I want to add here is a transition that's a little bit nicer than just jumping straight into this text so I think I'm going to add an H2 here that just says something like Chef Claude recommends and then we need to keep in mind that for those using assist of Technologies if we're conditionally rendering this section we need to add an ARA live equals polite this way when react conditionally renders it to the page for the first time it will be announced and read through the assist of Technologies let's go ahead and hit save and we'll just see what our new H2 looks like okay chef CLA recommends awesome and that folks represents a perfect stopping point for us in our Chef CLA app now it's not perfect by any means we actually are going to be revisiting this again in the next section but we have a few more things that we need to learn about first and you are probably getting pretty tired of spaghetti bolog and creamy chicken and pasta bake it's a lot of carbs to be taken in we have learned so much in this section that the things that we've learned in this section represent some of the most commonly used things in react and so before we move on I'd like to do a quick recap to take a look back at everything we've learned before we're ready to move on and continue learning some awesome things about react and continue working on some amazing projects holy cow we have made it to the end of Section 3 this was a mey section and you have finally built your first interactive react app congratulations with the knowledge that you gained and practiced in this section the sky is the limit as to what you can build let's do a quick recap of the things that we've learned in the process of building our Chef CLA app we learned about event listeners which are the basis of interactivity on the web from there we spent a long time learning about State and react State gives us a chance to maintain data between reenders of react and cause new renders and react so that we can follow the Paradigm of react which says that the UI or what the user sees should be a function of the state this gives us a super declarative API in react which allows us to Simply up upate the data that react is maintaining and rely on react to update the view accordingly we discovered a number of different ways that we can conditionally render parts of our app based on the state or the incoming props for any given component this gives us not only flexibility in what actually gets displayed to the browser but also gives us a chance to add another interactive element to our app we learned all about forms in react which gives us a chance to collect information from the user and do something with it we could send it off to to a database to be stored which of course is a very important component when it comes to interactive and dynamic web applications then we took a little bit of a side quest from Chef Claude and learned about some different State Management strategies different ways that we can architect our app and the pros and cons of each of those ways we'll actually be getting a chance later on in this course to revisit this topic of where State should be held and controlled I know I've said finishing the other sections were huge accomplishments but believe me when I say this is the biggest accomplishment yet we covered so much ground that you would really be doing yourself and the community a disservice if you didn't go over to the scrimba Discord community and post an awesome celebratory message in the today I did Channel you worked really hard in this section so you deserve some praise now we have one more section in this course that will be focused on learning new topics and then we have a couple really fun projects lined up after that once you've had a chance to do a little happy dance and to rest your brain for a little bit let's keep moving forward welcome to section four and the last section where we'll be focusing on learning new things in react in this course this entire section is all about how we can handle side effects in react and in the years that I've been teaching react I have found that understanding side effects in react can be one of the more tricky things that even seasoned react developers can experience when react transitioned away from class components into functional components and started using hooks back in version 16.3 the way that the world thought about react kind of changed forever there wasn't nearly as much talk about side effects in react as there is these days which once you understand the concept of side effects actually turns out to be a good thing let's take a quick look into what we'll be learning in this section we've already learned about the new way that react handles forms with form actions and some other apis that are a bit outside the scope of this course however there are instances where you may still want to do form in the way that they used to be done in react which is using controlled components the app that we'll be building in this section which we're going to talk about in a second uses controlled components and so I figured this would be a good opportunity to cover that topic then we'll be taking a bit of a studious asside to talk about functional programming and how the react philosophy has really centered around functional programming this will give us a better understanding of the concept of side effects and how we can best think about them in react then on a more practical level we are going to be creating a side effect so that we can fetch some data there's a lot of different ways to deal with fetching data but we will be seeing how we can fetch some data as soon as our app loads then for the majority of this section we will specifically be talking about side effects what they are how we can create them in react what pitfalls we need to be on the lookout for and so forth and of course this wouldn't be scriba if there weren't a ton of Hands-On challenges along the way speaking of which to drive this curriculum forward we are going to be building a meme generator it's a pretty straightforward app it has an input for top text so when you type into this top text input box on every keystroke the text on the meme image will update and then of course the same for the bottom text when you type into this input the bottom text will update on every keystroke and then you have the option to click a button which will get a new random meme image from a list of popular meme images that comes from the meme API called image flip we'll also have a quick chance to apply the concepts that we learn in this section to add a feature to our Chef CLA app from the last section so no more delay let's jump right in to help us guide our discussion about side effects we are going to be following this meme generator project and unlike the previous projects where I actually have us start it completely from scratch we are going to be beginning this one from a starting point so before I just threw you into an unfamiliar code base I wanted to walk through the codee here and give you a chance to walk through it yourself I think it's helpful to have somebody explain the code but I think it's even more helpful to take the time to go through things on your own and maybe even try to change things fortunately the starting point for this app is really straightforward we can start over here in our index we're just creating a root and rendering the app component the app component is simply importing the header and main components and rendering those the header is simply this purple header up top top and the main is well everything else on the page the header is as simple as it might seem and the main is currently not doing anything reae other than simply rendering the jsx you can see we're hardcoding the image the top text and the bottom text the one thing that is a little bit different about this and we're going to be talking about this soon is how the inputs kind of look like they belong to a form and the button kind of looks like it submits that form but the truth is that's not exactly how this one works the user will simply type into the top text input box and that will every keystroke update the text that displays on the image up at the top of course the bottom text does the same for the bottom and clicking the button doesn't submit any form anywhere it just randomly gets a new meme image this project will be a little bit on the simple side I know a lot of memes these days have text in different positions than just the top and bottom but we're not going to get that deep into it as I said everything is just hardcoded right now in the next lesson we're going to be moving this into react State and then we'll jump into building this project and the main reason we're doing this project is learning how we can make fetch request to an API as soon as our app loads before I just jump into the next lesson I'm going to put a pause in here to give you a chance to look through this code make sure you understand what's going on again it's not terribly complicated it's kind of just like walking through some HTML but doing so should hopefully Prime you to have Success Through the rest of this project so take some time now to peruse through the code all right hopefully that was helpful in the next lesson we are going to move some of this information into State all right let's get started right off with a challenge I want you to move the hard-coded meme information that we have down here into react State the state should contain an object that has a top text bottom text and image properties and then set the initial values of those properties to the values that you see below in fact you know what I'm going to make a change here just so that it's clear this is an image URL at this point we're not going to worry about hooking up the inputs or the button so you're just simply creating State and using that state value instead of the hardcoded ones down below go ahead and get started on this challenge all right let's go ahead and create let's call it Meme and set Meme and this will be equal to react . use State and I need to before I forget anything else import react from react and actually you know what we've had three sections where we're importing the entire react library and I mentioned specifically that it makes it a little bit easier to know that Ed state is coming from the react library but I think you probably get it for now so I'm just going to switch it up we're going to destructure use State and pull that in from the react library and then just call you state like this honestly this is probably the more common way that you'll see it so I think it'll be good to see it both both ways all right my initial state is going to be an object as it mentions down here and we're going to have a top text property a bottom text property and I'm just setting these equal to empty strings for now we're going to fix this in a second and then an image URL property okay for the top text we have one does not simply and no right there bottom text walk into Mordor and let's grab this image URL as our starting point here clean up the challenge text and we need to switch these to now use the state value instead so this is going to be meme. image URL this one is meme. toop text and meme. bottom text these kinds of refactors are not super thrilling because I will hit save and it essentially looks like I didn't do any work but we've primed ourselves to now be able to update our state which will of course update the UI this whole section is about side effects and using a built-in function from react called use effect but I kind of want to take care of some of the other items that we have for example being able to type into these inputs and have them on every keystroke update our text so I guess we have pun intended a little bit of an aside to take before we get into side effects so in the next lesson let's hook up these inputs so that they can update our state in the last section we learned all about forms and how we can add an action property to our forms in order to catch the information whenever that form gets submitted I mentioned at the time that that represents an update to react this is something new in react 19 that is very very welcomed before this update we had to use something called controlled components whenever we created a form and truth be told I think it was one of the worst parts of react it was overly complex it felt like it was Reinventing the wheel and with that glowing review we are going to start using controlled components don't get me wrong there are still instances where controlled components make sense in react and we are about to see one of them remember with our two inputs here we aren't collecting information from the user and then submitting it somewhere for it to be processed that's really what a form is intended for instead we just want every single keystroke that the user types into our inputs here to update immediately on the page which means every change of the inputs is going to update our local state as such we don't need to use the underlying ability of forms to maintain and hold their own information and then submit it all at once in a form data object but rather we want to set it up so that we have an event listener on our inputs let's see this input and this input that on every keystroke or change of the input we want it to update our state now I thought about doing a whole aside and and giving you a series of challenges for this but truth be told because with react 19 we have form actions and a couple other slightly more advanced hooks that we were given to deal with submitting forms I'm actually just going to walk through this and hope that it makes as much sense as possible again this is not the Crux of our section which is supposed to be talking about side effects first let's see the onchange event listener working so I'm going to add an on change event listener and I'll call a function which I haven't created yet called handle change whenever the change happens let's create this function handle change and I'll just console log changed for now let's hit save I'll click into the box let me open the console I'll click into the box and I will type some characters okay you can see every single keystroke spaces letters everything it called my handle change function okay well how is this helpful to us what I can do is I can look at the event that comes through on my handle change since this is an event listener the value passed to that function is information about the event that was fired I can grab whatever text is currently in this input Box off of the event and then set my top text or bottom text we're going to see how to do both I can set the value of that text equal to whatever the input box currently says so from this event I'm going to pull off a value and I'm just going to destructure it right off the event we're going to get the actual value from event.target the event is the event that was fired Target is the element that fired the event and actually there's another one you know what I think I'm actually going to use current Target you don't need to worry at this point the difference between the two the point is I'm going to console log my value we'll hit save and I will type into the input box again and you can see in our console the first character I typed it logged the value which was just the letter T then Ty y typ typ every keystroke is now being logged to the console okay well I think this is probably a good point at which I can get your hands on the keyboard and give you a challenge this challenge is only going to partially solve what we're working on but it'll be a good way for me not just to be droning on okay your challenge is to update the top text value in the meme state object this one right here every time the top text input box is changed now for now I don't want you to worry at all about the bottom text in fact I removed the onchange event listener on the bottom text input box just so it wouldn't be confusing this challenge will hearken back to how you can update a single property in an object's state so if that's feeling a little bit Rusty for you you may want to open up the lesson in the last section where we went over this or of course you could ask in the scrimba Discord for some help or just plug it into into Google or chat GPT and you should be able to find an answer pretty quickly all right your time to shine go ahead and get started on this challenge anytime we want to update State we need to use our state Setter function so I'm going to call set Meme and because we don't want to erase all of the other properties of our meme we do need access to the previous version of the meme so I'm going to use a callback function and what I'll return will be an object but because I'm inside of an arrow function I need to wrap that object in a set of parentheses just to be a little more confusing we'll bring in all of the properties from the previous Meme and we'll change our top text to be whatever value is currently in the input box let's clean this up hit save and we'll say Shut Up And Take My Money cool awesome on every keystroke this was updating and because react is so good at what it does it was updating really quickly there was really no in every keystroke for having it render and display the new text okay I think we've bitten off quite a bit in this lesson we're going to learn how we can make our bottom text input box also work without having to write an entirely separate function for it as well as learning one little gotcha when it comes to controlled components and what the term controlled components means in the first place all of that's coming up next all right what even is a controlled compon component well remember how I talked about that forms have their own ability to hold their state internally I mean we can see that when I type into my bottom text form this is some text this value is being saved somewhere it's being rendered to the screen by the browser and that's because forms have an intrinsic built-in ability to hold this data in this case react is not controlling the output of this form or the actual display of this form a controlled component on the other hand is one that react is in control of me changing this text doesn't change anything else on the page so an uncontrolled component is for example an input box that react is not in control of and doesn't reflect the current value of State any controlled component is one that react is in control of and does reflect the current value of State the idea when react was kind of in its early stages actually just up until very recently the idea was that react should hold the single source of Truth for anything that is being displayed on the page so text like this that didn't conform to using state in react felt a little bit like an anti-pattern I guess in the theory of react all this means is that as we can see I'm able to type something different in my input box than what the bottom text is supposed to be according to react I have two different versions of Truth in order to make this a controlled component there are two things that I need to do the first is I need to be able to update state every time there's a change inside of my input box this is exactly what we did by adding this onchange event handler in the top text input box however there's one more part to this and that is that the current display value of our top text input box doesn't reflect what the top text state says it kind of looks like it because our placeholder is actually the same thing let me actually change this to something different and I'll hit save okay you can see something different is correctly displaying in our meme but both of our input boxes are empty again they don't really look empty because of the placeholder I guess that was a little bit confusing but in a true controlled component we want to manually set the value of this input box equal to whatever the current value is in state in our case it would be meme. toop text so now we can see the input box actually reflects the current value of state by saying something different the two sort es of Truth have been united into one it's just held by react and I can change this and whatever changes in the top text input box will change on the page as well so those are really the two parts when it comes to having a controlled component we need to have the component or the input box accurately reflect what the current value of state is and also every single change will update that state and as such react now has essentially kicked the form's ability to maintain its own separate State internally to the curb and it's taking control over everything it's kind of like being a control freak in this case in our case because we want the state to update on every keystroke it actually makes sense for us to use a controlled component here so let's do the same thing for the bottom text we're going to give it a value of meme. bottom text and I'll also copy this onchange over at first glance it might look like we kind of have to use a second function because right now we are hard coding that this handle change function will change the top text in fact if I hit save and then start changing this oh we can see we start to get some weird errors happening because there's a little bit of fighting happening between these two values oh well and I guess I'm displaying the bottom text value but I'm trying to update the top text accordingly fortunately instead of having to create a completely separate function I can use the name value that each of my inputs have in order to correctly update which portion of state I'm going to change by the way I know that we're moving kind of quickly here my old course had probably six straight lessons on controlled components and different kinds of inputs but with react 19 kind of making that mostly obsolete I really just wanted to fly through this so I'm sorry if anybody is feeling a little bit lost that's really okay because again we're here in a section about effects I want to get to learning about side effects as quickly as possible here we're pulling in the value from event. current Target I can also pull in the name property that's exactly this right here name of either top text or bottom text and by ensuring that bottom text is spelled exactly the same way as the bottom text property in our state instead of hardcoding top text here I can use a set of square brackets and say whatever name is currently changing the input that's the property on the state that I want to update again it's okay if that makes no sense at all let me hit save I don't want this to say something different let's have it say One does not simply we'll hit save again okay so I can start to change this one great one does not and then we'll just go ahead and change this and look at that it's correctly reflecting the respective pieces of State depending on the name property from each of the inputs all right jeez that was quite a whirlwind as I said that's not really the important part here we have part of the core functionality working with the top text and bottom text now finally let's dive in start learning about side effects and react and see how that even applies here to the meme generator project the next task that we have in our meme generator app has to do with fetching some data you see we could hardcode all of the memes that we want to include as possible images that we get when we click the get a new meme image button but that's not as fun we want to use an API that has the currently most popular meme images in its database and we're going to be using an API called the image flip API which has a dedicated endpoint to give us 100 of the currently most popular meme images in order to get those we are going to have to make a fetch request to the database with all the meme images our site will make a request out there and because it's asynchronous we don't know exactly how long it's going to take for it to respond but eventually a response is going to come back to our react app and we are going to store the array of meme images in in our local state in the react app then from the array of meme images that we got back from the database we will randomly choose one every time the user clicks the get a new meme image button which means clicking the button itself isn't going to be making a fetch request and returning a response but instead simply loading up the app will have the side effect of grabbing that array of data from the image flip API then everything else is just going to be processed locally Within our app like randomly choosing an item from that array of 100 meme images so if we're not kicking off a request when we click the button I want you to think when are we going to be kicking off this first request to get all of the meme images well to be honest I think I gave the answer away in something I said earlier but we're going to grab all of these meme images as soon as our app loads and describing it that way makes it sound like it should be really easy in the end it really is easy but it requires us to have a basic understanding of the functional programming Paradigm how that relates to react and how we can initiate this initial request upon the loading of our app for the first time so just to help us have a greater understanding of what a side effect even is we're going to take a really high level Overview at a programming Paradigm called functional programming I'll caveat this lesson by saying that I am definitely not an expert in functional programming but I think a really highlevel overview of function programming will be helpful in understanding a little bit more deeply how react works and what the philosophy behind creating react was it's also going to help us when we're talking in terms of side effects which is what we're currently working on in our little side quest here there are a number of main principles with functional programming and we are just going to be touching on a few of them the first one that I want to talk about is the concept of pure functions a pure function is one that if it's given the same inputs it will always produce the same outputs and running that function will never have any kind of change elsewhere in your system this is where the concept of UI as a function of State comes from all it simply means is that the whole job of your components that you're writing are to take input which in one example might be incoming props from some above component and given those props its entire purpose is to return a user interface some kind of Dom elements that display on the screen and if it's written correctly no matter how many times your app component is rendered if the props are the same then the UI that's produced will always be the same now if the props that are coming in exist in a parent component and that component changes those props somehow maybe those props are actually part of State in that parent component then the change in props will cause our app component to render and potentially produce different results in the user interface and this exact same principle applies if what changes is an internal State change to our component changing that state will then produce a new user interface and as long as that state changes the same it doesn't matter how many times your app component renders it will always produce the same user interface and we talked early on about how react is in charge of doing all of the nitty-gritty behind the scenes and we as developers just get to worry about making sure that our state or our incoming props are being represented Ed correctly so that what react produces in the user interface is well represented correctly on the page as such it's really important that the code inside of our components is pure in other words it doesn't change anything outside of its own system and this leads us to the next main principle which is immutability and we've talked about this if we have a component that's receiving props it's very important in react that we never change those props to anything else otherwise doing this means that our props are mutable and in functional programming and especially here in react props are immutable the truth is state is also considered immutable which might seem a little weird because we have been changing State quite a bit throughout this course but all it means is that we're not going to be directly mutating State we're not going to change State equal to something else we will always use the setter function that we receive with Ed state in order to make any changes in the end what's really happening behind the scenes is it's not just setting state equal to something different it's replacing that state with a completely brand new version of it which then causes our entire component to rerun with that new version of State feels a little bit like splitting hairs but it's an important thing in react to understand that immutability is key lastly and this relates quite a bit with the first one of pure functions but hopefully ties in our main concept here is that our components in react should avoid side effects which just means that if we are going to run our app component or create an instance of our app component like we do here then we need to make sure that it will not affect any kind of outside system imagine if you will every time I ran this component it made some sort of post request to add an item to a list in a database this would prove pretty problematic because if react needs to render our app component I don't know hundreds of times if every time it did it it was adding something to a list in a database case you probably understand why that's a bad thing we could really end up with major outside problems if we were to allow our components to do anything like this okay so where does that leave us well we are going to discover that side effects are still kind of an important thing for us to have in our web applications we want to be able to mutate data in databases and do things like add values to local storage or subscribe to websocket connections and so we need a solution in react that allows us to a void side effects as much as possible but also to escape from that Paradigm whenever it's necessary so that we can keep developing what we need to build so this leads us into the conversation of how we can deal with side effects in react a really common thing that you will need to do in your react applications is to fetch data outside of your own react app and in order for us to fetch that data and then display that information on our page we need to perform at least two steps first of all we need to fetch the data or get the data so we'll call this step number one and for number two we need to display the data which requires us to save the data in State first we'll see what might seem like an intuitive way to do this and then we're going to find out quickly why that's not quite the whole story and we'll have a pretty major bug in our component I'm going to be using data from the Star Wars API it's just a simple API that can return information about the Star Wars universe and we'll save that in state and display it just as a Json object it's going to look more or less like this with a bit more information this is just stringified and hardcoded this object but we'll replace that in a second okay well we'll take this naive approach first we'll go ahead and fetch data from the Star Wars API this is the endpoint we can use to get the character in the Star Wars Universe with the ID of one which happens to be Luke Skywalker and then fetch returns a promise so we'll go ahead and resolve that promise which will give us a response back the response contains a bunch of extra information metadata about the response itself the body of the response and so forth that body in this case is coming back as Json and so I can pull the Json out and turn it into a JavaScript object and then I can get that data and what I usually like to do is just console log it to see what it looks like okay let's clean up our notes here let's hit save open our console and okay we got the data in everything seems to be great all right well let's say instead of calling this generically state let's say this is Star Wars data and we'll go ahead and set the Star Wars data and actually I've had a lot of talking in these last few scrims so let's give you a challenge real quick all right this isn't practicing anything new per se but I do want to get your hands on the keyboard as always so instead of console logging the data I want you to save it in state and then display it to the the page essentially you'll just be replacing this hardcoded object with the data that is saved in state for anyone in the no already yes this is not the correct way to do this in react we're very soon going to see a problem that we'll run into but for now I'll put in a pause and have you work on this challenge all right well instead of console logging the data let's go ahead and call set Star Wars data with the data instead and we'll go ahead and replace this object with the Star Wars data let's clean up the challenge text we'll hit save and it started at zull you probably saw that pretty briefly and then it replaced it with the object awesome so what's the problem Bob this seems like it's working great well we can highlight what the problem is by adding in some code here let's just put in a console log that says rendered and keep in mind any code that we have inside of our component is going to run anytime this component renders by react so let me go ahead and hit save and we don't even need to open up the console to see that we are stuck in an infinite Loop we didn't notice this happening behind the scenes but all of the code including this fetch request that we were running was happening many many many times in the background let me comment out this render just so it stops uh displaying that to the page but even though we're not seeing the rendered console log multiple times there is this fetch request happening infinitely in the background in fact I'm going to comment this out so that we have an opportunity to talk about it okay this one's going to take some critical thinking I'm going to put in a pause here and I want you to think about why it is that we are stuck in an infinite Loop if we have this fetch request uncommented think back to everything that you've learned about how react deals with State how it decides what should get displayed to the screen and how it decides whether a component should be rendered or not so take a minute to see if you can figure out why we were stuck in an infinite Loop when we had our fetch request uncommented and the component rendered it ran through the code here it performed a fetch request or I should say it kicked off or started a fetch request because the fetch request takes some time to complete it then came to this return and displayed this null on the page because we initialized our Star Wars data as null then in what probably feels like an eternity to a computer the response finally comes back it pulls the body of the response out and changes it into a JavaScript object and then most crucially it sets that data to local state what is it that react does when we change local state if we change local state react will render this component it needs to display the most updated version of state to the page so the component has to render however when we set Star Wars data and we rerender this component a new fetch request gets kicked off when that one completes it sets the Star Wars data which reenders the component which calls a fetch request which sets the Star Wars data which reenders the component and we get stuck in an infinite Loop now I haven't hit save since I uncommented this so This fetch request is not currently happening in the background but I'll just pre-warn you if you do want to play around with this code if you hit save it's going to start kicking off this fetch request so just be aware of that so how do we avoid this problem with how react deals with setting State and rendering if we want to include a fetch request that only happens one time well this is the natural next step in our discussion about side effects and specifically a hook that react gives us called use effect so let's Dive Right into learning use effect and see how it can help us solve this problem that we're facing let's kick off the discussion about use effect by looking once again at what react's primary tasks are as we've discussed the main thing that it's in charge of is working with the Dom and the browser in order to render user interface to the page very helpfully along with that it's going to manage any state for us between render Cycles which gives us developers a way for a value to be remembered from one render to the next and because we have state and we have props react is in charge of updating the UI once again kind of like we talked about in the first point it will update that UI whenever the state or the incoming props change there's a lot of other things things that react of course is doing behind the scenes but I think it would be fair to boil down all of the very detailed things that it does to these kind of main tasks well this naturally leads us to ask what can't react handle on its own and primarily react can't really do much regarding outside effects some examples of this are interfacing with local storage if we're relying on a value from local storage and that value changes one way or another react isn't automatically going to update itself based on the changes from local storage I guess let me also be clear about local storage and the rest of the items in this list I'm not saying you can't use these tools with a react application I'm simply saying react isn't automatically connected to them and so we need to connect these things manually ourselves another example of an outside effect that reacts doesn't automatically connect to is an API or any kind of database interaction we need to manually call out to an API and receive the data that comes back in order to then display it on the screen this is exactly what we we're doing with the Star Wars API along that same vein anything dealing with subscriptions like a websocket connection react doesn't automatically know how to connect to outside systems or what to do if data were to come in and change and so we need to take that into account as we're writing our code essentially this could just be boiled down to basically anything that react isn't in charge of which is what we saw in the last slide so how can we deal with these outside effects well that's where the use effect hook comes in whereas it's really important for our react component components to be pure components and follow some of those principles of functional programming that we talked about earlier use effect gives us a way to sort of create an escape hatch in fact Escape hatches is exactly what the react docs talk about you can click on the screenshot here to go to this page talking all about Escape hatches this goes beyond the scope of just use effect but if you scroll down to this section which says synchronizing with effects it will talk about use effect a little bit feel free to read through this sort of as a reading the textbook before class sort of thing and once you're ready we're going to jump into the syntax of use effect let's learn how we can apply the use effect hook to fix the issue that we were having with our Star Wars data rendering this component in an infinite Loop before we get started I want to give you a chance to go check out the use effect documentation the screenshots that I had given you before talked more about how to use use effect this one actually gives you the real syntax and so this would be a good chance to go check out the documentation before running through the rest of the scrim we can see from the signature here that there are two parameters that we need to pass to use effect the first one it calls setup which turns out to be a callback function and the second parameter is optional that's what the question mark here means and it's an array of dependencies in this scrim we're going to talk about the setup callback function and in the next one we'll talk about the dependencies so let's come back to our code and if I uncomment this console log and hit save we can remember that we are are stuck in this infinite Loop of rendering and the reason is because of this set Star Wars data line which is causing a render of our component which is kicking off a fetch request setting Star Wars data and so forth in the infinite Loop let me just comment out this line here and hit save that will stop the infinite rendering for now use effect is a function that we can import from react in a very similar way that we were doing with react. usate we can call react. use effect and as I mentioned there are two parameters the first one is is going to be a callback function now almost exclusively these days you'll see this written as an arrow function like this but just in an effort to make this completely transparent I'm going to put an inline function declaration like this and then we'll switch it back for an arrow function later I think having the function keyword here makes it much more apparent that we're working within a callback function what use effect allows me to do is inside of the code of this callback function I can put any code that is going to have some kind of side effect outside of the react ecosystem system in the case of our fetch request here where we are trying to get data from an outside system this would be the correct kind of code to put inside of a side effect with use effect more specifically the code I put inside of this callback function is the code where I want to synchronize data from an outside system with our internal react State now I have a confession to make and that is that if we were to uncomment this setting Star Wars data line and hit save we're going to see that we are still stuck in an infinite Loop so what went wrong how come our use effect didn't solve everything let me actually go ahead and comment out this line again so on its face it would seem like putting this code inside of our use effect made really no difference and the truth is without the optional dependencies array which we're going to be talking about in the next lesson that's kind of true there is one minor difference that I think is important to note at this point and that is that any code you put inside of this callback function is guaranteed to only run after react has mounted your elements to the Dom or in other words painted the elements from your component to the page we can get a glimpse into this if we were to console log may be effect ran here inside of our callback function we'll hit save we can see we first get rendered and then we get effect ran and the truth is that has nothing to do with order if I place this console log below that one in terms of where it sits on the page we're still going to get rendered first and that's because it's running through this code reaches this console log runs the console log renders the elements to the page and then runs our function inside of our use effect so that's kind of a slight difference between just having this code sitting outside the use effect similar to our console log here but for our purposes when we uncommit this line we're still going to be running this effect function on every single render of our component so let's dive in and talk about that dependencies array and see how it's going to help us solve this problem I've made a small tweak to our little sample app here and that was to add this counter and a button to increment the count and of course I changed this to dark mode for any of you who felt blinded by the last example that we had the only reason I added a counter was so that we had a really easy way for us to force react to reender this component we can see in the console that the first time we load this up we get the rendered console log here and then we get our effect ran console log as well if I go ahead and click the add button we can see we get both of those console logs running again this shows us that the use effect callback function we have is running on every single render of our component which is why moving this set Star Wars data line inside of the use effect didn't solve our problem however what we'll learn about now will solve this problem and that is the second parameter that we can pass to the use effect function if by default the first parameter this callback function will run on every single render the second parameter gives us a chance to stop it from running on every single render if we want it to and in practice you pretty much will always want to include this dependencies array I can't think of too many times when you would want your use effect functions to run on every single render so what exactly goes here well it is called a dependencies array so this will always be an array of values that react is going to watch between one render and the next if any of the values in this array change between those two renders then react will know that it should run this function again so let's play with this for a second let me go ahead and put the count value that we're tracking in state as a value inside of my dependencies array I'll click save we can see we got rendered and effect ran so now we know that this effect will run on the very first render of the component and let me click the add button and we see we got rendered and we got effect ran again let's dive even deeper and see what happened behind the scenes the very first time this component rendered I'll hit refresh now so we reset our count to zero count here was evaluated as the value of zero our console log rendered ran react then painted this div and its child elements to the page then it ran this effect function and behind the scenes it's storing this array with the value of zero so that it can compare the dependencies array on the next time this happens so I go ahead and click add now what happens well this count value which remember it's saved as count react incremented the count from 0 to one it painted the stuff on the page and then it looked at this effect function and its dependencies array and this time the dependency count had a value of one and so behind the scenes react was looking at what it used to be the last time this effect ran which was an array with a zero in this first index here or I guess the zero index and then it compared it to what it currently has which is an array with a one inside and the logic of react says well it used to be an array with a zero now it's an array with a one these are different from each other and so I need to rerun this callback function again so as you can imagine it's called a dependencies array because this callback function depends on the value that you're putting inside the parentheses here all right let's do two things first of all I've been kind of changing this value of count I think it's important for us to remember that this is still a variable it's not a hard-coded number but I think that can be a good practice for us I want you to think what would happen if I hardcoded this as a zero I'm going to hit save we get rendered and effect Ran So I'll put in a pause here click the add button and try to see if you could explain why it's doing what it's doing okay I'll click the add button and this time we only got rendered logging to the console which means that this callback function did not run this time so what's going on here well because I've hardcoded a zero inside of my array the first time our component rendered it saved this dependencies array as an array with a zero inside and the next time it rendered after we clicked the add button it compared it to the hard-coded array with a zero inside and this time because these arrays contain the exact same data as each other react thought well I don't need to rerun this callback function because nothing has changed nothing that this function depends on has changed and so I don't need to try and synchronize with any outside system again because nothing has changed okay so that's the first thing let's go ahead and set this back to count the second thing is let's go ahead and uncomment our set Star Wars data I'll hit save and check it out we are no longer caught in an infinite Loop I'm going to put in another pause here and I want you to try and reason through why it is that now that we have this dependencies array here we suddenly are no longer stuck in a loop when we're setting our Star Wars Data before when we were setting our Star Wars data it was rendering our component which was causing our use effect function to run again because we hadn't taught it when not to run now our count has not changed even though we're setting our Star Wars data and rendering this component which is why we got a second rendered console log displaying because our count has not changed we are no longer making another fetch request so now I want you to think what's going to happen if I click the add button while clicking the add button is going to change my count value which is going to make it so that between the two different renders my count value inside my dependency array will have changed and therefore I will be kicking off another fetch request so let me click the add button and we can see that we did get rendered effect ran and then rendered again it's a little hard to tell because the data hasn't changed since the last time but it did rerender this and it did make another fetch request okay we are way too long overdue to have you do a challenge so let me type out a challenge for you all right your challenge is to rewrite the use effect for now we're going to have it rerun anytime the count changes so anytime this add button is clicked and for now you don't have to go fetch data from the Star Wars API or anything like that you can simply console log effect function ran so give this Your Best Shot see if you can remember how the use effect function works I can create a new side effect in react by using react. use effect the first parameter is a callback function before we were using a function declaration like this although I did mention that the much more common way you'll see this is by using an inline Anonymous Arrow function so we'll go ahead and switch to doing it that way for now I'm just going to copy this effect function ran console log and I need to make sure to include my dependencies array so that it only runs when the count value changes let's clean up this text we'll hit save I'll click add and we got effect function ran a second time okay if this is your first exposure to use effect and react first of all congratulations on doing that challenge the syntax can seem a little bit weird but second of all you might be wondering why are we putting count inside of this dependencies array we've learned that the dependencies array can give us some control over when this effect function runs but it might not seem super apparent why we're putting count in here and the truth is we probably shouldn't be putting count in here so that's what we're going to be covering next all right so we've learned that the dependency array gives us some control over when our effect function runs and we learned that react is going to compare the values inside of our dependencies array from one render to the next in order to determine whether this effect function should run again so how do we determine what we should put inside of our dependencies array well I think if we take a second to truly understand what values we should putting inside of our dependencies array it will suddenly start to click for us right now we have this count value in here and that was simply to show that this effect function will run whenever we increment the count but if we look at our code there's no code inside of here that depends on the value of count in order to correctly synchronize with an outside system changing count is simply going to call another fetch request to the Star Wars API which knows nothing about count nor depends on count to get correct data so let's see what happens if we simply remove count from our dependencies array I'll hit save okay we can see we got rendered which is the very first time our component rendered then behind the scenes react put this div and his children on the page first with an empty array displaying as the data down here then our use effect function ran and this console log ran which is why we see effect ran in the console the fetch request kicked off it took a little while for the data to come back but eventually when it did we set the Star Wars data with that data and react triggered another reender keep in mind when it ran this effect function it looked at our dependencies array which was an empty array let me go ahead and type this down just in a comment here so this was on the first render it had an empty array set Star Wars data triggered a render it did the whole render thing and placed the new information on the screen with the correct Star Wars data then it looked at our dependencies array this time around and what it did is it compared an empty dependency array to Another Empty dependency array when it saw that nothing in these arrays had changed because there is nothing in the array it said I don't need to rerun this effect because nothing that this effect depends on has changed and because we've removed count here count is also not something that this code depends on so if I click add I'm simply going to get rendered every time and the effect is not going to run anymore all right well we've learned quite a bit of stuff what I'd like to do is in the next couple lessons I want to First do a quiz that we can talk a little more high level about what use effect is helping us with and then we're going to have just a small series of challenges to give us some more practice in understanding use effect all right it's quiz time again just like before read through these questions click into the editor and type down your answers for question number one it's been a little bit of time since we talked about functional programming and pure functions so don't hesitate to open up that lesson on functional programming in another T tab or something and review that before answering this question in the quiz so go ahead and answer the questions in this quiz okay number one in what way are react components meant to be pure functions and actually I'm going to pull up my old slides on this one right here the idea of the pure functions was to say that a component when it's given certain props should always return the same user interface and the same thing holds true of a state change or any internal state in the component given the same state values or the same props values it should always return the same user interface and so that's the main idea of pure functions in react so given the same props or state a component will always return the same content or the same UI that gets rendered on the page another aspect of having pure functions in react is that rendering your component or running that component function will never affect any kind of outside system we talked previously and imagined a scenario where maybe our component every single time it rendered were to add an item to a list in a database this would be very blatantly not a pure function because every time it runs it adds a new item to a database which means we are very much affecting an outside system so that's just another important aspect of having pure functions in react that leads us very naturally to what is a side effect in react and what are some examples well really side effect is any code that affects or we could even say interacts with an outside system it's a little nuanced but even doing a get request to an API is considered a side effect even though we're not really making a change to that outside system simply interacting with the outside system makes it a side effect in the realm of react components some examples of this might include interacting with local storage anything dealing with an AP or making a connection like through web sockets one we hadn't really talked too much about was doing any kind of manual Dom manipulation all of these are services or systems that exist outside of react and so interacting with them inside of your components is considered a side effect in react so number three by contrast what is not considered a side effect in react and what are some examples well in this case it's really anything that react is in charge of some examples of which are maintaining State keeping the UI in sync with whatever data you're working with rendering Dom elements and certainly there's a lot of other things that react is in charge of but all of those would be considered not side effects in react all right number four this is kind of the meat of this quiz when does react run your use effect well it will always run your use effect code as soon as the component loads or let's say renders and more specifically it's when it renders for the first time this most commonly happens when you first refresh your page or launch your app and it gets loaded into the browser for the first time although it could also be if you were conditionally rendering something and it was not present on the page before but then some State value changes and it becomes present on the page that would be considered the first render for that component react will also run your use effect function every time a component renders assuming you have no dependencies array so on every rerender of the component assuming no dependencies array and maybe to answer this next one when will it not rerun the effect function well that's going to happen if between renders the values in the dependencies array have not changed and lastly how would you explain what the dependencies array is well spoken more literally it's the second parameter to the use effect function but more importantly it's a way for react to know whether or not it should rerun the effect function I know it probably feels like I'm beating a dead horse with this use effect thing the reason I do this is because I do find that use effect tends to be the most confusing Topic in react not only for beginners but is widely misunderstood by even seasoned veterans in react I really want my students of this react course to come away from the course having a pretty solid understanding of use effect when to use it when not to use it and so we are going to have a short series of challenges that will do to help us really drill in use effect as well as another aspect of use effect that we have yet to learn along the way we're also finally going to come back to our meme generator so we can apply what we've learned regarding use effect to that app all right in order to get our repetitions in the first part of your challenge is to write our use effect from scratch I want you to fetch the data from the URL that is right here and save it in the Star Wars data State while you're doing this make sure you don't get stuck in an infinite rendering Loop like we did before go ahead and get started on the first part of this challenge I'm going to copy this URL and then just get rid of this challenge text and in its place we will call react. use effect I'll put a callback function as my first parameter and before I forget I'm going to put my second parameter as an empty dependencies array we'll revisit this and determine whether or not we need to add anything to that dependencies array what I want to do is fetch the URL that I copied we'll say then we'll get the response and we'll pull the JavaScript object out of that and then we will take the data that we get and we will set Star Wars data with that data now before I hit save I want to think to myself anytime I'm creating an effect what does this effect rely on are there any values that I need to make sure I include in my dependencies array so that if that value were to change I might need to fetch new data or do do some other kind of interaction with an external system and in this case no none of the values that I'm using inside of my fetch request rely on anything outside I just want to get the data that lives at this URL so by putting an empty array essentially it's like saying I just want you to do this fetch request the first time you mount and then you won't have to do this fetch request again later we'll hit save we start with an empty object very briefly and then the data comes in and we fill it in with the data from the Star Wars API okay that should have just been repetition there the next challenge we do will expand upon this a little bit more okay I've made a couple really small changes here first of all I'm beginning my count value at one and secondly I've changed the text of the button to say get next character notice that the URL on the Star Wars API says SLP people SL1 well this SL1 is the ID of a character in the Star Wars database and if I were to do two or three or four or five I would get new characters being return to me through my API request so what I want you to do is to combine the count value which has up until now been kind of a silly way just for us to trigger renders and make it so that when we click the get next character button it will change this one to a two or a three or a four whatever the count currently is and get new data for that new character while you're doing this remember to consider your dependencies array what may or may not need to be in there all right go ahead and give this challenge Your Best Shot well the first thing we want to do is not have this one be hardcoded so I'm going to use a template string and simply replace my one with some interpolated value of the count I did change this from a zero to a one because I don't believe there's a character with an ID of zero so let me hit save and we should see that okay we're still getting Luke Skywalker because this was set to a one if I instead were to hardcode the initial value for my count state to a two and hit save we should get yes a new character C3PO okay well we don't want to start at two let's start at one and I'll hit save before I make any kind of change to the dependencies array and let's go ahead and click get next character okay we see that the count is two but our data did not update and that's because our use effect doesn't know that it should be watching for changes to the count value in order to determine if this function should run again but we actually are depending on the count value now before we weren't but now it does matter if count changes we need this effect to run again so that we can accurately reflect the new information on the screen so in my dependencies array I'm going to add my count value we'll hit save we get Luke Skywalker and I'll click get next character and there it is we get C3PO we can go to the next one R2-D2 Darth Vader Leo Orana and so forth I really hope this hasn't been Overkill and I hope that use effect is at least starting to become clear if it hasn't clicked quite yet the more you use it and the more honestly bugs that you find with use effect the more solid your understanding of it will be as I mentioned we do still have some more to learn about with use effect but it's been so long since we have seen our meme generator project that I think we should go back to that apply what we've learned and honestly I think once we have done that we'll mostly be done with that project it was a pretty quick one so let's jump back into the meme generator with a challenge okay everything that we've been learning about use effect has led to this moment the way that we are going to structure this app is that as soon as the app loads we're going to make a call to the image flip API and I've included a screenshot of the documentation as well as a link you can click this screenshot to go to this link and you'll need this in order to complete the challenge that we have so the way that this app is going to work is as soon as our app loads it should make an API call to the image flip API and it will get an array of memes so it's not going to be that when the user clicks get a new meme image that it makes an API call but instead when the app loads it will get I think it's like a 100 memes then clicking the get a new meme image button will simply randomly choose one of the items from that original array of 100 memes that we got when the app first loaded the only reason that we're doing it this way is because I don't think that the image flip API has an endpoint to just get a Rand random meme image at least not one that's free so this will work for us for now and your challenge is to write the code that gets an array of memes from the image flip API as soon as the component renders for the first time again you'll need to check the image flip documentation in fact I'm going to leave this up for just a second so you have a chance to click here and when you get there you'll find the correct URL that you'll need to call in order to get that array of memes once you've gotten the array of memes back you'll need to save it to state so that we can access it from the opponent and react at this point I don't need you to worry about this get a new meme image button and I do want to give you some fair warning if you're tempted to use an async await function I'm going to ask you not to do that but instead to use then in order to resolve the promises that come back from Fetch we're going to learn why after this challenge all right your time to shine get started on this challenge to get the array of memes from the image flip API well since we need to kick off this request as soon as the component loads this would be a great time for us to use use effect this is an example of a side effect in react because we want to synchronize our local state from within this main component with an outside system which is the data that lives at the image flip API so I've imported use effect from react and I can call use effect here the first parameter is a function and because it's the more common way you'll see it I'm going to use an inline Arrow function and before we write this code I'm going to immediately start thinking about the dependencies array that I need to include here so what does our side effect of fetching data from the API depend on in order to make sure that it is correctly syncing the data from the image flip API with our internal State well in our case it doesn't rely on anything it doesn't depend on anything in order for that sync to happen correctly in other words there isn't any local state that if it were changed we would need to go refetch data so that it was correct in our we're simply getting a list of 100 memes and we're going to be using that list for our app so I want to make sure I include the dependencies array because I don't want this fetch request to happen every single time State changes and the component rerenders which remember happens every time we type in the input boxes here so I need to make sure I include this and effectively this is like saying I only want you to run the side effect one time when the component first mounts all right so what do we want to do we want to fetch and if we go to the documentation we can see there is an endpoint called getor memes and we can find the url there and so I'm going to paste it in it's just this one for the api. image flip.com sget memes and I need a closing quotation mark there and as I mentioned for now we are just going to resolve this with a then chain we get a response back from Fetch and we will need to call res. Json that's going to parse the Json body that we get from making this API call into JavaScript and we can access that with data or this is just a parameter you can call it whatever you want let's go ahead and console log this data okay we'll hit save I'll open up my console and perfect it looks like we get the data correctly if we look closely the data that comes back is an object it has a success property and I guess confusingly because we chose to call this data it has a data property which is an object that has a memes array and so that's how we need to dig into this response data to access the array of memes so again I guess kind of confusingly it's data. dat. memes by the way quick side note when I hit save it's refreshing our app which is kicking off yet another fetch request however refreshing your browser is something completely different than just changing State locally there's a difference between clicking refresh which reruns all of the code from react and changing state where react simply determines what needs to reender to the page but doesn't refresh your browser so that's just why hitting save and refreshing is causing the fetch request to run again and this time it looks like in the console we accurately got the array of memes if I scroll down here it's uh it's pretty long in fact it's long enough that it doesn't even show everything here in scrimba by the way if you're following along here in scrimba you can open your developer tools and anything that we conso log here will also conso log in your developer tools so that can be a good way to look into more complex items that we're console logging like this array here okay well we don't want to console log it we want to put it in state and that state does not exist so we're going to create a new one maybe we'll call this let's call it all memes and we'll pull in set all memes is equal to use State and this is going to be an array so I'm just going to initialize it as an empty array and then instead of console logging we'll call set all memes and yeah we want to set this array in state let's close our console since we're not console logging anymore we can get rid of our challenge text and actually I'm going to keep this hint here for now because we're going to talk about that in a second I can hit save it's not going to be very clear that this is actually working but I trust that set all memes is working the way it's supposed to work so why did I give you this hint that says not to try and use an async awa function if you're familiar with async AWA it might have been tempting to say well I want to use await for resolving these promises and so I want to make this function an async function so I can use the await keyword and make this code a little bit tidier if you're not quite as familiar it allows you to do something like this where you say well the response is equal to await the finishing of this promise and in this case response would also be a promise so we can say const data equals await res. Json and then we can simply set all memes to data. out memes like this this is quite a bit tidier I personally like using async functions however when you're using use effect you can never make this function an async function so before I screw everything up let me get rid of all this and in the next couple lessons we are going to talk a little bit more about use effect because there is a really important aspect of use effect that we have not yet had a chance to cover and understanding it is going to explain why we can't make this into an async function and what we can do to work around on that limitation so once you've had a chance to make sure that what we've done here makes sense I will see you in the next lesson we'll start this one off with a pretty simple challenge just to get your fingers typen on the keyboard and make sure you're awake we have this very simple app that has a button with the text of toggle window tracker and then we have a window tracker component notice that the button isn't currently set up to do anything that's going to be your challenge over in the window tracker component right now is just displaying this H1 that says window width and then it displays the window width at the time that it was rendered we'll notice that if we change our window width the display doesn't actually update but if I were to refresh we would get a new value of 494 here we're going to address this a little bit later for now though we can just focus on this first part of the challenge the first thing I want you to do is to create new state called show and default it to true then I want you to make it so that when you click the button it will toggle that show value and thirdly you should make it so that you only display this window tracker component if show is set to true I'll hand it over to you now to work on this challenge all right let's go ahead and create some State we'll say react. use State and I'm already seeing I'm going to have to import react from react in order to do that react. use state is going to give us some values back so we'll say show and set show is equal to react. State and we'll default it to true all right and then we need a function so that it will toggle it I could either do this in line with my button or my personal preference is to make a named function out here so I'll say function toggle we'll call set show it will look at the previous value of show and just return the opposite about as simple of a set State function you can have I'll add the onclick event to my button that calls toggle and lastly I need to conditionally render my window tracker so that it will only display if show is true so I'll go ahead and use the double emper sand method let's clean up our challenge text hit save and toggle window tracker okay perfect now let's take a look at something if I go to window tracker remember that this window. inner width is being calculated as soon as this component mounts to the page which in our case will happen as soon as we refresh the browser so I refresh we're at 418 if I resize this a little bit and refresh it recalculates we're down to 390 however I also can toggle my window tracker off change my window size and toggle it back on and we'll see that we're at 470 and actually I don't have to toggle it off first I can resize it we'll notice that the 470 doesn't change but if I toggle it off and then on we get the new value so why exactly is it doing that well when I toggle it off it's being completely removed from the page I'm not just hiding it from View and CSS or anything it's actually getting removed from the document itself and so when I put it back on the page this window. inner width is being evaluated again and the new inner width of my window is being displayed however we can do better than this if we want this number to display more in a live fashion while I'm updating the width of the window what we can do is listen for a dedicated resize event on the window itself and then add some state to our window tracker and update that state with the window. inner width every time the window is resized or rather every time the window resize event triggers by updating our state on our window tracker we can have react rerender this component and give us a live view of what the current window inner width is however because I need to run this event listener on the window itself I don't have a dedicated on resize event like we do with other Dom event listeners like we have been using th far so in order to add this resize event listener on the window I'm going to have to do some more manual imperative Dom manipulation and because I'm going to be interacting with a system outside of react Itself by trying to interact with the window of the browser I want you to think for a second what tool does react give me so that I can interact with those outside systems and sync the internal State and react with it that's right it is use effect so I can go ahead and use react. use effect I'll put my callback function inside here and when we try to think about our dependencies array one thing that can be really tempting is to try and look at window. inner width and say well anytime window.in width changes then I want to rerun my effect to synchronize window.in width with the state that we're going to set up in the future however something that's important to remember is that window. innerwidth is actually a static value right now it's 388 so this would be kind of like me putting in 388 as a hard-coded value here and then we have to remember that when I resize my window I'm not telling react to render anything I'm not changing state or doing anything like that at least not yet so as tempting as it might seem putting the window.in width in there isn't going to be the solution here so let me go ahead and get rid of that so instead of that we are going to add our event listener on top of the window so I'll call window window. addevent listener and the event that I can listen for is actually called resize and we'll pass a call back function that will run anytime the resize event happens and for now let's just go ahead and console log resized all right let's hit save I'll start resizing and look at that we get our console log running every pixel I think essentially that the window gets resized all right well the next step is something that I think you should be able to do pretty easily by now so I will type this out as a challenge all right here's your challenge first of all I want you to create some State called windowwidth and default it to the window.in width as its initial value then whenever the window width changes you should update that state to the new window.in width and then down here below instead of displaying window.in width you should display the new state that you created so that it updates every time the window width changes in the end you can see what we're doing is we're interacting with an outside system by adding a manual ad event listener to our Dom and then syncing our local state to the source of Truth which is the outside system that we're grabbing the window. inner width from by syncing internal state with it we'll be able to actually display to the user the value from that external system or the window in this case all right it's your time to shine go ahead and get started on this challenge okay let's call react. use State and I'll create cre the variables that I'm going to save this as this will be my window width and we'll call it set window width we'll initialize this to the window. inner width as the initial value then instead of console logging resized I'll call set window width and in this case I don't really care what the previous value is I can simply reset it to whatever the current window.in width is when this event was called then lastly I setting window width and state but I'm not actually using it anywhere so I will replace window. inner width with the state value of window width let's clean up our challenge text hit save and we'll try resizing the browser and look at that our window width is accurately reflecting on the page for the user to see well now let's take a look at a little at a little bug we have remember our window tracker component is only displaying if the parent great job on these challenges unfortunately I have some bad news and that is that we have a bit of a bug in this in in our code and the bug exists over in our window tracker but because this lesson has gotten a little bit long we are going to talk about the bug and what the main fix is for it in the next lesson we have a pretty sneaky bug that lives in our window tracker component right now and it's not immediately apparent what the problem is using the app makes it seem like everything is working just fine we get our window width updating on the page we can toggle it on and off if it's off we can resize and it doesn't look like anything's happening so what's the problem here well we can highlight it if we were to add a console log back into our resize event let's just say resized I'll hit refresh if I resize it I'm going to try and just resize it one little section I think it'll maybe go by two pixels okay so we got a single console log running well let me toggle off my window tracker I'll do a resize we'll do a single Pixel again okay it's still resizing even though my window tracker component doesn't live on the screen okay well what happens if I toggle this back on and off a bunch of times and then try to resize the browser right now we have two resized in the console I'm going to go just a single Pixel here here and take a look at that it looks like we got seven new resized console logs showing up just by doing one resize event so why the heck is this happening well remember use effect gives us a chance inside of react to interact with or sync state with some kind of external system in this case when we're adding an event listener to our window object this is happening outside of react I'm registering an event listener with the browser when I toggle the window tracker off I'm not giving any kind of instruction to the browser to say hey I'm done with that event listener you don't need to listen anymore when I toggle the window tracker back on it's remounting the window tracker component and in the first time that it mounts it's adding another event listener kind of a silly analogy I came up with I imagine myself walking into a store asking a store employee if they have I don't know a certain item in stock by doing so that employee has to go maybe back into a warehouse to check to see if they have it in stock and in the meantime if I just kind of abandon my cart and leave the store at no point did I tell the worker that hey I actually don't need you to do that work anymore and kind of to stretch the analogy a little bit thin when we toggled our window tracker on and off a bunch of times it's kind of like me going from one employee to the next asking them to go do a task for me and then just kind of leaving them and not needing them to complete their task because we're creating a side effect in react it's really important that if we reach a point where we don't need to inter interact with that outside system anymore like for example if we're toggling off our window tracker then it's really important that we clean up any of the side effects that we have created in this case we're adding an event listener it's going to be important that we remove the event listener if instead on the mounting of our component we had created a websocket connection with a server then it would be important if we unmount that component to disconnect that websocket connection fortunately in react this is a pretty easy task Remember When when we created our use effect we passed a callback function as the first parameter to use effect but as it stands we're not currently returning anything from this function so you might be wondering well what does react do with the value that we return from the function that we passed to use effect and as it turns out what we can optionally return from a use effect is a function in fact just to make it abundantly clear in the syntax I'm going to use a function declaration like this so behind the scenes react is going to call the function that we gave it and it's going to save as a variable the function that we return from our use effect callback function and when this component gets unmounted and react determines that it's time to potentially clean up any of the side effects that we have created in our use effect it will take the function that we give to it and it will just run the code it doesn't know what's in that code so it's up to us to make sure that we clean up any of the side effects that we created in the first part of our function with the ad event listener method there is sort of a sister method called remove event listener and in order to make that work I have to pass it the exact same function that I used when I was setting it up so in order for that to make sense I'm going to have to move that function into its own named function and let's give it a name maybe watch window width I can pass this named function to my ad event listener so that's working again and then in my cleanup function from my use effect I need to call window remove event listener and I'm going to remove the resize event listener that we created and need to pass my watch window withd function so that it knows which of the functions it needs to remove Let's see we still have our console login here so we should be able to test to see if this is working I'll hit refresh let's resize just to make sure we're working okay okay we got four of those that's cuz I moved it a few times if I go really slow I can get it to do one at a time let's clear that out I'll turn off my window tracker and we'll try resizing okay we're not getting our console log I'll also kind of turn it on and off a bunch of times and now it's on let's try to resize it just by a little bit and sure enough we only get the console log running once so as a recap because we have an empty array here we are just calling this use Effect one time when the component first mounts to the page when we do that we're setting up an event listener for the resize event on the window object and it's going to run this function if the resize event ever happened then we're returning our cleanup function which says if this component ever unmounts just run whatever code I put inside of this function so that I can be sure I don't have any of these side effects just kind of floating around inside my browser so as long as my component is on the page this event will work just as we might expect as soon as it leaves the page react runs our function which removes the event listener and therefore I no longer get my resize console running in fact one last thing that we can do just to see for sure that this is happening is if I add a console log inside of my cleanup function saying cleaning up let me hit save we can trigger the resize event like this okay we get resized and then when I toggle it off I get cleaning up so one final recap before we move on use effect allows us to interact with outside systems and potentially have side effects inside of our react code which normally should be side effect less it takes two parameters the first one is the effect function and the second one is the array of dependencies that determines when that effect function should run again at bare minimum if we include an empty array it will only run the first time this component mounts to the page because it depends on nothing else to rerun and at the most if we were to not include this array at all it would run on every single render of this component in fact we can delete this dependencies array and hit save will see that it's going to run both resized and cleaning up every single time this component renders you will pretty much always want to include a dependencies array and think very carefully about which values you want to be watching in order to trigger this effect again then lastly the Callback function as the first parameter to use effect is allowed to return a function which will clean up any of the side effects that you might have created inside of your use effect code returning this cleanup function is something you will want to always be aware of but it isn't something you always have to do it's relatively common to have your side effects not have anything that's lingering and needs to be cleaned up so just know that it's here as a tool for you to use if you need it but it's not something that you absolutely have to have to correctly write a use effect as always if you need to go through the content that we've been talking about with use effect that's completely okay it is what I have found to be one of the most confusing topics not just for beginners in react but for even seasoned react veterans use effect is great as a tool whenever you absolutely need it to kind of have that escape hatch from the react ecosystem and the react functional programming Paradigm but it is something that can be commonly abused for those who don't really understand what it's for or what the common workarounds are for it with practice I know that you are going to be an expert when it comes to understanding effects in react we're actually going to have a chance to apply what we just learned about use effect and the cleanup function to our Chef Cloud app from the last section but before we find ourselves juggling too many things I want to tie a nice little bow on our meme generator because currently our get a new meme image button doesn't work we're saving the array of all memes in state but what we need to do now is randomly choose one of those meme images when the button gets clicked this is going to be more of a quick algorithmic challenge rather than dealing with any side effects but I really want to finish off this app so we can move on from it so let me type out a challenge for you all right your challenge is to get a random image from the array of all memes when the user clicks this get a new meme image button once you have gotten a random image from the array make sure that you write whatever code it is that you need to write so that the image you selected will display on the page as I've done a few times I'm being a little bit vague because I want you to think how that's going to work so go ahead and give this challenge Your Best Shot let's work in the same order that the user is going to be interacting with the page so down on our button see that's right here let's add an onclick event listener for a function we have not yet written we'll say maybe call it get meme image so let's go ahead and write this function just going to do that in place of the challenge text get M image and this is where it's kind of just an algorithmic challenge so what I can do is get a random number from Z to the length of the array we'll just say array. length then we will use that random number to get a random meme object from the array and then we will need to set State and that's the state of the current meme which is the object we're saving in state up here all right so let's get a random number we can just say const random number and honestly getting a random number is something I sometimes have to look up but we can simply say math. floor math. random times all memes. length if you've never seen this before in JavaScript maybe just copy this line and paste it into chat GPT and have it explained it to you it's not too terribly difficult to understand but it's enough to know that this will get a random number between zero and the highest index in our all memes array which means we'll never try to index outside of the array so that was that step we want to use that random number to get a random Meme and I think I can just do this together we'll say maybe New Meme URL is equal to all memes at the index of random number and those meme images have a URL property you weren't like expected to know that per se but along the way of doing this challenge you probably wanted to console log the New Meme that you index into or console log all memes just to see what the structure of each one of those meme objects was and you at that point should have seen that there's a URL property okay and then we're going to set the state well we're setting the state of an object and we don't want to lose the top text or bottom text so I'm going to say set meme I need to know what the previous meme was and I'm going to return a new object that has all of the properties from the previous meme but changes the image URL to the New Meme URL this should be straightforward enough for you at this point in the course if not that's completely okay but it is probably a good indication that you need to do a little bit more studying and a little bit more practice before just kind of plowing ahead with the course okay let's test it out we'll hit save get a new meme image and awesome okay we got a new meme image and this is going to work with all of the images from that memes array again as I mentioned some of the memes don't just take a top text and bottom deck so it'll be a little bit hit or miss how funny these memes that you create are awesome we can mark the generator as completed I'm sure there's other things that you could decide to do with this project and as always feel free to do that play with this code add your own features and most importantly go to the scrimba Discord and share your awesome work okay I want to jump back for just a few short lessons to the chef Cloud project because now that we understand use effect there's a little but really nice feature that we can add to that project so once you've had a chance to say goodbye to the meme generator let's continue forward I wanted to go over a pretty truncated view into refs in react and the used ref hook I say it's really truncated because we're going to be going through it pretty quickly only because I have an improvement that I want to add to our Chef CLA app that will require us to use refs and actually this reminds me before we move on I was getting a little bit bugged that we had not moved some of our components that really should be in a components folder and really quick before we jump right into the slides I did make a couple really simple changes to our Chef Cloud app primarily I moved some of the components into a components folder I think before I maybe had the main component and the header component sitting outside in the project route but they felt a little more natural inside the components folder so I moved them there and then fixed the references that we had with our relative paths in each of those components that needed them just wanted to make sure I highlighted that before anyone got confused why it was looking a little different okay so what are refs in react and is use ref refs are fairly straightforward they are very similar to State except for two major things the first one is that you can mutate refs directly with props or with State we know that it needs to be immutable and the term immutable might not on its face make a lot of sense because you might be thinking well we do change State all the time that's how we trigger reenders and react but to split hairs when I'm talking about mutable I'm saying we're not saying something like okay here's my ingredient State and I'm going to push a new item to my list of ingredients this would be directly mutating State when we know that we're supposed to use the state Setter function behind the scenes react is not just setting our old ingredients array equal to something new or doing something like push it's following a more appropriate functional programming Paradigm where behind the scenes it's replacing the old version of state with the new version of state and then kind of queuing it up to render the page so let me get rid of this line and refs on the other hand are things that we can mutate directly we can just set them equal to something different and maybe more importantly for US changing a ref doesn't cause a render and react for reasons that might not be immediately apparent refs tend to commonly be used for accessing Dom nodes without needing to assign IDs to them and Run Dom manipulation commands like document. get element by ID or query selector refs give us a way to access those Domino creating a ref in combination with using a ref prop which we're going to see in just a minute give us a chance to do some of those manual dumb manipulation tasks and again the reason for this might not be immediately apparent but that's okay we're going to get to it I did mention this is a very highle overview of refs I do dive a little bit more deeply into refs in my Advanced react course which is kind of the natural progression after this free intro to react course where in one of the sections I cover refs in a little bit more detail and give you a little bit more practice with them all right why am I talking about all this in our Chef CLA app we are getting our recipe we can click the get a recipe button and if we look very carefully we'll see that the scroll bar when the AI finally gets back to us the scroll bar on the app will appear and we can scroll down and see the recipe however as far as the user experience goes it's not that great we don't really give a clear indication to the user that the recipe has finally loaded and unless their page just happens to be a little bit longer like we see here in this case it's a little more obvious they can click get a recipe and what used to be blank will then become populated with the recipe once it's loaded but I don't know that we want to bank on this because their browser might be a little bit shorter like this so what can we do well there is a domod property we would just I'm putting Dom node here as a placeholder called scroll into view and as the name suggests when you select a Dom node and you call scroll into view on it the browser will automatically jump down to that section so if our Dom node were this entire recipe section whenever scroll into view is called the browser will jump down so that that sits at the top of our view and actually for us that might be a little more jarring we might want to have this section be what we scroll into view just so that it's a clear transition between where they see it here at the bottom and they'll still be able to see it here at the top so the trick is how do I get access to this Dom node well in vanilla JavaScript all we would do is we would add an ID to one of our elements and then we would call a get element by ID and that might be able to work for us just fine however react is really centered around having reusable components we haven't spent too much time talking about reusability that actually is another Topic in my Advanced react course that we spend quite a bit of time talking about we go really in depth on reusability in react but the point is if I were to reuse this component or render my main component for whatever reason multiple times I would end up with two elements that have the same ID on the page and if you know anything about HTML that's just a no no you're not supposed to do that so this is where refs come in refs give us a chance to access a Dom node so that we can call methods like scroll into view and they are easy enough to create when we use the use ref hook in react so I'll go ahead and create a new ref here since we are allowed to mutate our refs directly I won't need to do the same thing I did with use state where I'm given a state Setter function but instead I can just give my ref a name let's call it the recipe section because I'm going to be scrolling down to the recipe section and we set that equal to react. use ref kind of a standard practice if I am using my ref to set on a Dom node I'll initialize it as null and now that I've done that what I can do is take any element that I want to have access to the native domod of and I can set a special ref property now I don't actually want to put it on the input but I'm just using this as an example ref is a dedicated property in react it's set aside for the use of setting these refs on Dom nodes and so if I did want it on my input I would say ref equals curly braces recipe section just like that now let's get it off this input this isn't actually where we want it let's think where is it that we do want our ref to exist remember the purpose of the ref is so that we can call scroll into view on it when the recipe loads so that the browser will automatically scroll down and I think we decided that this ready for a recipe sort of call to action would be a good place to scroll down to so where does this live I think we ended up putting this inside of our ingredients list so if we go to our ingredients list sure enough here's this section and we have this div right here that says ready for a recipe that's this div right here on the page so this is where I'm going to set my ref I'm going to say ref equals curly braces and we don't have access to this ref recipe section quite yet because it exists on the parent component that is rendering ingredients list so I want you to think how can we get access inside of this child component to the recipe section ref which currently only exists inside of our main component what mechanism do we have in react to get access to that if you said props then props to you that's correct so here is our ingredients list we can go ahead and say we're creating a new prop called ref now I don't want this to be confusing because I did just say that ref is a dedicated property in react it means something special but I probably should have qualified that it only means that if it's put on a lowercase regular react element kind of like how on a button lowercase b button I can say onclick and this is the actual event listener whereas if I'm working with a custom component like ingredients list if I say on click all I'm really doing is creating a new prop a custom prop that just so happens to be be spelled exactly the same as the native Dom property for onclick the same exact thing goes with ref so I'm going to set ref equal to recipe section that's the ref that we created up here above and this means that I can go to my ingredients list and we need to make sure yep we're receiving props and I'm going to be receiving this through props do ref because that was the name of the ref that we gave it in this case because we're working with the lowercase D div regular native Dom element or what will get turned into a native Dom element this ref does mean something special all right well this lesson is growing a little bit long so let's go ahead and do this I am first going to just console log recipe section so we can get a better idea of what this ref looks like and we're going to open our console because we need to look very closely at something I'll hit save down in our console we see that recipe section is an object that has a current property I'll be completely transparent here I'm not entirely sure why refs when they're created are always objects with a current property but that's just something you'll have to get used to the reason it says null is because that's what we initialize it here if I were to instead say this is a string and hit save we can see now it's an object with a current property and its value is the string that we initialized it with so that's all that's happening down there let's change this back to null I'll hit save and now I'll click get a recipe we'll wait for the API to return its response and now take a look at this our recipe section ref is now an object with a current property but the value of that current property is a div now scrimba console is representing this almost like a jsx element div but it's really representing a native Dom element for the div where we set our ref inside of our ingredients list right here okay this lesson has gotten quite long I do have a challenge for you and it's going to hearken back to use effect so once you feel comfortable with what we've done here again I know it's been kind of a whirlwind we will jump right into that and actually Implement our scroll into view feature one thing I realized I might need to clarify is why when we first render our page the recipe section ref is set to null or the object with the current property is set to null in my case here because I am console logging it immediately after it's created on line 11 it's still set to null and react hasn't yet had a chance to render the elements on the page as soon as the elements on the page get rendered ingredients list gets rendered which then includes this section down here where the ref is being stored at that point the ref is then immediately stored as this div but we're just not getting a chance to see that because we are conso logging it before anything has been rendered to the page clicking the get a recipe button when the recipe response comes back it sets State and it reeners the component which then reruns our console log line and we get to see even though it's a little bit delayed the fact that the ref has been accurately set on that div in fact I think we could also see that if we just add another ingredient here I'll hit enter and yeah sure enough in the console we can see that the recipe ref is set to the div just wanted to clear that up just in case anyone was confused why it was initializing as null okay let's apply refs so that we can add the feature that we want to add where the page will scroll down so the problem that we have is that we want to scroll down to this ready for a recipe section only after the claw recipe section is rendered to the page or in other words when recipe as we're initializing it is not an empty string anymore maybe keeping in mind that that this is a section all about use effect I'm going to put a pause in here and give you a chance to think from a highle architecting overview what might need to happen in order to solve this problem or add this feature if we think about it we are hoping to create a bit of a side effect because we want to scroll the browser down which involves doing a manual Dom node method call and we want to synchronize that action or that side effect with a value that react is holding in state with recipe and so this brings us to your challenge I want you to add a new side effect that calls recipe section. current. scroll into view but it should only do this if the recipe is not an empty string and if recipes section. current is not null that's an important thing we'd want to make sure we can't scroll it into view if if recipes section. current is not the div Dom node but is null we're going to get an error if we call scroll into view so we need to make sure of that as well the important part of this challenge is I want you to think carefully about what values you would want to include in your dependencies array what will this side effect actually depend on in order to perform its action correctly once again I'm being a little bit vague I want you to put on your thinking cap and give this challenge your best shot so go ahead and start working on this challenge all right well to create a new effect we're going to call react. use effect alternatively of course we could just destructure that from the react Library up above use effect takes two parameters we have a function and a dependencies array let's worry about the dependencies array next we'll first work on this function so the clue to the code we're going to have here is written in the challenge text if the recipe is not an empty string so we'll need to add a conditional here if the recipe does not equal an empty string we could theoretically also just say if recipe is a truthy value I think I'll opt to be a little more explicit and specifically say if it's not an empty string and recipe section. current does not equal null once again I probably could just say and recip section. current but we'll stick with being explicit here if those things are true then I know that I want to call recipe section. current. scroll into view well let's think carefully about what we might want to include in the dependencies array what would happen if we put nothing in the dependencies array and we just left it as an empty array like this in fact I'm actually going to put in a pause here so you have to so you take a second to think about that if our side effect depends on nothing which is what it means to have an empty array here then this use effect would run when the first time when the component first mounts and when the component first mounts recipe is equal to an empty string and so our scroll into view would not get called this is exactly what we would hope that it would do we don't want it to try and scroll down to it right at the beginning when the component is first mounted but because we're telling it that it depends on no external values then it's never going to call this use effect function again so an empty array is incorrect inside of our dependencies array we want react to rerun this side effect anytime that recipe changes if the state value for recipe changes we want it to rerun this effect to determine if it's time to call scroll into view so let's clean up this challenge text and we'll hit save and give this a shot I'm going to click get a recipe and check it out it scrolled us into view that's awesome now one thing I'm sure that you noticed is that it did it pretty abruptly it just kind of jumped down the page immediately and if you are already familiar with the scroll interview method you might be shouting at your screen wait there's a better way to do this unfortunately there's a small limitation and this lesson has gotten a little bit long already so we're going to talk about that bug in the next lesson and see a little bit of a work around for it but in the meantime if this use effect that you wrote here made sense to you then Kudos that represents a big leap in your understanding of side effects and react and if it didn't that's okay having a solid understanding of use effect took me quite a while to grasp so it's definitely nothing to be ashamed of but but it does give you an indication that it might be time to go back in the course and maybe review some of the lessons that we've had previously once you're ready we are going to add some code that will do a little bit more of a smooth transition down to this ready for recipe section just to make the user experience a little bit better in the previous lesson we got our scroll into view to work although we did notice that it's a little bit abrupt the user experience isn't as great as it could be if instead of immediately jumping down the page if it were to smoothly scroll down the page to this ready for recipe section and the reason that it's jumping immediately is because that's just the default behavior for the scroll into view method but as I mentioned if you've used scroll into view before you might be saying hey there is a way to do this and that's by adding a configuration object where you can say the behavior should be smooth and if you happen to be following Along on your local machine then you could put this into your code and it would just work correctly however for those of you that are following along here in the scrimba interface there is a small problem and that is that well Behavior smooth just doesn't work let me show you what I mean we'll click get a recipe and when the response came back we can see it might have scrolled like a pixel or two down the page but it simply didn't scroll smoothly down to the section that we wanted it to and the reason for it is a little bit interesting it's actually not a bug in scrimba it's a known bug in at least Chromebase browsers that use an iframe for whatever reason if you have an iframe that you're trying to run scroll into view with a behavior of smooth on it just doesn't work and our scrimba environment is a little bit unique because we do have an iframe that displays our mini browser so this Behavior smooth isn't going to work inside of scriba but in your local environment and pretty much everywhere else unless you're using an iframe it should work just fine for you I did find a little bit of a workaround I'm not going to really dive deep into the code although I'm going to paste it here for you to have a chance to play with and just so we can see that it's working so right here it's simply figuring out exactly where on the page or in the viewable area of the browser that it should scroll down to and then it's using window. scroll with behavior smooth and for whatever reason this works just fine inside of a mini browser so let me hit save we'll go ahead and click get a recipe and sure enough we got a nice smooth scroll down to where we wanted it to go I'm going to leave this line of code commented out just so if you refer to this you can know that this in pretty much every other environment is going to work just fine for you but I'll leave my real code here so that we get the behavior that we want great work making it this far through this section I know that side effects can be a little bit hard to grasp and I know that from going on about 8 years of teaching react at this point hopefully the way that I presented it was able to demystify what side effects are and how and when to use use effect and react if it does feel a little bit hazy or cloudy to you still that's completely okay use this as an opportunity to join the scrimba Discord if you haven't already and start asking questions there see if any of our amazing community members can help clarify for you when and how you should be using use effect in react and believe it or not this essentially wraps up the scope of all the topics that I wanted to talk about in this intro to react course however because we're here on scrimba and because we have such a strong emphasis on getting your hands on the code for the remaining of this course we are going to be in fullon Project mode we have some awesome things coming up so even though we're done with these topics the real benefit of this course is going to be with getting your hands on the code and practicing as much as you can building projects let's do a quick recap of what we've learned in this section and then we are going to dive head first into some awesome project building experiences wow can you even believe how far we have come in this course it truly is mind-blowing especially if you look back at some of the topics we were covering in the first section of the course your understanding and capabilities in react have truly expanded we have come to the end of the new instruction in this course that said some of the most important tasks I have yet to give you in the upcoming sections before we jump straight into those let's do a quick recap of what we have learned in this last section we started off with some quick lessons about controlled components since we wanted to update our state on every single keystroke of our input boxes we had to make them into controlled components react 19 has introduced new ways to handle forms which are quite a bit more intuitive and in line with the native web platform but there are certain circumstances where controlled components can still be important to know we took a quick dip into Theory as we talked about functional programming in react and how reacts adopted the Paradigm that it currently has which helped us understand the whole concept of side effects in the first place then we looked into how we can fetch data with react not necessarily when a user interacts with our page to request that data but when the app loads for the first time time and that led us into understanding the actual application or syntax of applying side effects in our react app you're about to dive into some really exciting projects and so this would be a great time to express your excitement about finishing section 4 over in the scrimba Discord communities today I did Channel clicking the screenshot will take you directly there where you can celebrate with the other people who are also completing great tasks today all right I can hardly wait let's jump into some Project work the remainder of this course is going to be two back-to-back Capstone projects starting with this first one which is a game called tenes now let me be completely clear ask anybody in the field and they will very frequently tell you that project building is the way to learn something new there is no way to get better at react than to have your hands on the keyboard practicing react as much as possible so although we won't necessarily be learning much new content in these remaining two sections they do represent the most important parts of this entire course do not under any circumstances skip these Capstone projects or you will only be shorting your own education really I don't mean to go on too big of a guilt trip but this is where the real learning happens if you're not familiar with the game of tenes it's a game that's a little bit more geared towards children as it deals with rolling a bunch of dice the way that you play and there's a gif here that will kind of and show you how it works you roll your dice you try to get all 10 dice to have the same number on top and so in our game which will just move over here to the live version I can click the dice that I want to hold when I roll it will roll all the dice except for the ones that I held and let's see how lucky I can get here we're just going with the fours there's another one another one and this is usually where I start to get pretty unlucky in my roles okay there's one one more and okay we have our last four here what's really fun about this app and you won't be able to see it here in the recording but if you refresh here and play through the game you'll see that when you click the last number and all the numbers are the same then a really fun confetti drop starts from the top of the browser window the button changes to new game and clicking it will of course start a new game feel free to look through the code ahead of time if you kind of want to get a lay of the land and see all of the fun things that we're going to be working on and keep in mind that this project is going to be one where I am simply giving you a challenge and then expecting you to work through the challenge even if it stretches your capabilities and understanding a bit and then we go through it together to make sure that we're on the same page well what are we waiting for let's jump right into the first challenge here we are starting from an almost completely blank canvas the only things that we have are our react and react Dom dependencies installed our index that HTML is Bare Bones as it usually is in a react app although I did include the inter font from Google fonts so you don't have to worry about that and our CSS is very sparse just some very basic Styles so that we can start from a good place hopefully this feels good to you I know it's probably a little daunting it's been a while since we have set up a react app completely from scratch but that's exactly why we're doing it so the challenge this time is just to start up a brand new react app some notes on how I'd like it structured I want you you to create a separate app component that will be in a separate file then here in the index. jsx file I want you to import and render that app component inside the contents of the app component just render a main element it doesn't have to have anything inside of it but then what you'll do is just style everything so that it looks like this very beginning State here where we have this blue background color and the main element which is the white box here with the rounded Corners click on the screenshot here to go directly to the figma file where you can get all of the specific Styles including the colors and how much of a rounded corner there is and everything like that all right let's Jump Right In go ahead and spin up our brand new react app if you had to go back to some of the earlier lessons and see how we scaffold a new app and react believe me it's completely okay in fact the recommended way of spinning up a new react app is by using vit and vit will bootstrap all of this beginning stuff for you so truly don't be fretting too much if you don't remember how to do these beginning lines of code that said we are going to go through this together I need to import react Dom from react-dom and I'm going to call react Dom to create a new root element and we have to tell it where that root is going to exist so not a string we need document. getet element by ID with the ID of root that's going to reach into our index.html and find the div with the ID of root right here and this will serve as the root for our entire react app everything will get stuffed right here inside of this div I'm just going to chain on top of the create root the render method and I'm going to have it render the app component that I have not yet created but for now let's pretend we have created it we'll import app from slapp and let's go ahead and create that file app.jsx I honestly can't remember if I taught this earlier in the course but whenever I'm creating a new file that is intended to be a react component best practice is to give a capital letter to the file name so since app.jsx is going to export default function app this is going to be my app component I want to make sure that the file name starts with a capital letter okay this app component just needs to return a main element for now so that's what we'll put in and just to make sure I can see it let's go ahead and type something here we'll cross our finger and hit save and oh we got an error let's see react on.cc create root is not a function and ah yes I missed this critical part here this has to come from the client library in reactdom okay good here we go type something here not too big of a bug that's okay okay let's spend the rest of our time doing some styling I can see from the design file inigma that I have this kind of dark blue background color so I'll set background color to the dark blue that I see in the design and then we will select our main element and give it the background color from the design as well it's kind of like a whitish color it's a little hard to see but underneath type something here we have that white box just to make it a little more visible let me give it a height for now we'll give it maybe let's say 400 pixels just to start out and I'll make my thing a little bit bigger here so we can see that bottom border let's actually start with 300 I'm going to be changing this in just a second so this shouldn't be too big of a deal and I need that blue border around everything I think I'll accomplish that with some padding let's go ahead and give this some padding of 20 pixels all right we need a border radius for the rounded Corners so we will add a border radius of 5 pixels and really quick let's address the issue on mobile sizes we see first of all this will just expand to as wide as we decide to go with our browser and we hardcoded this height of 300 pixels on here I think we can do a little bit better than this by adding some view height that allows the box to take up the entire view height but we'll also do some Max height stuff so that it doesn't get out of hand let me make this a little bit tall and just try to give this a height of 100 view height and well actually we're able to scroll here I think that has to do with our padding let's go ahead and move our 100 view height to the body We'll add a height of 100% to to the main element and then I'm actually going to change the display of the body to flex we'll use a flex direction of column and then we actually have a layer between our body element and our main element and that is a little bit tricky to find but remember we are stuffing our entire react app here inside of the div with the idea of root and so we need to make sure that that div will fill its entire parent container so I'm going to select the div with the idea of root and tell it that the height should be 1 100% okay we don't get a scroll bar let's see if we make this bigger okay we have that 20 pixel padding around everything and the box is resizing accordingly I think there's a point at which it's going to get way too big and so on this main element I'm going to give it a let's put it right here we'll call it a Max height of I don't know let's say 400 pixels maybe we'll do the same thing for a Max width and then I think I will make this float in the middle and actually what I'm controlling here is the div with the idea of root let's see if this works we'll just Center everything so I'll do justify content Center and align items Center and H this always kind of gets me I think because we are going multiple levels down between the body and our main element we just need to pass along some of these Styles so I need to make sure that my width is also 100% And I think I need to do that same thing with my main element and then we will actually move the max height and width to our div with the idea of root and yeah that looks like it might have done it our main element is a block level element so it should already be taking up 100% width of its parent container the only reason we had to add this to the div with the idea of root is because creating a flex box for its parent changes the display for its child the div with the idea of root for any of you who are much better at CSS than I am there might be a better way to do this I would be happy to hear about it in the Discord or you can reach out to me on X but for now I'm going to stick with this I'm also going to just resize this browser so that we don't have to think too much about it let's go over to app and remove the type something here hit save and it looks like we are in the same starting point that we're supposed to be in and listen I know that starting from a completely blank canvas can be a really challenging thing when you're first learning a new technology so don't feel bad if you were feeling a bit stuck it's also a really long time in this course since we have started a new react app from scratch so if that was a little bit of a struggle that's completely okay from here on though we are going to be having challenges that should be pretty doable for you at this point in the course so take it as just another sanity check if the upcoming challenges do represent too big of a challenge for you it's not something to feel bad about but it is a solid indication that you might need to go back and rework some of the practices and projects that we've done in the previous sections so without further Ado let's jump in and start adding some more content to our tenes game in this part of the challenge we are going to create the dice that actually show up on the page we're just going to have some hard-coded values for now so other than simply creating a component this is going to be a pretty CSS heavy challenge because this is a Capstone project I am going to ask that you do the CSS I know in the past I have said that we should just focus on react but but due to this project being intended to practice all of the skills that it takes to build new apps and react I do want you to do the CSS for this that said once you're done getting these dice kind of in the center of the page like this the rest of our CSS will be relatively simple in comparison I've also tried to give you some hints in the challenge text but we'll get there in just a second your challenge is to create a die component and yes D is the correct singular of dice unfortunately it will make the rest of this project sound a little bit violent but I promise I'm a benevolent actor here this is going to be a fun project your die component should take a value prop where it will take in whatever value it's going to display on the dice as a number and I don't know that I wrote it here but it should render a button with that value displayed then for now I want you to render 10 instances of this new die component we'll just render it manually so it'll be here actually 10 times where you'll pass in a value to each one one where the value is somewhere between 1 and six inclusive then I want you to add The Styling to the main element and the die component so that it looks like it does on the slide as a hint what I would recommend doing is creating a container around the 10 die components that you render and using a display of grid to get them evenly spaced in the two rows with five columns like you see here in the picture speaking of the picture just like in the other ones you can click on the screenshot to take you directly to the figma design file so you can find things like the code for this for this drop shadow or the or the font size or or whatever else you might need the design for so I'd recommend making a container so that you can get your grid evenly spaced with the dice and then turning the main element which is what we have as this white background into a flex box to make it easier to Center up vertically and horizontally the container for your dice I wrote both of those hints down here so you have access to them easily all right I know you've got this let's get started on this challenge I'll start by creating a new file called d. jsx a totally innocent version of D and then we will export default our function die we already know it's going to take props because well the challenge said for it to take props it's going to have a value prop and this should return a button because this is going to be clickable by our users we want to make sure that we use the button element so that we get all the free accessibility stuff that comes with the button element and what goes inside will be props Dov Val props Dov Val might seem like it's a little bit out of the blue and that's because we haven't rendered any die components let's go ahead and see I can get rid of this we'll import die from die I'm going to put this on its own line to start and we will just have a presentational div this is just going to be the container let's give it a class name and call it dice container and inside I can render 10 instances of my die component and I'll just pass in a value of one it's also okay if you chose to pass it in as a string I don't think it's going to matter too much for us at this point and then I will just copy and paste this 10 times I lost count 1 2 3 4 5 6 7 8 9 one more 10 and it's probably not going to be pretty but let's go ahead and refresh and sure enough we get our 10 Buton butons on the page awesome at this point I think we will mostly be over in the CSS so let's go over here and I guess we're already here in the main element so let's go ahead and change this to a display of flex I'll give it a flex direction of column and we will justify content Center and align items to the center okay nice that got all of our buttons just right there in the center of the page let's go ahead and select our dice container change this to a display of grid and I'll be completely honest here CSS grid is not something that I have a ton of experience in so I usually end up turning to chat GPT to help me come up with the styles that I end up putting in my grid let's go ahead and change our grid template so that we have two autosized columns so that's going to be Auto auto and then we want five one fraction unit rows and so I can use repeat five times of one fraction unit awesome we can give some spacing to this with a gap of 20 pixels and now let's work on our buttons a little bit so these will just be the buttons inside the dice container so I'm just going to select it like this and I'm just going to put down some of the CSS that I can find in the design so we have a height of 50 pixels a width of 50 pixels there's a pretty cool box shadow in the design so I can just copy be the value that I found there it's going to have a border radius of 10 pixels and it looks like we get some interesting default borders from the button so we'll just say border is none the button kind of has its own color and it's a little too similar to the background so we'll give it a background color of pure white and oh yeah that makes it stand out a lot better the font is pretty small let's give it a font size of let's try two rims oh that's really big let's try maybe 1.75 uh that's a little more manageable although I think we probably could bump up the font weight to bold oh yeah that's looking great buttons automatically have the text as centered but for whatever reason buttons do not automatically have a cursor of pointer so I'm going to add that you won't be able to see this in the recording but if you refresh the app and have your mouse over each of these buttons you'll get that familiar Mickey Mouse glove hand that indicates that it's clickable we're rendering all ones right now I think think one thing I have found is that buttons don't tend to inherit the font family from any parent elements although honestly I don't think we've set the font family here I'll do that later and we are going to be using the inter font and maybe we'll just include a sand serif as a backup and actually I said I'm going to do that later I'm just going to copy and paste it right now but we can see that if I didn't specifically put a font family on my buttons then for some reason it doesn't inherit the font family from the parent so we'll leave it in both places while we're doing that we should probably test all of the numbers so we're not just basing our decisions on all ones I'll go ahead and include two three four five and six and hit save and awesome yeah these are looking great and I dare say that we probably are pretty close to the design so I think we can call this one a win again yes that was a lot of CSS but also again this is fortunately the last of the major CSS challenges that we're going going to have at least in this project great work on this challenge next what we'll do is get rid of our 10 hardcoded die components and more programmatically generate a random list of 10 numbers so that's what's coming up next when we're faced with a slightly bigger challenge like generate 10 random dice components and display them to the screen sometimes it can be a little bit overwhelming a great practice to get into is to learn how to take those larger problems and break them down into smaller pieces so that you can solve each piece at a time in fact this is one of the key things that hiring managers and people giving Tech interviews are looking for they're looking for your ability to break down a problem into smaller pieces solve those individual pieces and put them together so that they create a solution to the entire problem so we are going to break up this challenge of getting 10 random dice elements on the page into two parts first I just want you to write a fun called all new Dice and actually you know what I'm going to on the flag decide to call this generate all new dice that returns an array of 10 random numbers between 1 to six inclusive for now you can just manually call this generate all new dice function and log the results to the console as with any algorithmic challenge there's more than one way to do this if you need help learning how to create a random number in JavaScript then a quick Google search or asking chat GPT should be helpful to you however because we're inside of learning environment here I highly recommend you don't simply copy and paste this challenge text to chat GPT and have it give you an answer that is only going to short your own learning and take away a perfect opportunity to think critically and how to solve this problem that said I don't expect you to have memorized how to generate a random number in JavaScript so just use your best judgment make sure that you're putting your effort into this so that you are not shorting your own education all right that's enough of that guilt trip go ahead and get started on this challenge all right let's write a function actually I'm going to do this inside my app component I'll create a function called generate all new Dice and even creating this function is something that we could break down into smaller parts let's say first we need to create a new array and it'll just be empty then we need to Loop 10 times since we're trying to create 10 numbers and inside that loop we're going to generate a random number between 1 and six and we will push that number to the array and outside the loop we will simply return the array okay let's solve it this way and then I think I'll show another way that you can solve this just to show you that there's more than one way to solve these kinds of problems we'll create a new array let's just call it new Dice and it'll be empty we need to Loop 10 times so we'll just use a regular C Style for loop I equal 0 I is less than 10 I ++ we'll say a random number is equal to and we can use math. random and actually we'll go math. floor math. random and if you're looking for a number between zero and some other number you can multiply this by six and then add one or we can simply say let's do math. ceiling instead of rounding down we're going to round up and that way our lowest number will be a one and we won't have to add one in the end so that's our random number and then we will simply say new dice dobush the random number and let me start clearing out some of these comments here and then all we have to do is return the array of new dice let's go ahead and console log a call to generate all new Dice and see what happens okay let's open our console and it looks like there's 10 numbers there they're all between 1 and six let's hit save again just to make sure yep that one's good that one's good okay I think we're pretty safe that our function is working like we want can clean up the challenge text just for fun I thought I would show another way that you can do this and it's actually the solution I think I'm just going to leave here so this was a very imperative way to do this another more functional programming approach would be for us to use some array methods what I can do is simply return a new array I don't tend to find myself using the new array Constructor very often unless I'm doing exactly what we're doing here the array Constructor can take how many items that array should have and arrays have a method called fill where we can just fill every item in the array with something that we want for example some throw away value like a zero this by itself isn't super helpful but we can now use a map method to look at every item in the array and put our math. sealing math. random I probably shouldn't have deleted this time six code so this will map over the new array with 10 items and actually let me show you this so if I get rid of this map and hit save we see we get our array with 10 zeros in it that's what's happening in these first two lines of code we map over that array and fill it and for every item in it we simply return a random number from 1 to six and okay looks like we are getting a working function once again one way isn't necessarily better than the other I don't know what the difference between the performance metrics would be in the way that we had it before and the way we have it now I kind of like this functional programming approach so I'm just going to leave it like this but it truly doesn't matter that much okay well let's move on to the next part of this challenge where instead of just generating a random array of numbers we turn that into new die components that way we can get rid of this manual die component repetition that we have here going on we created a function where we can create an array of 10 random numbers but next we need to find a way to move those 10 random numbers from just being here in memory and react to the page doing so requires us to create some state so that's your challenge to create some state that will hold our array of numbers you can just initialize that state by calling our generate all new dice function that way when the app loads for the first time it will call this generate all new dice function and just have those 10 random numbers ready to display then right here in the code I'm actually going to put a comment here that says map over dice here I want you to map over that array that's being held in state to create an array of die elements this says elements should say components and then render those in place of our manually written 10 die elements here remember to pass a value into them so it can correctly display the number from the array and state when you do this you'll probably run into that warning about having to have a unique key prop for each one of your items you can just ignore that warning for now we're going to change things up in a little bit to fix that warning okay you should be set with everything you need go ahead and work on this challenge all right let's go ahead and import use state from react and just right here at the top of the function we'll create some new States let's call it Dice and set Dice and then just right here at the top of the component we will create some new state we'll call it Dice and set dice is equal to use State and we will initialize it with the array that comes back from our generate all new dice function so we'll just give that a call then what we could do is just get rid of these 10 manual die components here and we could do our map right here and say dice. map and kind of do the logic there that's a completely legitimate way to do this however my personal preference is to create a separate variable inside the body of my function before the return where I can say something like dice elements and it just feels like a little bit of a better separation of logic for me I guess I'll just go ahead and render these dice elements since my cursor was already down there and we can say dice. map and for every number inside this array I can render a die component where the value is that number so this is where we can see if it works the dice on the page currently read 1 2 3 4 5 six and then four ones if I hit save it looks like we yep get a bunch of random numbers let's hit save again and awesome this is working great let's clean up some of our comments here just to keep things clean and as I mentioned we got this warning that says we need a unique key prop and we'll be fixing this in the future when we change our array from being an array of just plain numbers into an array of objects but that isn't quite what we're going to be working on next the next thing we'll do is include a button that allows the user to roll the dice without having to refresh the whole application the next challenge we have is to add a roll button so that when the user clicks the button it will generate 10 new dice for us later down the line we'll make it so that clicking individual dice will hold them and exempt them from the roll button but for now we'll just generate all 10 new dice so the challenge is written out here and you can add your new button down here there's one little change that I wanted to point out and that is that I made a mistake on the font that I was supposed to be pulling in I was pulling in the inter font and so I updated this to pull in the actual font from the design which is Carla and then I updated our CSS to use Carla instead of inter so sorry for anyone that was looking at the design and wondering what I was talking about with the inter font okay you should be equipped to work on this challenge so I'll put in a pause now and give you a chance to add a roll button to our Ten's app okay let's start by adding our button first and it's just going to say roll it ain't going to be pretty but let's refresh it and okay we have our roll button and now let's hook it up to actually work so I'll go ahead and add an onclick on it that will call let's see what should we call the function maybe probably roll dice so we will need to make sure we create that function roll dice and it's going to update the dice on the Page by updating State and we have this set dice function so that is all we're going to be doing inside this function of roll dice is calling set set Dice and in our case we currently don't care what the previous dice used to be because we're just generating 10 new dice so I can just say generate all new Dice and this might be it other than some styling let's hit save click roll and yeah look at that all our dice are being regenerated so let's go style our button just to make it look not quite so ugly I'll probably first want to give it a class name so let's give it a class name of maybe roll D Dice and we'll select it in our CSS this will be the button with the class of roll dice and it looks like in the design we are sitting at about 50 pixels high and about 100 pixels wide there's no border but there is a border radius of about six pixels I'll just grab the background color from the design which is this kind of purple color there the color of the text though needs to be white the font size looks like it needs to be a little bit bigger maybe let's try something around 1.2 rims yeah it looks pretty decent and just like before we did not bring in the font family because buttons don't inherit the font family we can see if I add the font family of Carla it does make a difference because we have both of those buttons I think I might just have a button select leor that uses that font family and then I can remove it in these two places and actually while I'm at it I'm going to move this cursor pointer up to my generic button selector and that way again you won't be able to see it in the recording but if you refresh it you'll see we now have a cursor of pointer on all of our buttons here and then the only other thing for now is to give it some spacing we actually have a couple of other elements we're going to be adding to this page like the title and a little instructional paragraph so I think what I might do is instead of manually adding the I think the design shows about 25 pixels on the bottom I'm going to come up to my main container and instead of justifying the content to the center I'm going to say space between oh that is too much um you know there's one that we don't use quite as often called space evenly and yeah that one looks pretty good we might be changing this later as we add more elements to the page but that's okay just make sure our button is still working and and awesome W this is an awesome tenes roll look at that we have five threes all at once that's great we are not able to hold the dice quite yet but as it turns out that is the next challenge we're going to be doing we need to make it so that when the user clicks the dice it will hold that Dice and exempt it from clicking the roll button so that only the unheld dice will get changed before we move directly into that though I wanted to make sure that you are feeling comfortable with these exercises that we're doing this challenge should have been a relatively straightforward challenge for for you assuming you were able to get through all of the previous challenges and the previous sections as I've said before if you found that this was a pretty difficult challenge for you then I would recommend taking a pause going back redoing some of the previous challenges maybe you took a little break since you took those sections of this course that's completely okay but it is probably time to revisit those so that you can refresh yourself before just trying to force your way through the rest of this Capstone project if on the other hand you felt pretty comfortable with that challenge awesome work and let's move on to learning how we can hold the dice the next challenge we're going to have is to make it so that the user can click on the dice to hold it so that when they click the roll button it won't change the dice that are being held to do this we need to have more information about each individual die than just its current value up until now we've just been saving an array of bare numbers but our challenge for this lesson is to update that array of numbers in state so that it becomes an array of objects instead that way each object can have a value property which will contain the same number that we were using before but also additional information about whether that die is being held or not and that's just going to be represented with a Boolean when you make the change from having dice be an array of numbers to an array of objects it will also break another part of our code so make sure that while you're doing this you update things so that we're back to a working State all right the time is yours to work on this challenge let's find the place in the code where we were originally adding just a bare number and change it to add an object instead and that is this line right here when we're mapping over our array of 10 numbers instead of just putting a bare number in there we can instead put an object in its place whose value is going to be what we had here before and oh I think I have my braces off a little bit right there okay whose value but also have an is held property which we will default to false oh and because we're using an arrow function I need to surround my object with a set of parentheses just so that it doesn't think I'm beginning the body of the function like that let me go ahead and put these properties on their own lines just to clear up the spacing a little bit and now let's try to Think Through the other places in our code that was expecting our state to have an array of numbers instead of an array of objects and I can see one right here we were mapping over our array of dice and I chose to call this numb because it was just a bare number but now I'll go ahead and call this maybe a die object and so the value should be diob doval now I'm not seeing anywhere else that we would have any problems so let's hit save let's click roll and okay we're back to a working State perfect in an upcoming challenge we of course are going to make it so the user can click on these buttons and hold them in place which effectively would mean that we find that specific die in the array and flip its is held value but before we move on I want to address the each child in the list should have a unique key prop warning that we've been getting remember when we map over an array and we create an array of jsx elements react needs a prop that's dedicated to jsx elements called key so that it can keep track of items every time something gets rendered and it's crucial that that key be unique to this specific die now of course we couldn't use diob doval as the key because the whole purpose of this game is to get all of them to have the same value very often you'll find yourself mapping over an array of data that gets pulled down from an API and more often than not that data includes some kind of ID that was generated by the database that's holding that data and if you have something like that then perfect that's definitely what you should use as your key because it's pretty much guaranteed to be unique to that object in our case though we're generating our data right here and so we need a way that we can add an ID property to our dice so that first of all we can add it as the key prop here so that react knows how to distinguish this individual die component from other die components in this array but it's also going to end up being pretty helpful for us when it comes time to hold the dice so one thing that I can do is use a third party package there's a really simple one that's called Nano ID so I'm just adding that to my list of dependencies I can import Nano ID from the package Nano ID and this will generate a unique ID number for me by simply calling Nano ID like this I'll hit save and we'll see that oh of course we are still using die object. value as our key we need die object. ID as our key and okay awesome now our warning goes away okay so our data is primed so that each individual die component has way to know if it's held or not but of course we don't yet have a way for the user to change that so that's what we'll be doing in the next challenge very soon we're going to add the capability for the user to click the die so that it will be held but unless we add some special styling for dice that are being held it's going to be a little bit difficult to test this out so the first thing that we'll do is style our held's dice or in other words the dice who have an is held property to true so that when they are being held they will have this kind of light green background color the way that we'll test this in this lesson is I'm just going to change the is held property to true for all the dice so when you have successfully completed this challenge all of them should turn that light green background color so that's what your challenge is I need you to add conditional styling to the die component over in die. jsx so that if it's held or in other words if is held is equal to True its background color changes to this light green color which I've given you the hex value for right here there's different ways that you can handle this conditional styling I'm going to leave it up to you to decide which one you want and remember currently the die component doesn't yet know if it's being held or not and I'm going to leave it a little bit vague like that so you'll have a chance to figure out what that means and how to fix it go ahead and get started on this challenge the first thing I need to do is to make sure that I am teaching the die component how to know if it's held or not currently we are only passing a value down to our die component and so I'm going to put this on its own line to buy myself a little bit of room here and pass in the is held prop or I should say a prop that I'm choosing to called is held because it happens to be the name of the property in the object so the value will be die object do is held in that way each of the die components will know through props if it's held or not now at this point what I could do is either conditionally render a class name as in the class name could look at props that is held and either apply the green background color or Not by adding or removing this class name but I think what I'm going to do is just use an inline style so in my button I'll say style equals and then I could either pass my Styles directly here or something I tend to like to do is to add a separate object up here and pass in the Styles directly remember these styles are accessing the native Dom properties and so when I want to change the background color especially because I'm here in an object I can't as easily use background Dash color without surrounding it with a set of quotation marks instead I need to use the capital c color or the camel cased version of this property and I can use a Turner that says let's look at prop. is held and if it's true then I want the back color to be that green color that we see right here so let me copy that and we'll paste it in there we'll just set the color to white which is what it is in the CSS all right I think we might be all set up let's hit save and sure enough look at that we get all green colors and that's because we had changed this from false to true if I change it to false then we can see that it all turns white again okay now we are ready to tackle the challenge of holding each die whenever it gets clicked we talked previously in our section about State about a concept called derived State and generally speaking we found that it's better to have a single source of Truth where the state is held on the parent well it turns out arten game is a perfect example of this it might be tempting when you're first starting to write react to say well I want each dice to be able to know if it is currently being held or not and so you might go to your die component and add new state to it that says bring in the incoming prop of is held and then set internal state that can be used to display whether the die is being held or not and then you would create a function inside of the D component that when the die component is clicked it would flip that internal state for that one single die however as it turns out if we're looking forward to the mechanics of our game we can only know if the user has won the game if all of the dice are being held and if all the dice have the same value but if each die component were in charge of flipping its own state it would become out of sync with the state that's being held in the parent in other words when we first load our component this first die that has the value of is held of true gets passed down to the die component but if the user clicks it and flips it to false that doesn't change the parent state where it says is held as true and so hopefully you can see that that would become a problem so although it does tend to be a little bit more code a more correct approach that does not rely on using derived state would be to get rid of the state from the die components keep the state that is currently in our app and create a parent hold function that we pass down to each one of our die components this hold function would take an ID so that when one of the dice is clicked it would call the hold function pass to it the ID of itself and the parent state would be able to Loop over the array of dice objects find the one with the ID that was called in the hold function and simply flip the is held property of that one die that was a lot of talking I hope this diagram helped visualize what I'm talking about and so the first part of this new feature is what we are going to be working on now I want you to create a function that's just called hold and it will take an ID as a parameter for now all the function has to do is console log the ID then I want you to figure out how you're going to pass this hold function down to each instance of the die component so that when each one is clicked it will log its own unique ID property and I did mention here that there's more than one way to make this work so just feel free to choose whichever one you want in the end because each one has a unique ID the way that you will tell if it worked is if by clicking this first button it will display one ID and then clicking another button will display a different ID we're starting to creep up on a little bit more difficult challenges here but I know that you've got it in you to get this done so go ahead and get started on this challenge okay let's get started I think I'll put my function just down here below roll dice and we'll say this is hold it's going to take an ID as a parameter and simply console log that ID well now what we need to do is figure out how we can pass this hold function down to our components let me clean this up to to buy some room and clearly in order for each die component to have access to this function we need to pass it down through props I'm going to put each of these properties on their own lines just to again buy some room and we'll go ahead and pass the hold function just like this down to our die components however we hit kind of a blocker at this point remember when we go over to our die we're receiving props do hold now and I can simply add to my button let's see right here maybe let me put this on its own line too right here we can say onclick it's going to call props do hold here's where the problem begins and I wouldn't be surprised if some of you doing this challenge ran into this issue if I go ahead and click for we'll see that I don't get an ID I get something that says synthetic base event if I click another one they're just all saying synthetic base event I'm going to put another pause in here and see if you can figure out what's going on here remember these onclick events the function that you pass to it we don't get to decide what parameter it receives it will always receive an event object so we need to think back how can we provide our own parameter if we want to call a function well instead of just passing props do hold as the function that gets called when onclick happens we can instead kind of wrap that in a function that says this is the function you should run when the onclick for this button happens and this function will will call props do hold and at this point I can put in whatever parameter I want well we run to another problem I don't have access to the ID here in my component so simply enough what I could do is just come down here once again and also pass my ID property so this would be die object. ID once again this ID is coming in clutch for us and over in the die component I'm now receiving props that ID so I can pass that in right here props that ID let's try this again I hit the four and there's a crazy looking ID that was generated by Nano ID we'll Click Five and sure enough a completely unique different ID just for Giggles I had mentioned that there's more than one way to do this and so I figured I'd give you a chance to see what that might look like there might be more than just these two ways obviously but here what I can do when I'm passing down my hold function instead of just passing down the hold function as a whole I can do essentially what I did in my onclick and say I'm going to pass down this unique function and this will end up being a closure that captures the ID value that I passed to this parameter right here and so in that case I don't even need to pass my ID down and when I'm receiving it I don't need to do this anymore because props do hold is now a closed function that already contains the ID of this specific die component I think the way that we had it before might be a little bit more intuitive but because this is working and just for the sake of seeing a different way to do something I'm going to leave it like this okay we're making good progress next we need to make it so that we're not just console logging the ID when the user clicks the button but instead we are updating the is held property on the correct die in the array let's make it so that users can click the die and instead of it obviously console logging the ID it will change its is held property to true or if it's already true it'll change it back to false you'll know that you've succeeded in this challenge if clicking a die will change it to Green since we have already set that up over in the die component however keep in mind that we haven't yet implemented the feature where clicking roll will only change the dice that have not been held and as a hint although this is more like a reminder because I've said it before there's more than one way to accomplish this so don't spin your wheels too much trying to make sure you get it exactly the same way that I'm about to do it if clicking the dice changes it from white to green or green to White then that's how you'll know you've succeeded this will be one of the more difficult challenges that we have throughout this whole section but fortunately for you we've actually done something nearly identical to this in the past when we learned about State using this little sound pads exercise you can click the screenshot here to go back to that exercise if you need a refresher on what we ended up doing so that we could flip these on and off so you should be prepped now to have everything you need to work on this challenge all right I'm going to buy some room by getting rid of the challenge text since I know what we need to do instead of console logging the ID we need to update our state because we're holding our state in one unified place here in the parent component to all the die components we can simply call set Dice and our task is going to be a little bit more complex because we have a whole array of dice that we're looking at and we only need to change the is held property of one of those dice as such I do need to know what my old dice were so I'm going to use a callback function and I think for the sake of clarity to start this out I'm going to open the body of this function and use an actual return keyword here remember dice is an array of objects and so what I need to return when I'm calling set dice is another array of objects and I can get a new array by calling old dice. map and I will look at each one of the dice or each die in the array of dice and the most important thing for me at this point is to check if this die has the same ID as the one that was clicked or the same ID that we're receiving as a parameter to our hold function so I could do an if statement and check if die. ID is equal to ID or I can just use a Turner which will allow me to be a little more concise I'm going to return and then first check if die. ID equals the ID and if it does then what I want want to return is a new object and it will contain all of the properties from the original die but the ish held property is going to be the opposite of die do is held if the IDS don't match that will be my else section in my Turner operation here I can simply return the old version of the die I don't need to change it whatsoever okay first let's check to see if we are working I'll hit save and boy that is a terrible tenes roll I don't know if I've seen one that bad in a long time I guess we have three sixes oh no it's not and oh look at that we have four sixes oh awesome clicking them makes them green awesome as I said if we didn't want to hold them I could click them again and they would flip to the opposite of is held so we get to go back and fourth and as I mentioned clicking roll is just going to refresh them completely we don't save any of the dice which is fine that's what we're going to be working on next well let me come back to my code and do a quick refactor I mentioned using an explicit return like this but because I'm using Arrow functions I can rely on implicit returns so let me pull this up to its own line and boy this is going to get a little confusing okay I've gotten rid of that explicit return here I am mapping and using another arrow function so I think I can do another implicit return I might have to open some parentheses let's get rid of our curly braces and let's see and let's see actually I don't think I need that one and I don't like the spacing of this let's see okay that makes and okay yeah that works I don't know that it's really that much easier to read but I guess it saves us a couple lines of code whatever let's just hit save to make sure this is still working and let's see we have 3 twos perfect or maybe we change our mind and we select the fours great work okay the next big feature we have is to make it so that when we click the roll button we don't lose our held dice but only roll the dice that are not being held so that's what's coming up next other than checking if the user has won the game I think this is the last major feature that we have to add to our tenes game your challenge this time is to update our roll dice function so that instead of generating all new dice every time the button is clicked it will look through the existing dice in the array and only roll the ones that are not being held as a hint this is going to look really similar to to the hold function I guess we didn't call it hold dice we called it hold and it's helpful to remember that what we mean when we say you're rolling a die really you're just going to be updating the value property of that D object I'm not going to get any more detailed than that I want you to figure out how to finish this challenge so the time is yours go ahead and refactor our roll dice function we know that we're going to be updating our state so we do still need set dice here but in instead of generating all new dice we are going to look at the old dice array and we'll map over it checking each die along the way if it is being held so we'll use this Arrow function and we will map over old Dice and for each die in the array I'm going to check if die do is held is true I'll just use a Turner here and if the is held property of this particular die is true then I don't want to change anything I just want to return the same die object otherwise I'm going to return a new object that has all the same properties of the original die this is important because it allows us to keep our ID that we generated when we first created The Dice objects but I want to change the value property to be a new random number which I can just get by calling this code up here let's go ahead and I think we have it right let's get rid of this challenge text hit save and oh we got a good amount of twos here all right moment of truth we'll hit roll and look at that all the dice except for the ones being held rolled so I can play through the rest of this game holding the dice as I go and we're getting pretty lucky so far there we go all right well this brings us to the beginning of the last feature and that is that we need to be able to indicate to the user that they have completed the game as it stands right now if I click this two they're all green and I know know personally that that means I've achieved tenes but I can still hit roll there's no way for me to reset this game other than to refresh the page and maybe most importantly there is a critical lack of confetti dropping down from the page all of those are things we are going to be working through as challenges but before I do that speaking of indicating some information to the user I am just going to paste in some of the elements you can see from the design we have a header and a little paragraph that instructs the user how to play the game so those are not really worthy of a challenge at this point I'm just going to paste in some of that markup as well as provide a few Styles here see I'll just put it right here below the main and we'll just paste those in right there let's hit save and well I think I want a little bit more space above my button or below the dice container so let's see where are we right here on our dice container let's just put a margin bottom maybe 40 pixels okay yeah that's looking pretty good great work on getting this challenge done and all of the challenges in this feature we're now able to hold the dice and continue rolling the ones that are not held which is essentially the Crux of playing tenes as always feel free to play around with this code as much as you want make sure that you understand it before just plowing ahead once you're ready we will move on and start implementing some of the logic for what happens when the game is over okay guys I have a confession to make and that is that this is not the first time I have taught this course using this project the tenes project in the previous version of this react course I also went through pretty much all of these same things with the tenes game however as I was reviewing some of the things that I taught back then I realized that I made a mistake and so I wanted to make sure that I got it right this time and that I gave you a chance to think critically because what we're about to cover is a mistake that not only I made in the past but one that I see very often in the react Community especially with beginners and react and so we're going to take a little break from writing code and we're going to put on our critical thinking hats our goal is to indicate to the user that the game is over if first of all all the dice are being held and second of all if all the dice have the same value if those two conditions are true then we can consider the game as being over and one so let's start planning ahead and think how we might accomplish this some questions that we can consider would be first of all do we need to save a game one value in state somewhere if you think the answer is yes then why and if you think the answer is no then why not and secondly do we need to create a side effect with react. use effect to synchronize this game one value whether it's being held in state or not with the current state of the dice these two questions are meant to guide you in your planning session here as we decide how we're going to implement this feature so I'm going to put it on pause here just like when we've taken quizzes in the past I want you to type your answer into the comments here both for number one and number two and then I want you to have a conclusion section where you write out a simple plan of how you're going to implement this feature so I'll go ahead and put in a pause here don't skip this step this is a crucial thing for you to get practice with as you're learning take some time now to answer these questions what I taught in the previous iteration of this course and this part of the challenge was I created new state and I said we're going to have a variable a state variable called tenes and we'll call set tenes the reason I chose tenes is because in the real game you're supposed to shout tenes when you have gotten all of it it's really a race against other people and so that was equal to use State and and we set the initial value as false and then I also created a side effect that watched for Anytime the dice State changed and then checked for conditions to see if tenes was true in other words if all the dice are held and all the dice have the same value and as I'm sure you have guessed by now I realized now that this was not the correct way to do this so if we're looking at the answers to these do we need to save a game one value in state well as it turns out the answer is no remember how react will reender our component every time the state changes part of rendering the component doesn't just mean it updates what's on the page but it means that it reruns all of the code inside of our function so instead of setting a new state variable all I need to do is derive the value of whether the game is one or not based on the current value of dice in fact this set dice function is the only state Setter in our code that's going to cause or rerender anyway instead of creating new state I can simply use the state that already exists with dice and every time the component renders I can check again to see if the game one conditions have been met I'm not going to write this code because we are going to do that in the next lesson but I will write a comment that simply says check if the game is one and I can do this on the top level of my app component this code will run after every single render in other words every time the dice gets set to something different and I can use this variable that I create if the game is one to add whatever features I want to add change the text of the button or make the confetti fall down if instead I were to save the game one value in state then I would need to include a side effect so that I could synchronize the dice state with the game one state and so question number two definitely would depend on what your answer to question number one was if you answered yes then you would likely need a side effect so that you could synchronize those two pieces of state but since we answered no we don't need a side effect so we can again say no we don't need a side effect I think when we write the code for these features we'll get to see exactly why we won't need these things and we can keep it as simple as possible so our conclusion is that we can derive the G G one status based on the condition or we'll say conditions of the current dice State because of this we can calculate whether the game has been won on every single render just in regular code here at the top level of my component and so maybe to be more specific I'll just say on every render as I mentioned this is a really common Pitfall in react in fact so much so that there's a dedicated article in the react docs that's dedicated to teaching you that you might not need an effect so many developers in the early days of the use effect API were misusing it that the team had to put together a whole tutorial to teach people to stop using side effects when it isn't necessary specifically it says that they are meant to be an escape hatch from the react Paradigm they let you step outside of react and synchronize your components with some external system in our case we're not trying to synchronize with an external system we're just trying to derive a value based on our current state I hope that makes sense I know that's a bit theoretical but again I think you'll see just how easy it is to add this new feature where we can determine if the game has been won without having to deal with State without having to deal with side effects so without further Ado let's jump in and get our hands back on the keyboard so we can start typing some more code we'll do this in a series of smaller challenges the first thing I want you to do is simply to log game one to the console only if the two winning conditions are met which I've outlined here and we've talked about before for now you don't even need to save a variable you can simply put a conditional right here at the top level of our component go ahead and get started on this challenge the tricky one with this challenge has more to do with getting these winning conditions right than it does pretty much anything else we can simply have an if condition that if it evaluates the true will console log the game is one and so the trick is simply making sure that we get these conditions correct and there's a lot of ways to determine if all the dice are being held and if all the dice have the same value I'm going to make use of an array method called every it lets you pass in a callback function and if that callback function returns true for every item in the array then the entire expression evaluates to true so for example I can say if dice. and we're going to look at each die in the array and say if die do is held then return true or in this case it's simply going to return the value of die. is held which means if every die is currently being held then this entire expression will just evaluate to the Boolean true whereas the map array method returns a new array every simply returns a bullan okay so there is one expression we also want to check if every dice has the same value well if every dice has the same value I could just arbitrarily choose one of the dice get its value and check if every item in that array has the same value as the first ey I'm going to put this on its own lines I think just to maybe space this out a little more easily and we'll say if dice. every not dive. every dice. every we'll look at each die and we could say if the current di value is equal to the very first dice in the array so dice at the index of zero. value then that means that every dice has the same value so let's get rid of our challenge text let's hit save we should not get game one because our winning conditions are not true yet and I guess we need to play through this game threes look like a good start and whoa look at that four more threes in one roll that's crazy and okay here we go so when when I click this we should get game one in the console perfect okay now that we've been able to figure out the logic for our winning condition let's go ahead and do a second part to this challenge okay for challenge part number two I want you to create a new game one variable and I'll leave it up to you to determine what its value should be it should be pretty straightforward since we just wrote the logic for it and also if game one is true I want you to change the button text so that it says new game instead of roll this by itself won't make the new Game feature actually work that's something we're going to do in a couple challenges from now but it'll be one step closer all right I'll hand it over to you well we don't need to check the conditional or run any code at this point but we do want the values that are being held inside of our conditional so I'm just going to cut those out and delete here we'll create a game one variable and that's just going to equal whatever the Boolean value is from these expressions and remember what we're doing here is deriving the game one value based on the current state of the dice array which means every time the dice array changes or in other words any action that we take that might call set dice our component will render the entire app function will run again and we will get an updated version of game one of course it's just a Boolean so it'll be false most of the time you're playing the game until the very last click but I think you get the idea okay for number two let's change the text of the button based on this game one variable we can get rid of the challenge text and we will let's see right here I'm just going to put roll on its own line so that we can instead of hard coding roll use a Turner we'll say if game one then we want it to say new game but otherwise it'll say roll okay I'll hit save and I'm going to play through this game I'll skip ahead so you don't have to watch it okay moment of truth I'm going to hold the two and sure enough that changed to new game I don't actually love that it is wrapping like that let me come to the button in CSS and I think it's this one we'll change the width to 150 yeah that looks a little better actually you know what I think instead of hard coding this as 150 I think that's going to look a little bit wide when the text just says roll I'm actually going to allow this to adjust the width based on the text that's in there so I can say white space should be no wrap I don't want the text to wrap then I can set the width I believe to Auto and at that point I probably want to make sure I give some padding to this and I just reference the design it looks like we can say we're about 6 pixels on the top and bottom and 21 pixels on the left and right okay so if I hit save guess I have to go to one of these to hit save the button resized and it still has some decent padding I think that's a little better all right I think the next challenge is going to be by far the funnest challenge that we have in this entire project and that is to make it so that when the game gets won we get the awesome confetti drop in our app so let's jump into that one next this one is definitely the most fun challenge in this entire project and that is to make the confetti drop when the game is won there's a really fun package called react confetti and it couldn't be simpler to use I've already installed it in our project you can click on the screenshot here to go to its GitHub repository and read through the use section it will recommend including a width and height prop but for now we can just ignore that it will default to the window size they recommend doing that because if you resize the window then your confetti will be the wrong size I guess that could be a challenge that you do based on the work we did with side effects in section 4 but for now again just ignore the height and width props I've already installed the project in our dependencies and there is one major caveat at the time of recording this because react 19 has not officially been launched and we've been using the release candidate version for this course react confetti doesn't quite yet work on the release candidate of react 19 so I did have to downgrade to react version 1831 which is the most recent stable version of react react 19 has been on the very precipice of being released for a number of months now so by the time you're watching this I would wouldn't be surprised if react confetti works just fine on the official release of react 19 but for now we're going to deal with it this way oh and I almost forgot I have a fun gift that shows you exactly what will happen when you have won the game the confetti will drop our text will change to new game like we did in the last section that button won't quite work yet but like I said this is the most fun challenge for sure okay your turn get started on this challenge okay we can see from the documentation that what we need to do is import the conf confetti component and it's just a default export from the package so we'll import it from react confetti we have our game one variable here which is what we will use to conditionally render the confetti component so we'll say game one and then render the confetti component like I said it pretty much couldn't be simpler let's get rid of this challenge text hit save and I'll fast forward through this so that it's a winning game okay one downside of the way that the recordings work here on scrimba is that any elements that are displayed on the canvas of our web browser don't actually get recorded into the scrim and the confetti is using the canvas to create all of the colorful confetti shapes so I'm going to click three here and sure enough I can see the confetti dropping and I'm sure that you did this Challenge and succeeded in it and were able to see the confetti drop on your end as well at this point in order to start a new game the user would have to refresh our page so let's go ahead and implement the logic we need need so that the new game button works and I believe that we'll wrap up the last feature that we need to add to our tenes game you know what I changed my mind there is one more topic I want to touch on that's a little more boring than actually implementing the new game functionality so we're going to get this one over with first so that we can end on a high note of adding the last feature to our game what we're going to be talking about has to do with this line of code here on line seven where we're initializing our State we're calling Ed State and then we're giving it an initial value but the way that we're giving it an initial value is by calling a function and at first glance this might seem like it's fine this is the initialization of the state right so it's only going to run this line of code one time and then handle any changes to that state behind the scenes well let's remember that every time we make any kind of state change in our app like when we click a button to hold it or click the roll button we are changing state in our component which means that react is going to rerun all of the code inside of this function and part of running this whole function includes calling this generate all new dice function because react is handling the state behind the scenes it's not going to update the State per se just because we called this but it really is calling this function on every state change and I can demonstrate that by adding a console log to generate all new dice let's say generate all new dice was called okay let me hit save that that'll refresh the app and we can see that we get it one time which is what we would expect but when we wow look at that we have six sixes every single time I hold one of these dice it's also calling generate allnew dice again now the code inside the generate all new dice function is not that intensive it's doing a few things it's mapping over an array with 10 items which JavaScript can do extremely fast for each one of those items it is calling this Nano ID function which I imagine is not very expensive even if you're doing it 10 times but then in the end react is just discarding everything that is returned from this array after the first time it runs it because it knows it doesn't want to reset the state so how can we address this issue well fortunately react made it really easy when we're initializing our state we can provide a regular value for the initial State like we're doing here it might not look like a regular value but since we're calling this function and that's returning the array that's pretty much equivalent to providing just a bare value alter atively we can provide a function for react to run and then that function needs to return the value that we want to use as the initial state by doing this react will make sure that it does not rerun this function on the subsequent rerenders of our component so I still have my console log here inside of the generate all new dice function but if I hit save we get it once for the first time but then as I'm holding Dice and clicking roll and changing State otherwise our component is rendering but it is is not rerunning our generate allnew dice function again again in this case the performance benefit is a little bit underwhelming but if you were doing a more expensive operation in order to initialize your state this would be a perfect way to ensure that you only have to do that one time let's clean up this console log and we can close our console and now as promised we'll move on and make it so that the new game button actually starts the game over from scratch so the user can play again this is another example of a challenge that I'm going to be pretty vague about and just give you more of a scrum style user story and leave it up to you the developer to figure out what needs to happen in the code to accomplish the task the task at hand is to allow the user to play a new game when the new game button is clicked and I guess it's probably redundant to say and they've already won the new game button currently will only show up if they've won the game and actually that's all I'm going to say about the challenge so I'll hand it over to you to work on adding this feature well so far all I've done with this button is conditionally render the text depending on the value of game one but of course this onclick is always going to call roll dice whether the text says new game or it says roll one approach I could take is to conditionally render a button that says roll that calls roll dice if game one is false and otherwise render a completely different button with a completely different function that it calls if the game is one however to me that feels like a bit of extra work that I don't really need to do instead what I could do is simply update the logic for my R dice function so that it checks if game is one and if it is then it will do one thing and if it isn't yet one then it will do another thing so let's come up to our R dice function and the code that we have here is code that I really only want it to run if the game is not one so if not game one then I'll move this code inside of this conditional but now I can add an else which means that the game is one where I can just set the dice to be all new Dice and fortunately I created a function called generate all new dice when I generate all new dice it will reset all of them to an is held of false which means that our value for game one should now be false and the confetti will stop playing all the green will go away and the numbers should be shuffled again let's go ahead and hit save I'll spare you watching me run through this game by skipping ahead okay I'll click the last six I'm seeing the confetti on my end and now the moment of truth if I click new game Awesome everything starts over from the beginning State I can see an argument to be made that we are kind of overloading this function and it might be better to conditionally render a second button but I think for now I am probably just going to leave things the way that they are here at this point all of the features of my app have been added however there is one crucial thing that I've neglected to do because we have a highly interactive app here especially when you're dealing with games there is a lot to consider when it comes to making sure that your app is accessible for those using assistive Technologies in an effort to keep us laser focused on practicing react specific things we haven't yet touched on those but I would definitely be doing a disservice if we didn't include them in our app so in the next lesson I'll walk through a few of the accessibility changes that we need to make to our app so that it is usable by everyone because we chose to use a button element for our die components we get a lot of accessibility benefits for free just from HTML in general for accessibility purposes it's important for clickable items to usually either be a button or an anchor like a link leading to another page otherwise you have to start considering using tab index to make sure that it's accessible via the keyboard and setting the RO as a button and all sorts of things so using a button here was already an accessibility win that said because the information in the button simply has a number in it we can improve how assistive Technologies announce the buttons by adding an ARA label property and because we have some data here I can get pretty descriptive with what my ARA label should include so I can say something like this is a die with a value of and I can stick in some variables here we'll say props do Val and I think it especially would be helpful to know whether it is being held or not and so I could add in a Turner here that says let's check the is held property oh and it looks like I used the wrong curly brace here and if it's being held then we can say it's actually going to read out the word held but otherwise it's going to read out not held so this is already a huge Improvement it's probably the lowest hanging fruit for improving the accessibility in enses app something that is very similar and related but also can be really helpful to include is a property called AR oppressed this is a way to indicate to assist of Technologies whether or not this button which is kind of acting like a checkbox or a toggle is currently being selected or not we're kind of covering that by including the term held or not here but this can also just be another easy thing to add and we can simply give it the Boolean value of is held the next thing we can do is make it a bit more obvious when the game has been won right now we're really only indicating that the game has been won by dropping a bunch of confetti but for those who might not be able to see that confetti or notice that the button text has changed from Roll to new game we can add what's called an AR alive region this is a section of our markup that when changed a screen reader will make sure to announce whatever content we put there in and doing so doesn't even have to mess with the visual representation of our app normally let's come down to where we're conditionally rendering the confetti and I'm going to include a div here and I can include the ARA live and set it equal to polite anything that I put inside of this div will get read out by a screen reader whenever the content there changes so I can conditionally render based on the value of game one maybe a paragraph that says something like congratulations you won press new game to start again of course by default this will add a new paragraph to our page which we may not want to do and so we can actually include some CSS with a class name often times it's called something like Sr only for screen reader only and in our CSS it will make it so that paragraph is never visible on the screen but it will get read by assist of Technologies so I'm just pasting in here an Sr only set of rules that I have copied from another project it basically goes above and beyond to ensure that anything marked with Sr only will never actually get displayed on the page now at this point there actually is one more accessibility Improvement that I'd like to add but it touches on something that you have learned in this course and so I'm going to turn it into into a challenge and give you a chance to look back at something we learned in section 4 and see if you can recall that information or maybe go back and restudy it so that you can complete the next challenge and we'll be doing all of this in the next scrim I'll actually be truly impressed if you're able to do this challenge without referring to past materials so if you're feeling a bit lost as we talk about what this challenge requires don't feel bad whatsoever ever because it was something that we kind of just got a quick sneak peek on in section 4 but I do want you to give this your best shot I want you to go back to section 4 if you need to to review the lessons that we learned there and then bring that knowledge back to this challenge to try and apply it in cognitive science recalling information like that and then applying it is one of the best things you can do to retain that information for the future a quick change that I've made to our code just temporarily is when we're creating new dice I just gave it a value of five that way we don't have to keep playing the game whenever we want to test the end scenario I probably should have done that a bit sooner but if we take a close look I can hold all of the dice and when I hold the last one we can see that the button focus is actually here way on the first button in our list for a keyboard user that means in order to access the new game button way down here I have to hit tab about 10 times just to get down to that button before I can hit spacebar or enter to tr trigger the new game button definitely not ideal so our challenge is to make it so that when the game is over the new game button automatically receives keyboard Focus so that keyboard users can easily trigger it without having to tab through all the dice first the code we need to add to make this work is not that extensive but I did want to give you two major hints to help guide us along the way the first one is that focusing a Dom element with the focus method which exists on Dom nodes requires accessing a native Dom node I want you to think back to section 4 what tool have we learned about that allows us to do that then in order to automatically call the focus method on a Dom element when the game is one requires us to synchronize this local game one value or variable with an external system which is the Dom so think again what tool have we learned about in the past that allows us to synchronize react with an external system the answer to these two questions is hopefully going to guide you in the right direction to solving this challenge again if this is feeling pretty over your head that's okay you can click this Mario box to get a power up which will take you back to the lesson where we learned about the answer to number one and then the next lesson in that same course will lead you to the answer to number two and hopefully give you the tools you need to come back here to solve this challenge so without further Ado I will hand it over to you to work on this challenge in react the preferred way to access a Dom node is by using a ref we can create a ref by pulling in the use ref hook and then simply calling use ref usually we will initialize it with null if we're using it to access a Dom node and we'll save it as a variable which let's call it button ref at its core refs allow us to save values between the render Cycles without actually triggering a rerender itself many times this ends up being used to access a Dom node from the markup that gets returned from our component with this button ref I can use a dedicated property on all react elements like this lowercase b button called ref and I can set my button ref on this button by doing this when react renders these elements it's going to set button ref equal to this Dom node which I can then call methods like focus on as a reminder I can come up here and console log my button ref we'll see that at first it ends up as an object with a current property whose value is null and that's because we initialized it with null but then after it rendered the button down here it set it equal to something different we're just not seeing that in the console log if I click one of these then it triggers a rerender of our component and this console log runs again now with the correct value of button ref which again is an object with a current property whose value is the Dom Noe of that button scrim but makes it look like it's kind of a jsx element or something but that's just a simple representation of the actual Dom node okay so with hint number two I want to automatically call focus on my button ref. current only when the game one variable is true and in this case we need to synchronize our local game one variable with the Dom by manually imperatively calling the focus method on that button so what tool do we have that allows us to synchronize our local react stuff with an external system like the Dom well that tool is use effect and so I'm going to pull in use effect let's get rid of this console log here and at this point I can get rid of my challenge text and Below game one because I'm going to need to add game one as an item in my dependency array I need to make sure I do it after we Define it I can call use effect and I'll pass the first parameter which is my callback function and before I forget my second parameter which is the dependencies array that looks at game one this way this effect will only run on the very first time that the component renders and then again if game one ever changes this gives us an opportunity to check if the game is one then we can simply call Button ref current that's the property we have to access in order to actually get to the Dom node and then . Focus let's see how we do we'll hit save I'm going to just select all of these fives and when I click the last one our new game button gets focused so all I have to do is hit spacebar and we get a new game this is a much better experience for for any of our keyboard users and a benefit for me the teacher was a great opportunity to review some of the topics that we learned in the last section this has been an awesome project and now we have finally rounded out the last features since we're here at the end of this project and near the end of the section this is a great time for you to maybe do a little bit of a self assessment look back at all of the code that we've written in this project and think to yourself is this something that you could write by yourself if you needed to I as an instructor can only do so much to request of you to do all of these challenges by yourself without just letting me hold your hand through them and in your self assessment if you feel like maybe you could have done a better job then there's absolutely no problem with going back to the beginning of the section looking at that blank screen that asks you to spin up a brand new react app and seeing if you can do the series of challenges again if you really want to be a crazy person you could simply highlight everything and hit delete and try to build it again from scratch things like this terrify me personally but I know some people really thrive on challenges like that before I have a panic attack let me command see that and get all of my code back oh and I can't leave it like this where our game is basically useless with this automatic five number being put in every one of our dice all right that's better congratulations on making it this far it truly is a major accomplishment I hope that you're feeling proud of yourselves and I hope that you can find a great way to celebrate this win forgive the pun but you my friend are on a serious role what a great job you did on that significant series of challenges and what a fun project to build this is one of those projects that I can bring my kids in and have them play and they actually have fun playing it it is so rewarding to build something like this that other people can enjoy and the fun doesn't have to stop here I have a few extra credit ideas that you can roll with if you want for one you could try adding a timer and or a roll counter to see how quickly you can win the game or in how few roles you could win the game you could style the dice so that they actually look like real dice with pips instead of numbers and you could deploy your project live so that others can play on their own machines the possibilities are endless but one thing that I do want to make sure you do is to head over to the today I did channel in the scrimba Discord Community there's really no better place to celebrate with others that are also working on similar improvements and content as you and it doesn't have to stop there feel free to share it on your LinkedIn or your ex accounts if you're planning on looking for your first job in Tech then there's no better way than to engage with the communities that are around you once you've had a chance to celebrate for a little bit remember that the job isn't done we have one more really awesome Capstone project in this course and so that's what we'll be gearing up for next everything in this course has culminated up to this final Capstone project called assembly end game in this game you are fighting the forces of evil to try and save the world's programming languages from being extinguished only leaving the Assembly Language left okay let's be real it's just a rebranded version of hangman but instead of drawing a little person every time you get a wrong guess you eliminate one of the programming languages from the world so let's see we've got a felet word here oh shoot so e is not in the final letter so HTML it's been real we've lost HTML let's try a oh no CSS is gone I O a look at that okay we've lost JavaScript but we still have react on the line oh this is tough uh let's try an L uh let's see is this the word floor nope oh no we've lost react maybe blood a look it is the word blood so we are still left in this world with some usable languages and we can see that we've won the game this is going to be a super fun project to work on you can click on the screenshots here to see the different designs that we have over in figma and I want to take this chance to reemphasize the importance of trying to do all of the challenges on your own before watching me walk through the solutions this is a critical part of your education and it can be so tempting at even the first slight hiccup in trying to complete one of the challenges to then just click continue and watch me do it and think to yourself oh yeah I think I kind of understood that I could have gotten that that is very tempting even for me so don't fall into that trap if you do feel like you get stuck rather than just skipping the exercise and watching me do it turn to the scrimba community and ask for help or for more immediate feedback start a conversation with chat GPT and ask it to help clarify any questions that you have you might even want to preface it with don't write the answer for me but help me understand this going through that process although much more tedious than just watching someone else do it is the way that you get better at this all right strap yourselves in for the battle of the welfare of our programming Community when you're just starting out building a project that's as exciting as this one at least I think this is an exciting project it can be so tempting to just jump immediately into the code and start building the project however it's a really good habit to get into to spend some time planning out your project even if you're not why framing it and writing down a whole bunch of steps that you're going to perform simply getting a highlevel overview of the project and thinking through it ahead of time before diving deep into building it can really help set you on the right path so before we code anything I wanted to take some time to do a little bit of project planning together and my hope is that it will help set a good direction for you as we go through the next series of challenges that we have so I have a few questions that I came up with and these are certainly not the only questions that might help you plan your project ahead of time but one of the things that I like to ask myself especially when we are given a design like we have here remember you can click on these screenshots to go to the figma design so you can inspect all the specific details of them when we're given a design like this something that I like to ask myself is what are the main containers of elements that I'm going to need as it turns out this tends to be a great place to start scaffolding your app when you are coding it so that you don't find yourself too deep down one rabbit hole without being able to show any progress on the other parts of the app another thing that you can think about is what values you're going to need to have in this app because we're working in a react app you can think specifically what values need to be saved in state and what values might I be able to derive from the already existing state another thing that's important to keep in mind is the user that's using your app and so you could ask yourself how will the user interact with my app and what events do I need to be handling so I've typed these questions out right here actually I'm going to put a little bit of extra space between them because just like a quiz I want you to type in here the answers that you come up with on your own there's no right or wrong answer for this it's really just to get your mind working from a higher level view of the project to help guide your development from this point forward I'm going to move the slides over to the screenshot of the game so you can refer to this especially when you're answering questions 1 and two which might prove to be a bit of a help while you're answering these questions so I'm going to put in a pause now and I'll give you a chance to type out your answers to these okay the first one what are the main containers of elements I need in this app let's just use our Winning State version here in the middle we can see there's kind of a header up at the top it's just some static information we have this bar in the middle that seems to present some kind of game status we have the U win or the game over but we also saw when we were playing the game that it will give you messages along the way so it's kind of a status section below that we have a list of languages which will be updating as you're playing the game name next we have the actual word that we're trying to guess with a blank spot for every letter of the word and the letters filled out that we have correctly guessed then we have a keyboard section which is the main point of contact with our user this is where they'll be clicking around to make their guesses and finally a new game button at the bottom which will only show up at the end of the game identifying all of these sections gives us a great starting point with how we can start scaffolding or bootstrapping this project okay let's see question number two what values will need to be saved in State versus what values can be derived from the state I think the answer to this will become more apparent as we start writing our code but it's still helpful for us to think about it ahead of time perhaps an even more enlightening question isn't what will be held in state and what will be derived from state but simply what values do we need to know about for example we need to know if the game is over or not whether that's something that is saved in state or derived from State might become a little more obvious as we're writing the code but it's good to know we need to know if the game is over we need to know if the user has won or lost we need to keep track of how many wrong guesses the user has had as well as what the randomly selected word by the game is and which letters the user has already guessed knowing which letters the user has already guessed and the correct word will help us determine which keys on the keyboard should be green versus red versus yellow the display of the new game button at the bottom will probably be determined by that value that we determined earlier whether the game was over or not and there might be a few other little hidden ones here and there as we go throughout the app now you'll notice I'm not necessarily typing the answers down here I think it's helpful to type the answers down but for the sake of time I'm just going to be speaking them out loud okay we kind of touched on this already how will the user interact with the app and what events do I need to handle it seems like the main point of contact is our keyboard here the user will be clicking on the keys which should cause renders where it will determine if that was the right guess wrong guess change the keyboard update our word or kill off another programming language so the keyboard is probably the main point of contact with our users and lastly a new game button which of course will only show up when the game is over hopefully you can start to adopt a quick planning session like this into your own workflow because I truly believe is going to help you not only avoid pitfalls that you might not have seen otherwise but to in general become a better architect of your code because you've given yourself the opportunity to plan things out ahead of time all right now let's take what we have just discovered through this project planning session and now with a better overview let's start building some pieces of this project I've always felt like a great way to start making progress on an app is not to get too bogged down in getting all the functionality working right away but instead to just get something on the page so we're going to be taking little bites out of building this project by first just adding a little header section that includes the title of the game and a little description paragraph the overarching goal for the next few Challen Alles is to build out the main parts of the app but we're just going to start with this little piece for now one thing that can be helpful to note as you're working in CSS is that I have already made the body Aid Flex container with everything Justified to the center which is why game goes here is in the center I've also Chang the background color the text color the font family and a few other things similar to the tenes app as we're building out the main structure of the site we will be spending a bit more time in CSS and because this is a Capstone project I also expect you to write the CSS I know that might not be everybody's favorite thing but when you get a job as a react developer they are going to expect that you know how to write CSS okay go ahead and get started on this challenge you might have noticed in the final version of the code that we saw that we had opted to kind of just put everything here inside of our hangman function and actually you know the name of this is a Remnant from when I first started writing it let's call it a s assly end game so we could spend a little extra effort by moving things out into other components but at least for now while I'm scaffolding and potentially for the entire life cycle of this app I'm just going to be putting everything here inside of my assembly endgame component so instead of game goes here let's go ahead and create a header element and because this is the title of the game this is an appropriate place to add an H1 we'll say assembly end game and then let's add a description in a paragraph and I am just going to paste in the text from the design let me start out by making this a little bit more narrow and I think I'll wrap this just to save a little bit of horizontal space okay we're going to have some design that we need to work on which I think will be next so I'll come over to my CSS and let's go ahead and select our header because we're just going to have one header I don't know that I'm going to bother to give it a class name I think it'll be enough for us to just select the element itself the body is justifying this to the center but the text still needs to be centered so we can say text align to the center and well actually you know that might be the only Style on the header specifically let's go ahead and select our H1 now and we will bump the font size down a little bit cuz the default styling is a little bit large let's go ahead and say 1.25 remms the design also shows that it has a little bit less of a bold font weight so we'll set that to to 500 and yeah it makes a tiny difference and then we have to look a little bit closely but in the design we can see that the color is slightly different from anything else it's kind of a yellowish color at least that's kind of how it looks on this background okay let's go ahead and select the paragraph now because that also has a different font size which if we convert it from pixels in the design to RS we get about 0.875 Rim I don't love how it's wrapping it looks a little bit wide to me so I'm actually going to include a Max width and let's try 350 pixels okay that's wrapping a lot nicer at least to me and then we do have a different color so we'll set that to the same color as the design all right this is a good start next you know I think we'll just kind of work our way down the page we'll start on this status section we're still in these challenges where we're building out the main parts of our app mostly focusing on having the I elements on the page we'll worry about interactivity later so your challenge this time is to build the status section which comes right below the header for now because we're not worrying about having it be too Dynamic you can just hardcode in a winning game State maybe that will boost your mood through the rest of this scaffolding process so go ahead and get started on this challenge as with most of these CSS challenges there are certainly many different ways that you could do it so don't feel like the way that I'm doing it is necessarily the best way or the correct way it's probably just the way that makes the most sense to my brain so below our header I'm going to add a section and while I'm here I'll go ahead and give it a class name of let's call it game- status we'll get the content in here and then start worrying about the design for it the style for the you win text inside of this status is not only a little bit larger but the semantic meaning of it I think holds a little bit more weight to the status of the game so I'm going to make it an H2 we've already used an H1 on this page so we'll just move on to the next one and we'll hard code in uinn and then below it we'll just put a paragraph that says well done awesome okay I'll hit save so those elements will show up on the page and yes we have some styling to do let's go over to our CSS we already created a game status so I'll select game- status and sometimes I like to give myself an indication as to what kind of element this is being attached to so I'll do something like section. game status for now we are going to hardcode in the background color that's the green winning color and because there's two elements in here I could try to space them correctly and everything but I think I'm just going to set this to a display of flex use a flex Direction not Flex basis but a flex direction of column I'll align the items to the center and it looks like it's already Justified to the center I don't think I need to say justify content Center yeah but doesn't appear to be doing anything it looks like there's some default styling applied to the H1 and to the H2 and the paragraph So let's select those individually I'm just going to bring this line down and then access the H2 we'll set the font size to 1.25 RM oh and it looks like the design the color is different oh actually the color for both is different so let's just do that in the parent here we'll change the color to that kind of more yellowy color like our header up here while we're at it let's see what it looks like to get rid of our margin and well zero is going to be not enough so first let's maybe do this to the paragraph as well I'll set a margin of zero yeah it's a bit squeezed and I think if I make this something a little bit bigger like five pixels and we'll say five pixels oh yeah that looks much better let's see there's also a border radius which we missed so border radius of four pixels it looks like from the design just to round out the corners of the status and then I want to separate it a little bit from this header I can use either margin top and margin bottom or I can combine them and use margin block which is a helpful way to just provide margin to the top and bottom of an element and okay yeah that separates it in a nice way all right this is looking good on to the next challenge in the next part of this challenge we will add the list of languages with elements that are sometimes referred to as chips they're just like little badge elements on the page so that's the challenge this time I want you to create those language chips however it's going to be a little bit more involved than that I've provided to you a new file called languages. JS this is an array of objects each object representing one of the languages that will get displayed on the page collecting them together in objects like this allows me to not only provide the name but also whatever background color and regular color they should be using I mostly didn't want that to be super tedious for you to have to do manually or to have to create nine separate elements down here in your markup because this is a Capstone project I'm going to continue being pretty vague but I did want to give you a hint for the layout and that is for the container that you use around these elements if you set it to a flex box and make sure that it can wrap it should make your job a lot easier you might also need to apply a Max width so that it doesn't just try to span the entire width of the page for reference I'm going to be using a Max width of 350 pixels okay that's all the hints I'm going to give you get started on this challenge all right let's create a new section this section will act as the container for my language chips and as such let's go ahead and give it a class name of of well let's just call it language chips language- chips now I'm not going to hardcode anything here but instead I'm going to import my list of languages from let's see languages JS export const okay this is not default exported which means I need to destructure it and this is going to come from languages and uh this needs to be a relative path let me just make sure this is working I'm going to console log languages and okay good they're coming into this file just fine with that array of languages I can map over them and create new elements on the page for each one of them a common thing to do is to do that map operation directly here inside of your markup although my personal preference has leaned towards creating a separate variable here in the body of my function before my return so I'm going to create a new variable that I call language L's for language elements no let's call it language elements and this is going to be an array from calling languages. map we'll look at each language and let's go ahead and return we'll make these spans they seem like they're maybe appropriate as a span the text inside will be Lang do was it name let's go check yeah lang. name and then we have background color and color so we will use those in our Styles actually let me put this down in this section first and hit save just so we can see that this is working okay that is terribly ugly but we're on the right track so inside of this span I can provide an inline style and so that's what I'm going to do this needs to be an object and actually you know for the sake of saving my horizontal space I think what I'll do is create a new variable which means I can't do an implicit return anymore let me Shuffle some things around here we're going to return this span I can get rid of this and by doing that I can now just create I'll say Styles is equal to an object where the back ground color is going to be lang. background color and the text color or color is going to be lang. color and then I can just pass in my Styles object right here the other way would have worked fine too this feels better to me for some reason let's see if that made any difference okay well that's a good step in the right direction I think in our CSS we can Style Both the language chips as well as the individual language chip so let me give this a class name or rather give each one of these a class name and I'm just going to call it chip for now we'll hit save and then go over to our CSS oh actually let's fix this warning first where we need to add a unique key prop our list of languages doesn't have an ID for each object but the name is guaranteed to be unique because well we're not going to be adding to this list so I'll just use the lang. name as the key and I'm going to start putting these on their own lines so let me add a key which is equal to to lang. name okay good our warning is gone let's go over to our CSS we have language chips that we need to style and chip that we need to style so section dot language- chips I had mention that we should change the display to flex and that we want it to wrap so I can set the flex wrap to wrap okay awesome we need a little bit of space in there they're really crammed in together let's give it a five pixel Gap we want things to be a little more centered let's justify the content to the center and I had mentioned that I'm going to be adding a Max width of 350 pixels okay let's work on the individual chips and I think that might finish this off those were spans with a class of Chip and let's see in the design it shows they have a border radius of three pixels and a little bit of padding around them looks like it's about 4.5 pixels wow that's actually looking pretty great let me try resizing the browser here just to make sure that we're doing pretty good and yeah it's not a big deal if that wraps down but we probably won't be getting too much smaller than this anyway nice work on completing that challenge let's move on to the next one all right let's display our word on the page to do this you will want to First create a current word in state and for now just for fun we can initialize it as the word react act this represents the random word that the game will choose for us but for now we'll just hardcode it then in order to display each of the letters you'll map over the letters of the word which means you'll need to turn it to an array first because map only works on arrays and then display each one as a span element inside that span just make sure you're capitalizing the letters and then just generally style it to look like the design just a little hint in case it helps anybody in order to get the little underline at the bottom of the box you can simply use the Border bottom property in your CSS all right go ahead and get started on this challenge let's create some new state just here at the top of our component it will be for current word and of course Set current word equals and let's see we're importing react I think I'm going to import use State like this and call use state and we'll just initialize it as the word react I guess we could initialize it as capital letters but this looks like it's screaming to me so I'm just going to use react like that all right well let's create another section where this can be held I'll give it a class name of word and I could do my map right here inside of my markup but once again I'm going to keep it consistent by doing it up here maybe let's call it letter elements and I need an array to work with but what I'm saving in state is a string I can simply turn a string into an array by calling current word dosit on every empty space which if we conso log letter elements we can see gives me an array of all the letters in the word and now that I have an array I can map over it all right for each letter I'm going to return a span and we'll just put the letter in the span we'll give it a class name and actually we can just select the span inside of word yeah let's do that I'll hit save oh we need to actually render this so I'll take my letter elements we'll put it here in the section okay well that's underwhelming but let's go ahead and style it over in our CSS we will select our section of word and I think I'll probably reach for Flex box once again we'll set the display to flex we'll Center it with justify content going to buy some room by putting a margin bottom on my language chips above there of I think the design shows about 36 pixels and let's put some effort now into the span so I'm just going to select the child element of the span inside of my section and each item will have a height of let's see the design shows 40 pixels so we'll say 40 and then we'll also do a width of 40 a background color of this kind of dark color from the design ah and then they are sitting in the upper left I think for each span I can also use a display of let's try Flex I might have to change this we'll justify the content to the center and align the items to the center and oh I'm just realizing that we're working with lowercase letters here not the end of the world but I had asked to uppercase them so I should probably do that here we'll say dot to uppercase okay that is better ah and of course we are getting our keyr error oh and we're console logging stuff still let me clean something up here let's see right here we're cons logging the letter elements let's get rid of that and we'll hit refresh okay we're still getting the key prop issue so when we're mapping over this I guess we need to decide what unique property we're going to use now this isn't something I normally would advise doing but because we're working with something that isn't guaranteed to have unique elements I might be working with a word that has multiples of the same letter I can't just use my letter as my key but I do know that I'm not going to be removing any letters from this list or rearranging them or anything I mean in the game I might be hiding them but the word itself is not going to be rearranging the letters and because of that I can actually access another property inside of my callback function for map of the index of each item that it's mapping over and for now this is going to work just fine as a key because again I won't be rearranging anything and it will never get confused by react okay that suppressed that warning for us looks like we're almost there let's go back to our CSS I think we can bump up our font size this would be the equivalent of 1.125 Rim okay let's add that border bottom of one pixel solid and then it's this color from the design and in the design it shows a little bit of space between these let's add a gap of two pixels and oh not to the word but to the word list here all right wow that is looking awesome again I know we're doing a lot of CSS here we just have one more major element that will take a bit of CSS and that is our keyboard and after that we'll finally be able to start jumping into the functionality of this app arguably the most important part of this app is the keyboard it's the main thing that our users are going to be interacting with and it's your challenge to get it up on the page I've created a static variable that just has all of the letters in the alphabet that you can use to map over the letters and display the letters in the keyboard make sure that you make each letter in the keyboard an actual button element because well semantically that's correct and it also will come with a bunch of free accessibility benefits as well go ahead and get started on this challenge all right let's come down and I'm going to to create yet another section we'll open that up I'm going to give it a class name of let's say keyboard and we'll come back to The Styling in a minute kind of like we're doing up here we'll render H what should we call it maybe keyboard elements we haven't created that variable yet so let's go ahead and do so right here keyboard elements is equal to the alphabet dosit the only reason we have to split it is because I wrote it up there as a string just so I didn't have to type as many characters trying to put each letter as its own string in an array okay so this gives us an array and then we can map over that array and for each letter in that array we will return a button element it's going to have the letter inside and actually I forgot to mention this but I wanted to uppercase it so that's what we'll do we're mapping so we need to make sure that we include a key and because we are only rendering one button for each letter of the alphabet I can use that letter as unique key we're not worrying about the functionality for it quite yet so I don't know let's see what it is we hit save and oh whoops I did that wrong that's supposed to be the actual variable of the letter that's why I got my key warning okay there we go you could have chosen either flexbox or grid to style it honestly because of the design grid seems to make more sense but because of my stronger familiarity with flexbox I'm actually going to lean on flexbox to handle this one so let me access the section with the class of keyboard we'll give it a display of flex we need to make sure that it can wrap so I'll say Flex wrap wrap will give a gap of eight pixels and let me space it away from the word a little bit maybe right up here we'll give a margin bottom of like 20 pixels yeah looks better we'll justify the content to the center and I believe it's going to yeah it's just going to keep spreading out so again I'll give this a Max width of I think the design shows it's around 450 pixels now things aren't lining up super well but I suspect that has to do with our actual keys so let's access section. keyboard and then the spans inside no the buttons inside all right the design shows that it is 35 pixels high and wide oh yeah look at that that lines up much nicer I'm going to copy the background color from the design let's change the default border for these buttons to a one pixel solid and then I'll paste in this color from the design as well I usually like to make my buttons have a cursor of pointer and oh we need a little bit of a border radius as well I think it shows that it's three pixels all right I don't know what you think but that seems like it is working and looking pretty good to me now the last piece of our app is to have this new game button at the bottom but because I love you guys and you've done such a great job on the challenges so far I have a little surprise I can snap my magic fingers and just like that we now have a new game button in our app yay I figured this was an easy enough element we didn't really need a whole separate challenge for it we're in our second Capstone here you don't need a challenge on how to add a single button okay well it sure is looking good but of course it's not doing anything so let's jump into the next challenge where we will start adding some functionality to this all right so we've added the keyboard let's start working on making the keyboard actually work of course the user is going to click these letters in order to give their guesses as to what should be in the word right now we're displaying the word it's going to be blank letters of course so our overall goal for the next few challenges is to allow the user to start guessing the letters by clicking the buttons the specific challenge for this scrim is to be announced but first I want you to think what's going to be the best way that we can store the user's guest letter I'm going to put in a pause here and give you a chance to think through that because we need to remember the user's guessed letters across every render of our component and we know that when the user guesses a letter we want to update the UI in a few different ways right we need to display the letter here if it is a correct letter we need to cross out one of the languages if it's a wrong letter we need to change the keyboard key color if it's right or wrong to either green or red so because of all those things we want to make sure that we save the user guest letters in state so let me type out what your challenge will be your challenge is to create a new array in state to hold the user's guest letters and when the user chooses a letter or clicks one of these buttons you need to add that letter to the state array for now we're not going to worry whether it was a right or wrong guess there's a few other ramifications with that so we're just going to focus on adding it to the state array and you'll probably want to conso log this array just here near the top of the component so that you can make sure that it's working correctly go ahead and get started on this challenge okay we'll create some new state maybe we'll call it guest letters and set guest letters is equal to use State and we'll initialize it with an empty array let's go ahead and console log Our Guest letters as a reminder this console log is going to run every time our component gets rendered and because we're about to make it so that clicking the button will set state that will render it and that will run our console log right here okay maybe right below the alphabet here I'll create a click Handler we'll call it maybe add guest letter we are going to need to know what letter was guest so we'll assume that we can pull that in as a parameter to the function to update our state of course we will call set guested letters we do need to know what the previous letters were so we'll access the previous letters uh letters in a callback function and as a first iteration of this function let's just say we're going to return a new array that has all of the previous letters and then adds the new letter at the end some of you might already notice what kind of issue we might face with this but we will fix that in a second let's take add guest letter and where are our buttons right here's our keyboard buttons and so I will add maybe right here I'll add an onclick that runs add guest letter but I need to do a little bit more than this because remember when I have an event listener like onclick if I just pass a function I don't get to choose what parameter it receives it's going to receive an event object from JavaScript so what I can do is simply wrap this in its own Anonymous inline function and then the only thing that function is going to perform is calling add guest letter at which point I can pass in the letter while we're mapping over them to that function this is getting a bit wide let me clean this up a little bit okay let's hit save and open our console a b c d e FG awesome if you haven't yet discovered what bug I introduced in the way that I wrote my ad guest letter function here I'm going to refresh this page and give you a chance to see if you can figure it out so I'll put in a pause here see if you you can figure out what kind of bug we have currently if the user keeps guessing the same letter a bunch of times we are going to be duplicating the guest letters in our array and that's not what we want to do we want to make sure that we are only including letter into this array if it isn't already present there's a few different ways that we can do this and just for fun I'll show you two different ways that you could choose the first thing we could do is let me put this on a separate line actually let me just get rid of this we're going to be doing it from scratch here one way I can ensure that I'm not duplicating the letters here is I can check if the previous letters already includes the letter that I'm trying to add and I can use a Turner that says if that returns true in other words the letter that I'm trying to add already exists in the previous letters then I can just return the previous letters I don't need to make any changes to it but otherwise I can do what we were doing before where we just spread in the previous letters and then add the new letter to the end here let me put these on their own lines as well let me hit save and just make sure this is working if I click a I get a added if I click a again okay it's not adding it perfect let's do B and C and then try to do a again it looks like it's logging it to the console but at least it's not adding the previously guessed letters to the array and duplicating them again just for fun I think it can be a good learning experience to see another way that we can do this perhaps using an API in JavaScript that you're not yet familiar with I'm going to get rid of what we had and let me fix my brackets here open up the body of this and what we can do is create something called a set in JavaScript a set is very similar to an array in JavaScript except it doesn't allow for duplicates it's built into JavaScript to not allow duplicates and so what I could do is create a new variable let's call it maybe letters set and that's going to equal a new set and we can pass in the array of previous letters to pre populate this set then I can say letter set. add sets in JavaScript have a method called add and you can add the new letter to the set which will automatically remove duplicates from the set then I can turn the set back into an array and return it by using return array Dot from my letter set let's go ahead and see how this is working I can click a yep I'm clicking a a bunch of times this does have an interesting side effect where it is rendering our component even though we're not changing the state of this variable so that's kind of interesting but it is working and oh we probably not seeing those lower ones so I can click a b BBB CCC and the array just has a b and c in it well I haven't taken the time to figure out why it is rendering the component every time I click it whereas what we had before is not and so I think I'm actually just going to back up to the other version right here and we'll just leave it at this either solution is completely fine and valid okay now that we have a way to store in state the letters that the user has guessed we have the ability to start working on some of the other user interface pieces of the app where the game can give feedback to the user so that's what we'll dive into next all right folks this is one of those challenges that's going to require you to think critically I'm being pretty vague in all the steps that will need to take place in order to complete this Challenge and as a bonus you are going to get a chance to read about and use a fairly popular thirdparty react package so first let's talk about the challenge I want you to update the keyboard keys to display whether the selected letter that the user just clicked is right or wrong as you can see from the design if the letter is a correct letter that's in the word then it turns green if it's wrong then it turns red for testing purposes we're still keeping the current word as react and displaying it here we're going to get to obscuring that and choosing a random word later but this will really help with testing of course if you hit re e a c or t then the letters should turn green and if you choose anything else they should turn red as a bonus I am recommending that you use this clsx package it's going to require you to go learn about it but as you can see it receives about 21 million weekly downloads so it is a pretty popular package and its whole purpose is to give you a chance to construct the class name String that's the string that you are passing into your elements like this right here class name we have hardcoded it to be chip or in the case of the button which we are going to be styling we are not passing in any class names and clsx gives you a chance to construct those class names conditionally so if you want to use clsx you're welcome to do so click on the screenshot here to go to npm and read all about it there's a chance that the documentation may prove a little bit confusing if you find that's true then don't be afraid to turn to Google or the AI assistant of your choice to ask how this package is used so try to psych yourself up for this awesome Challenge and I'll turn it over to you to start working on it when I first was building this app I thought to myself I wonder if I should save in state an array of all the correct letters and another array of all the incorrect letters but then I realized that we can easily derive that value by simply looking at the array of guest letters and by looking at the current word as we are mapping over the alphabet and displaying the buttons for each letter of the alphabet we can take the opportunity to check if the current letter that we're looking at is in the array of guested letters and if it is then we can check to see if it's correct or Not by seeing if that letter is also in the current word if those two conditions are true in other words it's been guessed and it's in the current word we can change it to the green background and if it's in the guest letters but it's not in the current word then we we can change it to the red background no new state necessary at all I can simply derive those values based on the state that we already have so let's come down to our keyboard elements here and I'm going to need to include some additional logic before I return this button so I'm going to open up a set of curly braces and move my button inside just so I have some ability to write some additional logic here I'll go ahead and put this in a parentheses while I have some serious formatting ISS choose to figure out right here okay but now that I'm doing an explicit return I can start writing some additional logic up here so let's think what are some of the values that I need to know well I need to know if the letter has been already guessed remember I'm mapping over the alphabet and this map operation is going to happen every time our component rerenders which means I know that I can have an updated version of our currently guessed letters and the current word so if I want to know if the letter has been guessed I can simply check inside of the guest letters to see if it includes the current letter that we're mapping over okay well now let's check to see if the guest letter is correct well first of all it's important that the letter has been guessed otherwise it's neither correct or incorrect so if it is guessed and the current word includes this letter then yes this is a correct letter guess and it wouldn't be enough to have an is wrong variable that simply says it's not is correct because every letter would be considered wrong because we're not comparing it to make sure that it's been guessed so we would simply say const is wrong is and I'm just going to take this logic and reverse the fact that it's included in the current word okay how is this helpful well at this point I could now add a class name to my button and try to do a crazy nested Turner that says first let's check to see if it's guest and then if it is let's check to see if it's correct and if it isn't let's check to see if it's wrong and apply certain class names accordingly but this is where the clsx package comes into play what clsx allows me to do is create an object where the keys are the names of the classes that I might want to apply and the values of those keys is a Boolean as to whether or not that class name should be applied this will be much easier to just show so let me go ahead and create a new variable called class name and this will be the string that gets returned by calling the clsx package or function rather there's a bunch of different ways to use clsx as I'm sure you discovered from the documentation but the most common way that I find myself using it is to provide an object and as I mentioned the keys of this object will be a potential class name that will end up on the button in the end so for example I might have a class name called correct and I only want the correct class to be applied if is correct is true and I could do another one for wrong or incorrect let's call it wrong and say this is if is wrong is true I haven't created these class names yet but let's finish up our work here first of all I need to apply this class name that results from calling clsx and I don't believe I've imported clsx yet so let's go ahead and do that before that becomes a problem import clsx X from clsx is a pretty hard thing to say actually now that I'm saying it so many times while we're still here let me go ahead and console log class name we'll get a better idea of what's going on here well this console actually doesn't show anything but the little popup down below shows that it was an empty string let me see what happens if I click a oh whoops we do have an error here current word. include is not a function yes this needs to be includes sorry for anyone who was shouting at their screen because that was a mistake okay let's try this again we'll click a okay look it console logged correct if we put B it's going to console log both correct and wrong and that's because what it's doing here as it's looping through the entire keyboard it's looking at each letter and it saw that a was guessed and it is in the final word or the current word which is react so we have an A there is correct became true it applied the class name of correct and then it just console logged that class name for that specific letter which was correct then it continued through its map and it got to the letter B it said yes this is in the list of guest letters and so it is guest but it is not in the current word so is wrong is true which means that wrong is going to be applied and it consol logged wrong and then I think behind the scenes there's actually a bunch of empty strings that are happening because every other letter in here is not gu okay let me close the console I have some styles that I just have copied over it just has the background colors from the design so let's see where is here's our keyboard and we'll just put these right there okay button. correct and button. wrong and I would have thought that would have applied let's go ahead and hit save let's try a and oh you know what is happening we have a specificity battle going on up above I am being more specific about this button than this button so I guess let's just add the same level of specificity well actually increasing the specificity and okay there we go we get our letter A being colored as green because it's in the final answer let's go ahead and click B and awesome so let's go back up to our Challenge and sure enough we were able to update the keyboard when a letter is right or wrong this should work all the way through R should be in there let's see T should be in there and we've gotten all the letters so everything else should be read feel free to continue playing around with clsx we are going to be using this in a couple different places in this project mostly to help us avoid any crazy nested taries or having to write a bunch of conditional logic just to determine our class names I guess another thing to note about this package is that although we are using it in a way where these are mutually exclusive classes it doesn't have to be that way you can provide an object that has a lot of different class names and it will just apply all of them where the value at that key ends up being a truthy value all right we're making great progress let's keep it going all right there's really no hints that I'm giving you this time at all I'm just asking you to add the next feature to our app so your challenge is to only display the correctly guessed letters in the word right now we're displaying the entire word which of course defeats the purpose of a game like this so now that we have some UI feedback as to whether the letter that they guessed on the keyboard is correct or not if the letter is correct then we want to display it in the final word but otherwise we just want it to display nothing I guess an empty string I'm going to let you find where in the code you would need to make that change and that's it I'll hand it over to you now to work on this challenge well naturally I think the first place we want to look is where we are displaying these letters and so if we come down to the letter elements this is where we are looking at the current word we're splitting it so it's an array we're mapping it and then for every letter in that array of letters so re e a c and T we're creating a span and inside that span we are just automatically putting in the letter so this is where our logic is going to live instead of always putting the letter in we could put in a Turner here that's says if the guest letters remember the array that we are keeping track of as the user is clicking the buttons If the guest letters includes the current letter that we're mapping over in the current word that means that the user has guessed this letter and it was correct because at this point we are only mapping over the letters in the actual word and so I can use this turn that says if the guest letters array includes the letter that we're looking at and I'm actually going to pop this onto its own line here then I want to display the uppercase version of that letter but otherwise I'll just put in an empty string so when I hit save all of the letters should disappear perfect oh it looks like I still have a console log hanging out for this class name let's get rid of that so the letters disappear and then let's start guessing the letters we know that it's react so r e a c and let's do a nonl like w and okay perfect nothing else updated and we'll do T awesome although the final code ended up being pretty straightforward hopefully this was a good challenge because remember I only gave you the feature that we wanted to add and it was up to you to figure out how to do that if you were able to do that that is a great sign that you are following along you're understanding this code and ultimately hopefully you're not getting stuck in tutorial Hell by just watching me do all of this with without actually getting your hands on the keyboard and practicing we're making great progress let's keep it going we're on to the next goal so far there's basically no consequences to getting wrong letters and so we need to add a little bit of tension to the game by adding in the mechanism that will count the number of incorrect guesses and actually have consequences that lead the user to potentially losing the game in this game we only have eight wrong guesses that we're allowed to get before assembly is the only language that we're left with in the world and so we need to be able to count how many wrong guesses the user has had we talked earlier about how we could have chosen to track in state an array of correct letters and then another piece of State for the wrong letters and honestly that could have worked just fine however the way that we currently have this setup where we have the current word and the array of guest letters both of which are being held in state we can actually figure out how many wrong guesses the user has had based on just these two values so your challeng is to do exactly that I want you to derive a variable which you can call wrong guess count for the number of incorrect guesses by using these other state values current word and guest letters that we're already holding in this component we're starting to add a bunch of extra values here either for State or the static value or we're about to create a derived value so I'm actually going to create a little bit of Separation with some comments I'll say that these are the state values let's say this is a static value and uh we'll just say values in case we have to put something else there and right here we will add a section for derived values for now once you have created this variable just to test it we'll say that uh you can just console log the variable or let's say the wrong yes count we'll make better use for it in the upcoming challenges all right the time is yours go ahead and get started on this challenge well we have an array of all of the guest letters both correct and incorrect ones so if we could filter out the correct letters from this guest letters array all that would be left is the incorrect letters and then we could simply take the length of that array to get the exact count for the number of wrong guesses the user has had this certainly is not the only way to do it but it is the way that I will be proceeding so we'll say const wrong guess count and actually just for now so that I don't have to try and chain too many things together I'm going to maybe have a wrong guesses array and we'll just take care of this in two steps I will probably end up combining them once we understand what's going on here okay so let's look through the guest letters array and we're going to create a new array by filtering out the correct letters and so my filter is going to look at every letter in the guest letters array and we only want to include in the resulting array this wrong guesses array the letters that are not in the current word so I can say current word. includes and I'll go ahead and put my negative there because I want to make sure that the current word does not include the current letter that we're looking at from the guest letters array let's do a little bit of an intermediary step we'll console log the wrong guess's array okay starts out as an empty array as we'd expect if I add a okay we're still an empty array because that was a correct letter let's go B okay look at that we've got a B in there d F perfect just for good measure let's put in a correct letter okay we're console logging the array again but it does not of course include the correct letter great well then obviously the only last thing we need to do is take the length of the wrong guess's array and that's going to give us our wrong guess count at this point instead of creating a separate variable I'm just going to have the wrong guess count like this and chain on a DOT length at the end of everything else that we have let's just go ahead and and make sure oh whoops I put this in the wrong place this is where I put the do length and I want to console log the wrong guess count okay let's try it out zero a is correct so we're still at zero e is correct still at Zero D okay we're at 1 2 3 4 and five cool this wrong guess count is going to be pretty crucial for us to be able to do a couple of the other things involved in adding this incorrect yes's mechanism to the game like starting to cross off different programming languages or knowing if the game has been lost that's also going to help us fix our status section up here which currently is just hardcoded to you win and so this was a pretty important feature that we just added and something that I think is kind of nice is that we were able to just derive it from the state that we're already maintaining generally speaking if you don't need something to be in state it's usually better for it not to be in state let me go ahead and clean up some of these Extra Spaces here and awesome great job on this Challenge on to the next one now that we have access to the number of incorrect guesses from the user one of the first things we can do is to mark off the languages that have been lost based on how many incorrect yeses there have been to me the CSS for adding this little gray overlay and the skull felt a little bit outside the scope of the course and so I just went ahead and added these rules here it's just a pseudo element where if you add the Lost class name to our language chip it's the span with the chip class then it will gray it out with an overlay that's opacity of 70% and it has this little skull emoji and everything else here feel free to look through these CSS rules if you want but as I said it just felt a little bit like a distraction to worry too much about this the only thing you really need to know is written up here in the challenge text when you're mapping over the languages you should determine how many those languages have been lost and then add the Lost class if it is a language that's been lost I give a hint here where you can combine the wrong guest count that we figured out in the last scrim right here and combine it with the current index of the item in the array as you're mapping over the languages array you're welcome to use clsx if you want if you do decide to use clsx you'll need to refer back to the documentation on how you can always include a class name because right now we are including this hardcoded chip class name and we want to make sure we don't lose that this one however is a relatively easy one to do manually just right here inside of this class name prop if you'd like all right time to get your hands on the keyboard all right so let's come down to where we are mapping over our language elements and let's try to reason through how we can determine if the current language that we're looking at while we're mapping over them is a lost langu language well if we can get access to the index of the current item in the array since our array will always be in this same order that we see here we can know that if we have a wrong guess count of one then any index that's less than one or in other words any index that's less than the number of wrong guesses should be considered a lost language and needs to get the Lost class name added to it inside the Callback function of my map I can add a second parameter called index which gives me access to the current index of whichever item we're mapping over and with that current index I can create a new variable that says something like is language lost and set that equal to the Boolean that results from saying the index is less than the wrong guess count so if our wrong guest count is zero then even the item at the zero index is not going to be considered lost because Zer is not less than zero if our wrong guest count is one then this will evaluate to true for the very first item and we'll mark it as lost if the wrong guest count is two again this will evaluate to true for the items with the index of both zero and one and so forth with this is language lost variable I now can update my class name to include the Lost class name if that's true and I'll just show this in two different ways I can do this manually by updating my class name here to use a template string and simply say is language lost and use a Turner and if it is lost then we'll add add the Lost keyword otherwise we'll just maybe use an empty string so we don't add any additional classes and let's try this out we'll hit save we'll choose a wrong letter and awesome well not awesome we lost HTML let's do a correct letter or maybe a few correct letters and then another wrong one oh no okay bye CSS okay look at this we are doing this correctly okay well since we do have the clsx package I guess it doesn't hurt to use it so right here I'm going to create a class name variable and I'll give clsx a call we want to make sure that unconditionally we always include the chip class and so if one of the parameters that I passed to this function is just a string then it will just always include that in the final resulting class name I also don't have to use an object like we did with the keyboard letters instead I can just pass in a Turner here that says is language lost if so then include the string lost otherwise well actually you know what I could even do the short circuit double emand method and this should work just fine too in clsx if this evaluates to false then it just will ignore this parameter to the function anyway then I can come down here and just update all this with the class name that we determined above let's hit save and we should get the same results we're getting closer and closer to the end great job on this Challenge and since I don't think I've said it recently take some time to look through our code again if any of this has been confusing for you it's time to put in the effort to become familiar with this code before just plowing ahead there's absolutely nothing wrong with doing that in fact just plowing ahead will put you in a worst spot in the end once you're ready we'll keep moving forward currently we are rendering our new game button even at the beginning of the game your challenge is to create a new derived variable called is game over which evaluates the true if the user has guessed incorrectly eight times eight times because we have nine items in our languages array but we want to leave assembly as the only remaining language at the end that said I do want you to consider how we might make this value or this is game over value a bit more Dynamic if we were to ever add or remove languages from the languages array over here in this languages. JS file once you've completed challenge number one your second challenge is then to conditionally render this new game button only if the game is over and at this point it doesn't matter if they've won or lost it's just if the game is over for this first part try to think critically as to what conditions in which the game should be considered over and in this case I don't mean game over like in the old Mario game over where you lost it really just means game over whether you won or lost all right your turn to take the Reigns and work on this challenge I didn't type this down but I did mention it as I was speaking but this is game over value is something that we can derive based on the existing state and because we know that the game should be considered over whether the game was won or lost maybe the first thing we should do is try to derive some State about whether the game is lost and then we could say well the game is over if either the game is one or the game is lost so let's go ahead and first create is game one and again you may have chosen a completely different way to approach this that's okay I didn't say anything in the challenges about creating these extra variables I'm just going to use them to separate my logic out a little bit more okay well how can I know if the game is one let's think about this one well I've got my current word this of course has all the correct letters in it what if I were to check to see if every single one of the letters in our current word was also in our array of guessed letters that should mean that the user has guessed every one of the letters in the current word which should indicate that the game has been won I could do a for Loop to Loop over every letter in the current word I could use a map but there is a builtin method called every which allows me to pass in a function that should return a Boolean for every item in the array on which I'm calling every the Callback function returns true then the entire expression evaluates to true that's going to make a lot more sense if we actually see it written down so first I need to take my current word which is a string and turn it into an array so that I can even call the dot every method on it so we'll say current word dosit and that will give me the array of letters in the current word on which I can call. every and we'll look at each individual letter and if the guest letters array includes this letter this will evaluate to true and if every single letter that we map over in this current word returns true as in every one of those letters is included in the guest letters array then every will return true and this entire expression will return true and so is game one will be the ban value true okay cool I think that should work just fine well maybe let's go ahead and conso log it so we'll conso log is game one we'll hit save and then just type out the correct answer so false that's good we haven't yet won the game r e a c that's a bunch of falses and then T and we evaluate to True perfect let's close the console get rid of our console log now let's work on is game lost this one's a little different intuitively it might seem that we should just say it's the opposite of is game one but the state of the game isn't either one or lost there's also a currently Inplay state of the game instead we'll need separate logic to determine if the game has ended and is lost well we know that the game is lost if the user has a wrong guess count that is equal to eight or I guess greater than or equal to eight just to cover our bases and and actually let's type it out that way first we'll say wrong guess count is greater than or equal to 8 but now as I mentioned in the challenge text it would probably be helpful for us to consider how we can make this more Dynamic if the length of the array were ever to change so maybe instead of eight hardcoded we'll just say languages. length minus one because again we need to leave assembly here so that at least if all the other programming languages disappear we can still program something well somebody can program something I certainly couldn't okay so that finally leads us to the is game over variable the game is over if either the game is won or the game is lost so now that we've put that work in we should be able to easily say is game over is equal to is game one or is game lost this is kind of just an intermediary convenience variable anywhere that we are relying on it we could have theoretically just said is game one or is game lost but this way is a little bit fewer characters all right so that was challenge number one number two we need to conditionally render the new game button only if the game is over so we'll come all the way down to our button right here add some curly braces and we'll go ahead and say is the game over and if that evaluates to true then we will render this button okay let's test it out we'll hit save and let's see should we win or lose first let's go ahead and win first R E A C T okay cool our new game button has shown up let's refresh this and just do a bunch of lost letters here oh I guess he is in there okay one more and we should be up not going to do R let's do Q all right the new game button showed up there too perfect with our new derived values we have a new Improvement that we can make to our app so that's what we'll jump on to next now that we know whether the game is over and whether the person has won or lost we can come back back down to this game status section and update it so that it's not a hardcoded uwin but instead we'll only display this uwin well done message if of course the user has won the game or alternatively we'll display this game over you better start learning assembly if the user has lost the game there's actually a third status that we're going to include here which is a sort of farewell message to each one of these programming languages whenever the user gets a wrong guess but we'll be worrying about that in a little bit so for now your challenge is written up here I want you to conditionally render the one or lost statuses from the design both in the text and the Styles based on the new derived variables that we created is game one is game lost or is game over as a quick note we want to make sure that we are always rendering the surrounding section so you can see in the design here even when there is no message being displayed we want that space to be open and if we were to remove that section from the Dom with conditional rendering then I think everything else would kind of bump up and then when a message popped up everything would bump back down we just want to leave that like an open slot all right the time is yours get started on this challenge let's come down to this section and we're going to be dealing with this section right here and as I mentioned we don't want to conditionally render this whole section because things would start to jump around on the page instead we can conditionally render what's inside that section so we will open this space up a little bit one point of trouble that you may have run into is that we get an error if we surround two of these elements in curly braces like this just like how components need to return a single parent element if we're going to be evaluating an expression that has some jsx inside it needs to be surrounded with a single parent element we could use something like a div or because we don't necessarily want to add any additional elements to the page we can just put in a fragment just like this now there's a lot of different ways that we could handle the conditional rendering here and there's certainly not one correct way just like in most of the stuff that we do when we're building these apps so the different approaches that I'll show you now are just different options that you might choose on the top level we can think of it as having two different states one where the game is not yet over and we want to display either a blank space or if we go into this design the little farewell message while we're in the middle of playing the game when the user chooses a wrong letter or the other state is that the game is over and then it kind of branches again from there either they've won or they've lost currently we are only really dealing with this second scenario where the game is over and we can use a Turner to help us determine on the top level which of those two major States whether the game is over or the game is not yet over is true so let's say if the game is over then we will render this section and for now I'm just going to put an else in here that maybe just says null let me format this cuz my spacing is looking a little funny at this point we could decide whether we want to Nest another Turner inside here to check if the game is one and if the game is one we render this one that says you win and otherwise we render the one that says that you lost or game over alternatively we could just change the text because we want the H2 and the paragraph to stay there whether they've won or lost but for some reason I think I would prefer to Nest a Turner here in this case it wouldn't be terribly confusing I think I'd be able to read it kind of like an if else statement which is a little bit of foreshadowing as to the next way we're going to see to do this so rather than putting a Turner here to determine the text and then another Turner here to determine this text as well let's go ahead and just give this a shot we'll say if the game is one and we're just nesting a Turner here we'll move this fragment with the H2 and paragraph inside and if the game is not won in this instance we can know that the game is lost because we're not reaching this code unless the game is over and then there's only two options from then the game is one or the game is not one which means the game is lost so maybe then we'll just copy this and we'll indent it and then we'll change our text it says game over and then this one says you lose better start learning assembly and I just copied that from The Design This is something we'll be coming back to later but I guess this isn't so terrible if we have our indentation correct then we can kind of read this like an IFL statement before we refactor anything here let's go ahead and get our Styles working because our styles are still going to make it look like they have won even if they've lost let me just guess a bunch of wrong letters here okay so it says game over you lose which is great that's a good first step but the green box sure makes it look like we won the game just like how there's different ways that we could have done this conditional rendering there's a few different ways that we could handle changing the Styles as well because we're kind of on a kick using clsx here I think I'm going to use clsx so above my return just right here I'm going to create a new variable called game status class and I'll set that equal to clsx or a call to that function clsx and we have a class name that's already being used here of game status so let me copy this and put that as my first argument which just means that I want you to always include the game status class and I guess I'll go ahead and set this equal to the game status class this is the string that's being returned from clsx and then I can provide maybe another object where I have different properties like a one class that is determined based on a condition and a lost class that is based on another condition well we have variables that I think help us know when we're won or lost so so I will apply the one class if is one or is game one is true and I'll apply the Lost class if is game lost is true and we'll keep a close eye on these to make sure that this logic is correct let's go ahead and refresh this app we haven't changed it since we added our little nested Turner in there and okay because the game is neither won nor lost we have a blank message there but the space is still being taken up so that's good the green box is not good so let's go over to our CSS and add some rules for one and lost so let's go over to the CSS and here's our section with the game status and I think right here I'm going to add section. game status. one and I'll do the same thing for DOT lost both of these will just be changing the background color and the winning color is this one actually I guess I can just take this line out of there and put it right here and the losing color from the design is this one right here all right let's uh go intentionally lose the game to see if that's working actually let's win the game first we owe ourselves that okay react awesome okay the space got taken up it has the green background it's got the new message perfect let's refresh and we'll intentionally lose the game okay perfect as you can tell a successful completion of this challenge did require a bit more than what I had led on in the beginning I just gave you the feature and expected that you would be able to think critically and do some of these tasks by yourself this was a hard challenge so if you didn't quite complete it then like I've said before don't feel bad this is all part of the learning process if you were able to complete it then do your little happy dance because that's pretty impressive I had mentioned that we might look at a different way to do this conditional rendering and so I think in the next lesson I'm just going to quickly show you another way that we can handle the logic that we're currently doing right here before we jump into a quick side lesson I wanted to apologize for anyone who is following along locally I had a design flaw that I didn't realize I had introduced here because as I'm recording here in scrimba our mini browser here is quite narrow and the flaw was something that I kind of overlooked those of you who have been using a wider screen have probably noticed that things are not aligning quite right and it turns out it's any of the elements that I have added a Max width to you see when I have the justify content Center on my body it's taking the center point of the element as it would be if it weren't constrained with a Max width so this paragraph for example which we can clearly see is off center from the entire page if I take the max width off then it expands to its full width and the center point of it aligns correctly with the center of the page I can come down here to let's see this is my language chips I also have a Max width if I take that off then it aligns correctly to the center I do still want those to have a Max width just so that they wrap in the way that I want so there's a few different fixes that I can provide I can either on every one of these put a margin in line of Auto but another fix that I found is we can provide another Flex box to the parent of all of these sections so that would be the main element I can say the display is going to be flex and we're getting a crazy layout right now but we will adjust the flex Direction so that it points downward in a column kind of like block elements and then I can use align items to the center and just like that we get everything nice and aligned to the center because of this I actually no longer need my display Flex or ad justify content on my body so I can get rid of those Styles and everything's in harmony making the main element its own Flex container does introduce a new problem if I win the game we can see that our status message is really tiny now it's being compressed to only fit the space that it has and so something we might want to add to our section with a game status right here is and I'll group these with the other sizing properties we'll say the width should be 100% but we will also set a Max width and just need to spell that right of 350 pixels that is looking much better and everything seems to be in harmony now again I apologize for anyone who was just ringing their hands at the missile alignment I know that would have bugged me if I were in your shoes all right let's jump back in and learn about another way that we can handle conditional rendering sure correct indentation can make our nested turnery look at least a little bit manageable but come on these crazy frowny faces are just really pretty awful I personally don't love nesting Turner and I thought it could be helpful for us to see another way that we could handle all of this conditional rendering it might be tempting to think well I can just simplify all of this crazy Turner logic by putting an if else statement directly inside however as it turns out we can't use IFL statements inside of our jsx expressions like this and that's because IFL statements don't implicitly return anything an expression on the other hand like a turner does automatically return these values and since they get returned as a JavaScript expression automatically does then it can get rendered to the page however that doesn't stop us from using an if else statement inside of a helper function so I'm going to just come up here right let's see maybe right below our game status I'll create a function that we call render game status and because I'm inside of a function I can return something from these functions and I can use JavaScript statements like an if else block at this point it's more of an algorithmic challenge to figure out exactly how to equate what we have down here with what's going to be in the function I don't think that's an important part of the scope of this course so one way I could do this is to quickly do an early return and say if the game is not over so is game over then for now we're going to be changing this later but for now we're returning null so I can say let's return null because this is an earlier return from this point on in the code I can assume that is game over is true and so I can just separately check is the game one if so let's return and let's grab this guy right here and put that there and otherwise we will return this one down here later in this series of challenges we are going to be finding some of the things that we can offload to a separate file and because of how tall this function is it feels like a good candidate for that for now we're not going to do that and I can just simplify all of this by calling render game status maybe I should hit save and test this out first okay let's win the game first okay awesome that's applying the way we'd think and then we'll go ahead and lose the game I guess I can't keep choosing correct letters if I want to lose the game okay awesome again this is not a right or wrong way to do it when I do find that my rendering logic is getting a little bit complex I'll sometimes prefer to offload that to a function that lives inside the body of my component we've really been jumping from one challenge to the next I think it might be helpful at this point for us to step back again and take a quick inventory as to what we might still be missing in our game just to reorient ourselves after this Whirlwind of challenges that we've done so far I think it could be helpful for us to take an inventory of the features that we still have in our backlog if you've gone over to the figma design you have already seen that we are planning to do these farewell messages every time the user gets something wrong and I don't remember if I've mentioned it but these are going to be randomly chosen from a list of different farewell messages so we do still need to handle this use case so we'll say that we need some farewell messages in the status section we also have a few pretty glaring accessibility issues that we need to make sure we fix so I'll say we're going to fix the accessibility issues and maybe just in case you didn't already know this because it took me an embarrassingly long time to figure this out but the reason accessibility is shortened like this is because it's starts with an A it has 11 letters in the middle and then it ends with a Y you'll also see abbreviations like internationalization which is I 18n because there's 18 letters in the middle of these two letters okay so we have some accessibility issues we need to fix we also currently have a new game button that doesn't work so we need to make the new game button work we're currently hardcoding the word that we need to guess as react so we need to actually choose a random word from a list of words and then last but not least we definitely want to make sure we drop some confetti when the user wins we'll certainly be making other improvements and little tweaks to the app along the way but I think this represents a full picture of the backlog that we still have to work on maybe this would also be a good opportunity to remind you that if you've been sitting down for a while maybe it's time to get up stretch take a few deep breaths go for a walk do whatever it is you need to do to reenter and refocus yourself I also won't be offended at all if you decide it's time to shut down the computer and pick this up at another time as they say we need to sharpen the saw once you're feeling refreshed and renewed let's jump into this backlog and continue making progress to finishing this app this is a fun game but let's not forget what's at stake here every time the user gets a wrong letter we have to Bid Farewell to one of the languages that gets erased from existence including this farewell message up in the status bar is your challenge for this lesson as a help what I've done is created a get farewell text function inside of this new util.from returns one of them now I'm not going to click on it but I do have a hintmd file that I have created if you give this your best shot and you find yourself getting stuck for maybe more than 15 or 20 minutes at that point you would have my permission to go over to hintmd to see if that hint helps you out but I do want you to do your best to solve the challenge without using that hint if you can the time is yours go ahead and get started on this challenge all right since I assume you have done that challenge now I'll go over to the hint and this instructs us that we need to know if the most recently guessed letter was a correct guess or not if we think in terms of the render cycle for our game when the user clicks one of the buttons to choose a letter what's actually rendering our app is that we are placing that letter in an array of guest letters guest letters doesn't indicate if it was a correct guess or not we are deriving that information elsewhere but simply by adding it to the array of guest letters our app is rendering and then based on that information is updating the display if the guest letter was in the word then it puts it in its correct spot in the word if it wasn't in the word then it's killing off one of our programming languages and marking the letter as red as the keyboard gets rendered however we need a way to know if the last item in that array of guest letters was a correct guess or not and by the way this probably isn't the only way to do it it's simply the way that I came up with but I'm super open to feedback if somebody comes up with a more logical or easier to reason about way then I would love to hear it come over to the Discord you can at mention me you can even send me a DM on X if you'd like Okay so let's come back to our app and maybe just to get started I'll go ahead and import this function we'll import the get farewell text from utils and maybe what we can do is derive whether or not the last guest letter was a correct letter or maybe since I'm going to display this only if the last guest letter was incorrect we'll go ahead and say const is last guest letter or let's just say last guess incorrect okay well I can get access to the last guest letter by finding the last item in our guest letters array so maybe I'll do that separately just so that I can kind of separate my logic here a little bit let's say last guest letter that is going to be equal to the array of guest letters at the index of the array of guest letters. length but then we have to do minus one just because of the zero indexing so this will get me the last guest letter it doesn't indicate whether it is correct or not but now what I can do is I can check to see if the current word includes the last guest letter and because this is a Boolean as to whether it's incorrect I'm going to say it does not include the last guess letter let's console log this is last guess incorrect we'll hit save oh interesting we did show True when the app was first rendered even though we haven't made a guess yet and that would be because guest letters is an empty array guest letters. length is zero and so we are trying to index into guest letters at the index of -1 which is going to be undefined so maybe we can just protect against this by making sure that the last guest letter is a real value and only then will we check if the current word includes the last guest letter okay let's try this again okay undefined that's going to work for us because it's a falsy value and we'll pass any of the conditional checks that we have later well actually before we continue on let me try this okay so we get yes it was an incorrect guess as the most recent one it should be another true another true and then let's do a letter we know is in there false okay good that is correctly telling us if the most recent guest was incorrect okay so what do we do now whenever the most recent guess was an incorrect guess then we want to display the farewell message we wrote a helper function to help us determine what should get rendered in that status section right here in render Gam status and we were just returning null if the game is not yet over but what we can do now is to also check if the last guess was incorrect so we can say if the game is not over and the is last guess incorrect is true then we can see we just have a single line here maybe we'll just render this as a paragraph so I'll return I need my return here return a paragraph and for now let's just get the styling correct I'm going to just say by we'll add a class name and maybe we'll say this is a farewell message and over in our CSS we can select the farewell message let's see game status here's one lost let's go ahead and oh look this is probably going to select the paragraph We already have that's okay um actually yeah let's duplicate this one and then make sure that the paragraph has a class of farewell message and I'm just going to paste in some of the styles that you can find in the design which gives it a dashed border a purplish background color it makes it italics bumps up the font weight a little bit and well let's just see what this looks like I haven't yet saved over here let's make sure yep we're returning this it's just going to say buy for now let's hit save and oh shoot I've made a mistake in my logic here and let's think about it okay so the game is not over the last guess is not incorrect so we're not considering it correct but it's not incorrect so then it skips this it comes to if the is game one is true that's not going to be true ah so then it's just hitting the else and it's telling us that the game is over you know what let's instead of having this else here let's explicitly check if the is game lost is true then we'll do that and then otherwise at the very end after all these returns if none of them hit then we will return null okay let's try again oh awesome okay our game over is gone let's go ahead and hit Z and oh look at that I just realized I don't want to put my styles on the paragraph I want to put those styles on the game status this is a mistake on my part I think I'm just going to leave it here in the recording because it's a very common thing so we can go back and fix this let's see we have some styles that are already being applied dynamically with clsx let's go ahead and just duplicate this we'll change this to be maybe a class called farewell and let's take the section specific Styles which are the background color and the Border here and we'll just replace that one clean this up a little bit the font style and font weight I believe I still want to be sitting there on the text itself and so now we will go over to where we have our clsx call right here and let's add another one called farewell and let's think this is going to apply if the is last guess incorrect but I think we might also want to make sure that we're not conflicting with the is game lost styles and so let's just make sure that the is game over is not true and the last guess is incorrect let's try this out we'll get an incorrect guess and okay well our styles are playing it's floating up there at the top a little bit let's go check that out and right here yes it looks like we're doing a display of flex Flex Direction column we're doing a line items which in the column Direction makes it centered horizontally but in this case we will also need to do justify content Center and okay great Just for kicks let's refresh again and see if the other message is still working even though we changed the justify content and so I'll need to win the game real quick okay good that's looking great let's get rid of that console log that's running every time we'll clean up our challenge text and just like the message says well done there's a lot of moving parts to this challenge we had to create a couple more derived values so that we could more easily check to see if the last letter was incorrect and therefore displaying that message the last thing we need to do is call our get farewell text function maybe I prematurely deleted the challenge text but that's the last thing we need to do instead of it just saying by we want to randomly choose one of those farewell messages so let's see right here it's saying buy instead let's go ahead and call get farewell text and let's see we need to call this function but it's expecting the language to be passed in so how can we get access to the language that was just removed well let's see one language is going to get removed for every incorrect guess and I believe we derived some State yeah for the wrong guess count so what if we index into the array of languages at the index of wrong guess count and then I think it would have to be minus one because language is is zero indexed let's go ahead and give that a try so right here get farewell text uh this is getting really long let me put these on its own lines and and I'll put the class name there we'll just kind of format this a little bit okay so I can call get farewell text I need to index into languages to try and find the correct language in this array I want to index by the wrong guess count and then that's going to be minus one and then we have to remember too that languages is an array of objects and so if we want the name of the language we're going to have to callame oh boy okay let's see if that works let's get it wrong and all right P HTML sad day but also happy day it's working that's quite a roller coaster of emotions we're on great work on this challenge I know that there were a lot of moving parts to this and something that seemed as simple as just display a simple message here ended up being quite a bit of logic hopefully that went well for you that we're really building something that has a lot of moving Parts I think I don't need this on its own line actually that's good enough and we can check one more item off of our backlog we're getting closer to completing this app before we jump into fixing some accessibility issues I added another item to our backlog which is to disable the keyboard when the game is over right now when the user completes the game let's go ahead and win here they can continue to guest letters and lose the game which wow gives us some pretty strange results here in order to stop the user from continuing to guess we can simply disable every one of these buttons whenever the game is over this is just going to be a super quick challenge it's your task here to do exactly that so go ahead and disable the keyboard when the game is over let's see let's come down to our keyboard elements and inside of the code for our button we can simply say disabled is equal to is game over so let's hit save buttons are still working which is good because the game is not over and okay just like that we can no longer click these buttons maybe let's just add a little bit of styling here so let's go ahead and say inside of the keyboard the button when it's disabled let's give it a cursor of not allowed and then we can actually set some opacity on it just to make it a little more obvious that the keyboard is disabled okay well doing this brings us into the next part of our backlog which is to fix some accessibility issues I was planning on starting that in the same lesson but I think just to keep everything organized we are going to do this in the next lesson one thing that's really important to do as you're building your app is to try and keep accessibility in mind specifically when you're choosing what elements to put on the page for example we made sure to make every one of the keys in the keyboard a button element because we get quite a bit of accessibility benefits for free by using a semantically correct button element instead of for example just making this a div that is clickable buttons automatically come with their own Focus State the ability to tab through them and you can make divs accessible but you just have to do a lot more work to get that done however when we're working in react and we're dynamically rendering or removing things from the page it's still really important for us to keep in mind what is changing and what might be difficult for assistive Technologies to keep up with if we don't specifically cater our code to those needs the thing that got me thinking about how we need to disable the keyboard when the game is over is that we want to also tell assisted technologies that those keys are disabled there are some screen readers that will announce when a button is disabled but some of them don't and so we can add a dedicated Arya disabled property if we can find our buttons here okay right here we have disabled it but we can add an Arya disabled and we could decide to set this equal to is game over in the same way that we did with the disabled property however when we're thinking about someone who is using the Tab Key to tab through all of these letters maybe a better user experience would be to disable the ones that have already been chosen to do that I could simply say something like the array of guest letters includes this current letter that we're looking at and I guess at that point it might be a choice to decide if that's also when we want to disable the keys in general we've already included some logic that doesn't allow the user to keep trying to add the same letter to the array of guest letters so I think I'll probably just leave it the way that it is thinking about the user experience from the point of view of someone using a screen reader as well when they're tabbing through these the screen reader will say the letter that is currently being focused in the button but it might be just a slightly better experience for us to label it with maybe the word letter beforehand so it actually says letter a letter b letter C I guess at that point it might just be a preference I'm not really sure but let's go ahead just for the sake of it and add an ARA label and this will simply say the word letter followed by the actual letter okay so that should make the user interactive part of it a lot more usable for those using assisted Technologies we also need to take some time to look at any portions of our site that are being dynamically rendered well one of those is the status message that pops up up here screen readers are not just going to automatically announce things that get added to the Dom by react but fortunately there's a way that we can Mark certain portions of our app as sections that will be live updated so we chose to render this with a function which is right here in render game status but the parent of these elements is just down here in the markup right here this section with the game status what we can do is add an ARA live region to it and say that it is polite polite just means that it's not going to interrupt the rest of whatever it's currently reading to announce changes to the section it will kind of cue it to the end of any changes that the screen readers currently reading there's also a role property and we can essentially say this section's role is to be a status let me put these on their own lines and doing this will give us some additional accessibility benefits okay well let's think about another part of this app that kind of acts like a status and is definitely something we would want to have read to our users if they're using a screen reader well I think it's going to be pretty important that they have some idea of what the current revealed status of our word is and while we could just surround the let's see this one this is our actual word we could surround this in an AR live region just like we did up here above with the game status however because this is such an important part of the game I think we could put a little bit of extra effort into what gets read out by a screen reader when this is being updated now because this isn't a dedicated course to accessibility I am just going to kind of explain the code that I'm writing as we go and hopefully it will give you some ideas of how to improve your own apps in the future something that we can do is we can create an entirely separate section whose sole purpose is not to display anything visually but to be read out loud by a screen reader and then with CSS we can just completely hide it from the Dom so maybe right below our word here I'm going to add another section and I'm going to add some CSS that will essentially just completely hide it from the Dom we'll give it a class name of Sr only for screen reader only then in our CSS I'm going to just paste in a screen reader only class that I have defined in another project it essentially is removing it from the visible area and doing everything it can to make sure it never shows up then just like we did in our status section we can also put an ARA live of polite and a roll of status right let me put these on their on lines too and oh I said Dash instead of equals okay so now anything that I put inside of this section is just going to be read out by the screen reader and that will happen anytime there's an update to this section so maybe the first thing I'll do is to put a paragraph that will just read out what the current word is and because this will never be there visually I can actually type in the text that I want the screen reader to read so I can say something like the current word colon and then I can just have it read out each individual letter of the current word so let's see we we have our current word We'll add a do split to turn it into an array and then we can map over it and for each letter in that array if the letter is currently revealed or in other words if the array of guest letters includes the current letter then we'll just have it read out the letter out loud and uh not the literal string letter but the letter itself and otherwise well it won't read anything out although I have found that if you have an empty string it's just going to ignore it so what we can do is actually just have it read the word blank so it'll say something like R blank blank blank blank another thing that I have found as I've played around with screen readers is that if you add a period like this it will add a little bit of an extra pause so if there were multiple letters instead of saying racd just super fast I think this might give it just a little bit of a pause between them I guess don't quote me on that I'm not 100% sure it's been a little bit since I've played with it okay well let's see I'm still mapping over this but I'm not actually turning it into a string that it can read out and let me put a period here too just in case that works the same way as I was describing before but now we can join things back together and we'll put a little bit of a space in there just to make it a little more readable for the screen reader okay I know this looks a little bit crazy we could probably offload some of this to a helper function if we want but I think this is going to get the job done for now there's actually a little bit more that I want to add to this section but since we've bitten off quite a bit in this lesson I want to give you a chance to review what we've done maybe think about other apps that you have created see if there's any of these accessibility roles that we've talked about that you could apply over there and then there's one other thing I want to add to this section which we're kind of treating like a generic screen reader status update section and so we'll do that in the next lesson another accessibility user experience Improvement that we can make is not just to reread out the current state of the word and the status that we have up above but we could simply announce whenever a letter was guessed correctly or incorrectly every time the letter is guessed so after the user selects a letter we could have the screen reader read something out like correct the letter R is in the word or sorry the letter Q is not in the word we could even add something that says you have six attempts left now we could choose to do that in a completely different section but I think just before this paragraph I'm going to add another paragraph that will announce whether or not the previously guessed letter was correct so let's go ahead and add a paragraph and what we'll do is check to see if the most recently guessed letter is in the current word we'll have it read out correct the letter whatever is in the word otherwise we'll have it read the negative side of that statement and I think we are saving the last guest letter Yeah we actually created a separate variable up here so we can get access to that awesome so let's see write down here we're going to check to see if the current word includes the last guest letter and if it does this is where we can have the text of the paragraph just read out what we want it to say so correct the letter and then this will be the last guest letter is in the word otherwise we can put our message that says sorry the letter last guest letter is not in the word and then whether it was right or not we could say something like you have H we need to know how many attempts they're going to have left let me just hardcode this we'll say you have four attempts left and let's see the number of attempts that they have left is going to be we had figured something out up above and yeah we were using languages. length minus one as our number of incorrect guesses that we're allowed to have so I guess we could just use this again although I kind of want to just derive that value so we can use it elsewhere maybe just right here at the top I'll say something like number of guesses remaining left number of guesses left is equal to languages do length and then minus one because we need to leave assembly as the last item okay so then number of guess is left Let's see we can just say this and then with that new derived value we can come down to our screen reader only section again and then instead of putting in the hardcoded for we'll say numb guesses left and with just those few updates maybe a dozen or two lines of code we have now made this app much much more accessible for those using any kind of assist of Technology of course it's also important to make sure you go through and make sure that your contrast ratios are good enough and everything like that but what we've done here marks a huge step forward in the accessibility friendliness of this app right now another developer coming to the section might pretty easily miss the class name of Sr only and so I think it can be helpful to include a little comment here that can say that this is a kind of combined visually hidden ARA live region for status updates okay let's come up to our list here and we're just going to mark this one off there likely are other improvements we could make there's always more that you can do but we just have three more really small features to add to our game two of which are crucial for the functionality of the game and one of which is just going to be a really fun way to wrap things up so next let's jump on to the next item in our backlog and actually now that I'm looking at this I'm going to swap these two I want us first to choose a random word from a list of words so that's what we'll be working on next this should be a pretty short and sweet challenge we are going to make it so that a random word is chosen when the game starts right now we're just hardcoding rea react but we're going to make it so that a random word will get chosen I've created a new file called words. JS that has close to 500 words in it I tried to weed out anything that was fewer than five letters and greater than something like nine letters I think and so your task is to come over here to utils.py algorithmic challenge nothing very react specific to it but then I want you to import that function into this file the app.jsx file and figure out where to use that function go ahead and get started on this challenge all right let's come over to utils.py a random number that's in the index of the array of words so let's create a random index and set that equal to math. floor math. random and then we can make sure that it's limited to the length of the array by multiplying this by words. length then all we have to do is return words at the index of our random index easy peasy okay let's come over here to our app file and from utils we're already importing the get farewell text let's go ahead and also import get random word and we're really flying through this challenge we've already finished one and two let's figure out where to use that function well we were hardcoding react as the initial word that we were using and instead of using react we're basically going to be turning on the game now we're going to call get random word and let's try playing our game we'll hit save and look at that we no longer have a felet word here oo this is a long one this is eight letters let's see usually longer words in hangman are a little bit easier but I'm not doing very well here Ah that's why there's two eyes sorry HTML CSS and JavaScript we have already lost you let's see what could this be ah I think this is military sure enough all right well we're still left with typescript node Python and Ruby so we did pretty good military yay we won now some of you might have remembered that if we are initializing state by calling a function like this technically every time we cause a render in our app react will rerun this function even though it's not going to use its returned value to change the state again it is calling this function again every time this get random word function is not a very expensive function but it doesn't hurt us to use lazy State initialization which we learned in the last section by simply wrapping this in a callback function this way on the very first render react will call this function and it will get our random word and set the initial state but on subsequent rerenders it's just going to Simply ignore this function that way we're not running any extra operations that we don't need to be awesome let's clean up this challenge text and Mark this next one as completed the next thing we'll be working on is giving the new game button some love so that clicking it actually resets the game this is going to be another short and sweet one that's how you know we're really tying off the Loose Ends of our game here your challenge is to make the new game button reset the game go ahead and get started on this challenge all right well let's hook up our button first and then we'll write the logic for it so maybe just right here I'll add a new function that says start new game and I'll just console log start a new game that'll do for now we'll go ahead and hook up our button which is way down here at the bottom for new game we'll say onclick it's going to Simply call start new game okay let's hit save and I guess we need to actually play this game now in order to display the new game button oh no this is not a good start oh I don't need to win this game for this to show up I can just lose the game okay let's go ahead and click new game start a new game perfect okay oh I just thought of another feature we need to add we need to display the word after the game has been lost otherwise it's so anticlimactic we never get to figure out what it was anyway let's stay focused up here where we are resetting the game okay we don't need to console log start a new game there are two things that we need to update first of all we need to get a new random word because this one's been used now and secondly we are maintaining a list of guest letters and we need to empty that back out because we want our keyboard to refresh we don't want to display any of those letters to the new word and so forth so we can use our state Setter functions to set the current word and of of course once again we will call get random word and then we will say set guest letters to an empty array once again shorten suweet this should be working let's go ahead and just lose the game right now these last letters tend to not be correct and we'll click new game and perfect everything starts over okay I'm actually going to add that item to our list here we need to reveal what the word was if the user loses the game in the meantime we can mark this one off we are so close to the Finish Line I can practically taste it so let's hurry on to the next challenge this one will require a little bit extra thinking compared to the last two challenges so what I want you to do is to reveal the missing letters of the word if the user loses the game so for example let's just lose the game real quick here oh jeez I'm not losing okay here we go we don't want this to be a mystery we want to reveal what the word was to the user so you'll have to think through the logic of how these letters get displayed and if the game is lost you'll want to reveal the missing letters and as it mentions here for now let's go ahead and style them with the same red color that we use for the button Keys when they're incorrect go ahead and get started on this challenge all right well let's go down to where we are figuring this logic out of how we display the letters and that's right here when we're mapping over the current word I think the first thing I'll do is figure out the logic to display the missing letters only when the user has lost the game and then we'll worry about styling them the most concise way I could think to do this wouldn't be to conditionally render one span or another depending on whether they missed that letter and lost the game or not although that would have been a completely legitimate way to do it if that's how you decided to solve it currently as I'm mapping over the current word I am publicly displaying that secret letter if it is included in the guest letters what I could do is simply come up with another variable that will also display this letter if the game is lost so that if the game is not lost it will only display it if it's in the guest letters and if the game is lost it will just display all the letters so let's go ahead and do that one thing I can do is just create a new variable that's called maybe something like should reveal letter and I want the letter to be revealed if the game is lost just automatically display the letter or if the guest letters includes the letter that we're currently mapping over oh and I was using an implicit return before so I'm going to have to fix some of my brackets here let's see I'll move this down here we'll return the span yeah there we go okay so instead of doing this we'll say should reveal letter and let's go ahead and lose the game and see if it shows all the letters well this is a long one all right holy cow three T's okay statement yes perfect the word was revealed now because clsx is so powerful we can use it to determine if the letter was not in the guest letters array and if the game is over then we can dynamically add a class name so let's see right below here let's go ahead and say maybe the letter class name is equal to clsx and the first thing we want to make sure is that the game is lost we want to add a class name if this letter was not included in the guest letters so we'll say if not guest letters do includes the current letter then we can add the class let's call it missed letter I'll go ahead and make sure to add my class name of letter class name I'll hit save and come to my CSS and I guess we're already here so this rule right here the span is what we're trying to attach to let's add a class for M letter and we will just change its color to be the red color from the design okay let's go ahead and lose this game wow that looks so good that is a much better end of game user experience all right the last Challenge and arguably the most fun one let's make it so that our confetti will drop when the user wins the game this challenge kind of feels like in golf when you just barely missed a p and all you have to do is just send it home we've literally done this exact same challenge in the last project at the end of tenes so this should feel right at home to you I've already installed the react confetti package and imported the confetti component here all you need to do is trigger the confetti drop when the user wins the game I'll hand it over to you to send us home I guess before I walk through this challenge you may have noticed that I did have to downgrade my version of react back to react 18 that simply has to do with the fact that react 19 is not officially launched yet it's still on the release candidate version and it seems like the react confetti package is not yet working with react 19 all right let's do it we'll go down to our markup down here below and it doesn't really matter where we do it I think I'm just going to have it be rendered right here at the top we'll call this a glass half full kind of decision and we'll say if the game is one then we'll go ahead and render confetti now I actually actually am going to add some of the options to confetti the props that you can pass to it specifically I'm actually going to turn off the infinite confetti by setting recycle equal to false and you can specify the number of pieces these are just things you can find from the documentation for react confetti and I'm going to bump it up a little bit to a thousand let's do our best to win this game this would be a little anticlimactic if I lose now oh I'm on a roll look at that I think we need another vowel here oh yeah o I think it's distance here we go before I click the N it's going to be anticlimactic for you as the viewer because you're not going to be able to see the canvas elements of the confetti dropping but I can tell you that it is awesome what a celebration I guess you'll just have to hit refresh and play the game for yourself now surely there are other improvements we can make to this game but before we jump into a recap of everything that we did with this game I want you to take a second and just look at this code base this is a hefty code base let me go ahead and check this off too obviously this doesn't compare to any Enterprise level apps that you're making but this definitely represents the longest app that we have built in this course and it looks and works amazing huge congratulations to you if you made it through the entire react course up until this point that is an amazing accomplishment we are going to celebrate that even more in the wrapup that we'll do in the next scrim and recap everything that we've learned well you've done it you've saved Humanity from having to suffer through writing assembly for everything in all seriousness this was a complex project and you have done an amazing job working through all of the challenges along the way to building it and just like the tenes game this is another one that will be super fun to share with your family and friends if you want to keep the fun going there are a few extra credit ideas that I came up with first you could simply display the remaining guest's count we do have the visual of the remaining languages but maybe just having the number of remaining guesses allowed could be a helpful UI addition we do celebrate the win with the confetti component but you could consider rendering some kind of I don't know anti-c confetti when the game is lost or maybe another animation that really makes the user feel that loss you could also Implement something like a chess timer that starts when a new game starts and causes a loss if the time Runs Out adding a little bit of extra pressure to the player there are a couple things that you definitely should do the first one is you should deploy this live online so you can share it with other people including putting it in your portfolio and secondly you guessed it you should head over to the today I did channel on the scrimba Discord server even if you don't have it posted live online to share a link with other people simply leaving a message there to celebrate your win is a great way to engage with the community amazing job completing this project hey you did it we're here at the end of the course you should be so proud of yourself for finishing because assuming you've done all the challenges and projects in this course you are well on your way to becoming a proficient react developer as I said in the very beginning of this course My Philosophy is that the easiest way to get good at something is to put in the work to do it the hard way and considering you are here at the end having done all the projects you have put in the hard work and I can promise you that it will have been worth it let's take a look back on the projects that we worked on in the different sections of this course and do a quick recap of what we have learned in section one we started with really basic static pages and reacts that we could build a solid foundation to support the rest of our learning in react and we begun that section by First Learning why we even care about react in the first place we talked about how react is declarative making it a much better developer experience and how react is composable allowing us to build reusable pieces that can be combined together to make a masterpiece P of a web app we touched on setting up a new react project not only in terms of the code that you have to write but also how to do it on your local machine then we learned about react elements and how jsx was created to make creating those react elements a very familiar experience similar to writing HTML then we learned about the Crux of composability in react by learning about custom components custom components allow us to collocate logic markup and styling all in the same place to create a custom reusable piece of code and then of course we needed to make sure that we added some styling so that we weren't just throwing around ugly components with that knowledge we were able to build our first static react fax web page from there we moved on to our second section where we built a travel journal what set this travel Journal apart from the react fax project is that it was Data driven we really drove home the concept that reusability is extremely important and learned how we can take our react components pass props into them so that they could be reused in multiple different ways once we knew how to pass props into a component similar to how you pass parameters into a function we learned how we can use vanilla JavaScript array methods to create components from an array of data doing this allowed us to put the data for our travel journal in one place and simply map over it to create the ultimate view on the page this meant that if we wanted to add new entries to our travel journal or change a detail of one of the items all we had to do was change it in one place the data then we really dialed it up to 11 and jumped into this Chef Claud project in Section 3 this section was entirely dedicated to building interactive web apps whereas before we were working with static readon Pages now we're able to respond to the users inputs by learning about event listeners and how we can update our app based on the interactions of our users we learned about state which allows us not only to save information between one render and the next but also allowed us developers to focus on updating the state correctly and letting that flow to the UI which is what react is intended to do changes to the state will automatically update what the user sees we learned about conditional rendering how we can display or not display certain parts of the web page based on conditions then we learned about forms and how react 19 enables an entirely new approach to forms which is much more closely aligned with how the native web platform handles forms and we took a chance to dabble just a little bit into different State Management strategies although State Management is a rabbit hole that would probably require an entire course of its own then we had a lot of fun building our meme generator and learning about side effects in react we began the section by talking about controlled components which are essentially the way that react has approached dealing with forms all the way up until very recently at the time of this recording but there are scenarios where controlled components can still be useful in our case we wanted to update our state so that the top text would reflect on every keystroke what the user was typing into the input box then we talked a little bit about how react has a philosophical basis in functional programming we touched on the concepts of immutability in react and how our components shouldn't affect any outside systems from themselves however the purpose of the side effect section is to learn how we can use an escape hatch from that functional programming Paradigm when we absolutely need to and the way that we did this in our meme generator project was to fetch some data as soon as the component loaded having a so-called escape hatch which gives us a chance to safely handle side effects whenever they're absolutely necessary turns out not only to be a really important thing in react but also one of the more misunderstood aspects of react then we got to the place where the rubber met the road and that was in our Capstone projects we built two back-to-back games that were both really fun to build and legitimately are fun to play hopefully looking back at all of these sections gives you a really strong sense of appreciation as to how much time and effort you put into this course this would be a perfect opportunity for you to head to the today I did channel on the scrimba Discord server and post a message thereare I say brag about this tremendous accomplishment now I don't want to just leave you hanging at the end of this course so I wanted to give you some ideas of what you could be working on next naturally I'd first like to put in a plug for my Advanced react course here on scrimba the advanced react course is the progression from where we left off at the end of this course in that course we dive deep into reusability in react and learn a bunch of new ways that we can turn our reusable components into even more reusable components we learn how to build single page applications using the react router library and we learn all about performance in react and how we can improve the performance of our react apps another really important topic you could move on to if you haven't already learned it is typescript and good news I also have a typescript course here on scrimba and it is is completely free I already mentioned react router but you could focus specifically on learning the react router package at the time of recording react router is about to release version 7 which is a completely new version of react router if you're looking to go more into a fullstack realm nextjs and remix are awesome Frameworks that you can use to be building not only the front ends like we've learned here in react but also the back ends so you can handle server interactions data caching cookies and all of that if you are interested in backend you could go the direct backend route by learning no. JS with or without Express all to help you build rest apis that your front-end react apps can consume and last but certainly not least you could learn about deployment and how you can get your apps live on the web for your friends family and potential future employers to check out my name is Bob s it has been my absolute pleasure to teach this course and guide you through learning react my username pretty much everywhere on the web is Bob zero although these days I do tend to be most active on X if if you click my username here it will take you to my profile I would certainly appreciate a follow and folks that's all I have left to say except for congratulations on completing this learn react [Music] course hi I'm Tom from scrimba and in this section I'm going to take you through a couple of really useful VSS code and Chrome browser extensions which you going to make your life as a react developer just a little bit easier as we look at these extensions we're going to be working on this layout this is actually a screenshot right here so the company is urban nest and this is the dashboard and on the dashboard we've got four product cards and four user detail cards these contain dashboard type activities like changing billing address or changing password now if we have a close look at this you can see that we've got the username right here in the header also here in the dashboard title we're using it again down here and you might also notice that we've got the location here and that is going to affect which currency symbol we use and we've also got the user's email address in this card right here so you're starting to get a feel hopefully for the way that props are used in this project now at the moment we're working inside scrimber and I've already written some of the code let's just open up the mini browser and see where we are so we've got a header and we've got a footer but we haven't got any of that content in the middle and the reason for that is that we've got this dashboard component but it's completely empty so what we're going to work on is getting this dashboard component sorted out using some browser extensions and to do that I want to move everything over to vs code really easy to do in scrimba I just click on settings download zip that's downloaded a file and there we are we've already unzipped the file and I'm just going to change this name to something more useful and I'll call it Urban nest and now let's head over to vs code and open up this folder so it was in downloads Urban Nest okay we've got all of our code here and we can just follow the instructions inside readme.md to start the server so we just need to do npm install and npm start let's open up a new instance of the terminal so first npm install and that will bring in all of our packages and then mpm start to start the server and then we can just click on this link and there we are we are open in the browser and we can see we've got the header and the footer okay let's just take a quick look at the code we've got so you understand how this layout works we start off with app.js that is bringing in the header and the footer also in here we've got some State this is just set up with me so we've got my name my email address my location and my age which is honestly not entirely accurate and then we're just rendering out the header and the footer components passing in the props that they need now there's nothing particularly strange going on the header is basically what you'd expect we've got this nav element and then it's right here that we're using the username and the location and if we flip back to the browser that's what you can see right here now down in the footer it says follow us on Instagram that's kind of important if we go to the footer we've got this cheeky little bit of turnery right here and I might just make that a little bit clearer by bringing it down onto a couple of lines so what's going on here is that we're checking the age and if it's greater than 50 we're inviting them to follow us on Facebook if if it's greater than 12 we're inviting them to follow us on Instagram and if not so they're under 12 we're inviting them to follow us on Tik Tok and if we just head back to app.jsx I said that my age was 30 and that's right we're sing Instagram down here but we could change that and now it says Tik Tok okay let's put that back now I can still show you the screenshot that we've got we should have it right here in images and that's just going to show us what we're working towards so we've got these four product cards we've already got a component for that right here product card. jsx we're reusing that four times and then down here we've got the user detail cards again we've already got the react in there so we've got all of that code available to us we just need to put it to good use in dashboard. jsx so the first thing we need in dashboard is a functional component and that brings us to our first extension adding an extension in VSS code is really easy we just come to this icon right here or you can go to views and extensions and then in here you can just search for the extension you want you could just use a keyword and see what comes up I actually know the one I'm looking for but if I put in react it's this first one which comes up is es7 plus react Redux react native Snippets a really Snappy name all I need to do is Click install a couple of things to notice on this page it's got nearly 13 million downloads which is great it's also well reviewed and we could scroll down and see a bit of information about it and what features it's got but I'm just going to give you a quick demonstration so let's just close that come to dashboard. jsx now I'm going to use a key binding and in vs code there are loads of key bindings it just means key combinations that bring up some kind of shortcut I'm going to use command shift and R but if you're on Windows you would actually use control out and R what that does is it brings up this pretty fish looking menu of all of these options and these are all code Snippets that this extension can give us so we've got stuff here which is both for react for Redux and for react native some of it is Legacy so you'll likely never use it some of it is is highly complex that you probably haven't come across as yet so we've got for example hocc which stands for higher order components when we click that it gives us the code we need but hey that's getting a little bit ahead of ourselves so again command shift R and let's actually do something useful what we want to create here is a functional component and so we can use this search functionality and I've put in functional comp and then down here at the bottom creates a react functional component with es7 module system that sounds good now we could just click on this right here but as we're going to be reusing this a bit why don't we try and remember these four letters r f c e and that stands for react functional component and then the E is for export we use that just by typing it right here in the editor react functional component export hit enter and look there we are it's made a functional component for us and it's actually taken the name dashboard from the name of the file so we don't have to so that is a nice really quick way of setting up a functional component now I should give you a warning here that if you rely too much on these automated code Snippets you might end up in a situation where you can't even write very basic react code like a functional component you could end up looking pretty silly for example in an interview environment so do make sure you actually know the code that you're generating automatically that is the best way to use a tool like this it should just be for saving time okay let's quickly pop back to our screenshot and we can see that we need a dashboard right here that's going to be inside an H1 so let's return that here we also have the name of the user in this case Tom's dashboard so let's take that in as props and I'm actually destructuring the props right here so I'm using username inside the curly braces and then we can use it right here we don't have to say props do username now the dashboard is going to have these four product cards and we've got the data for the product cards right here in this data folder product data.js now we also need to use product card. jsx so we've got some importing to do and to be honest importing can be a your pain cuz you can end up with some really long relative paths because you've got a heavily nested file structure it can be quite confusing and really difficult to debug so we're going to use a really useful vs code extension which is going to help us with importing now the snippet that we used before gives us this import statement that we don't actually need so let's delete that and now let's investigate an extension which will help us with importing and the extension I'm looking for is called Auto Import relative path this is the one right here so let's click install and if we just clear the search box that will take us back to our installed extensions what you'll notice is that we got two for the price of one we've got Auto Import relative path and drag and drop import relative path and it's this one that I'm really interested in although they come together so let's just go back to the files and what I'm going to do is take this component that we want to import I'm going to drag it over now if I let it go now it's just going to open the file but if I put it in position hold down the shift key and then release the mouse button there I get our full import statement including the relative path this is a really short relative path so it wouldn't have been that much trouble to write it ourselves but it's done it for us all we need to do is update the name and now we can use the product card components but in order to use it effectively we need to get access to this data we're going to be mapping over that data so let's import that next and again I'll just drag it and hold down shift and drop it in so we want to import product data from and then we've got the relative path this one a little bit more complicated because it is in a different folder so that has saved us a little bit of cognitive load okay let's map over this data so I'll set up a const right here inside the component and I'll call this const product cards and then we'll take product data call the map method and that will take in an arrow function with a single parameter which will be a product and let's bring this down onto a new line because we've got quite a lot to do here so for each product want to return to this array an instance of our product card component and that is going to need some props let's just have a quick look at the product card components so each one is an article and inside we've got a card title an item name we've got a currency symbol which we're sorting out right here based on the location we've got the price we've got the source for the image and the out text so we need to bring in all all of this and let's actually just copy this list and we need to remember when mapping over data and creating these components that each one needs to have a key prop and the key prop if we look at the data is going to be this ID so it will be available at product ID and actually most of these are going to come from product location is the exception so let's just put product in these five props and then location we are taking in in app.jsx so we've got it set right here when eventually we add in the dashboard component we'll be passing it down so let's bring it in right here and we should be done so let's just take our product cards and we're going to render them down here in this return statement and they're going to live inside a section and that section needs to have the CSS class name of product cards container we've got an error here and that's because we're no longer rendering just one thing so we can just wrap everything here in a fragment and then we'll take the product cards and render them right there okay let's save that and we'll head over to app.js and let's see if we can import our dashboard and I'll do this one a different way I'm just going to write import and then when I put a d we see dashboard if I click on it it does the rest for us so you've got two options the drag and drop we did before or just writing import the name of the component and then let it do the rest okay down between the header and the footer we can render the dashboard and we do need to pass in some props we need the username and we also need the location and we will actually be adding to that list later okay let's hit save we can open up the mini browser and there we are we have got our four product cards so that is looking pretty good now we're not done because go back to the screenshots well we need the these user detail cards as well we've already got a component for that right here so all we need to do is bring those in so back at the dashboard let's import user detail cards and as they are actually the main content on that page they are going to go in an HTML main element now we know we want four of them and things do get a little bit strange here because we've got the email address and we've got the username so I haven't given us a data file like we've got here to map over I don't think it's realistic that that information would be coming down from some API or something like that so instead we're just going to render this one out four times just to save you watching me do loads of typing I've actually got a text file right here with everything that we need so I'm just going to copy that over and I'll just pass those in as props and if we just check that component we can see that each one is expecting title and text that should do the trick and just notice how we've used curly braces on two of these where we are including props the user email and the usern name okay let's hit save and then when we open up the browser we've got a bit of a problem so something has gone wrong let's just investigate what's going on in this component so we have got the user detail card that should work just fine but let's check the props that we've got coming in we've got username and location we haven't got user email so let's add that to the list and let's just make sure in app.js that we're passing that down to the dashboard we're not at this moment let's save and try again and there we are look that is working just fine okay now we've got that working I want to show you a really cool Chrome extension let's come up here to our Chrome settings go to extensions visit Chrome web store and again we'll search on react and this is the one we want react developer tools we're going to add it to Chrome and now let's go back to our layout and we'll just open up the dev tools and what we're going to get from this extension is a couple of options right in here and actually we're not because I need to do a refresh and now when I click on these two arrows right here we'll see two new options components and profiler let's just click on components and we might just make ourselves a little bit more so we can actually see our app so what have we got here we can actually see the entire react tree we've got the app we've got the header and if we click on one like I've just clicked on header we can see the props we've got we've got location UK username Tom if we move on down to the dashboard we've got our individual product cards again we can see all of our props in here that is pretty cool let's just head up to app here we've got the hooks so we've got all of our State let's just change one of these so one of the benefits of this extension is that we can just make some changes and see rendering actually happen live right here we've got the pound sign because I've put my location as the UK let's change that to us and when I hit enter look what happens we get the dollar sign instead and if I scroll right to the bottom it says here follow us on Instagram let's change my age to 130 and now it says follow us on Facebook take it down to age one follow us on Tik Tok so you can really see how the state that you change is percolating down through the apps as it's passed down as props so that can be really really useful for understanding how an app works and of course for debugging now we had another option in here which was this one profiler and this is quite an advanced one and you're probably not going to use this anytime soon but I want to show you quickly and just explain a bit about what it does what happens is that we can click the blue button to record and now we can interact with the app and so because this is basically a static site at the moment I'm just going to flip back to the components and then let's make some changes let's put the age back to 30 and the country back to UK and now if we go back to Prof filer I'll stop the recording and now we get some feedback on how fast our app responded and exactly what happens so we can see what rendered and how long it took and that can be really really useful for seeing reenders you might find in a complex app where something's gone wrong that you're just rendering the same component thousands of times and it's causing performance issues well this is the tool to help you debug that as I say it is quite an advanced topic not one you're going to use anytime soon but good to know that it's there okay we're not quite done I want to go back to vs code and I just want to show you two more extensions let's go to the extensions Tab and here I'm going to search for react tree and we come across react component tree let's install that and I'm just going to close down that tab now down here we got a new option build tree let's click it and look what we get here we get a similar view of the tree as we actually got in the dev tools this one is also pretty useful so imagine you've got a massive app and you're looking at a component well right now if we go to dashboard it's going to highlight it here and you can instantly see how it fits into the tree again let's go back to the file explorer I'll take product card and now when I to the tree and by the way we've got a new icon for it right here I can easily find it in this tree and just see what the parent or sibling elements are now this one I think is quite useful but there's actually a somewhat better one I'm just going to put in here react tree all as one word this is the one I want let's install that okay we get another option down here which is start tree let's click that and I'm just going to close all of the open files and it's inviting us to select a file let's click on that and we will go to downloads Urban Nest let's just take the top of the funnel so app.jsx let's open that and look here we get a really nice visualization of the app and we might just zoom out a little bit so we can see it all so we've got app.jsx the three components it renders and the two components we've just added to the dashboard if we click this P icon which is gray out in here that will actually open up all of the props so you can see what's going on we've got the username here and here for example we can see that we passed title and text down to user detail card you can also change the direction it might be a bit easier to read left to right than top to bottom and also you can play around with the layout which again in a big app might be useful just to be able to sort of spread things around and see what is where and perhaps consider some changes consider making things a little bit more economical okay so we are done those are some pretty useful extensions that you can use with vs code or with chrome to make your life as a react developer just a little bit easier"
F0GQ0l2NfHA,Generative AI for Developers – Comprehensive Course,https://www.youtube.com/watch?v=F0GQ0l2NfHA,freeCodeCamp.org,UC8butISFwT-Wl7EV0hUK0BQ,"In this comprehensive Generative AI course from @dswithbappy, you'll dive deep into the world of generative AI, exploring key ...",2024-10-31T13:56:09Z,"in this comprehensive generative AI course you'll dive deep into the world of generative AI exploring key Concepts such as large language models data pre-processing and Advanced Techniques like fine-tuning and rag through Hands-On projects with tools like hugging face open Ai and Lang chain you'll build real world applications from text summarization to custom chatbots by the end you'll have mastered AI pipelines Vector databases and deployment techniques using platforms like Google Cloud vertex Ai and AWS Bedrock Baker Ahmed B created this course JV is the most demandable skills nowadays across Industries if you see all the industries have started using genv in their product development if you want to level up your skill and if you want to crack good job nowadays with a good package definitely you should know about genbi if you're looking for well organized n2n complete genv course I have a very much good news for you recently I have published one amazing n2n genv course so here I have covered everything you need to know to master the genbi this course will cover Basics to Advanced concept of genv so here we are not only going to focus on the theoretical part we'll be also focusing on the Practical implementation of genbi we'll be exploring different different kinds of large language model with that we'll be creating different different kinds of gen VI based application so let me show you the course content of this course so guys as you can see this is the course content as I already told you we'll be starting from very basics of the Gen and we'll be covering till Advanced part of the Gen so here we'll be starting from uh introduction of the Gen VI so if you're completely new to this field no need to worry I'll cover each and everything you need to know about gen VI then we'll be learning about data pre-processing and emitting because going forward whenever you'll be using large language model and to give your data to the large language model first of all you have to know how to process this data and how to generate the embeddings of the data and to process our data we need to know some of the technique so here we'll be covering these are the technique in this section then we'll be starting with the large language model we'll be learning about different kinds of large language model we'll be learning about commercial large language model we'll be also learning about open source large language model we'll be starting with the hugging F platform and its API because if you see the hugging pH hugging pH is having all kinds of large language model whether it's a commercial model whether it's a open source model all kinds of model are available inside the hugging face platform then we'll be also learning about open Ai and its platform because if you see nowaday open AI is evolving a lot they are coming up with different different kinds of large language model like they are coming up with image model language model OKAY different different kinds of model they are bringing so in this course we'll be learning about the complete openi and its platform so that you can use openi platform to implement any of genv based application we'll be learning about prompt engineering because if you see prompt is everything for the large language model so if you are designing a good prompt definitely you will be getting a good response from the large language model so here we'll be learning how we can designer efficient prompt and we'll be also learning about different different kinds of prompting inside large language model in this course we'll be mastering the vector database we'll be learning different kinds of vector database like Pine con we chroma files and so on this Vector database will help you to create a knowledge base so whenever you will be creating any kinds of rack based application any kinds of LM powered application this Vector database concept will help you a lot in this course we'll be mastering different different kinds of genbi based framework like we'll be mastering Lang chain llama index CH leit and so on these are the fr work will help you to implement different different kinds of jni based application in this course we'll also learn one very important topic inside jtbi called retable augmented generation that means rack so we'll be learning how we can create different kinds of rack based application with our custom data even we'll be also learning how we can find you any kinds of large language model on top of our custom data after completing all the topics inside genbi we'll be starting with some n2n project implementation with the deployment so here we'll be implementing these kinds of project from scratch we'll be using modular coding to implement this kinds of project at the last of the course we'll be also discussing about llm Ops if you see inside genbi llm Ops is the most trending topic nowadays we'll be learning how we can use different different kinds of llm Ops platform like we'll be learning about Bedrock vertex Ai and we'll be learning how we can use these are the platform to implement efficient large language based application so yes this is the complete curriculum of our course so if you want to start your career with jvi guys so this would be the amazing course for you so make sure you complete this course till till the end and this is my promise guys you will become Champion inside geni with that guys all the best and I will see you in the course hi everyone welcome to the course of generative VI my name is BK Ahmed Bui and I am a data scientist and Mentor I'm having more than four years of working experience in the field of machine learning deep learning generative mlops and so on I have already worked with so many multinational company as a developer even I also work with so many attech company as a mentor I have also taken lots of bats related generative machine learning deep learning computer vision national language processing and so on so throughout the entire course I'm going to be your Mentor so as I already have some experience from the industry so in this particular course I'm going to share my knowledge and experience with you so in this course we'll be starting with the very Basics concept of generative and we'll be completing till Advanced part of the generative a so if you're a beginner if you want to start your career with the genbi so this course is for you I have designed this particular course in a such a way so that anyone is coming from any kinds of domain they will be also able to understand so if you're from non-tech background if you're from Tech background it doesn't matter so if you are interested in Genera only you just need to start with this course everything I will take care apart from the theoretical understanding I'm also going to show you lots of practical in this particular course we'll be doing lots of Hands-On in this particular course we'll be solving different different problem statement in this course so that your understanding would be more clear hello everyone welcome back with another video in this video we'll be discussing about what is gener tvi so before discussing about generative a first of all uh let me introduce some of the real world application of the generative you are using in your day-to-day life so I think you know about chat GPT Google Jin metal Lama right so these are the application you are using in your day-to-day life I hope everyone has used chat GPT at least right since at chat GPT what we can perform we can give any kinds of prompt we can uh do the conversation we can do the summarization we can generate the content we can generate the code we can do the Tex summarization any kinds of task we can perform in the chat gbt right so similar wise Google has developed their own product called jini Okay Google jini so with the help of Google jini also we can perform the same things the things actually we perform usually in our chat gbt so the same thing we can perform with the help of metal amar2 as well that means chat GPT is developed by open AI uh Google J mini is developed by Google and Lama is developed by meta okay meta that means Facebook so all the TS company iies are working on generative day by day they are improving this particular generative they're bringing actually different different large language model and they're uh launching different different application okay for the users nowadays all the companies are using generate to implement their product So currently in the market uh genbi having more popularity so that's why you have to know what is genbi exactly how genbi works and definitely if you want to work in the current job market you have to know about this genbi you have to learn about generative value okay this is the idea see all the application I showed you here like chart GPT Google jini metal Lama so they are using something called large language model in the back end okay with the help of large language model they're able to perform these are the operation now first of all let's try to understand what is generative a exactly see generative a is nothing but generative AI generates new data based on training samples generative model can generate image text audio video and so on data as an output so I think you have already worked with machine learning deep learning computer vision and so on right so there you used to use something called discriminative model and what is discriminative model based on some input actually it will predict the output of that particular data okay so this was actually discriminative model and to train the discriminative model actually we used to use something called label data that means that means whenever we used to prepare the data for the training we used to prepare the let's say uh input data as well as the output data that means you have to pass the X data and Y data that means input output both okay and if you uh give input and output both it will learn the relationship between input and output it will learn the pattern from the data then it will able to predict something on top of the test data so that was the idea in the discriminative model that means in the prediction model right but generative models are different okay so generative models can generate a new data based on the training samples so here you'll be giving some training sample which is called unstructured Data So based on this training sample data it will try to generate some new data that means inside jna when whenever you are giving any kinds of unstructured data as an input your generative model will try to understand this unstructured data it will learn the pattern from the unstructured data and it will try to generate something from that particular sample you are giving okay this is the idea and the output can be anything it can be text it can be audios it can be videos and so on okay as I already told you inser generative we not only work with the text but also we also work with the image videos audios and so on okay so all the unstructured data can be used inside generate this is the idea so that's why I generative AI is a very huge topic inside generative AI actually we are having generative image model as well as the generative language model that means you can work with the languages that means text you can also work with the images videos okay and audios so there is another model you can consider generative Audio model but at the end you are converting this audio to the text representation that means language representation that's why I haven't mentioned this Audio model separately okay this is the idea because audio is nothing but it's a frequency and from the frequency we can convert to the textual representation okay this is the idea there are so many API you will get even Google has the API you can let's say convert SP to text okay with the help of is to text you can easily convert any of audio to textual representation okay this is the idea that means what is generative a Genera a is nothing but it generates new data based on the training sample you are giving and generative model can generate any kinds of output whether it can be image it can be text or it can be audios okay now let me tell you how they got the idea like how this generative model can work see this idea had taken from real life only let's say uh if I give you 10 different scat book okay let's say if I give you 10 different cats book and if I tell you just try to read all the 10 different cat book let's say you have read all the 10 different cat books now if I'm asking anything related cats okay you will be able to give me the answer because you have already studied about the cats like uh 10 different books I have given and this was the enough data for you right to learn about the cats so that's why if I'm asking anything related to the cats you'll be able to give me the response so here you have become one cat model okay you have become one cat model and that is why if I'm giving any kinds of question you will be able to give me the response okay so similar concept applied in the generative also so they implemented one model called generative model in the generative model they feed actually tons of data that means huge amount of data they uh trained okay that particular model and then actually they were uh giving some kinds of question and that particular model was able to give the response okay this is the idea that means here you are feeding tons of unstructured data and your model is able to uh let's say learn the pattern from the unstructured data and there would be a position your model will be able to capable enough to give any kinds of response okay based on the question you are asking now you can ask me why generative models are required see I can give you thousands reasons of the generative model requirement but here I have listed down some of them so the first thing you can consider understand the complex pattern from the data because nowadays you can see people are using unstructured data a lot unstructured data means it can be text Data it can be audio data it can be videos data right so this is called actually unstructured data and in today's world actually people are using internet broadly and in in Internet actually people are generating huge amount of unstructured data okay they're using different different social media they are using different different platform so that's how actually they're generating tons of unstructured data so that's why it's very hard to understand the pattern from these kinds of unstructured data with traditional machine learning model okay so that's why this gentic model comes into picture so it can easily understand the complex pattern from these kinds of unstructured data the second thing you can consider the content generation that means that means your generative model can generate any kinds of content it can generate code it can generate let's say any kinds of story it can generate any kinds of music any kinds of videos I think nowadays you have seen like there are so many application came in the market so if you give any kinds of prompt it will generate the video for you okay the complete video for you that means it is generating some content okay it is generating some content based on the prompt prompt you are giving and that's how for the content creator also it is becoming one of the very uh used tool okay for their content generation and all let's say you are a Blog writer now you don't need to write the blog from scratch so what you can do you can just pass the topic and your model will generate the blog for you and what you can do you can just modify this particular blog with respect to your requirement and you can publish okay anywhere you can also generate any kinds of videos you can also generate any kinds of skills okay everything is possible nowadays with the help of this generative models okay so that is why content generation is one of the very uh important let's say features inside generative models okay I can talk about now the third thing you can consider build powerful application as I already told you we are already using uh tons of powerful application in our day-to-day life like CH GPT gini okay then Lama so different different actually powerful application we are using in our day-to-day life and just try to think about when we didn't have these kinds of application we had to complete of work actually manually but nowadays we are having this kinds of powerful application now you can do any kinds of work actually in a few seconds okay it is possible let's say if I give you one example as a developer whenever let's say you are getting any kinds of error okay from your let's say application what you can do you can copy that error and you can ask through the chat GPT chat GPT will give you the solution okay how you can solve it but previously when we didn't have any kind of chat GPT what we used to do we used to search that particular error inside Google we used to open this track overflow and we used to see lots of let's say Solutions then we used to solve that particular let's say error and nowadays actually we are using these kinds of application and it is actually saving lots of our time so we don't have to spend actually lots of time to fix any kinds of bugs uh in a few seconds actually it is possible nowadays uh if we are using these kinds of powerful generative AI based application okay this is the idea those who have already studied about artificial intelligence machine learning deep learning maybe you have already seen these kinds of V diagram okay this is the V diagram of our AI the complete AI now you can see machine learning is a subset of artificial intelligence deep learning is the subset of machine learning and now here you can see gen VI is the subset of deep learning okay it is the subset of deep learning that means machine learning is the subset of artificial intelligence deep learning is the subset of machine learning and generative is the subset of deep learning okay this is the complete V diagram of the complete artificial intelligence okay I hope it is clear now let's try to see the difference between discriminative model and generative model you can see uh discriminative model is nothing but it's just a prediction model let's say here you have given two input one is the cat image other is the dog image what your discriminator model will do it will try to predict whether it's a cat image or whether it's a dog image that means you are trying to do some prediction here I think you already use these kinds of model in your deep learning let's say whenever you used to perform something called image classification there we had different different model like resonet 50 Inception V3 right mobile net vg6 so with the help of this particular model we can perform the image classification task on the other hand generative model can take actually any kinds of sample data any of noise data and from that particular noise data it will generate a complete new image for you okay new data for you now let's say here you are passing one noise data noise data means it can be any kinds of unstructured data and what generative model will do it will try to understand the pattern it will try to understand the pattern from these kinds of data okay then it will generate a new data for you new data point for you this is the idea okay this this is the idea of the generative model see I have kept another example here let's say so here we are using distributive model to classify the music type you can see here we are uh giving actually different different music rock classical and romantic so here your discriminative model that means your discriminator deep learning model will try to classify whether it's a rock music whether it's a classical music or whether it's a romantic music on the other hand generative model what it will do you will just give some music sample okay and generative model will try to understand the pattern and it will generate a complete new music for you maybe you have already heard of AI has created Music AI has created songs AI has written Story how that's how actually they're using something called generative model they're actually feeding lots of training samples okay and this model is learning and it is generating a new content okay with respect to the data they are giving this is the idea of the generative model and the distributive model I hope now it is clear now if I discuss a little bit low level like how things are working here see maybe you have heard of something called supervised learning okay in supervised learning uh what we do we give the X data as well as the Y data that means input and output and here we try to find the relationship between our input and output okay this is called actually supervised learning and whatever actually let's say discret model actually we're using it is called actually supervised learning on the other hand we are having another learning called unsupervised learning in the unsupervised learning what we use to perform we us to perform something called clustering technique let's say here we are only giving the X data that means the input data and what my model will try to do it will try to make a cluster let's say this is uh one cluster this is another cluster this is another cluster that's how it is separated out my data okay that's how it will find out the relationship between the data okay this is the idea now you can consider this unsupervised learning as a generative model so generative model will also work in the same way so instead of actually finding the relationship what it will try to do it will try to make a class chart okay it will try to make a cluster from the unstructured data actually will be feding this is actually lowlevel actually understanding I'm giving you how things are working here but on top of that they have added some more technique to actually build this kinds of genbi model okay this is the idea so in summary actually you can see generative VI is a subset of deep learning and generative models are trained on huge amount of data as I already told you while training the generative model we don't need to provide any kinds of label data we only give the unstructured input data because whenever uh you are working with huge amount of data it's not possible to label the data okay that's why you are giving the unstructured data as an input to the generating model so here you can see in generative AI we give the unstructured data to the large language model for the training purpose and whatever things I explain so far you can see what your distributive model will do it will try to uh actually predict whether it's a dog image or whether it's a cat image okay by finding the relationship on the other hand your generative model will try to uh make a cluster okay let's say this is a cat cluster this is a dog cluster okay then with the help of that it will able to generate a new content from you I think you have heard of something called gan the generative aders neural network okay so Gan is also called generative model okay because here you will be giving noise data and from the noise data itself it will able to generate a new content okay new data this is the idea of the Gans so so far I told you about generative model but what exactly this generative model see generative model is nothing but it's a large language model which is also called llm see a large language model is nothing but uh it's a foundational machine learning model that uses a deep learning algorithm to process and understand the natural language these models are trained on massive amount of Text data to learn patterns and entity relationships in a language it can be also considered in a image data as well okay not only text Data you can also use llm for the image as well because I told you we are having two kinds of model uh generative language model generative image model okay so you can also use image data here not only text data and it is a language model which is responsible for performing tasks such as text to text generation text to image Generation image to text generation generation as I already told you as I already told you generative model can support actually all kinds of data you can generate text to text you can generate text to image even you can also generate image to text okay everything is possible with the help of this large language model nowadays okay and we also call it as multimodel that means you can perform multiple task here not one specific task you can perform multiple task like text to text text to image and image to text generation apart from that you can perform uh some more tasks let's say you can perform uh language translation you can perform text generation you can perform let's say text classification you can perform sentiment analysis name entity recognization all kinds of task you can perform with the help of only one model and which is nothing but our large language model okay and large language model is nothing but our generative model okay this is the complete idea about our generative AI I hope it is clear now now let's try to understand what makes llm so powerful as I already told you in case of llm one model can be used for whole variety of the task okay I I told you now uh Tex generation you can perform chatboard you can perform summarization you can perform translation you can perform code generation you can perform that means whatever task actually you have inside the NLP all the task you can perform with the help of one model which is nothing but large language model so that's why we call this llm is so powerful and that makes llm so powerful because in our traditional model whatever model we used to use that means the language model only we can only perform one specific task let's say you are you want to do actually language translation for language translation you need to only 10 mon language translation model that model can't do the code generation or let's say t summarization that model can perform but if you're using large language model you can perform all kinds of task with the help of one model only okay so that's why llm is so powerful because of this particular idea so as I already told you if you're using your traditional actually language model it can only perform one specific task at a time let's say you want to build a sentiment analysis so one model you have to train for the sentiment analysis which will only able to do the sentiment analysis whether this particular let's say sentiment is positive neutral or negative let's see you want to perform language translation you have to read another model for the language translation and that model will be able to translate any kinds of text okay that means you have created two separate model okay for two separate task but if you're using large language model you need to only train one specific model okay and that can perform multiple task this is the idea of large language model so let's see some of the large language model so here you can see we are having gini GPT uh xlm then we are having t five Lama mral Falcon apart from that there are so many large language models are available over the internet I'm going to discuss I'm going to show you each and everything so here I just mentioned some of the large language model just to show you but I will tell you uh how you can see all the large language models are available over the Internet even I will also show you how you can access those model and how we can use those model to create your application okay on top of it everything I'll try to clarify so yes guys this is the introduction of generative I now I think you got the clear-cut idea about generative like what exactly the generative Ai and inside generative a actually what are the things are available and why it is actually mostly used technology inside any kinds of software product nowadays and inside generative models actually uh what is uses it is uses something called large language model and not body I'll discuss about large language model uh in detail like how large language model works and inside that what are the architecture they're using everything I will try to clarify and now you can ask me what is N2 pipeline of generi no need to worry I will explain uh each and everything what is Pipeline and all and why pipeline is super important whenever you are working in the generative field see it's not like that whenever you are getting uh some problem statement from your company whenever let's say you are receiving the data it's not like that you will be directly applying the model on top of it before applying the model we have to perform some specific task okay and those stepbystep task is called pipeline so you can see gener TBI pipeline is a set of steps followed to build an n2n genni software okay that means here you will be breaking the problem statement into several sub problems then you will be trying to develop a step byst step procedure to solve them and here you can see since language processing is involved okay inside generative AI so we would also list all the forms of text processing needed at each step this step byst step processing of the text is known as a pipeline okay that means uh that means whenever you are getting any kinds of problem statement from the company first of all break that problem statement in a several sub problems okay then try to solve one by one and to solve that you have to perform some steps okay you have to perform some steps and those steps is called actually pipelines okay pipelines inside generative a now let's see one end to end pipelines actually we have to follow for all the projects we'll be developing in Futures see in Genera pipeline we are having these are the step we have to follow the first step actually we have to follow the data acquisition because here data is everything right at the end you have to work with the data here so first of all you have to get the data and this steps falls into data acquisition part okay then after that data acquisition we have to perform something called Data preparation okay what is data preparation I'll will let you know that means here you will be doing the cleaning of your data okay after that you'll be starting with something called feature engineering inside feature engineering there are so many steps you can follow like so the main uh step actually will be doing inside feature engineering called text representation that means you will represent your text to the vector that means number so that your model can take the input then after that you'll be doing the modeling then you have to select different different model and you have to fit the data there okay this is the idea after uh modeling what you have to do we have to evaluate that particular model Because unless and until you are not evaluating the model on top of test data you won't be able to decide whether this particular model is suitable for our production or not okay then once let's say you got your uh let's say production model what you can do you can do the deployment deployment of your model you can poost your model so that other people can use your model OKAY other user can use your model and they can give the feedback okay based on the feedback last step what you can do you can perform monitoring and model updating that means you have to monitor you have to uh keep on monitoring your application like uh I think you saw the chart GPT right so previously I think you saw in chart GPT whenever let's say you are giving any kinds of prompt so it will give you one actually let's say input form it will tell you are you enjoying this CH GPT or any kinds of feedb feedback you want to give or not not so they actually they were taking the input in real time okay this is called actually monitoring okay monitoring their application that means they're monitoring whether this application is working fine or not in the production if something going wrong in the application if let's say user is giving negative feedback that time what they will do they will try to update this model again okay this is the idea so it's not like that you are only building your model you are only deploying your model it's not like that you have to monitor the model in production and based on the feedback you have to keep on updating the model itself okay this is the complete idea and these are the steps involves inside the generative VI pipeline I hope it is clear now let's break down all the let's say pipeline steps one by one and try to understand what we have to do in each and every step the first step was actually data acquisition so inside data acquisition you can follow some step to collect your data so the first thing you have to check whether you have available data or not so available data available data means let's say you are having a CSV file directly you are having let's say text file you are having let's say PDF documents you are having docs documents then you might also have something called Excel Excel SX okay H so if you have these are the files apart from if you have any other file format it's completely fine but first of all you have to check whether you have available data or not okay this is the idea now if you don't have the available data what you have to do you have to look for other data okay other data other data means you can collect the data from the database you can see in the internet whether someone is having the data set or not then you can also use the API let's say someone will give you the data but you have to fix the data through the API that time actually what you can do you can collect the data from the API itself okay then you have then you can perform something called scrapping that me web scrapping let's say uh you don't have the data in database internet API then what you can do you can do the web web scrapping okay we web scrapping means uh you'll be scrapping the data from a website okay this is the idea now there is another possibility you have no data that time what you will do okay that time what you will do that time you have to create your create your own data create your own data means either you can collect the data okay either you can do the survey you can collect the data or what you can do you can use large language model to generate the data okay LM to generate data nowadays actually you will see people are using open AI okay open AI GPT model OKAY GPT model to generate the data okay so with the help of llm also you can generate your own data but whenever you are uh creating your own data there is a possibility let's say uh your data will be less let's say here I will just write you have to note let's say whenever you are collecting your own data your data quantity might be less so that time what you can do so let me write here if you have less data then you can perform data augmentation I think you know what is data augmentation okay so data augmentation is nothing but you will be augmenting the data let's say uh I'll give you one example so the first augmentation technique you can perform so let me give you the example you can do something called replace you can do replace with synonyms okay now how to do the syon see let's say here is one example I'll will give you let's say I am a data scientist okay so let's say this is my text now what you can do you can just replace the synonym so here you can write I am a AI engineer that means you are replacing this particular uh entity with this entity so this is called actually replace with synonyms okay this is the idea I hope you got it because here you will be working with textual data mostly and if you have the image that time what you can perform so there are lots of image augmentation technique as well let me show you so you can simply search image augmentation so there are different different technique you can follow see let me show you one example let's say let's say this is the example I can show you let's say this is your original image so what you can do you can do the horizontal flip you can do the vertical flip you can do the rotation of the image you can also do the negative rotation you can do the blower operation you can change the brightness you can add some noise you can add some darker okay so that's how actually you can change the original image okay you can change the original image and make different different variants okay this is called actually image data augmentation because I already told you inside jni we use both kinds of data whether it can be textual data it can be image data it can be audio data okay anything actually you can consider here now the next technique you can uh apply which is called diagram flip Bagram flip now you can ask me sir how to perform Bagram flip see it's very easy let's say I'll give another example uh I am buppy all right now you can write this sentence like that puppy is my name okay so this is called actually Byram plate that's how actually you can also do the data augmentation because at the end you are increasing the data that is the idea and whenever you are increasing the data it should have the meaning it doesn't have the meaning that means there is no use of the data so you have to make sure whenever you are performing these are the technique this data should have some meaning I hope you getting my point now the next thing you can perform third step you can perform back translate back translate now how to perform back translate let me show you so let me go to my uh translator so I'll open the translator Okay Google translator let's say here if I write one sentence or I can just copy one story let's say we whatever will do let's say I will copy this uh copy this text and here let me paste it now you can see it is uh translating to the Bengali now what I will do I'll copy this Bengali transl translation and here uh the input language I'll be selecting the Bengali right now so let me select the Bengali and I can paste it here now here you can select any other language let's say I'll select Spanish now see Spanish text it is giving now let me copy okay now what I can do again uh I can come here I can past the Spanish text and let's say I want to convert to English again so here let me select the English you got your English text now so here if you see carefully uh some of the word would be different okay then your previous actually text you have copied after doing the Byram flip that means you will be converting um it a language to another language that language to another language then uh again in your English language so that's how if you do multiple time translation you will see some word would be changed and see this this will work if you have actually lots of text actually lots of sentence not like that you are only copi one to two line if you have multiple let's say line multiple text that time actually the reflection actually will able to see okay I'm just only showing you how we can perform the back translation because there are so many um API nowadays inside python you can use for the back translate I think translation API is already there with the help of that you can do the translation first of all let's say you have the English text first of all try to translate to the Hindi Hindi to let's say uh Spanish Spanish to English again that's how you can do the back translation and you can increase the data so this is another amazing data mentation technique you can follow okay I hope you're cleared the last step actually you can follow something called add additional data or additional noise how you can add additional noise let's say here you have one sentence I am a data scientist so with this sentence you can add one more line let's say uh I love this job okay so this is your additional data or additional noise you have added okay with your data again this is called actually data augmentation technique and again uh it's an amazing technique you can follow okay Al together so these are the step actually you can perform inside data acquisition okay so first of all try to check whether you have available data or not if you don't have try to see the other data if you don't have try to uh create your own data for this you can use large language model even I will I will also show you how you can generate your data with the help of large language model and after generating let's say if you have less amount of data in that case you can perform something called Data augmentation technique inside data augmentation technique these are the step you can perform okay so this is the first step of the pipeline now let's discuss the second step of the pipeline okay the Second Step I think you remember data preprocessing so inside data pre-processing you can perform cleanup operation okay cleanup operation that means you can remove HTML tags then you can remove let's say Emoji you can do the spelling check okay spelling correction fine so these are the technique actually you can perform inside cleanup now there is another uh step you can follow called basic pre-processing I'll tell you what what are the basics pre-processing are available even I'll also show you the Practical how you can perform then you can also perform something called Advanced preprocessing because nowadays the application actually we have let's say chat GPT Jin so these are the actually Advanced application advanc let's say large language model so for this we have to also perform some Advanced pre-processing technique okay let's say whenever I'm having that data nowadays because let me show you let's say if I open my chat GPT okay if I open the chat GPT see if I give any kinds of emoji nowadays inside chat GPT still it will be able to understand let's say if I give this haha okay haha let's Emoji now if I send it to my chat GPT see it is automatically detecting what's so funny okay so that's kinds of a text also we need to handle because whenever we are uh collecting the text Data it will have emojis it will have HML tags okay so many things it will have so sometimes it is also necessary to keep the Emojis because I told you now this kinds of application is Advanced so it is also understand the Emojis any kinds of text so we also need to handle these are the let's say uh I mean text in that time now inside basic speed processing let me just write here inside basic pre-processing so inside basic pre-processing the very important things you have to perform something called tokenization okay so you have two kinds of tokenization one is called sentence level tokenization other one is Word level tokenization so I'll be discussing each and everything no need to worry and there are some optional pre-processing are available so inside optional pre-processing the first thing you can perform stop word removal okay stop word removal then the second uh things you can perform something called steaming and this is like very less used nowadays okay less used actually technique the third thing you can perform something called latiz and the lemmatization actually more used more used okay I'll tell you what is steaming LZ whenever I'll show the Practical that time I'll discuss then the fourth uh things you can perform something called punctuation removal so punctuation means let's say you have uh question symbol you have dot you have comma you have uh exclamation sign okay you have dollar symbol so these are the things are actually punctuation so you have to also handle the punctuation then you have to perform something called lower case then the sixth you can perform something called language detection because nowadays if you open the chat GPT or gini if you give any kinds of language it will first of all detect in which language you are asking the question B not that it will give you the reply okay in the same language so uh so they are also applying this language detection technique okay in the back end so that's actually one real world product Implement okay it's not like that you are getting the data you are directly applying the model it's not like that so you have to follow the entire pipeline to build the endend software okay that's why I'm showing you these are the pipeline why this gen VI pipeline is super important and what are the steps are uh involved inside the pipeline so that after learning it it would be easy for you to develop any kinds of software in future and this is my promise if you understand this okay if you can do this you can design any kinds of software in future okay because what is generative Genera is nothing but just a technology so you have to use that technology you have to learn how to use the large language model how to prepare the data for the large language model okay how to use let's say Lang chain how to use Vector database you have to connect everything together then you have to build one application that is the idea only but the root things available inside the pipeline how you're designing the pipeline whether pipeline has all the steps available or not I hope you getting my point right so now I think these are the steps are clear uh but I think some of them still you are getting confused like what is steaming what is let's say LZ what is let's say why we have to perform the lowercase operation and what is this uh tokenization see let me just discuss all of them one by one so first of all let me discuss the tokenization that means let's see you are having a sentence here let's say my name is buy so this is a cent right this is a complete sentence right so whenever I will be converting this sentence to number that means Vector representation first of all I have to I have to actually do the tokenization tokenization means you will be uh taking the individual words let's say like that my comma name okay comma is comma buy this is called actually Word level tokenization okay Word level tokenization okay that means you had one complete sentence you just did the tokenization and you got the word as a token okay everywhere now you can take the word and you can convert to number there is some technique we can follow I'll tell you those are the technique what are the technique you can follow to convert your text to number representation okay and there is another technique called uh let's say sentence level tokenization let's say you are having a sentence like that let's say my name is bbby uh I am a data scientist okay now if I perform sentence level tokenization so sentence wise actually I have to convert so it will come like that my name is buy so this is my one token then comma then I am a data scientist okay this is another token that means two token I'm having in the list okay this is called actually sentence level tokenization sentence level tokenization okay so we'll be using this word level tokenization a lot sentence level you can also use sometimes you have to use sentence level tokenization sometimes you'll be using Word level tokenization but most of the application I saw people are using what level tokenization that is the idea so this is what actually our tokenization okay now let's try to understand what is steaming see steaming is nothing but see steaming is nothing but you are bringing one word in a root form let's say here we are having three kinds of word play played and playing so if you see them carefully meaning are same yes or no meaning are same only the ver representation is different now instead of taking actually three okay separately what I can do I can um convert in a root form so root form is nothing but play okay because player represents Sports okay Sports so this is called actually Ste steaming that means you have different different uh actually word form that means different different V form and you are trying to bring in a root representation okay this is called actually uh steaming and again it's important because it will reduce the dimension okay it will reduce the dimension whenever let's say will be converting your data to the vector representation because if you have three word so it will create actually three dimensions separately but if you convert it to one let's say word only so it will only have one dimensional and we know that inside artificial intelligence Dimension is like the issue so if you have let's say more Dimension that time your model will get confused because there is a concept of curs of dimensionality so you have to also take care about the dimension okay that's why we perform this streamming operation and LZ is the same okay the way actually perform the steaming LZ is also same only whenever you will perform the LZ your root meaning of the word would be readable but whenever you will perform actually let's say streaming sometimes it won't be readable I'll tell you whenever I'll do the Practical of it that time actually will get it okay what I'm trying to say that is the idea now you can ask me what is lower casing okay because fation you already know now you can ask me why lower casing is important why you have to perform the lower case operation let's say if I write two sentence buppy is very good boy and buppy is a data scientist let's say these kinds of sentence we are having now here you can see I think buy and buy both name are same but here you can see the first character it's a Capital One the second character it's a l one so as a human actually you can consider these two buy are same but whenever you will be passing to the model that means in your computer your computer will be considering this two word is a different word because here you are using capital and here you using lowercase character because all the character is having their asky value right that means the asky code uni code so with the help of that it will consider these two words are separate so that time this bu would be different this bu would be different although they are same okay this is another issue so that's why we perform lower case operation so whenever actually we're having the upper case we'll try to convert to the lower case okay we'll try to convert so let me show you we'll try to convert to the lower case Okay so this is now you can see this buy and this buppy will become same okay now if you give pass to the computer also your computer will identify this buy and this buy is the same right now okay so that's why we perform the lowercase operation so that my model won't be getting the confused okay this is the idea so I think most of the things I clarified and yeah so everything I'll show you as a practical as well how we can perform as a practical I'll tell I'll discuss it okay no need to worry now apart from basic pre-processing I also told you we have something called uh Advanced preprocessing as well now let's try to see what are the steps are involved inside Advan preprocessing see inside advance preprocessing advance pre-processing we have something called parts of space tagging parts of speech tagging so if you're good with English grammar I think you know what is parts of speech okay then you are also having something called parsing then you have something called Co reference okay Co reference resolution now if you want to understand them let me show you one uh image I think then this part would be cleared so guys I think you can see this image so here you can see uh this is the um input text we are having chaplain wrote directed and composed the music of uh for the most of is film now if I perform tokenization and LZ so I already told you what is tokenization you will be taking individual word see I have taken individual word here and if you perform the LZ LZ means it will bring the uh let's say any kinds of verb in a root word now we can see root root if I bring to the root what it will be right directed it would be direct okay then compost it would be compos it would be compos so that's how actually you can understand the tokenization and LZ now what is po is tagging P tagging means parts of spe tagging the things I showed you in my Advan preprocessing so this is what actually parts of spe tagging that means you are assigning what is noun what is verb what is adjective okay so that's how you are defining different kinds of part parts of speech if you're good with grammar I think you will be understanding better than me uh just try to consider here you are uh tagging everything that means you are tagging all the let's say noun verb okay then pronoun everything you are tagging now there is another one called parsing okay I think I showed you parsing so this is the parsing tree that means you will be creating a tree and inside this tree you will have the entire sentence word you can see chaplain Road directed okay all the words so in the parts three you will be again assigning the POS tagging apart from that you will be also dividing these are the word in a separate separate form again this is a advanc actually grammatical rules uh you have to learn but no need to worry let's say when will be working in the industry there you will have something called domain expertise okay let's say language expertise actually people will get so they will help you to do it because I know as a developer you know you don't know about let's say uh this English grammar and all but whenever you'll be designing the software that time language expert will help you okay how we can perform the pursing how we can perform the P tagging everything they will help you out now this is the last example core reference resolution so cor reference resolution means let's say Chaplin wrote directed and composed the music for the most of his film now here chaplain and his it is indicating the both person uh sorry it is indicating the same person right so this is called actually core reference resolution Solutions sometimes you your model has to understand uh this Chap and his so it is mentioning the both uh it is mentioning the same person okay so this is called actually core reference resolution because nowadays if you see the chat GPD G so these kinds of application is able to understand okay this kinds of input disc kind of prompt okay so in the back end actually they're handling like that I hope it is clear now then the third actually step were available inside uh gen pipeline which is nothing but feature engineer ing feature engineering so inside feature engineering you can perform text vectorization so to perform the text vectorization you can follow some technique like uh you have tfidf tfidf you have something called bag oford you have something called word to you can also perform something called one not encoding then you can also use some Transformer okay Transformers model to perform the text vectorization as well because these are the very old technique so if you're using any deep learning and machine learning model that time you can use these are the technique but if you are creating advanc application like let's if we using large language model Transformer based architecture like say encoder and decoder architecture that time you have to use Transformer model to perform the text vectorization technique okay I hope it is clear so these are the steps are available inside feature engineering so inside feature engineering you'll just try to convert your text to Vector representation it can be also uh work with the image as well let's say you are having an image okay let's say you having an image and in that image actually you are having a cat image let's say this is a cat let this is a cat okay now image is nothing but it's a pixel so if you just see the image so here you will see different different pixel value okay different different pixel value so that time what you can do you can use any kinds of vision Transformer model to convert this image to the vector representation okay Vector representation and you can pass to the model okay so that is the idea now fourth step actually I think you saw after feature engineering you can do the modeling okay modeling modeling means you have you'll be training the model that means uh you'll fit the data to the model okay so here you can choose different model you can choose actually different kinds of model so here you can either use open source okay open source LM that means large language model either you can use paid one okay paid paid model so so what is the difference between open source and paid see if you're using paid see if you're using paid one this model would be available in the server that means you don't need to download this model in your machine okay so you don't need to download instead of that what you will do you will only let's say pass the data okay let's say you are using open a because I think you know opena provides actually paid model that's a GPT model so in opena you will upload your data and in their server it will train the model okay you don't need to download the model in your machine and you don't need to train there because I know that people onlyon be having good GPU in their system okay it's not possible actually to buy uh expensive GPU for training these are kinds of large language model because if you see this large language it's very huge okay if you see the parameter size is very huge so we can't download in our machine and we can't train it it's not possible so that's why most of the time we'll be using Cloud platform to train the model okay so that time actually you can use the paid model because paid model if you're using paid platform if you're using everything they will take care only you have to upload your data there but if using open source large language model that time you have to download this model in your machine you have to prepare everything you have to set up the environment and then you have to train the model and for this you need a good GPU okay good GPU good CPU good memory okay everything you need and after training this model you have to deploy this model uh in a cloud platform okay manually you have to deploy this model in a cloud platform and again you will get the challenges there like uh you have to buy a good instance then you have to set up the load balancing and all okay then you have to deploy this particular model but if you're using Cloud platform they directly will get one option to deploy the model in their server only okay so that people can access the model in their platform only okay so you don't need to take care about the infrastructure you don't need to take care about the instance everything they will take care that is the difference got it we'll be also understanding how we can use paid model how we can use open source model and I will also discuss the difficulty level actually we'll be getting whenever you'll be using open source llm whenever you will be using let's say paid llm everything I'll try to clarify no need to worry uh train your model you have to perform something called Model evaluation okay evaluation so inside evaluation you have to part from two kinds of evaluation one is like inin evaluation other is like extrinsic evaluation so intrinsic Evolution means you'll be using some metrics okay you'll be using some metrics to evaluate the model I think you know we are having different different metrics for the evaluation let we are having accuracy score R2 score then we are having AOC card so these are the different different metrics we are having okay so after trading a model you have to perform something called intrinsic evaluation and this is performed by the and this evaluation will perform by the jna engineer okay jna engineer because they training the model and after training the model they have to actually uh evaluate the model with the help of these are the matrixes and the extensive evaluation when they have to perform after doing the deployment okay after doing the deployment deployment so this uh evaluation can be applied during the production okay let's say whenever this model is in the production people are using it that time this extensive evaluation can be performed let's say I already told you chat GPT will uh launch one input sometimes it will uh ask you give the feedback not only chat GPT if you see any kinds of application so if you just consider your phone keyboard so whenever you use the keyboard okay so initially I think you won't be getting any of suggestion but whenever you will be using that particular keyboard okay um long time then you will see that automatically you will get the suggestion because it is learning okay how what kinds of input you are giving it is learning and sometimes it will ask for one kinds of feedback whether you are enjoying this app or not okay any feedback you want to give or not and whenever you are giving the feedback whenever you are giving the five rating four rating that time so that time actually they're getting this application is working fine there is no issue but whenever you are giving negative feedback that time they're getting actually there is some issue with the application that time what they will do again they will they will uh retain the model okay they will retain the model and they will again push the model through the production okay so that's how extensive Evolution works that means after deployment after uh going to the production okay after going to the production of that model you will be performing this particular extensive evaluation this is the idea and the sixth I told you we have to perform deployment okay deployment and inside deployment you will be also doing the monitoring monitoring and retraining okay retraining because you'll be doing the monitoring in the extensive evaluation and if something going wrong you'll be doing the rning of the model this is the idea so these things are involved inside so the entire generative AI pipeline I hope it is clear so first of all data acquisation then uh data preparation then uh feature engineering modeling evaluation and deployment and here one thing you have to remember because going forward I'll be using this Trum a lot so let me just write here common Trum let me call copy this text and let me paste here let's say this is my data now here you will see some of the actually let's say common term the first ter actually we'll see uh called cordus okay Corpus then the second term you will see which is nothing but vocabulary and the third term you will see which is nothing but documents and the fourth you will see something called word okay word now what is Corpus Corpus is nothing but the entire text entire text that means the entire text is called Corpus okay and what is vocabulary unique word unique word now you can see this is unique word this is unique word this is unique word this un this un okay so these are the uh what is unique and if you see any of the word is coming duplicates only you have to take the unique word okay this is called actually vocable okay then what is documents document is nothing but one row that means one line only so till here actually one documents D1 then this is called actually D2 okay D2 then D3 so this is called actually documents so I can write one line okay one line is the documents okay or one row and what is what what is n this single word okay single word is called word so you can see this is a single word is a single word this called actually word so these are the common term you have to remember because going forward whenever we'll be actually playing with the data that time actually I may um tell you these are the actually common term okay that time you won't be getting confused what is corus what is vocabulary what is documents what is what okay that's time so that's why I showed you okay here in this video so yes Guys these are the actually generative VI Pipeline and uh here I have just showed you as a theoretical so in the next video we'll be doing the Practical of it like how we can perform different different text cleaning technique like different different text pre-processing technique after that we'll also see how we can perform feature engineering technique as well okay different different feature engineering technique because what I feel like before starting with our large language model first of all we have to understand the data first of all we have to know how to prepare the data for the model okay then we'll be starting with the large language model okay so this thing actually is uh so this uh thing actually very important before learning uh your gen before learning the large language model and application building so that's why I'm teaching you this part uh in our previous video I already discussed about end to end generate TBI pipeline so there I told you what is the use of data preprocessing right because if you want to use the model that means large language model the first thing you have to do the data P processing Because unless and until you are not processing the data how your model will try to understand that one right that is the idea so here we'll be learning various kinds of technique uh to clean up about data so for this what I have done I have created a beautiful uh collab notebook so there actually I have uh added all the examples you can uh use for the data cleanup operation so guys now let's try to see how we can do the data preprocessing part so guys as you can see this is The Notebook I already prepared so here you can see I'm using one data set uh from kagle so let me open the link um this is the link so the data set name is IMDb uh data set and it is having actually 50k uh movie reviews okay 50k actually movie reviews if you are already from let's say machine learning deep learning background I think you know about this data set right it's like very common data set and why I took this particular data set because in this data set you will see uh there are so many U actually unnecessary text okay because it's a movie review so what they did actually they extracted they scra this data from the IMDb website if you don't know this is the IMDB website IMDb so in this website you will see uh all the movies reviews and rating and what they did actually they published this data set in the Kagel website so that if anyone is working in the field of let's say genv or natural language processing they can use the data set it now here what you just need to do you just need to download this data okay it's around uh I think 27 MB just click on download button it will download okay so I already downloaded this data set so it is available inside my download folder so I'm going to upload in my collab notebook so here first of all what you have to do you have to connect this particular notebook so there is a connect button just try to connect and no need to worry I will also share this notebook Link in the resources section from there you can open it up so my notebook is connected so first of all let's import some of the library first of all I need something called pandas because if you see the data uh it's a csb data okay it's a csb data so let me upload and let me show you so if you want to upload anything in the Google Drive just try to right click and there is a upload button click on upload and try to upload this data here now see it's a CSV file okay and if I want to load any kinds of CSV file Json file or let's Excel file whatever file you can use the pandas package for that so you can see my data set is uploaded now if I want to load the data set what I have to do I have to assign the path and see you don't need to execute deser the code because uh this code I have added let's say if your data set is available in your Google Drive that time what you have to do you have to Mount Your Google Drive first of all Mount means you will be connecting with your Google Drive then will'll be relocating the folder okay like inside which folder you kept your data okay with the help of CD command CD means change directory okay then after that what he will do he will assign the data path but here I haven't kept my data inside my Google Drive I kept inside my col collab actually you can see drive this is the collab disc I'm using here you will get around 74 GB of space so here you also you can keep your data so I don't need to execute this code what I will do I'll just go below and if I check my current working directory that means PWD you'll see I'm inside content content means this is the directory right now now here I'll just simply Define my data path I'll copy the path copy and let me paste it here okay that's it now let me execute now see if I now load the data pd. csb I'm doing now see it will load the data see it has loaded the data if you want to see the shape of the data this is the shape okay you have around 50 uh 50k actually movies movies reviews in this particular csb file and two columns two columns means one is the reviews column other is like the sentiment column okay sentiment means whether it's a positive sentiment whether it's a negative sentiment this kinds of sentiment you will get here I hope it is clear now see here I'm having 50k movie reviews but here I'm not going to use all the reviews here I'm going to show you the demo like how we can perform the text pre-processing and if I'm taking all the 50k reviews so it will take like lots of time um to process those are the text so what I will do I only take the 100 example okay the first 100 example I I'll be taking and on top of that I will perform all the text processing task right so this is the code you can execute so it will load 100 example now if I show you the shape see now we are having 100 example and only two columns fine now if I want to show you the data see this is the data so I think you remember in my uh theoretical class I was discussing about some pre-processing technique uh here I think H so here you can perform something called HTML tag removal Emoji handle art then spelling correction then in the basic preprocessing we saw that we can perform something called tokenization then we had some optional preing as well like stop word streaming LZ punctation lower case Okay language detection each and everything so first thing we'll be learning how we can perform the lower case operation and why lower case important I already explained here I think you remember let's say let's say if one of the name is containing uppercase character it will consider these are actually separate name okay these are actually separate entity that is the idea so that's how we have to bring everything in a lower case character so that's why you have to apply this lower operation and how to perform lower operation I think you already know in Python we are having a function called Lower with the help of lower also we can do it right now see here let me show you one example let's say I'm taking the reviews three so here I'm taking the three three three number rows this is the three number rows now you can see some of the uh character is uppercase character here so this is uppercase this is uppercase okay so that's how actually you will see different different uppercase character would be there now if I want to make them lower case what I have to do first of all I have to select my column like in which column you have to apply the lower function I have to apply on top of my review column now first of all I'm converting everything to the string okay string data type then I'm applying the lower because lower is a string method okay okay L is string method I think you already know that then whatever changes actually I'm doing I'm saving inside my column that means I'm just doing the permanent change okay inside my column so that's why I have given review again that is the idea now if I execute now see if I show you the data now see guys all the character has become lower case right now now if I want to show you the now if I again execute that review three you will see that all the character has converted to the lower case character okay that is the idea now the next thing will be learning how we can handle the HTML tags that means how we can remove the HTML tags for this here I have written a function here I'm using something called regular expression regx okay inside regx you can give a pattern let's say here you are giving a pattern if you are getting this kinds of symbol okay if you are getting this kinds of symbol it's a like HTML tag you have to remove those HTML tags and you have to replace with empty okay empty string that is the idea now this is the function we can use now if I execute now let's say this is a one text I have prepared you can see in this text actually we are having lots of HTML tags now if I pass this particular text to my function see it will automatically remove all the tags now see I'm only getting the text okay relevant text that is the idea so this notebook I prepared in such a way so that you can use it as a template let's say whenever you need anything any kinds of functionality you can come here you can copy those function so please try to keep this particular notebook with you because this is going to help you a lot okay whenever you'll be developing the projects this is going to help you a lot now if you want to apply on top of the entire data set again just call this column name let's say review column okay and there is a function called apply and inside that just try to pass this function okay apply function takes actually uh one function object now here I'm giving the function object so what it will do it will try to apply this particular function on top of the entire uh rows you are having in your data set okay now see if I execute and and the changes actually I'm doing I'm saving everything permanent okay now let me execute now if I show you any kinds of random let's say rows now you'll see all the uh now let's see if I also show you um seven okay seven number rows now just try to see there is no HTML tags in this particular text you can pick up any kinds of let's say index so let's say if I show you the 10 nowhere you will see the HTML tags here now we'll be learning how we can remove actually URL let's say if you are having some URL in the text how we can remove it for this again I'm using regular expression and there is a pattern I have given if you are getting this kinds of let's say word HTTP then slash then ww that means it is a URL and you have to remove the URL with the empty string okay this is the function now let me execute now here I have just mentioned some of the URL so this is my YouTube channel URL this is my LinkedIn URL and google.com and kaggle.com okay now these are the text I have prepared one by one now let's say if I'm passing any kinds of text inside my remove URL function it will remove that URL let me show you see I'm giving the text to that means my LinkedIn URL now you can see check out my LinkedIn I hope it is clear see again I'm telling you it's not a mandate things let's say you need URL in your data at that time you can keep it let's say you need actually HTML tags you can keep it but if you don't need it you can remove it because I already told you uh nowadays actually we are having Advanced genbi application it also supports all kinds of text like emojis HTML okay everything it supports so if you're creating these kinds of advanced let's say u i mean application that time you need Des are the data you don't need to remove it okay but sometimes actually you also need to remove this data set so that's why I'm sure you how you can remove it and if you want to keep it you can also keep it it's up to you okay you have to decide based on your project architecture that time this is the idea now we'll be learning how we can handle the punctuation so if you want to see the punctuation so there is a string package you can use now if you just write string. punctuation you will see all kinds of function are available now what I have done I just stored these are the function in a variable called exclude now here I have written a function okay here I've written a function called remove punctuation and here I've written a for Loop so I'm just uh looping through this punctuation one by one and user is giving the text and I'm just checking whether if there is any punctuation okay I'm just replacing with the empty string now let me show you how it will work now let's say this is one text string with a punctuation you can see there are so many punctuation I have assigned now if I pass this particular text to my punctuation function it will remove the punctuation now see there is no punctuation right now even I'm also calculating the time like how much time it is taking to remove the punctuation because there is another way you can follow to remove the punctuation I'll tell you how you can do it see this is the function guys uh so here you can use something called text. translate inside that just try to use this particular function okay make translate and inside that just try to mention the punctuation so what it will do it will uh take your text and it will remove all the punctuation so this is another approach now see if I calculate the time of this function you will see that this is the time that means this function is taking less time than your this function because here you are using one for Loop and for Loop has the linear time complexity I think you know that if you are familiar with DSA con I you know that it is having linear time time complexity okay so this particular approach is good so let's say if you're are applying this particular Logic on top of 50k data set just try to think how much time it will take this full loop and in other hand if you're using this particular method it will take very less time to perform the operation now if you want to see the time difference you can also see the time difference now if I show you my uh text now see inside this text actually I'm having lots of punctuation now what I will do I will use my uh remove function one that means this particular function and inside that I'm going to pass my entire review now see it will remove the punctuation okay see all the punctuation has been removed now you can also pass the entire data like that you can also pass the entire data it will remove all the punctuation inside your entire data now we'll be learning how we can handle the chat conversation see sometimes whenever we perform the chatting operation we give uh like lots of shortcut let's say if I want to write as far as I know what you will give you will give AF a ik then let's say away from keyboard AFK then as soon as possible ASAP that's how we use lots of chat keyword okay we use lots of chat shortcut keyword okay here I have listed down some of them you can see for your information FYI so that's how I have listed all the chat conversation short uh word now let's say you are working with actually social media data set in the social media data set you will see these kinds of data a lot people will be using short form okay short form so how we can handle this particular short form for this first of all try to create a dictionary like that the entire dictionary you have to create then after that here I've written a function so this is the function chat conversation handle so inside that I'm just taking the text okay I'm just taking the text and I'm checking and inside that with the help of this for Loop I'm checking if we are having this kinds of word okay if you're having these kinds of word what we doing we're just mapping with the value that means let's say if anyone having actually this particular let's say shortcut word let's say FYI what I will do instead of FYI I will just return for your information because this is a dictionary if I if I want to get the value I want to call the key okay that's how we are mapping now see if I execute the program now let's say here we are giving a short masses uh do this work as up now see it will return me do this work as soon as possible okay because here it is coming here and it is mapping and it is giving me this value okay this is the idea now let me see how we can handle the incorrect text let's say sometimes what happens whenever you are using real time data there would be lots of spelling M mistake right let's say this is one example s 10 so certain spelling is not correct then condition spelling is not correct that's how so that's how you'll see different different word is having the spelling mistake so how to handle this spelling mistake for this you have to use one package called text blob so let me import this text blob and now see here I'm having my incorrect text now if I pass this incorrect text to my text block and if I call this particular function called correct now see it will uh handle everything now see certain conditions during several see all the word has been corrected so this amazing package you can use if you want to handle the spelling okay spelling of any word now the next thing we'll be learning how we can handle the stop words so inside English language not only English language inside all kinds of language we're having some stop words okay now here we're working with the English language so let me show you some English related stop wordss for this I will be importing stop wordss from the nltk nltk is a so nltk is nothing but it's a natural language toolkit Library so with the help of NLP also you can perform lots of NLP related task so here you can see I'm importing the stop word so here I'm performing nltk do download it will download all the stop wordss from the internet now see now see if I uh click this cell it will download the stop wordss now if you want to list down all the stop wordss you can just write stop words. wordss and here you can specify the language so here I working with the so here I'm working with the English language so here I've given the English let's say you are working with Hindi Bengali you can give that language also it will give you the stop what related that language so you can uh see the documentation of anal we'll see that how we can pass the parameter here now see these are the words we are having inside English so this is called stop words so this word doesn't have any kind of meaning okay in a sentence okay we use it uh to represent one sentence but there is no meaning so let me show you why I'm telling there is no meaning let's if you want to perform uh sentiment analysis so let's say there is one uh review we are having so let me just write this movie is awesome I loved it now just try to see here you are having some stop word right like is is there this is there I is there it is there right but if I want to get the sentiment of this particular let's say reviews I can see movies is required awesome is required loved is required now if I'm getting these kinds of word actually this kind of positive word that means it's a positive sentiment okay it's a positive sentiment yes or no no right so here actually I don't need these are the stop word okay I don't need these are the stop word to understand whether this particular reviews is a positive or negative and if you're using these are the stop word in the sentence what will happen whenever you will perform the text vectorization it will make actually extra Dimension okay it will make the extra dimension in the data and whenever it is making the extra Dimension that means if Dimension is increasing that time uh your model might get uh difficulties right because we know that there is a concept of card of dimensionality so so we always need to reduce the dimensionality somehow I think you have learned in your machine learning okay machine learning let's say topic so that is why we don't need these are the stop WS so we have to remove this particular stop W sometimes and sometimes actually we have to also keep it so these are the stop W guys you saw now let me show you the length so around we are having 179 stop words present inside English now here I've written a function so this function will remove the stop parts from a text now let me show you let's say this is a text I have given so inside that you can see different different stop wordss are there now if I pass to my function so see now see there is no stop word in this particular text right now okay that's how you can use this particular function now again this is my data and if I want to apply on top of my entire reviews I can do it I can use the apply function and I can pass my uh function object remove stop words and if you want to uh store permanently what you can do you can write this code okay uh DF reviews is equal to DF reviews apply stop words okay it will save everything permanent but I don't want to save it permanent as of now because I'm showing you as a demo if you want to do the permanent you can do it so now guys I think it is clear how we can uh remove the stop words now the next thing we'll be learning how to handle the Emoji okay see Emoji is nothing but it's a uni code actually uh character okay if I show you if you just write Emoji uni code you will see different different uni codes of different different emojis so let me open it up see uh here we are having different different emagis based on that we are having the uni code okay unic code character okay Unicode character so that's why I just collected some of the Unicode character like for the emotions emojis symbols then uh pictur graphs then we're having transport map symbol flag okay so these are the emagis related uni code I collected here and I just written a function okay and again I'm using the regular expression so here I'm telling if you're getting this kinds of unic code in a sentence that means it's a Emoji so what you have to do to remove this emoji with the empty space okay now let me show you so let's say this is one text I'm giving love the the movie it was flying Cas okay now see if I uh pass this particular text now see it will remove the Emojis automatically now this is the next one now see only LMO is coming now sometimes actually I told you emojis are required because let say I told you in the chat GPT example so if you pass any kinds of emoji through the chat GPT it will also able to understand okay what you are trying to say let's say if I pass any kinds of emoji here let's say I'll give this Emoji hey there what's on your mind today see it is trying to understand my feelings right now if I want to handle these kinds of situations what I have to do I have to keep the Emoji that time what I can do I can uh extract the meaning of the Emoji so for this I can use one Library called uh Emoji okay now let me show you first of all you have to install it now just import the Emoji and inside Emoji you are having one method called demo eyes okay now inside that just try to pass the text python is fire I'm giving the fire Emoji now it will automatically convert to the word python is fire okay that means it is trying to extract the meaning of that particular Emoji right now I hope you you cleared so that's how whenever you are passing any of emoji as input to the chat GPT it is trying to convert this Emoji to the word and is trying to understand what you are trying to say now there is another example I have given love this movie it was flying case see see love this movie it was face blowing a keys now we'll be understanding the tokenization I told you we are having two kinds of tokenization sentence level tokenization and Word level tokenization so let's try to see see if you want to perform the tokenization uh directly you can use the split function because spit also will give you the individual word in the list see if I have one sentence now if I perform the split operation see I'm giving I'm getting actually individual part so with the help of split also you can perform the tokenization so similar wise you can also do the sentence level tokenization this is the word level tokenization now for this you have to mention this particular fully stop sign so whenever it is getting the fully stop that means this is sentence okay now see if I execute so here I'm having three sentence so I am going to DHI I will stay there for 3 Days Let's uh hope the tree to be great okay see three sentence I'm getting so this is called sentence level tokenization so again some of the example with the split function now with the help of regular expression you can also do the um tokenization so this one example I give with the regular expression so here is my sentence and it will give you the individual word this is the sentence level tokenization okay and this is the pattern for the word level this is the pattern for the sentence level okay this is the idea now you can also use something called nltk okay that means natural language toolkit library for this tokenization as well inside that we are having to fun two actually function mod level tokenizer and Cent level tokenizer now let me and if you want to perform the tokenization you have to download this particular thing called p n KT okay this particular thing you have to download okay now see here is my sentence and I want to perform Word level tokenization I will pass this so it will give me the B level tokenization so automatically this function will handle now if you want to perform sentence level tokenization you can use send tokenizer okay from here and you are getting the sentence level tokenization okay so again some of the example you can try I have given and I created this notebook in a such a way you can use it as a template I already told you I have written like like the function wise right if you need any kinds of let's say um I mean cleanup technique you can copy from here and you can use it in your code that's that's the idea now there is another package you can use called Spacey with the help of Spacey also you can perform the tokenization fine so we can explore this part now let me go to the steamr okay I already told you what is steamr steamr means you are trying to bring the different different word in the root form that that means uh let's say you are having play playing played so what you will do you will Apple steamr and you will just try to convert it is to the and you'll just try to convert to the root word that means play right because it is meaning the same okay in the sentence so now let me show you so inside nltk we are having this steamr post poster pter steamr now we are importing pter steamr and here we have created a function steam word so whenever you will give any kinds of let's say uh sentence it will perform the streaming operation now see here I'm giving work Works working work now if I give this particular sentence it will give me the root form that means work work work and all okay now see here I kept one sentence so this is the entire sentence you can see now I want to perform streaming operation on top of the sentence so I'm using my function inside that I'm passing the sentence now see uh it will give me the um steaming word right now now see probably it has been uh probable okay probable that's why I told you streaming is not readable sometimes you will get some kinds of what it's not readable but your model will try to understand okay but as a human it's not readable see favorite has been converted to favorite right now okay so in case actually what you can do you can use something called LZ okay LZ will handle this kinds of situation it will give you readable word actually now see this is the LZ code so it is available inside nltk I'm importing the LZ initializing the LZ and if you want to use latiz you have to download these at the things wnet and OMW and now if I execute this code you will see that it will give you the LZ for all the word see so this is the word this is the LZ this is the word this is the lemmatization now see it's readable okay it's readable then your streaming one I hope it is clear fine so so that's why I just written uh streaming and LZ are same to retrieve root words but LZ is work uh good LZ is slow and streaming is fast because lemmatization will give you the readable output that's why it's little bit slow than your streaming okay I hope it is clear so yes these are the technique you can follow for the text pre-processing if you're having any kinds of text you can perform text pre-processing with the help of these are the technique you can clean up your text okay and again I'm tell telling you it's not required to perform all the text cleaning uh let's say uh I mean technique sometimes if you need anything just try to keep it as it is that is the idea fine so yes this is all from this video and what you can do right now you can download any other data set from the Kagel kaggle.com because kagle is having different different data set not only movie data set you will also get something called Twitter data set I think Twitter data set is also available see Twitter data set is also available just try to download the Twitter sentiment data set and try to apply these are the text preprocessing on top of the twetter data data set okay so this should be one task guys from my side please try to attempt Because unless and until you are not practicing things would be more complicated and whenever you will be doing the Practical okay by yourself things would be more clear here so in the next video we'll be learning how we can perform the tech data representation that means text representation how we can vectorize our text that means we'll be converting our text to numbers okay for the model so I think you already know what is data representation that means uh inside generative AI you will be working with textual data so not only textual data you'll be also working with something called image kinds of data now these are the actually raw file if you see any kinds of text Data any kinds of image data okay so these are actually raw data these are actually unstructured data so I can't directly pass these kinds of data to my model because uh model is nothing but uh at the end it's a mathematical equation only right and mathematical equation can only support uh numerical data so what we have to do uh whatever text Data whatever image data we are using here we have to convert them to the vector that means we have to convert them to the number okay numerical representation so this concept we call it as a data representation you can also call it as a data vectorization okay so here we'll be uh seeing couple of Technique we can follow to perform these kinds of uh vectorization technique on top of our data even I will also show you some drawbacks uh with different different technique and what which technique actually at the end you have to follow for the generative VI if you're working in the generative VI if you're working with the large language model so which technique would be suitable for your task okay so here everything I'll try to clarify so please try to uh watch this video till the end and if you have any kinds of doubt you can also ask me in the comment section so let's start guys with our data representation topic so guys in this video I'll be discussing about like what is feature extraction from text you can also consider as image then we'll be discussing about why we need it then third I'm going to discuss why it is so difficult then we'll be discussing about what is the core idea and some techniques so so this should be my entire video agenda so first of all we'll be discussing about what is a feature extraction from text you can also consider as image because I told you not in genbi you can use any kinds of data whether it can be text image audio okay anything see first of all we have to understand what is feature extraction see feature extraction is nothing but let's say you are having a unstructured data let's say you are having a text data or let's say image data so from this data you are extracting some features to represent that particular data so I think those who are already familiar with with computer vision uh you already learned about convolutional neural network so with the help of CNN what we can perform we can perform a feature extraction that means we just try to extract some of the features from a image so what kinds of features let's say the ages okay then uh you'll be also extracting some patterns so these are the actually features so with the help of this particular features my model will able to understand about the data and it will be able to predict something okay on top of the test data so this is the idea so in generative way also uh what kinds of data actually we're using we also need to perform something called feature extraction because whether it can be Text data image data any kinds of data the first thing what you have to do you have to extract the features from that particular data okay this is the idea and feature extraction means you are converting your textual data to numerical representation that means to the vector representation okay this is the idea then the second thing actually you can see why we need it because as I already told you uh in general tvi whatever model you are using whatever large language model you are using every model is a mathematical equation and mathematical equation can take actually your textual data or image data directly so for this definitely you have to convert to the number okay numbers you can also call it as a vector okay vectors so if you can convert to the numbers or vectors then your model will be able to take this particular data as an input and it will learn okay what kinds of uh actually pattern it is having based on that it will try to generate something this is the idea okay now why it is so difficult so whenever I'm talking about text Data okay whenever I'm talking about text Data it would be little bit difficult for you to extract the features from the data why so let me show you some example let's say if I'm considering let's say uh ml in machine learning I think you remember inside machine learning what kinds of data we used to use I think you remember we used to use something called tabular Data okay tabular data uh tabular data like we used to use something called csb Data then Excel fine so these are the actually tabular data that means here you will have a table so let's say this is your table so it will have one fixed table so in this table you will have the fixed column size let's say you are having here uh 1 2 3 four column and some of the rows so 1 2 3 four columns 1 2 three four five rows okay so here your uh table dimension is 5 cross 4 okay so this is the table dimension that means it's a fixed size it's a tabular data okay it's a tabular data so here you will have the column okay here you have the column and here you will have the row I hope you cleared now you will restore the data fine now whenever you are taking any kinds of let's say uh machine learning model let's say this is your machine learning model your ml model so what you will do so how so what is the X feature size X feature size is nothing but your input size okay input size that means the independence variable let's say you are doing house price prediction so let's say this is uh number of room let's say this is the area of the house let's say this is uh number of bathroom and this is the price price of the house so this is your y variable okay and these are your X variable okay so X variable I'm having how many one 2 three 3x variable I'm having okay that means you will give three input to the model and only one output you will get which is nothing but y hat okay this is the idea that means to the model you have to give X data three column and Y data one column which is nothing but your price and this is your target variable okay and once you pass the data you will get the output that means here your column size is fixed so here what you saw your column size is fixed that means your input size is fixed okay to the model okay there is no issue that means we can easily use our tabular data okay for in the machine learning or you can also use in the Deep learning for this you have to use something called Neal Network that means artificial uh neural network right now let's consider uh image data let's say inside computer vision we use something called image data okay image videos and whenever I'm talking about videos videos is nothing but it's a frame of image right it's a sequence of image so you can convert videos to image then you can analyze again you can convert to videos so let's consider image only here so let me show you see image is nothing but it's a pixel okay inside image actually we will see different different pixel value so let me show you one example so guys here you can see here I kept one image and this is a Mist uh digit image so here you can see three has been written so if you just zoom this image what you will see you will see these kinds of pixel okay and inside pixel you are having different different numbers you can see these are actually numbers so this number range would be 0 to 255 okay 0 to 255 this is the range of the number and one thing whever you can see the zero okay zero number you can see it's a white pixel okay it's a white pixel and whenever you see some number okay it's a black pixel you can see whenever you can see much darker color it's a that means it is close to 255 and whenever you see some mild like darker color that means it is close to zero okay so this is the idea let's see your three looks like that let's say this is the three in this image and here is the three representation in the number that means if you zoom this image you will see some numbers that some value pixel value would be there okay so that's how actually your three looks like so whatever image you are taking you'll be getting this kinds of pixel value okay at the end now whenever I'm talking about image data so you can easily convert image to a table representation because it's a pixel value at the end so what you can do you can create a fixed table you can create a fix table let's say this image image Dimension is 28 cross 28 okay now just try to the pixel value based on that just try to create the table and add all the number here add all the pixel now if you calculate all the pixels uh here so if you just multiply 28 cross 28 you will get something called 7 84 okay I think that many of pixel so this should be your input size okay this should be your input size now what you can do you can create a neural network okay dot dot dot 7 uh 84 now just pass all the data one by one okay pass all the data one by one and so on okay till uh 784 okay so that's how again you can create a easy neural network and here input size is also fixed which is nothing but this is the input size because because all the image will have the dimension fixed Dimension okay I hope it is clear that means there is no issue with the input size now the next data let's talk about audio data okay audio data so audio audio is what audio is nothing but so what is audio audio is nothing but it's a frequency you can see uh it's a frequency so whenever you will see some audio you will get get this kinds of frequency response and the parameter of the audio would be DB okay that means decibel okay this is the frequency of the audio now you can easily convert this audio signal to a number representation because here you can see let's say this is your uh Hearts okay this is your hearts frequency HS and this is your TB that means decibel like now you can see this is the uh actually frequency now just try to see the graph and based on that just try to collect the number let's say you have created one table let's say this is your table so one column you just consider let's say this is the frequency and this is the decibel okay DB now just try to collect the data let's say here you can see 400 Heartz and the decibel value was let's say minus 10 DB okay that's how just collect all the data okay collect all the data now again you will see we will have one fixed table okay we'll have one fixed table again you can take a deep learning model here let's say artificial neural network and you can fit the data you can fit the data and you can get the prediction okay again you don't have any issue with the input size but whenever I'm talking about let's say Tex data whenever I'm talking about Text data so here you will get the difficulty how so let me show you so let's say this one sentence I'm having my name is buy so here just try to see how many tokens you are having so we are having uh 1 2 3 4 that means four tokens let's say somehow you converted this text to a number representation that means Vector representation let's say my you are considering as zero name you are considering as one e is considering as two and byy you are considering as three now you'll be creating a network let's say this is your Neal Network 1 2 3 and four then what you will do he will feed the data let's say my will come here name will come here e will come here and buy will come here okay now let's you have taken some hidden NE Network and here you will get the Yad okay now let's say there is another sentence how are you now see here you will get the difficulties because in the previous sentence how many tokens I had I had four tokens now if you count this sentence you are having one two three only three tokens now let's say you have represent presented this tokens four 5 6 okay let's say this is your vector representation now tell me can you can I pass this particular data to the model right now because what is the model input size four but here what is the input you are having three so here you will get one dimensional issue okay Dimension Dimension issue you will get okay so it will give you one error so it is expecting four dimensional input but you have given three dimensional input now just try to consider whenever we write any kinds of text it doesn't have any kinds of input length similarity okay you can write anything you can write my name is buy how are you I'm okay so it should be any kinds of length sentence okay it can be any kinds of length sentence and there actually we usually face the difficulty whenever we use these kinds of textual data because it doesn't have any kinds of input size because it's a completely unstructured data and representing this uh text to numbers is very much difficult because I can't assign 0 1 to three like that because if you're Ling 0 1 to three like that your model won't be able to understand it's not a meaningful number but previously the data I showed you we can easily we can easily convert them to the numerical representation because tabular data is already a numerical representation data right then image is already a numbers because at the end you are getting a pixel here then audio is already a number you are getting a number here but what about text text is a string but how we can convert string to a number representation so that it will it will have the same meaning of my sentence let's say here I have written a my name is buy so after my name is coming after name is is coming after is buy is coming so with the help of number how I can uh let's say contain that particular relationship is it possible yeah it is possible but it would be little bit difficult for you initially because you don't know like what kinds of let's say vectorization you can perform here to represent this particular sentence to a let's say meaningful representation that is what I'm trying to say right so now you can ask me sir we can apply actually two techniqu we have learned previously I will tell you what kinds of Technique we can apply you told me let's say the first Technique we can apply something called one hot encoding one hot encoding so this encoding technique you have learned in your machine learning right that's whenever you have any kinds of categorical data used to perform this one not encoding right then the second technique you can also perform something called bag of word bag of word we can also call it as a bow okay bag of work so now let's try to discuss this two technique uh how it can be applied and what are some drawbacks okay if I were applying this these kinds of technique okay so first of all let me discuss why not encoding so what I'll do I'll just create a table here so let me create a table so here I will take uh two columns and four rows as of now I'm only taking four example just just to show you okay how things will be working but in actual way you will have uh more than actually four rows okay that means you might have thousands rows let's say lacks of rows okay uh it doesn't matter let's say this is your data one so here you are having a sentence let's say people watch let's say I'll give my YouTube channel name DS with buy so if you don't know guys this is my YouTube channel name if you're interested you can also so Vis it then let's say data two we are having DS with buy much DS with buy I'm writing any kinds of sentence guys as of now whatever things I'm thinking in my mind now it's a data three you are having people write comments and data 4 I'll be writing D4 DS with buy right comments okay let's say this kinds of data we are having initially fine so that means how many rows we are having we are having Row one row two then Row three and row four that means only four row Pro we are having as of now okay four example we are having four data points we are having right now if I want to perform one not encoding so first thing what I have to do I have to take the entire Corpus okay and I already told you what is Corpus uh I think in my previous session the text uh pre-processing session at the last I was discussing about some like key important things you have to remember okay so whenever I'm talking about Corpus that means your entire data so just try to collect your entire data let's say people then you have the watch then you have the with puy then you are having um then again you are having D with buppy Ds with buppy then again watch then again DS with buy then you are having people then write then comments then again DS with buy write comments okay so this is your entire Corpus okay Corpus okay Corpus of your data now from here you have to figure out how many unique word you are having so we are having people we are having watch DS with buy then uh write and comments so these are the unique words that means 1 2 3 4 and five that means n is equal to five okay five unique word we are having now what we have to do we have to uh create a table let's say I'll create a table with this five unique words so the first word will come people the second one will come watch then the third B will come let's say DS with buy then write then comments okay comments okay so that's how your one encoding will try to represent the data okay let's say whenever you using any uh let's say library in Python so how this Library works exactly to perform the one encoding that is what I'm explaining here fine now see how it will try to convert your text data to numerical represent ation so first of all it will take the row one that means D1 let's say people now just try to find people here so you can see people is there that means this should be one and everything would be zero okay then watch now just try to find out the watch so here is the watch so it should be one and everything would be zero again okay then D is with BP so it should be one and everything would be zero okay so here the number actually we got this is for the D1 that means data one row one so here I can write like that let's I'll just simply write D1 okay D1 is equal to so here I got one two dimensional Vector so here 1 0 0 0 uh zero okay then comma comma 0 1 0 0 0 then comma I got 0 0 1 0 0 okay so this is my D1 that means sentence one okay this is for the sentence one okay I hope you're clear now again you will take the sentence two that means D2 okay D2 now you'll just try to find the numerical representation now let's find the D2 as well so let's say d is with B so again let's say this one would be um one and everything would be zero okay so this is for actually D1 and now we are doing for D2 now again it will see the watch so watch is here it would be one and everything would be zero again now the next thing would be DS with B again so let's say this is a DS with buy and everything would be zero again okay so this is what actually your D2 so again I can represent like that let's say D2 is equal to uh 0 0 1 0 0 comma 0 1 0 0 0 okay then comma I'll take 0 0 1 0 0 okay so this is my D2 so that's how you have to complete for all the sentence that's how you have to complete for all the sentence and at the end you will get all the vector representation okay you will get all the vector representation I hope it is clear okay how one encoding can be applied now let's say you have completed for all the sentence and you got your vector now what you will do you will just try to create a newal network now just see the input size the input size for the model you can see uh input size would be 1 2 3 4 5 because we are having five unique W only so everywhere you can see five dimensional Vector 1 2 3 4 5 that means you'll be taking a neural network like that 1 2 3 four and five okay inside that you will take some hidden layer and you will get your y hat here okay so that means you will pass the data okay you will pass the data in this particular layer that means you will take this particular Vector so first of all you will you will do for the D1 you will take this particular Vector you will pass it here okay then the second one you will pass it here then the third one you will pass it here okay that's how you'll be passing for all the sentence okay you'll be passing for all the sentence but let's say in case in your Corpus okay in your Corpus the number of unique word is 1,000 number of unique word is 1,000 in that case what should be the input size of the model definitely it will also become 1,000 that means you have to take one dimensional sorry uh 1,000 1,000 neuron okay at the very first that means again complexity is increasing let's say in your entire Corpus you are having 2,000 okay 2,000 uniqu so you have to take 2,000 actually neurons so if you're using one in coding that means the number of unique word you are having in that particular Corpus based on that your input layer would be decided okay it's not a recommended because if your input if your let's say unique word is inre ining your uh neurons is also increasing and whenever you are increasing the neurons your uh calculation would be increased also because at the end you are doing uh neuron calculation you are doing the computation here so computational cost will also increase right so that's why it's not a recommended way again there is another issue let's say I'm having a sentence and which have actually the word which is not present in my Corpus let's say I can write my name is buy let's say this sentence actually I'm having okay now just try to see these are the word is having in my entire Corpus no these are the word is not present inside my entire Corpus okay that means what will happen it would be out of vocabulary issue that means the vocabul you are having right now it is not present inside your Corpus so your model won be able to understand these are the what because you haven't used this data during training so whenever you are giving doing testing definitely it won't be able to understand what kinds of sentence you are giving so again it is called actually out of vocabulary issue O oov Okay out of vocabulary issue so if you're using one encoding so you will get this kinds of issue okay out of vocabulary issue and another issue I think you saw here you are having lots of zeros you are having lots of zeros and zero is what it's a sparity problem that means it's a SP sparse Matrix you are having okay and whenever you are doing the computation and whenever you are using zero okay to perform any kinds of operation with number so there is uh no meaning right that's why zero is unnecessary number here zero is unnecessary number here so you are unnecessarily increasing the computation here because with because you can see zeros is increasing the dimension in this particular case so let me just write some of the drawbacks of the one encoding so here I'll just write the drawbacks so the first drawbacks you can see the sparity that means here you are having lots of zeros then the second you you can see the no fix sized because anytime your sentence might be anything okay let's say here I have taken uh people watch DS with buy I can take also my name is buy then I'm a data scientist now just count of the sentence length you will see that it would be bigger okay so you can write no fixed size then the third you saw o that means out of vocabulary issue and the fourth important things it is not not capturing semantic mining meaning semantic meaning semantic meaning means uh after people watch is coming after watch DS with buy is coming before DS with buy watch is coming before watch people is coming these kinds of semantic information semantic relationship this is not capturing because it's just a number and whenever this word is present it is giving one otherwise everything it is giving as zero that means this particular number is not capturing the semantic information of your sentence but whenever we are using Text data so definitely it will have the semantic relationship that means it will follow on grammar what is what kinds of grammar let's say whenever I'm writing any kinds of sentence let's say my name is buy so my is a subject so my is a subject name is noun okay is is verb bu is also noun that's how it is following on grammatical rule grammatical rule okay that means after my name will come after name uh is will come after is buy will come okay so it is following one relationship it is following one relationship like that right so this kinds of relationship it won't be able to capture if you're using one not encoding okay so that's why we can't use this particular uh method okay we can't use this particular method whenever we want to convert our data to numerical representation that means Vector representation okay inside generative so this technique you don't have to follow because it's like very basic technique if you're doing any machine learning project if you have some if you have some level of categorical data in a column you can use this uh I mean one not encoding that but whenever you are working with completely textual data inside Genera VI I own suggest don't use this particular method because I already showed you some of the drawbacks you will get here so now the second technique we'll be discussing about bag of word okay bag of word now let's try to see the back back of word example like how it will work so for this I'm going to copy the same table so again uh you can consider the same things Corpus so I'm using the same table that means it will have the same Corpus again again the number of let's say uh uni word would be five and you have to create a five uni word table so let me again copy now how this bag of word will work see see this bag of word will work based on the count okay based on the count of the what present in your entire Corpus so let's say first of all it will see people um so now just try to tell me how many times people you can see in this particular sentence uh I can see only one time so people is coming only one time okay now now the next word watch so how many time watch is occurring in this particular sentence only one then DS with buy one time and right is there no so right is not there it would be zero and comment is not also there it would be zero okay then the next sentence you can see DS with buy only one uh DS with buppy now occurring two times so it would be two then watch is occurring only one time one and uh people is not there right is are not there comment is not is not also there right now the third sentence people is coming one time right is coming one time okay comment is coming one time and watch is not there the is not there now now the last sentence DS with the p only one time write is only one time comment is only one time DS with uh sorry uh watch is not there people is not there okay so this is how actually you'll be generating the vector okay this is how actually be generating the vector now just try to match with your previous Vector what you have observed you see the bag of what technique you have applied it is having very less zeros than your one not encoding okay that means it is slight better than your one not encoding okay because it is working based on the counting okay based on the counting okay counting of the word present in the sentence okay this is the idea now research proven research okay research already proven that if if you if you want to do something called classification kinds of task let's say sentiment analysis okay sentiment analysis then let's say we are performing positive negative reviews okay these kinds of task you can use this uh V for technique to perform the text vectorization because this is suitable for this particular task because if you see any kinds of sentiment analysis problem let's say here I'm having some sentiments this movie is wow or you can also write this movie is amazing amazing performance okay performance let's say this kinds of reviews you are having now if you want to find the positive okay positive or it's a negative I can see the let's say word so movie amazing amazing performance okay you can see amazing this particular positive ver is occurring like multiple time that that time I can consider it's a positive review okay it's a positive review so that is why it's a frequence frequency based actually approach so it will always try to see the frequency frequency count in in a sentence and based on that it will decide whether it's a let's say positive sentiment or whether it's a negative sentiments okay so that is why it is recommended if you're performing any classification kinds of task inside a text you can use this particular approach okay but again um one drawbacks you'll see it is not capturing the semantic information like after DS with buy watch is coming after watch DS with buy is coming all people watch is coming afterward with bu is coming so this kinds of semantic information it is not able to capture so again it's a drawback okay and some of the zeros still you can see okay because again it will increase that uh your computational cost because zero doesn't have any kinds of meaning if you're doing any kinds of operation right this is the idea fine so apart from that we are having some more Technique we can follow like we having something called TFI DF so we are having tfidf then we are also having another technique called word uh word to V so this one use one statistical let's equation to perform let's say vectorization and this one is the de deep learning based actually vectorization technique okay and from this technique actually lots of idea came how we can use the Transformer model to perform the feature extraction because uh whenever I'll teach you this word to B technique I'll show you the feature extraction technique so how it will extract the features from a sentence let's say from a text okay so from here actually idea came then people have uh actually launched Transformer based actually Transformer based actually encoding technique that means with the help of Transformer model you can perform the text representation that means you can convert your text to Vector representation and whatever large language model you using okay llm you'll be using this Transformer based approach only to convert your data to the numerical representation so whenever we'll do the Practical that time definitely I'll will show you okay we'll be downloading the model from the hugging face hugging face is also having lots of tokenizer that means these kinds of uh encoding encoding model okay with the help of that we can easily convert our data to the numerical representation fine so as of now let me uh show you all the Practical that means this bag of word then TF IDF then what to B okay how we can use it and all but before discussing tfidf and what to B I just wanted to show you this bag of word practical so for this what I will do I will uh open up up my collab notebook and there I'll show you this particular practical so guys here you can see I already prepared one collab notebook for you so one not encoding I'm not going to show you because uh you already know how to perform one encoding so with the help of Panda's Library also we can perform one one encoding even uh we also have one let's say class inside esal and Library okay to perform the one encoding so I'm expecting if you already work with machine learning you'll know how to perform one encoding and again we are not going to use one encoding technique in our analysis but bag of what we be using sometimes because I told you now if you're doing any kind of sentiment analysis and all that time you can perform because it's easy to implement okay at the end now see uh bag of word for this I need two library npay and Panda so let me import them so with the pandas actually I'll be creating a data set first of all so the same data set example I have taken the data set I showed in my whiteboard okay so you can see people watch this with buy D with what DS with buy okay these kinds of example I have taken now let me prepare the data frame okay so this is my data frame and here I also have taken another let's say column called output let's say whether it's a positive whether it's a negative so that's how have just given a number okay it's just a assumption number as of now um don't try to think it's a actual number fine one means it's a positive zero means it's a negative okay but whenever you will be using actual data there will have the positive negative previews okay based on the text you are having I hope it is clear now if you want to perform bag of word technique you have to use one uh Library called escalan from escalan you you have to use something called count vectorizer okay so count vectorizer is nothing but it's a bag of word technique so I I know that many of you already use this count vectorizer in your machine learning but you don't know this is a bag of word okay so now just try to remember it's a bag of word technique only right now we have created the U like uh counter vectorizer object now here I just need to fit my data and I want to fit my data on top of my text that means Text data now here I'm fitting the data now it will return me all the vocab now see uh what will happen here it will just uh assign some of the index number okay it will just assign some of the index number with all the words now who whoever having actually zero that means this is the first index that means this word would be considered at the very first then uh this one that means number one then two three and so on right now how it is generating this particular array so let me just try to discuss now just try to see which word is coming at the very first based on the index comments now let's try to see comment is there in the first sentence no comment is not there that's why it is coming as zero got it now the second sentence you can see now the second word you can see DS with buy now tell me DS with bu is there yes how many time only one time that's why it's coming as one okay then the next one people people is there yes how many time only one time okay then the next word watch watch is there yes is there how many time only one time then the next one I think last one right right is there no right is not there that's why uh it is coming zero okay now let's consider the second sentence okay now again you have to consider based on the index again comments is there no comment is not there so that's why it's zero now next thing yes with B yes it is there how many time two time that's why it's coming as two okay then uh you can see the next one people people is not there that's why it's coming as zero okay it's coming as zero zero then after people actually we are having watch watch is there is there how many time only one time okay then after that uh we are having something called um this one right right is there no right is not there that's why it's coming as zero that's how it you have to consider for all the sentence I hope it is clear how it is generating this particular number okay and this is your vector okay this Vector actually you can pass to the model okay this Vector you can pass to the model so if you're only printing this B object see what you will get you will get one object here okay you will get one sperse Matrix object and if you want to get the uh number that means the complete array you have to use this particular method called two array that's why every time I'm doing this one okay just to show you uh to show you all the number that is the idea fine now if I want to perform on top of my new data let's say this is one sentence I've given B watch this with buy uh so I have to use this particular transform okay transform function that time cv. transform pass your data and convert it to two again you will see your data representation fine now what you can do you can store your X and Y data let's say x is nothing but my entire B and uh Y is nothing but my output so this is my output okay positive or negative now you can pass this data to the model okay this is the idea got it now there is another things inside bag of for called NRS okay what is NRS NRS is nothing but here you see NRS is nothing but here you do the same thing only you give one NRS parameter so let's say if engram parameter is two so what will happen let's say engram parameter is equal to two that means it will consider two two word as a one token okay two word as a one token see previously I I took individual word right now it will consider two word as one token that means here it will come people watch okay inside this box people watch will come then watch DS with buppy will come okay so that's how you have to take pair of word pair of word okay and you have to perform the same thing so this is called actually n Gams now let's say n is equal to three that time three pair will come that means three word you have to consider okay but I saw that people are using only two uh parameter because sometimes uh it is required so let me show you one example why it is required so let's say here I'm having a review movie is very good and here I can write it this movie is not very good now this one is the positive uh sentiment you know this one is the negative sentiment you know okay but how about your model okay how it will identify because I told you based on the frequency count it can decide let's say let's say you are having some word let's say very good movie okay that means it's a positive one and if it is coming to the second sentence let's say this is the first sent the second sentence again it can consider movie very good and it will ignore this one because it's a stop word I think I taught you the stop word concept right not would be considered stop word so again your model will try to consider it's a positive okay it's a positive review but all it's a negative review but how I can capture this negative information so if I am doing this n gs that means if n is equal to let's say n g is equal to two it will consider two word as a pair okay two word as appear so the first two word then second two word then these two word and this two word okay so it's a positive one you can see now you can see it's a positive one so this movie very good okay now again if I just uh make this this sentence let's say this word this word this word this word and this word now you can see easily it is capturing is not okay is not now see it is easily capturing this is not that means not word as well okay now easily your model can identify it's a negative okay it's a negative sentiments okay so that's why sometimes we have to perform this particular n Gams operation okay because if you're giving nram parameter is equal to two that time it will consider two tokens okay in one just let's say representation and it can capture some of the hidden information okay this is the idea now let's see the practical so here you can see the same uh example only you have to use the counter vectorizer I'll convert to the text now see whenever I used counter vectorizer here I have given a parameter NRS range is equal to 2 2 comma 2 that means it will consider two words okay now you can see people watch watch DS with PDS with B P Watch okay now it is considering two tokens okay uh in just one representation that is the idea if you give three so if you give three here it will consider as a three word okay three word as a count okay that's how you can consider fine and if you're using three three word that means it would be considered as a tyram okay tyram and the if you're using two words if you're using two it would be considered as a pams okay this is the idea now there is another technique I already show you TF IDF that means TR frequency inverse document frequency so this will work based on one equation based on one let's statistical equation so simply in Google you can search for this equation TF uh TF I DF so you'll see this particular formula so yes this is the formula guys it use okay to perform this uh text representation technique okay so it will work based on the let's say weight let's say let's say if anyone what is having let's say uh frequent count okay in a sentence it will give more weight okay it will give more weight now if I show you the representation so you have to use this escalan to initialize TF tfidf vectorizer now inside that you can pass your data let say text dataa I'm passing again I'm converting to the array representation now see you are getting the entire array okay now see none of the number is zero complete zero you will still get some number okay it would be a floating number so this technique helps us to reduce that sparse Matrix dimensionality issue because uh if you're are using zero okay zero in your let's say Vector you are doing unnecessary computation that's why it will assign the weights and weight is nothing but it's a floating number okay and everywhere you will see the floating number so this particular issue will be resolved because still after performing bag of word you are generating some zeros but if you're using tfidf you are not generating any kinds of zeros okay so this is the B benefit here and this is better than your uh let's say this one uh bort okay sometimes you can also use this tfidf technique again I won't be recommended to use this one because we have some better option to do next uh thing I'll be teaching you that what to V technique that means we'll be using deep learning model for the fure extraction okay and this will uh contain the santic information because again if you see this TF IDF is not able to uh actually contain the centic information that means after let's say people watch is coming after watch D with B is coming these kinds of santic information is not able to capture okay so again I won't be recommended to use this TF IDF technique here as well fine and here is the some TF IDF value okay if you are understanding this formula you'll get it okay what kinds of things it is generating but initially I won't be suggesting you to Deep dive in this equation because again because again it's not a recommended we won't be using it okay we'll be understanding whatever actually we need okay for our large language model that's that idea so yes these are some actually practical I showed you for the text representation technique and word embedding technique now the next thing we'll be discussing about uh this one a word to V technique a word to V technique okay now let's try to see how word to V technique works okay so guys now we'll be discussing about word to V so this is the Deep learning approach actually so how what to vake uh works and how it will extract the features from the uh data itself I'll try to clarify see what to V actually use uh two kinds of architecture so if you want to see just write word to V architecture so you'll see it has actually two kinds of architecture called cow so here you can see guys uh it uses two kinds of architectur cow and Skip gram so it's a neural network only right so let me show you the code mechanism of what to W like how it extract the features let's see you are having a documents let's see you are having entire Cor and in the Corpus let's say you are having some unique word so let me create a table so I can create a table just a minute so here I'll be adding all the features and this side I'll be adding all the unique word let's say you are having the word of King let's say queen let's say [Music] man let's say woman and let's say monkey so as of now just try to consider these are the unique word you are having in in that particular entire corpus now how your word to V will try to extract the features so see it's a neural network and neural network uh Works based on the back propagation because every time it will adjust the weight based on that it will learn and if you see the neural networks uh you can't see like what kinds of feature it is extracting because it's a completely hidden thing if you see for the let's say CNN if you see the for the NN so these feature extraction things is a completely hidden you don't know what kinds of feature it will extract but as of now let's consider uh it has let's say generated some of the features let say the first features it has generated based on this word gender because gender features can match with all the words you can see because all the let's say word I'm having let's say all the entity I'm having it has the gender yes or no right then it has also generated another features let's say wealth now you can see wealth is also matching with all the words now we can also consider power then weight then speak see as of now I'm just assuming these are the features my model has generated because here we are using deep learning model I think I showed you now see that's how actually it will identify the features that means the vector representation first of all it will see King has gender or not yes King has gender and it's a male king let's say male king queen has gender yes let's say zero zero means female man as gender yes one woman yes that means zero because man I'm considering as one and women I'm considering as zero right monkey has also genda let's say one now wealth King has wealth yes King has wealth let's say I can assign as one because King is having lots of wealth Queen is also having wealth let's say because Queen is a part of King right man is also having wealth but less than king and queen so I can give let's say 0.5 okay or I can give let's say 0.2 fine because again they are king and queen right woman has also wealth that's a 0.2 less than man monkey doesn't have any wealth I will give zero Now power yes definitely King has the power Queen also has the has the power okay but I can just decrease a little bit let's say less than K King okay I can give 0.7 man has also power let's say 0.3 women has also power let's say 0 point um 0.2 monkey no monkey doesn't have any power now wait yes King has weight let's say I will give 0.8 let's say this king is little bit obese Queen yes she has Al weight I can give let's say 0.5 very slim Queen man let's say 0. 7 wom let's say 0.5 monkey let's say 0.3 fine King can speak yes King can speak Queen can also speak man can also speak woman can also speak monkey let's say can't speak okay now see beautifully I have generated some of the vector okay beautifully I have generated some of the vector and I haven't generated it has generated by your what to fake algorithm okay part to V model that means this architecture that deep learning architecture you saw cow okay CBO and Es skip gram okay so these are the architecture let's say it has generated this features now if I tell you just try to give me the king Vector so what it will give me it'll give me let's say king is equal to let's say this is the king Vector so I can write here one then one then one then let's say 0.8 let's say one this my king Vector you can also give me the queen Vector so here is the queen Vector 0 1 0.7 let me just write 0 1 0.7 then 0.5 and one okay this is the queen Vector you can also give me the man Vector yes the man Vector 1 0.3 0.3 0.7 1 0.3 0 3 0.7 and 1 okay then woman 0 0.2 0.2 0.5 0 0.2 0.2 0.5 and 1 then let's say this is the monkey Vector 1 0 0.2 monkey one sorry should be one then 0 0 0.3 0 0 0.3 sorry 0.3 and I think zero okay see all the vector I got now if you plot them in a dimensional space let's say this is my Dimension as of now I'm just drawing two dimensional Dimension okay because uh 3D 4D I can draw here that's why I just consider two dimensional space now here you can uh let's say this is your x coordinate this is your y coordinate now let's say first of all I want to let's say represent King here so let's say King King is here let's say this is the King this is the king Vector okay this is the king Vector I can write this is the king now if you just now if you just uh plot the queen also you will see that Queen will come close to King okay Queen will come close to King why because if you see the vector okay if you see the vector they are very closely related Vector you can see let's say if you calculate the queen distance with respect to all the vector you'll see that Queen will have very less distance with the King because both are similar okay both are similar okay because uh you can see Queen is Queen is the part of King so all the features are already messing with the king that's why it is coming to close so that means it's a it's a cluster okay it's a cluster of king and queen so they are falling in the same cluster now similar wise if you plot the man and woman Vector you will see that they will uh they will come nearly let's say this is your man okay man vector and let's say this is the woman [Music] Vector because if you see carefully men and women Vector they are closely related okay they uh they are almost similar so that's why they are coming in the same cluster so again it's a cluster okay for men and women and if you see the monkey okay monkey is a completely different entity you can see the vector is also different so let's say monkey will come here so I can take a new pen let's say this the monkey monkey okay and monkey and monkey it is present in the different cluster okay so that's how it is capturing the centic information okay between multiple word now let's say there is another sentence you are writing let's say I am a princess okay princess now tell me where this princess will come in which Vector me which space okay in which cluster it will come definitely inside this particular cluster because if you uh just extract the features from The Princess you'll see that uh it would be close to King and Queen okay so that's how uh this word to V can uh actually understand the semantic information of a word okay so that's why it is uh so that's why what to V is the much better than your previous whatever technique you have learned so far okay and from here actually your actual concept starts like whatever things you will be learning in future let a Transformer based encoding like how Transformer model extract the features that's how it extract the features okay because at then it's a deep learning model and by the back propagation itself it will generate deser the features but as a human you won't be able to see the features but here we are assuming let's say these are the features your model May create and based on that that's how it will generate the vectors embedding okay and when it comes to centic information that's how it will uh let's say capture the centic information because it will plot the all the vector in a dimensional space and then it will try to find the relationship whether king and queen are same or not man and moment same or not monkey is a different or not okay I hope it is clear now so let me show me show you one image actually uh experiment of what to V you can see this is one experiment for the word to so here you can see we are having three kinds of word King man and woman and whenever what to is applying on top of it it is generating some features you can see so this color represent the features let's say uh these are the features it has generated let's say this is uh wealth this is uh Power this is speak this is and let's say this is the weight you can see King uh color is different than your man and woman now see man and women color they're closely related you can see all the color is messing okay all the colors are messing that's how it is making a separate cluster of man and woman and King is a different entity here okay I hope it is clear now so now let's see the Practical of what to V how we can use what to V in a python code so for this I'm going to use one data set so let me show you the data set here so the data set name is games of ss book data set okay data set in Kagel I think you know what is games of th okay it's a series actually so if you don't know you can simply search on image see uh this is one actually uh series okay this is a movie series actually games of THS and it is having different different characters so if you have already watched this particular let's say series you will know okay about this particular character and all So based on this particular series one book has been published and uh this data set is avable in the Kagel also this book data set now this book contains all the dialogue okay present in that particular series okay see all that dialogue it is having different different txt file you can see based on the let's say season okay it is having different different dialogue from all the characters so what I'll do I'll just try to download one txt file and I'll just try to apply what to V on top of it and I'll try to see what the Character Are closely related that means I'll see these kinds of let's say uh this kinds of say representation that means whether some character are uh in the same clust on not because if you see this series now some of the character would be closely related okay let's say character one that's a character two they're similar kinds of character so these two Vector will come closely okay that's how we want to see the relationship okay between the data so I already downloaded one txt file you can also download just try to search for games of th books in kagle you will see this particular data just try to download one txt file so let me show you the notebook so guys this is the notebook and here we'll be showing you the what to fake now let me connect and this data set is already available in this link I have already given now let me download and let me upload in my Google collab so here I can upload this data so I'll create a folder here called data and inside that I can upload this txt file now first of all let's import some Library naai pandas and Jim I'm importing because what V is there inside genim Library okay if you want to use whatto you have to use this particular Library called Jim inside that you have the whatto architecture now let me import them now if you're using Google cab first of all you have to update the genim because otherwise you will get some of the issue so let me update okay update is done now I'm importing like sentence tokenizer from the nltk and I'm also importing simple pre-process from the genim library because uh before passing my data to my let's say uh whatto model first of all I have to apply some processing okay processing means it will do some cleaning operation and all then uh you can pass the data so let me import them now this Cod spp it will load your data from the data folder you can see okay so here I'm having test.txt so it will load the data and it will extract all the let's say uh word that means all the sentence one by one and it will perform from the tokenization okay it will perform the tokenization that means every word will have the tokenizer okay now if I show you the story that means start story list now see you got your all the sentence okay see this is the entire sentence and inside the sentence you you have done the word level tokenization okay this is the idea now if you check the length of the entire story you have more than 8,000 uh actually let's say example here so here you are having more than 8,000 sentence that means 8,000 dialogue okay now we can see the entire story now if you want to see the story one that means the first uh let's say dialogue the first sentence this is the first sentence okay you can see and again we have done the word level tokenization okay individual token now we have to initialize the genim model so that's how we can initialize the genim model so let me initialize then if you want to let's say convert to the vector representation just try to call this particular function bu uh build vocab now inside that pass your data then you have to train the model so you have to give your data total example then total example you will get total example from the model. Corpus count that means it will count the entire Corpus and it will give the count and you have to give the epoch okay Epoch you can take the default actually Epoch from the model itself now see my training is completed now if I want to see the similar so similar of Deniz so Deniz is a character inside this particular let's say uh Series so see she is the character now you can see the similar score of the D with these are the word okay these are the word but see again you will get some let's say random output because here we are only using one dialogue that means one txt file I'm not using the entire txt entire dialogue Because unless and until my model is not getting the entire dialogue it would be a little bit difficult for uh it to match those character yes or no right so if you're doing it just try to take all the data and try to perform this job but here just to show you I have taken only one THD file now you can see with still word it is having 0.99 okay per relationship okay din eyes then and Prince so Prince is another character prince in gamesof songs see with him actually uh her character is matching if you watch the series actually you will see that with him her character is matching okay mostly so you can see then deny then uh doar key also is a character see okay so that's how you can actually match now see it's not actually properly visible so what I can do I can also plot them in a so what I can do I can also plot them in a uh visual graph representation I'll tell you but before that let me show you if you want to let's say see the relationship between two character you can use the similarity function inside that give two character let's say Arya and Sansa so if I give Arya and Sansa so they are having this is the relationship okay now if you want to get all the vectors you can execute this code it will give me it will give you all the vectors okay all the vectors for the entire text you have given okay and the shape of the vector see now let me show you the visualization I apply the PCA that means principal component analysis to reduce the dimension that means I want to plot in a threedimensional space right now so here I'm initializing PCA component now pca. fit I'm giving my data that means Vector so it will give me the uh three dimensional Vector right now that means from 100 Dimension it has reduced to three dimensional Vector I think you know what is PCA principal compound analysis in machine learning we can use it to reduce the dimension size now you can see the dimension right now so this is the dimension 3 and here we are having 3,840 example in this particular entire text now see if I want to plot it I can use plotly library now inside that just pass your data and set the colors it will show you the interre representation of the data see that's how you are getting a 3D space see this is the 3D space now see the see the different different uh word okay different different word and their similarity so here you can see they are closely related these are the cluster so this word is nothing but so this red is nothing but just try to see it's a take and this blue is nothing but it's a put that means put and take they're falling in the same cluster because they have the relationship okay if you just find uh in a grammatical way you will see that they have the relationship and apart from that you will also see some character okay you can also match the character you will see that they're falling in the same cluster so you can play with this particular graph uh I'll share the notebook you can play with this particular graph see that's a beautifully it has stored the data in the dimensional space okay and that's how your model will identify okay the semantic relationship okay between two wordss that means I showed you now here here the centic information from the word itself I hope it is clear now fine so yes so that's how actually we can use this word to V and if you're using word to V you have to pass this this particular data sorry uh after this data okay the vector we are getting the entire Vector that normalized Vector okay and this is your vector representation this Vector you have to pass to the model but again we won't be using that we have just learned this part to V just to understand how my Transformer architecture will be working how it will extract the features and how it will get the let's say semantic information so in Transformer architecture you use something called attention mechanism let's say attention model with the help of attention model uh uh it can actually understand the semantic information in a good way okay this is little bit Advanced concept okay that's the idea so yes this is what actually we can perform our data representation that means text representation and that's how we can perform the vectorization technique so why we learned this because going forward whenever we'll be learning about let's say large language model and all uh before understanding large language model I just wanted to let you know how data would be prepared for the model okay now I think you got it how we can prepare our data for the large language model okay if I have any kind of raw text how we can convert to the numerical representation and which approach would be better because finally we saw that this what to V approach is better because it is able to extract the semantic information okay semantic information because it is a deep learning model okay this is the idea so yes I hope guys you got it now in the next video we'll be using all the let's say topic we have learned so let's say text pre-processing and text representation technique uh and we'll be doing one small project with the help of machine learning we'll be doing one text classification project as of now we have learned about text pre-processing and uh text representation technique like how we can convert our textual data to new medical representation that means the vectorization right so we'll be using all the concept we have learned so far and we'll be uh bring one hands on that means we'll be doing one practical so here we'll be implementing one text classification model so in this video my objective is to show you how we can prepare your data set for the model that means how we can apply all the preprocessing technique how we can apply uh these kinds of text factorization techniqu so that you can use those data okay for the model training but model wise actually I'm not going to use large language model as of now I'm going to use simple machine learning model later on I will also show you how you can use large language model okay because it's a like very initial phase we are doing as of now we haven't learned about the llm that's why I'll be using simple machine learning model so let's uh open open up our Google collab and uh let me show you the text classification practical there so guys as you can see here I already prepared one notebook for you and the data set actually I'm going to use so this is the link of the data so the data set name is IMDb movie review data set so this data set is having uh 50k movie reviews so you can download this data from the kagle so kagle website it is available so it is having reviews based on the sentiment whether this reviews is a positive or negative okay so it's a classification problem statement so I already downloaded the data I have already given the link you can download the data so let me upload the data here so I'll just try to upload so this is my data so here let me upload it okay my data set is uploaded here now the first thing what we have to do we have to import some of the libraries so here I've already listed down all the libraries you need uh for this experiment so I need naai pandas mat plot leave okay then I also need uh 10est Le counter vectorizer tfidf Transformer okay so everything I have just imported here and as of now I'm not going to use this Keras so let me just remove it it's not required so here I already told you I'll be using simple machine learning approach so I don't need to use any kinds of deep learning library as of now so fine you can see guys I have imported all the library required Library I need and definitely I will explain whenever I will use it I'll tell you okay why we're using this particular library now let me import all of them I think naai and pandas we already imported here so so I don't need it I can delete it now you don't need to execute this line because uh here I have my data in my uh Google collab you can see Google collab space but if you have your data in your Google Drive that case uh what you can do you can mount your Google Drive so I'm not going to execute this line so directly I going I'm going to assign my data path so I'll copy and here I'm going to mention the path of my data okay so let's say this is my data part now I'll execute now I will load the data with the help of pandas Library now see guys this is the entire data you are having and here you are having the uh this one your reviews as well as the sentiment of that reviews now if you want to see the shape so here you are having 50,000 movie reviews and two columns uh reviews and sentiment now see here uh I don't want to take all the data because again if I'm taking all the data it will take lots of time to process so I'll only take the 10,000 example okay from uh this 15,000 example so here you can see I'm taking only 10,000 example first 10,000 and now you can see this is my data now if I show you the data shape now see only 10,000 example I have taken now if you want to see any kinds of reviews you can also check this is the first reviews now if you want to see the sentiment value count that means how many sentiment it is having it is having two sentiment um positive and negative you can see so positive sentiment is having around uh 5,000 and negative sentiment is having around uh it is also around 5,000 you can see 4 4,000 972 that means it's a balanced data okay we don't have any issue with the data now let's see whether it is having any missing value or not for this I can use is Nal function now see there is no missing value now let's see any duplicates is there or not so you can see we are having a 17 duplicates what I can do I can drop the duplicates for this you can execute this line of code drop duplicates and in place is equal to true that means you want to permanently delete the duplicate now if I execute now see there is no duplicate uh data in my data set right now now let's perform some basic pre-processing so as I already told you inside basic pre-processing you can perform HTML tag removal then lower case operation stop remember so these are the thing you can perform now see uh from my previous notebook that text prosing notebook I have taken the same function that removes tag function that means it will remove all kinds of HTML tags from the data because if you show if I show you the data it is having lots of HTML tags because it's a it's a extracted data from the website right so let's apply this function I will apply on top of the reviews so it will uh remove all the let's say HTML tags now see this is the clean data I'm having now see there is no HTML tags present inside this data now the next pre-processing technique will be performing the lower casing operation so let's apart from it so here you can see I'm applying lower casing now if I show you see all of my word has become lower case right now fine now what we'll be doing we'll be removing the stop Parts because as I already told you some stop word doesn't have any kinds of meaning u in a reviews whenever you are performing any kind of sentiment analysis because it will see the positive and negative words okay to differentiate whether this sentiment is a positive or negative so here you can see uh here I have written a Lambda function so it is doing the same thing you can also use the previous function I showed you in that notebook I you can also follow this particular approach okay so here I'm using Lambda function and Lambda is a on line function okay in the one line I'm taking all the word one by one and if any stop words is there okay I'm just trying to remove that stop W with the empt space that is the idea now let me execute now see there is uh no stop word present in this data right now fine now let me show you my head of the data now what I have to do I have to uh just uh separate out my X data and Y data that means my independent variable and dependent variable so independent variable means this is the review one independent variable means this is the sentiment that means this sentiment is my level right now so I'll store inside X and level I will store inside y now this is my X that means the entire review and this is my y that means my sentiment now one issue you can see sentiment is nothing but it's a text okay it's a text you can see it's a string but what I have to do I have to convert to the numerical representation so here I can simply apply uh label encoder so it will assign positive with one and negative with zero so let me apply so for this I'm using level encoder from escalan initializing the object and I'm fitting my Y data now see your data will become 0 by one okay that means it has converted to the numerical representation then what I have to do I have to perform the 10 test speed because I have to keep my data for my training as well as the testing and the test size is I have given 0.2 that means 20% data I'm keeping for the testing and 80% data I'm giving for the training so let me perform now this is the training site and this is the testing size fine now I'll be applying first of all bag of word okay I already taught you the bag of word I think you remember so I can use the counter vectorizer for this now I have to apply the bag of for on top of my reviews okay reviews is my uh like input data right then I'm also performing on top of my test data because I'm having two kinds of data training data as well as the testing data and I think you know whenever you are performing on top of training data you have to use feed transform and whenever you are performing on top of testing data you have to use transform okay Ma function for this then I'm converting to the array representation now this is my training uh vector and if you want to also see the testing Vector this is your testing Vector okay now here we'll be using one machine learning model called KN bias inside KN bias we are having uh one NAB version called goian NB okay goian NAB we'll be using this particular algorithm so here you can see I'm fitting my data so X train and Y train now let me train my data so here I'm only showing you how you can pre-process your data how you can prepare your data for the model training and all but going forward here we'll be using uh actually Transformer based architecture okay that means large language model we'll be using here now this is the training I have done now we'll be doing the prediction on top of my test data then we'll be calculating the accuracy score okay now let me execute see this is the ACC score I'm getting uh if I'm using goian NB and if I'm using bag of word okay bag of word technique so I'm getting 63% accuracy now you can see this is the confusion metrix now if I'm applying random Forest classifier on top of it so now let's see the accuracy I got so guys you can see after applying random forest classifier and uh I was using bag of word I I'm getting this accuracy 84% accuracy now see uh we'll be using bag of word only now instead of uh see taking all the features what I will do I'll take maximum features uh 3,000 okay now you can ask me what is maximum feature 3,000 I think you saw the entire Corpus right I I already told you the Corpus okay about the Corpus corpa means the entire data and from the entire data I'm only considering 3,000 unique word okay 3,000 unique word 3,000 frequent uni word okay this is called maximum features because see I don't need all the features because if I'm using all the features my Dimension will increase right and I don't need to increase my Dimension okay if my Dimension is increasing that means my model will get more complexity right to perform the prediction on top of it and here I'm using a machine learning model okay I think you are uh you can see so that's why I'm taking most frequent 3,000 uh maximum features instead of taking all the features right now it will create uh 3,000 dimensional space okay 3,000 dimensional space instead of taking all the uh unique word right now see again I'm performing the bag of word operation now again I'm taking random first classifier and I'm training and checking the accuracy now if I execute uh so you can see this is the result but this result is not good enough so we are getting close related accuracy only if I'm using all the let's say um features and if I'm taking 3,000 features the accuracy I'm getting it is almost same now let's try with NRS because I already told you about NRS right what is NRS exactly so here let me uh pass the range of 2 two because I want to consider a pair okay pair of word that's why I have given two two that means it will consider two word okay as a one pair that's the idea and here I'm only taking uh 5,000 uh most reent word okay now again I'm performing back back of word operation then uh random for classifier then I'm uh calculating the accuracy now let me show you so guys you can see uh this is the result actually I'm getting so now in the summary you can see uh your like bag of word is working fine instead of taking the grams so in some case actually bag of word will work fine in some case engrams will work fine it's completely experimental things okay you have to perform now let's try with TF IDF okay um tfidf technique so here is the TF IDF code I think you remember so first of all we have to initialize the TF IDF then I will apply on top of my data okay training data as well as the testing data so it will give me the vector and again I'll be using random first classifier to train the model and I will show you the accuracy score now see if I show you the accuracy see so here we are using machine learning model that's why performance is not good but if you're using any kinds of deep Landing model you will see that your model will perform good now here you can see this is the performance of the now you can see this is the accuracy I got so here I showed you almost all the vectorization technique we have learned but one thing I want you to explore this uh what to vake one so I already shared you the code of the what to vake so what you have to do just try to apply what V get the vector and try to train with random first model and just observe the accuracy okay so this should be your task guys from my side Because unless and until you are not doing anything things would be um much difficult for you to learn right but if you're practicing by yourself I think this will help you a lot to learn any kinds of topic so yes this is how actually we can perform the text classification with the help of machine learning and that's how actually we can perform the data cleaning task like data preprocessing and text representation okay everything we can perform like that but again I'm telling you guys this is not ual way we create our application this is just a basic introduction I have given like how we can uh like do the data preparation okay this is my main objective now in the next video we'll be learning about large language model like what exactly this large language model and how this large language model got trained okay everything we'll be trying to discuss so as of now we have seen so many things like we saw the entire genbi pipeline we saw the text preprocessing as well as the data representation and uh I also did one practical uh I just implemented one text classification uh with the help of machine learning model but I already told you uh see it was just experiment uh but going forward actually we have to use something called large language model because here we are learning generative and inside generative VI the core component is the large language model now let's try to understand what exactly uh the large language model is and what is the code architecture behind this large language model so guys as you can see a large language model uh is a trained deep learning model that understand and generate text in in a humanlike fashion okay LMS are good at understanding and generating the human language as I already told you inside generative by we having large language model we also call it as a generative model and what is the use of generative model generative model can generate a new data okay so that is why here I have mentioned a large language model is a trained deep learning models that understand and generate text like a human fashion that means whatever model you used previously let's say whatever traditional model you used let's say U machine larning model it can be any kinds of traditional deep larning model those are the model can't generate the text like a human fashion okay it can only do the prediction because I told you the difference between descriptive model as well as the generative model but here this large language model can generate a text okay and it would be human fashion that means the way human generate any kinds of text let's say currently I'm speaking right I'm giving you the understanding so the same concept can be applied in the large language model also so large language model can also mimic the human behavior okay this is the main idea here and LMS are good at understanding and rting the human language as I already told you and how this llm works see the core working mechanism inside llm uh it will generate the next word so here I have given example let's say the garden was full of the beautiful now see this particular sentence you are giving to the large language model okay and large language model is able to generate flowers that means it is trying to generate okay next word always okay is trying to generate next word that is the main uh core idea inside large language model that means whatever let's say prompt we are giving okay whatever prompt we are giving whatever let's say uh text it is generating it will try to generate the next word always okay this is the main U logic behind the large language model so here are some more example you can see it's raining cats and so this is my let's say input to the large language model large language model will uh try to uh actually generate this particular word called dogs okay now there is another one I have two apples and I at one I'm left with so this is the input you are passing to the large language model so Palm is nothing but it's a large language model and it is able to predict one okay that means it is able to generate the next word of the prompt you have given okay this is the main working mechanism of a large language model apart from that there are some more advanced technique it usually used I will uh also explain so I'll will also explain like how chat GPT was trained and how it is working and all okay I think this concept would be more clear as of now this is the high level understanding I'm giving you how this model is working okay let's say whenever it is generating something new data how it is working this is the main idea here now let's try to understand why we call it as a large language model because you can see um because of the size and complexity of the neural network as well as the size of the data set that it was trained on that means if you see any kinds of large language model OKAY over the Internet any kind of LM model you will see it is using very big and complex neural network okay very big and complex neural network right even it is trained with massive amount of data okay and the model actually we are using it is called actually pre-end model that means this model is already trained with massive amount of data okay it is called pre-rain model and we call it as a transfer learning I think you have already learned transform learning in your uh previous days right in you know deep learning computer visual machine learning so what is transform learning transform learning means we are using an existing model okay that model is already trended with some kinds of data set okay this is called actually transfer learning so here so this transfer learning makes this gen is so powerful because they are training these kinds of complex neural network with the massive amount of data set so as you can see researcher started to make this model large and trained on huge data sets that they started showing impressive results like understanding the complex natural language and generating language more eloquently than ever okay this is the main idea that's why we call it as a large language model now you can see the large language model code architecture now many people uh has this kind of question what is the architecture actually llm is using okay see this is the core architecture all kinds of llm are using a large language models are based on the Transformer a type of neural network architecture invented by Google those who have already learned about natural language processing right those you have already learned about attention mechanism Transformer so you are already familiar with this architecture yes or no right so you are already familiar with this architecture and this architecture is known as Transformer architecture okay and it is invented by Google okay and this was the main breakthrough in the field of uh natural language processing even in the field of generative because based on this particular architecture all kinds of large language model you can see over the market okay everything has been developed fine so this is the main architecture here so it is having two kinds of part one is the encoder part and other is like decoder part and inside that you are having something called multi-head attention okay no need to worry I will explain this particular concept uh I will uh create a dedicated video for this how uh this Transformer architecture is working inside a Transformer architecture what the component it is having okay everything I'll try to clarify okay for this I'll keep a dedicated uh video okay so that you can understand this Transformer in depth fine as of now just try to consider this is the core architecture behind all kinds of large language model okay and it is invented by Google and this is known as Transformer architecture and it is having two layer called uh um your encoder layer and is like decoder layer so this one left left side this is called encoder layer and right side this is called decoder layer okay inside that you can see different different component like input in coding multi head attention add normalization feed forward okay that's how you are having different different component inside that I hope it is cleared fine now on top of this architecture what they did actually they added some more layer they added some more functionality and they brought these kinds of large language model different different large language model now let's try to see some large language model but before that uh first of all let me tell you what makes large language model so powerful because I already told you in case of llm one model can be used for whole variety of task like you can perform Tech generation chatboard summarization translation code generation and so on with one model you can perform all kinds of task but whenever we used to use our traditional NLP model that means only the language model we can only perform one specific task let's say you want to do language translation for this you have to only use language translation model and that model can't do the code generation okay but here in the large language model you can do whole variety of task I think you saw the chat gbt let me show you one example so guys this is our chat GPT now inside that I can give any kinds of input let's say I'll give uh give me the German translation of this text now here you can pass the text let's say how are you fine now see if I give this prompt so it will give me the translation in German of this text okay now see this is the translation in German now you can also do the sentiment analysis so here I can write give me the let's say um sentiment okay of this text see it's a neutral sentiment now you can also perform something called language detection so I'll give give me the language or I can write detect the language okay detect the language of this text now see it it should give me English fine so that's how with the help of one model you can do variety of task you can also generate the code so I'll give give me a python code for adding two numbers see it can also generate the codes so this is how actually large language model works okay and that makes llm so powerful now let's try to see some of the large language models are available over the internet see I have just listed down some of them but you will see thousands of models are available I will also tell you where you will get all the model list and all okay so as of now just try to see guys uh we are having different different large language model like jman so I think you know jini right ji was developed by Google even we are having also uh one application of the Jin let me show you so in Google if you search for J.G google.com so you'll see these kinds of application and this is the same kinds of application like your CH GPT okay here here also you can give the prompt and here also you can get the response let's say the previous prompt I have given here I can also pass it here okay and in the back end they're using something called jini model OKAY jini large language model then we are having something called GPT okay GPT stand for generative pre-end Transformer okay the model was developed by open AI that means the chart GPT you are using it is using something called GPT based model okay we are having GPT 3 4 okay these are the model we are having even uh recently actually GPT published one amazing model I think GPT 40 model okay with that you can also generate videos you can also generate like so many things okay if you just search on Google you will see different different uh version of the GPT even uh there uh application and all like okay everything you can see there then we are having something called xlm that means cross lingual language model okay so this is one of the large language model it is is Al also available now we're having something called llama okay and it was developed by m so llama is having different different variant like llama 2 llama 3 okay recently Lama 3 was published 3.1 is published I think and uh this model is uh amazing uh it can also let's say uh generate text like a human even uh going forward we'll be also learning how we can use Lama 23 model OKAY in our application with the help of that we'll be building different different application now you can see there is another model called Megatron so Megatron is a large language model and it's like very powerful Transformer model OKAY developed by um Nvidia research team I think you know Nvidia so we are using Nvidia gpus in our system right so Nvidia uh team has developed this particular Megatron model and this is one of the large language model now we having something called M2M 100 so this is called actually multilingual encoder and decoder sequence to sequence model okay and it was developed by Facebook so these are the models actually we are having apart from that I told you now we are having thousands of model let me show you so this is the GitHub guys so the GitHub name is open llms okay now now what uh this guy did actually this guy actually listed all the large language models are available over the Internet okay now see he has uh created one beautiful GitHub repository and in the rme file he listed down all the large language model as well as their uh checkpoints let's see want to download this model you can also download this model from this particular link if you want to read the papers and blog of this particular model he has also given the link apart from that the parameter size context length and as well as the license so every information you will get uh of any kinds of large language model now see T5 is one of the large language model then RW kv4 okay then GPT neox then yl2 Bloom chat glm okay now see different different large language model you are having see okay Falcon is also there then Lama 2 I already told you then Mistral is also there okay see different different large language model and it is having so many large language model guys so many large language model if you want to explore open this particular link just write open LM inside Google you will able to see these kinds of GitHub okay and you can also keep this link with you so that if you need any model later on um if you want to develop any kinds of projects with the help of any kinds of large language model you can use this repository later on so that you can see the uh paper blog link okay it will help you to understand this particular model so guys as I already told you uh all the large language model using one code architecture which is nothing but Transformer architecture and inside Transformer architecture I showed you there are two kinds of layer called encoding layer and decoder layer okay now see uh here is the Transformer architecture let's say and it is having two kinds of part like encoder and decoder now I think I showed you different different large language model like thousands of large language model now see all the models are not using both layer that means encoder and decoder layer some of the models are using encoder layer some of the models are using decoder layer okay and some of the models are using both layer that means encoder and decoder both now here I've listed down some of the models so this will give you the idea what kinds of models are using encoder layer only what kinds of models are using decoder layer only and what kinds of models are using both layer okay you can see encoder uh based architecture these are the encoder based architecture like distill b b Robata okay ex xlm then Alber Electra okay then darta so these are the model based on the encoder layer only okay now you can see the decoder layer model so GPT gpt2 gpt3 okay whatever GPT series you are having it is using something called decoder layer only okay decoder architecture only fine then both actually layer that means encoder and decoder both layer so we are having something called T5 B then we are having something called uh see this is Bart actually b a r t not b r t okay this is another model now M2 m00 and Big B so these are the models are using encoder and decoder see it's not possible to list down all the models here that's why I just listed down some of them but there are so many models that using like both architecture there are so many model that using only encoder architecture there are so many model that are using decoder architecture okay and this is called actually Transformer T okay this is called actually Transformer T so with the so by referring this particular T you can easily understand um what kinds of models are using which kinds of architecture okay this is the main idea here now let's try to see some open based large language model uh because going forward we'll be using something called open platform okay we'll be generating open key and we'll be implementing different different projects now see inside open we having different different models like GPT 4 then GPT 3.5 GPT based Deli whisper embeddings model even moderation model gp3 Legacy model so these are the models are available in the open AI platform apart from that I think recently they have released more model because it's a uh continuous research fi it's not like that uh it will be like uh fixed research every day they bringing new new technology in their platform okay so if you want to learn all of them you have to keep updated with their technology always for this you can you can refer their website okay you can refer their website and try to see what are the models they're bringing okay so like that actually you'll be learning a lot it's not like that you only need to rely on your Mentor okay as a mentor I can give you the entire path how we can get started with I will teach you how you can use them but as a learner what you have to do you have to explore by yourself unless and until you are not exploring uh by yourself it would be very much difficult for you okay um to learn any kinds of topic so that should be my suggestion please try to explore from your end uh after this uh actually video what you can do you can search open AI you can search different different open source website and you can see what are the models are came actually recently okay that's how actually you can learn and you can also create a GitHub repository like that and you can list down all the models okay you will be exploring okay in future that is the idea now let's try to see some other open source large language model see there are two kinds of large language models are available one is like commercial model commercial model means this is the commercial model like open AI based model so if you want to use these are the model you have to pay okay you have to pay uh you have to take the subscription okay but but if you're not interested in paying what you can do you can use open source our language model so these are the models are available in the hugging phase platform so if you're using these are the model you don't need to pay okay freely you can access but there you will get some difficulty because these are the B you have to download manually in your system you have to set up everything okay let's say you want to F tune this mistal what you have to do you have to download the M model in your system now just try to see what is the size of the m model OKAY more than 30 to 40 GB okay so you should have good uh actually resources in your system let's say you should have good CPU good GPU good memory otherwise you can ever train this particular model but if you're using commercial model okay let's say you are using openi model okay that time what you can do you can use their platform like open a platform to find you these are the model okay you don't need to download these are the model in your system so going forward I will teach you how you can use commercial model as well as the open source model both then you can decide which one you will be using okay it's up to you now these are some open source large language model like Mr Lama gini Falcon okay cloudy then MPT 30b and St STM okay these are the models actually we are having as an open source model apart from that there are so many model I will tell you there is a platform called hugging face inside hugging face you will see all kinds of large language models are available there fine uh what can llm be used for I already told you you can use large language model for the text classification uh for the text generation for text summarization conversation like chart board question answering speech recognization speeech identification spelling correction and so on that means whatever task you can see in the field of natural language processing okay all kinds of task you can perform with the help of large language model only one model I think I showed you one example of the Char GPT now there is another uh concept uh you will be getting inside large language model which is nothing but prompt engineering and prompt designing now you can ask me what is prompt engineering and prompt designing so you can see all the Tes that we feed uh into an llm as an input it is called actually prompt and this whole art is known as prompt designing or prompt engineering which is about figuring out how to write and formate prompt takes to get llms to do what you want to do okay that means whatever input you will be passing inside large language model okay this is called actually prompt and the way actually will be giving the prompt the way actually will be preparing the prompt this is called prompt designing or prompt uh engineering okay now let's say here two example I have kept it's raining cats and okay let's say this is your prom you are giving this particular input to the large language model and your large language model will try to predict dog I think I showed you okay that text uh uh word generation okay next word generation then I have another example I have two apples and I at one I left with this is the input now your model will try to generate one okay now apart from that we are having some types of prompt like few short prompt zero short prompt okay these are the types types of prompt prompts are available let me show you so this is called actually zero shot learning zero shot prompting that means here you are only giving the you you can see the approach uh using a single command to get an LM to take on a behavior is it uh it is called actually zero short learning that means you are only giving a input only giving an input and your large language model will give you the output let's say this is your prompt write me a poem about add a less in the style of Shakespeare okay this is the input now there is another one explain the quantum physics to me like I am 5 years old now you are giving this prom to the large language model and large language model is generating the uh response for you the answer for for you okay this is called actually zero short learning okay zero short learning now there is another learning called few short learning in few short learning in addition uh to just providing an instruction it can be helpful to show the model what you want to uh what you want by adding the example it is called actually F short learning so in F short learning what you will do you will give some example okay The Prompt actually you are giving let's say let's say here you are giving a prompt convert the text from English to France so with this prompt you will pass some example like English to FRS example let me show you so let's say this is the few short from example let's say this is the prompt you are giving convert the text from English to frames now you are giving English as well as the frames English as well as the frames okay that means you are passing some example okay instruction as well as the example and your model will try to uh give you the response okay after that that means you're teaching your model how you're expecting the results okay this is how actually you can pass the few short learning or few short prompting inside large language model okay so going forward we'll be also learning this this thing how we can add our system prompt how we can add the user prompt okay how we can give few shot actually prompting how we can give let zero shot prompting we'll be learning whenever we'll be using large language model and always try to remember if you want to get a good response from the large language model you have to go with the prompt engineering and prompt designing this is the main idea here so yes guys this is all about our uh large language model okay which is uh llms so I hope you got the clearcut understanding about large language model what exactly large language model is and what is the core architecture it is using uh in the back so in the next video I'll try to um explain that uh core architecture the Transformer architecture how Transformer architecture works and and what are the components are available inside Transformer architecture so here we'll be discussing one amazing research paper called attention is all you need so This research paper published by Google and Google actually brought this particular research called Transformer so here is the research paper guys attention is all you need if you are interested uh read this particular paper what you can do simply search by this name you will get this research paper you can see this is from Google brain okay and uh you can see this is the architecture Transformer architecture but I know that first time uh it would be a little bit difficult for you uh understanding this uh architecture from this particular paper so what I will do I'll just try to break down this uh actually architecture and I will discuss each and everything all the components like what is input encoding like what is multi-ad attention what is ad normalization okay everything I'll try to discuss okay then this part would be more clear then once we got the understanding then if you come to this paper this would be very much easy for you to understand this architecture okay like how they have uh let's say created this architecture and if you're interested learning the mathematics behind it you can go through this paper okay if you want to Deep dive into this you can go through the paper it will give you the comprehensive idea now to explain this uh actually Transformer let's say concept I'm going to refer one amazing blog by J alar okay so this is one of the uh amazing guy uh and he has created so many content related actually NLP so this is one of of the best uh resources you will find over the internet if you want to understand the Transformer architecture so this guy actually used so many visualization so many image to explain this architecture okay so we'll be referring this blog to understand the entire architecture I could have written everything on my Blackboard but I thought if I show you the visualization it would be more uh let's say good than the writing on my Blackboard right so if you want to understand this Transformer architecture so what I feel like this is this is going to be one best resources for you because it is having so many visualization okay we can easily understand what is happening inside Transformer architecture so now guys let's try to understand this architecture now let's say this is your Transformer architecture as of now just try to consider this is a black box okay it's a transform architecture and you don't know uh what are the component it is having so here you are giving one input data okay and here you are getting one output data that means you are performing language translation operation so here you are passing this FR input and you are getting English output okay this is the idea now let's let's try to see what inside this particular Transformer okay Transformer block now see inside Transformer block you are having two kinds of layer one is the encoder layer and and another is the decoder layer as I already told you uh Transformer architecture is having two kinds of layer one is encoded layer another one is decoder layer now you are passing the input okay you are passing the input to the encoder layer see this PR uh input you are passing to the encoder layer and the output you are getting that English translation you are you'll be getting from the decoder layer okay this is the main idea now let's try to break this encoder and let's see what are the component we are having inside encoder layer now see if I show you this entire architecture okay in a low level now you can see inside encoder we are having some more encoded layer okay we are having some more encoded layer how many encoded layer you can see 1 2 3 4 5 six that means six encoder layer we are having and how many decoder layer we having again we are having six decoder layer that means the architecture you can see here okay the box you can see here encoder box and decoder box inside that you are using six okay six stack of encoder and six stack of decoder layer okay and inside that your input is going and it is processing this input and you are getting the output okay this is the so that's how this architecture consist of okay I hope it is clear now let's try to see what we are having inside the encoder layer okay now if I show you the encoder layer see inside encoder layer we are having two kinds of layer one is like self attention other is like fit foral neural network and what is fit for neural network I think you know that means the artificial neural network okay if you're already familiar with an and you know what is f foral neural network okay it's a artificial neural network at the end now let's try to understand the self attention because I know that many people will have the confusion what is self attention here okay now let's see uh now you can see this is the encoder inside encoder we are having self attention as well as the feed forward and inside decoder also we are having self attention and another actually additional layer we having which is called encoder and decoder attention and the last layer you are having which is nothing but feed forward Nal Network so this part we'll be discussing later on as of now let's try to uh discuss this encoded layer and this self attention part okay now let's say you are passing the friends input you can see this is your friend input I don't know how to spell them but just try to consider this is your friend input so the first thing what you have to do the first thing you have to perform the text pre-processing then text representation yes or no so here first of all you have to convert your textual data to the vector representation okay so based on the paper they're using something called what to V technique to perform the text representation technique that means they're converting their text to vectors with the help of what to V technique and what is the dimension okay what is the dimension of the vector they're getting 512 Dimension okay 512 dimension for the each of the vector okay this is the idea now let's say they have converted to the vector representation now what they are doing they're passing this particular input to the self attention layer you can see they're passing the input to the self attention layer self attention layer is uh giving one output which is nothing but Z1 Z2 and Z3 and this Z1 Z2 and Z3 will pass to the FED for all neural network okay now let's try to understand how it is encoding okay how it is encoding this particular input now see to simplify this particular understanding what J is doing he's using two words actually which is nothing but thinking and machines okay let's say you having two words thinking and machine first of all what you have to do you have to convert this text to Vector representation with the help of word to V and what dimensional Vector you will be getting 52 I think I showed you here 512 dimensional Vector it will return and this Vector will be passing to the self attention layer self attention layer will give you Z1 and Z2 then we'll be passing to the feed foral neural network again feed foral neural network will give you some of the output and that output again you will pass to the encoded two layer that means I showed you now we are having stack of the encoded layer here see stack that means after uh getting one output from one encoder layer it will come it will go to the another encoder layer then again it will pass to the another then another then another that's how you have to that's how actually it will pass through six encoded layer okay so that is what actually he's explaining here you can see so here you can see after one encoding it is passing to the second encoding layer okay this is the idea now let's try to understand what we are having inside self attention now see self attention at high level let's say here we are having a sentence the animal didn't didn't cross the street because it was true tried now here just try to understand the animal didn't cross the street because it was true tied okay it was true tied now who was true tied here okay definitely the animal was true tied yes or no so as a human actually we can understand it means this is the animal it is indicating the animal but what about the machine how machine will identify whether this animal is the it or not okay so for this it used something called self attention Okay self attention mechanism now let's try to understand how it will uh use that particular concept but before understanding self attention just try to see how it will give the self attention to the word let's say here you are having the input so this is the input the animal didn't cross the street because it was true Tri okay now whenever I'm referring this it now here what it represents definitely it represents the animal okay you can see this darker color that means it is more focusing on the the animal part okay the animal part because the animal is nothing but it okay that means your machine will try to understand okay if I want to consider it I have to give the vage to the the animal didn't okay these are the actually word okay even two also okay two Triad also these are the word it has to give the attention okay unless and until it is not giving the attention to this word how it will identify whether this eight is represents the animal or not okay now you can ask me how it is identifying whether it has to give the more weightage to this words or not okay so for this we'll be understanding the self attention in detail so here you can see he has given one example let's say this is your input input means your two words thinking and machine so the first thing what you have to do you have to convert them to the embedding representation that means the vector representation then what will happen your Transformer will generate actually three weights okay you can see you can see it will generate three words W okay WQ w k and WV and how weight initialization happens I think you know okay there are different different techniques for the weight initialization and these weights would be updated during back prop propagation okay BP I think you already know about artificial neural network okay how it got trained usually right how it do the back propagation and all this like very basic concept I'm expecting you are familiar with already right so these are the weight would be initialized at the very first and this weight should be updated during back propagation technique okay now you can see it is generating some more actually Vector the first Vector it is generating queries keys and values okay now you can ask me how it is generating these are the values see see first of all what it will do it will take this particular X1 okay it will take this particular X1 and it will multiply with the WQ okay it will multiply with the WQ so it will return you q1 okay then it will take the X2 it will multiply with the WQ it will return Q2 okay so that's why actually you will be getting something called query Vector okay query Vector then again it will multiply X1 with w k okay and it will return you K1 then it you will multiply uh X2 with WK it will return return new K2 so here you will be getting Keys Vector okay then you will be multiplying this X1 with WV and it will return you V1 then X2 with w v it will return you V2 okay so that's how you'll be getting values Vector okay so that's how this three Vector would be generated queries keys and values okay I hope it is clear now okay now let me clear all the uh line here yeah now let's see the next actually uh mechanism see I think you got it uh that means we are having our input uh data uh that means input word thinking and machine and first of all we have to generate the EMB Bings then after that with the help of X1 and X2 that means this Vector we are generating queries keys and values okay and how I think you got it the multiplication actually strategy now the thing is like it will generate one score okay how it will generate the score see to generate this code it will use this q1 okay q1 vector and it will multiply with the K1 okay that means q1 will multiply with the K1 okay this Vector that means Keys Vector where will multiply with the keys okay and you will get one score let's say as of now this is the Assumption score he has given here 112 F then for the next word you can see it will uh multiply q1 uh with K2 okay q1 with K2 and here the score let's say 96 okay now from this score you can see it is giving more score to the thinking word okay to the thinking word than the machine word okay that means it will more refer this thinking word it will more give the attention to the thinking word okay and that's how actually it is calculating this particular score I think you saw this graph now so how it is giving the attention to the word okay that's how actually it is calculating okay with the help of this particular Vector calculation it is creating this score and based on the score value it is giving the uh attention to that specific word let's say we are having two words thinking and machine so it will give the more attention to the thinking word now see after getting this Cod what it will perform it will perform this uh s Max operation now see what what will happen you are getting this score now this score will be uh divided by uh8 okay that means you will divide this score by 8 now if you divide this number you will get 14 and if you divide this number okay you will get 12 now you'll just calculate the soft Max okay I think you know the soft Max okay soft Max is an activation function it's an equation the probability score and if you just add this probability score you will see that it would be 100% probability okay always so here you are getting actually 88% and here you are getting only 12% that means it is giving more attention to the thinking word that means 88% attention it is giving to the thinking word and only 12% attention it is giving to the machine word now I think it is clear how it is giving the attention to a specific word now in the sixth step what will happen see uh I think you saw we are getting the sof Max output now with the sof Max output what it will do it will try to multiply this value that means the value I think you are getting remember this particular value so it would be multiplied and after multiplying you will get one vector called V1 and again it will perform for the next word as well so here you will get V2 now let's see you having multiple word so for all the words actually it will do the multiplication with the value so here he only used two words but you can consider more than two word as well okay the working mechanism will remain same then after getting this V1 and V2 what it will apply it will apply the sumission operation that means it will sum up this two vector and it will get Zed one and Z2 okay and now I think you remember what is this zed1 and zed2 so let me show you that high level architecture um here see this is the Z1 and Z2 that means this Z1 and Z2 is the output from the self attention Okay self attention layer and how self attention is working as of now whatever discussion I have given you whatever let's say operation I showed you this is the work of self attention and that's why actually it will perform all the mathematical operation and it will return Z1 and Z2 and this Z1 and Z2 will pass to the next okay next layer okay next layer next layer means I think uh this layer yeah to the fit foral neural network okay this is the idea now whatever I have discussed so far if you want to see as a matrix representation see the same thing that means you are getting your input okay you are getting your input that means here we are giving our input it will first of all convert it to the vector representation then it is generating some weights okay WQ WK and WV I think remember then we are getting query keys and values okay then it was multiplying this query with keys okay and we are uh dividing with eight okay and we are calculating the Sol soft Max okay and soft Max and after that whatever softmax output we are getting we're performing the addition operation with the values okay and it will give me Z okay Z that means the output now so far whatever actually operation you saw this is for actually single head attention Okay single head attention that means only one self attention Okay only one self attention mechanism now inside Transformer architecture they're using something called multi-head attention you can see so here is the TR called multi-head attention so what is multi-head attention see uh if I show you this uh graph again see if I'm considering it that means it is giving attention to the the animal did okay these are the word even you can see it is also giving some attention to this word as well but see this thickness is like very uh I mean less here because it is not able to give the proper attention to this word okay because it is using only single head attention okay and and it is only using this three weight okay this three weight is not enough let's say you are having huge amount of data your input length is very big that time I only this three Vector is not only this three weight is not actually enough so for this actually what we have to do we have to apply something something called multi multiple actually weights okay and if I want to apply multiple weights so what we have to do we have to use something called multi-head attention so uh Google Inu actually multi-ad attention so they're telling instead of only using one head okay one head attention so they're telling instead of using only single head attention we'll be using multi-head attention to perform the same operation that means what will happen see this is the attention head one that mean single attention and you'll be taking another attention head okay so this called attention head one that's how you'll be taking another attention and how many attention head it will be taking I'll I'll tell you as of now let's try to consider we are having multi-ad that means only two head okay zero and one now the same thing they are doing that means they're generating this weights okay also this side also they are generating the weights and the same operation would be happening as here as well that means the operation I showed you now previously the same operation will be happening here as well now you can ask me what is the main objective to perform this multi-ad attention because if you see in the Transformer architecture we can give very big size input let's say my input prompt would be very big I think you saw in the chat GPT we can pass a very bigger prompt okay very bigger prompt to the uh this one our uh chat GPT input right that means to my GPT model so how it is processing that that particular bigger input because it is using this multi-head attention concept that means with the help of multi-ad attention concept it it is able to give the attention to all the specific word actually present in that particular Pro okay so this is the main idea that means if you're only using single head it won't be able to handle that particular bigger promt that's why you have to use multi-head attention here okay this is the main concept now see that's how actually things are working let's say you are passing two words thinking and machine so you you are passing as a vector representation so this Vector will go to the different different attention and now here you can see they're using eight different attention heads eight different attention heads that means whatever things we have learned so far we have learned for only one one uh self head attention right B self attention Okay but they're using something called eight different self attention eight different self attention here you can see okay attention head 0 1 dot dot dot 7 because it is starting from zero that's why it is ending till 10 now if you count it they're using something called eight different attention head here okay so inside eight different uh attention all the calculation is happening after that whatever z z 0 Z1 Z3 they are getting they're doing the sumission operation okay and this is your final Vector okay this is your final Vector that means the Z that means this one let me show you this one okay now inside that they're using eight different s attention and this is the Z One output you are getting okay I hope you got it now see how beautifully uh Jammer created this blog how beautifully he has used all the visualization okay so to explain this particular concept so that's why I feel like this is the best resources for the Transformer okay if you want to understand you can use this particular blog now I think we have understood uh till here that means we are getting the Z now see if you see the entire architecture that's how it is working so you are having the input you are uh it is initializing the weights okay so it is generating the weights for eight different actually self attention Okay then uh you can see the query Keys values then the Z okay that means the output from my self head attention then it is concatenating all the vector and we are getting only one vector which is nothing but Z now see after using multi detention that is this is how your output looks like now see it is able to give the attention to all of the word actually it needs okay to represent this particular it right now now see this uh line is more darker right now okay this line is more darker that means it is performing better than previous that means previous we are using only one head attention now we are using multi-ad attention and the performance is very good right now okay this is the main idea now see uh he has captured some of the images okay experimental images you can see here now let's try to understand uh another important thing uh I told you now so let's say whenever we are using any let's say traditional embedding model let's say TF IDF what to V or let's say any other embedding model let's say this one bag of word so it won't be able to capture the semantic meaning okay semantic meaning of a sentence let's say here we are having a sentence this is the let's say France sentence z swiss uh uh a to dend I don't know how to spell but let's say this is my sentence now after Z this particular word is coming after this word this word is is coming okay how it will remember that means how it will understand the contextual meaning that means the sequence meaning okay sequence meaning of a sentence so to understand that sequence uh actually meaning they're using something called positional encoding okay positional encoding now let's try to understand what is positional encoding see let's say this is my input it is converting to the vector now you can see this particular Vector there adding with the positional encoding positional encoding is nothing but it's a vector only okay it's a vector only you can see T1 T2 and T3 and there will and they're doing the addition operation okay after that they getting the embedding with the time signal that means whenever we write any kinds of let's say sentence let's say my name okay is buy so it always follows one time sequence let's say my I have written at the time of T1 name I have written at the time of T2 is I have written at the time of T3 and byy T4 okay that's how it follows on sequence okay so that's why Text data can be also called as sequential data okay it's sequential data because it follows the time okay so that's why they are telling embedding with the time signal that means whatever input you have given okay whatever input you have given it is having one time let's say T1 T2 and 33 and so on right so on so that they're adding this positional encoding now how this portional encoding helping us to uh identify whether after Z this word is coming after Swiss this word is coming because if you see positional encoding nothing but it's a vector okay and after adding okay after add in this Vector with my embedding so again we are getting another Vector yes or no okay now if you calculate the distance okay between this three Vector you will see that this vector and this Vector would be closely uh together because if you just do the subtraction okay if you just find the distance you'll see that it will get very less distance between these two Vector okay and you will you will see that this vector and this V Vector distance will be more okay because uh you can see the number okay so that's actually it is identifying after Z this particular word is coming after this word this word is coming okay based on this particular Vector okay that's how they're doing distance calculation and they're trying to understand the sequence information of a sentence okay let's say after my bu is coming sorry after my name is coming after name is is coming after is BU is coming okay I hope it is clear so that's how they're handling this particular SE uh sequence okay now now I think you got it whenever we are passing any against of bigger prompt to the large language model how it is identifying that particular contextual meaning how it is remembering that particular sequence let's say after this sequence this sequence is coming now he has added some more graph so as of now let's skip okay it's not required okay now the next thing we'll be discussing about the residual block those who have learned about like computer vision so I think you learn one model called resonet okay so in resonet also we had these kinds of architecture okay I think you remember so I think you remember so let's say here we are having different different layer okay different different layer fine and we also had something called residual block so that's how actually it will look like that means whatever input actually you give usually so sometimes let's say if this block is not working good okay let's say this block is not working good not good then what will happen it will escape this block and this output will go to the next block okay this is called actually skip connection okay skip connection okay and this is called actually residual block so we already learned this residual Block in our CNN architecture so the the same residual concept has also applied in this particular Transformer architecture as well so here we are also having residual connection you can see let's say this is the input we are giving okay let's see if this particular self attention layer is not working good what will happen this input will go to the next okay next layer now they are also using something called add and normalization and what is normalization I think you know with the help of normalization we just uh bring our data distribution in a normal okay normal distribution I think you remember right this is whatever weight actually we're having so if you if you just visualize them you'll see it will be it will be a normal distributed okay normal distributed output so it helps us during back propagation whenever it will try to find the global Minima okay that time actually this concept helps a lot now you can see again we are having another residual block connection skip connection okay that means uh if any of the layer is not working good this uh this will actually skip this part and it will go to the next okay next layer so this is the idea of the residual connection because it's a very huge layer because you can see this uh Transformer architecture it's a very huge layer so sometimes let's if you are using any simple data very simple data so you don't need all the layer now you don't need all the layer to process your let's say input so sometimes uh whenever you are having the simple data it will go to some of the layer and it will perform better okay that time actually it will skip these are the let's say layer okay so this called actually skip connection and rual block and if you want to see the normalization how it is performing the normalization so here you can see the normalization so it will do the addition operation um X and Zed okay Zed vector and it will perform the normalization like that okay then whatever output it is having it will pass to the fit forward and F Feit forward again will pass to the normalization and again it will pass to the next okay layer this is the idea now here you can see the entire architecture guys so far whatever we have discussed now he has given inside one block only now we are giving our input we are adding the positional inod then self attention then we are also adding something called add normalization then it will pass to the fit forward then add normalization again then it will pass the next encoder okay and inside that we are also having some resist connection okay then whatever output we are getting okay let's say whatever let's say encoder we are using like I think I showed you six encoder layer we're using so this output will go to the decoder okay now see directly is going to the decoder layer now at the same time this output is also going to the encoder and decoder attention now you can ask me what is encoder and decoder attention see this is the same whatever things we have learned encoder and decoder the same architecture they're using in this particular layer okay that means whatever output you are get here again passing to this particular encoder and decoder again it will process those are the input and it will pass to the next layer okay so that's how actually your output is passing to the encoder and decoder as well as the decoder and how many decoder we had we had six decoder layer now let's try to see the decoder side now see here we are passing the input so this is the input we are passing to the encoder encoder will pass this uh output to the decoder but before passing this output it will add some Vector you can see K vector and V Vector okay it will first of all multi mly then it will pass to the decoder okay and decoder will pass to the linear and soft Max that means it will apply the soft Max function on top of it now one thing will happen let's see if you're doing actually language translation so the input you are giving to the encoder so this output actually you're are passing to the decoder and decoder will predict something see decoder will predict something it will generate something let's say I so you are giving friends input and you're getting English output let's say Z means I Swiss mean M and it means a student okay so that means it is first of all see if you see the first iteration let me show you it's animation if I show you the first iteration see this is the first iteration first of all it is predicting I so this I again it is coming as an input to the decoder side you can see I then it is predicting M again this m will go to the input of the decoder side okay then it will predict something called a that means based on this two word it is predicting the next word okay based on this word it is predicting the next next word okay I already showed you now that llm concept like it will predict the next word always okay that's how it is predicting the next next word okay unless and until it is having the EOS sign that means end of the sentence okay EOS okay this is the tag I think you know okay what is eos and there is another one called SOS okay start of the sentence and end of the sentence whenever it is getting the tag that means this sentence is complete and it will stop the execution that time okay so that's how your encoder and decoder is working okay and inside encoder whatever things were having I already expand inside decoder also whatever things you have I already expand okay that's how that's how it is uh actually building one amazing architecture called Transformer okay Transformer and and that is why Transformer is so powerful because it is having so many component inside that it is using something called multi-head attention Okay that is the main concept here so this is the entire understanding guys and I hope guys you got the high level understanding of this Transformer like how it is working and what is the internal mechanism of the Transformer now if I open the actual architecture in the paper now I think you will get it see this is the encoder site okay this is the encoder site and now I think you know what is input embedding and what is the positional encoding what is multi attention what is AD normalization and what is these are the arrow that means this is the skip connection residual block then feed forwall again uh add normalization again you are passing to the MTI attention and you are also passing this in uh output to the decoder side you can see this is the decoder side and inside decoder we are having multi-ad attention again add normalization M attention feed forward okay s Max and so on okay and whatever output you are getting you are again passing this output to the input of the uh decoder input okay this is the idea now I think this architecture is clear how they have developed okay now you simply just try to go through this paper once just try to read or you can also read this particular blog okay so it will give you the clearcut idea about the Transformer architecture okay so this should be my suggestion guys please go through uh one time this particular blog just try to read everything okay see the way actually has written if anyone is from college background they will also able to understand okay that much easy it is so yes this is all about our Transformer interation I hope you got it how Transformer is working so uh based on this Transformer today's actually whatever large language model we are having they have developed now in the next video we'll be learning about like uh how chat GPT got trained because you can see chat GPT so chat GPT is using one large language model called uh GPT okay so we'll be understanding how chat GPT actually the train like what is the internal mechanism of the chat GPT okay we'll be discussing this part so I think you are already familiar with chat GPT right so chat GPT is a product of open AI so inside chat GPT we can pass any kinds of prompt and we can get the response so it is kinds of conversational let's say chatboard they have developed but uh by that particular chatboard what you can do you can perform all kinds of NLP task I think I showed you one example I think you remember we can perform language translation text summarization we can part from sentiment analysis okay we can also let's say generate the codes every everything is possible because I already told you now llm why it is powerful because it can perform multitask right multiple task it can perform with the help of one model only task wise it is clear like how uh it will able to perform the task right but what about the conversational agents let's say whenever I'm passing any kinds of prompt how it is identifying okay how it is identifying what kinds of let's say prompt I'm giving and what kinds of tasks actually I'm expecting from my uh chat GPT okay so this is what actually will be understanding uh in this particular video because because if this understanding is clear so going forward whatever model you'll be learning whatever application you'll be building this would be more clear in your mind so first of all you have to remember one thing see chat GPT is not a model okay so chat GPT is just a application internally it is using a llm which is GPT 3.5 or GPT 4 it has trained on large amount of data which is also available over the internet that means that means over the Internet till 2023 whatever actually data we are having so all the data they have used to train this gpt3 or GPT 4 model right now to train this chat GPT they actually follow three step the first step is generative preing the second step is supervised fine tuning and the third step is reinforcement learning I'll discuss all of them one by one no need to worry but first of all just try to see as I already told you Char gbt is not a model it's just a application it's just a interface right so whenever you are giving any kinds of prompt to the CH GPT it is using one open API key right I think you know what is openi API key with the help of openi API key it is sending that particular uh request to the model you can see it is it can access different different model of the GPT like GPT 3.5 GPT 4 okay or any other model actually GPT is bringing in future right so this is the idea let's say you want to powerform language translation you are giving the prompt here so this chat GPT interface receiving your prompt then it is sending that particular prom to the uh model with the help of open API key that is the idea okay so that means CH GPT is an application and it is using uh internally it is using some kinds of llm which is known GPT 4 or GPT 3.5 now as I already told you um they used actually three step to train this model now you can see the first stage is generative pre-training so here you can see this base model GPT trained on a brnch of stuff from internet for a whole bunch of different things by uh using the Transformer architecture that means they're using Transformer architecture internally and they're training on top of the internet data okay or Internet documents data you can talk about then they are getting something called Bas GPT model OKAY B GPT model then this B GPT model then again they doing something called supervised fine tuning okay in the St two they're doing supervised fine tuning so what is supervised fine tuning I'll discuss uh everything don't need to worry so next with the human AI trainers you get to have conversation where they play Both Sides you and AI assistant okay now after performing the supervised fine tuning they get one model called fine tune chat GPT model now they'll be performing something called reinforcement Landing through human feedback so here you can see next uh let's take the model to the next level by optimizing it's even more reinforcement learning by training it against a reward model okay that means they will be creating something called reward model and why they'll be creating the reward model I will tell you then after that they will be getting the CH GPT model and this is what actually we are using okay this is what we are using in our day-to-day life this is the idea now let's discuss all the St one by one now first of all let's try to discuss generative pretaining okay now see what is generative pretaining as I already told you they're using a bunch of data from the internet and they're training one Transformer model okay so they're using the code Transformer architecture only on top of that they're adding some more layer okay and they're creating one GPT model okay this is called a GPT model now this model will be able to uh do actually various kinds of task like text summarization sentiment analysis sentiment sentence completion translation and so on but what is our expectation from our chat GPD so here user can pass any kinds of prompt he or she can chat with uh chat and conversation with this uh let's say application yes or no right but after training this particular let's say Transformer model we are only getting the uh we are only getting the actually task output let's say this model only can perform Tex summarization s analysis sentence completion and language translation apart from that actually it can't do anything let's say it can't do the chat conversation with the human Okay this model can't do so this is our expectation okay with that this is our expectation so for this actually what they did actually they follow another stage called supervised fine tuning in supervised fine tuning what they have done so they have actually taken two human so one human called human agent acting like a bot another human the actual human agent okay that means both are human but one human actually will act like a bot and another human will act like a human only right so this particular human will give some request okay let's say he will put some let's say text let's say how are you so this human will give the reply let's say I'm fine what about you again he will give I'm also fine then he will tell I need help from your side this particular let's say human will uh tell so this particular human will tell how I can help you okay so that's actually they will be doing the conversation the way actually we do the conversation with our chat GPT okay so initially we have to create our data that means chat data okay chat data so to collect the chat data they're using this particular technique called supervised finetuning okay supervised fining they're supervising the model okay this is the main idea now see after uh doing these kinds of conversation you will have different different data let's say uh from The Human Side you will get lots of request and from the B size that means human Agent B size you will be getting lots of response now you'll be using uh this particular data to train again your base GPT model okay you'll be again fine tuning your base GPT model and you'll be using something called stochastic gradient decent Optimizer okay AGD Optimizer they're using and they're training one model called sft Char GPT model that means supervised fine tuning model okay this is the main idea here and this is called actually sft and supervised fine tuning but one issue actually they observed after uh doing the supervised fine tuning this model can only perform uh related uh to the training data let's say let's say if someone is giving any kinds of input which was not present in the training example that time this model was giving some random output okay so to actually overcome this issue and to make this particular model more good they followed something called reinforcement learning through human feedback technique so inside uh reinforcement learning uh through human feedback what they are doing whatever let's a conversation uh having between this human agent and sft chat GPT model so they're trying to rank the results okay rank the response you can see let's say this sft model will give actually multiple response now there would be a human okay there would be a human agent so this human agent will rank the result let's say here we are getting uh 1 2 3 four four different response let's say a b c and d now between these four results which one is the good okay which one is the good and which one is the let's say suitable with the user input user has given now he will just try to rank the results now let's say uh B is B response is good then a then D then C okay this is the rank response that's how actually he will try to prepare then what they have done they created one reward model and what is reward model reward model is nothing but it's a reinforcement learning model those so those who are familiar with reinforcement learning I think you know what is reward model so here you can see they're giving actually different different response and they're uh actually generating one score okay like what is the score for this response what is the score for this response okay that's how they're generating the score now whoever actually having like more score this particular response would be considered as my final output okay that's how actually they're doing reinforcement planning through human feedback and they're improving the accuracy of the model this is the main idea that means if you see uh in high level so you are using reward model and you are ranking uh this particular let's say response based on that you are and based on that actually you are providing the actual response and this reward model will uh give some policy let's say if this response is good if user is liking that particular response so definitely it will give some reward otherwise it won't be giving any kinds of reward so sometimes in the chat GPT will see that it will ask for your feedback whether uh you are getting the correct output or not if you give the let a low rating that time they will consider this model is not working good that time they will give negative reward so again they uh this reinforcement learning will automatically learn okay how to improve the quality of the model and if you're giving positive fitmap that means it will give the positive reward that time okay so that is how actually reinforcement learning works so here in the environment you just put on agents that particular agents learn the environment and whatever activity you are doing it will try to learn and based on that it will uh try to update the reward model this is the main idea right so yes this was actually core uh concept to train this chat GPT model and that's how actually not only we get that task specific model we can also perform the conversation with that particular model okay because they have done because I I think I showed you now how they have done this particular entire strategy and how we can perform the conversation so whenever we are giving any kind of prompt first of all it will trying to understand my prompt because of that particular supervised fine tuning let's say I'm giving a prompt PRP I want to do the language translation French to English so it will try to understand that particular prompt then based on that it will decide what kinds of task you want to perform okay apart from that if you're doing some casual conversation also it can also handle because again it was trained with huge amount of data okay that's the idea so yes guys I hope this makes sense now and you got how Char gbt was trained and now this concept will help you to understand whatever let's say model will be understanding in future okay so I think you enjoyed so if you don't know about hugging face hugging face is a platform so with the help of this platform you can do genbi project you can do NLP project even you can also perform computer vision related project so here we are more focusing on the generative AI so we'll be using this hugging face platform for the gener vi related task so this hugging face platform is having all kinds of large language model even it is also having so many data sets you can use to train these kinds of large language model and hugging F provides one pipeline so with the help of this pipeline you can easily perform any kinds of task and hugging fish is also having one python Library called Transformer with the help of Transformer Library you can easily Implement any kinds of genbi based project so let me show you this hugging face platform what are the things it is having so guys if you want to open the hugging face uh platform just search for hugging face okay hugging face in Google you will see this first link just try to open it up and make sure you create one account here so for me I already have one account so what I will do I'll just try to log in with with my account so if you don't have the account you just need to do the sign up operation okay so with your email address you can also create an account so let me login with my account so guys as you can see I already logged in with my account and this is the interface of the hugging face now as I already told you uh hugging face is a platform so with this platform you can perform uh lots of task you can perform geni related task you can perform natural language processing related task even you can also perform computer vision related task okay even you can also do audios kinds of task let's say you are having audio data okay you can also do these kinds of task in this hugging face platform okay now it is having actually different different Services the first the very popular Services it is having called models that means this hugging face is having all kinds of large language model let me show you if I click on the model section now see it is having that many of model just try to see the count that many of models are available and these are the models are completely open source so you don't need to pay here okay if you want to use these are the model you don't need to pay here only you just need to use hugging face python library for this okay with the help of hugging face python Library you can easily access these other the model even I will also tell you how we can access different different open source large language model and how we can Implement different different application on top of it right now if you see left hand side it is having different different task you can select the multi model that means if you want to generate image text to text if you want to do visual question answering if you want to do let's say document question answering if you want to let's say do video text to text everything you can perform here then it is having computer vision related task you can perform object detection image classification image segmentation text to image okay all kinds of computer vision related task are available even nowadays whatever multi model you can see let's say uh large language model will generate image large language model will generate videos these kinds of models are also available in this hugging F platform now you can see it is also having natural language processing related task that means you can perform text classification to token classification summarization feature extraction Tex generation code gener everything you can perform here okay apart from that I already told you it is also having some audios model let you want to perform text to speech text to audio okay automatic speech recognization these are the task also you can perform here apart from that it also provides tabular kinds of task let's say you can perform tab classification tabular regression time series forecasting these are the task you can also perform then they they have added another amazing technology the reinforcement learning so those who are interested in reinforcement learing you can also perform reinforcement learning operation with the help of hugging face platform so it is having all kinds of reinforcement learning model you can also perform something called graph machine learning with this hugging face platform so here I'm not going to focus on all the actually task here because we are more focusing on the generative and for generative actually we'll be more focusing on the NLP that means national language processing and we'll be focusing on the multimodel section okay because it is having different different large language model as I already told you now you can select any kinds of task let's say you want to perform let's say uh this one you want to perform let's say a text classification okay just select the text classification now see automatically it will suggest you all the text classification related model now see these are the model from different different organization see this model is from meta AI okay Meta Meta Lama see with the help of meta Lama you can also do text classification and this is one of the large language model it is having 86 million parameter and this is the download see this is that that many times actually this model got downloaded okay so you can also start you can also download this model if you are let's say I you like this model you can also start this you can also like this even they have already given the model card let's say you want to read about this model like what this model can perform how many parameters it is having what kinds of data it got PR okay everything they have given okay everything they have given even they have also given the code snippit you can use okay let's say you want to test this model you can copy this code snippit and you can execute it here okay so it's one of the amazing platform guys if you are working in the field of generative I so definitely you should learn the hugging face platform and know it to body everything I'm going to teach you here so let me show you what are the things we'll be discussing here see inside hugging face actually hugging face we have to learn some of the very important concept the first concept we have to learn the pipeline because inside hugging face everything is all about pipeline okay whenever you'll be using one python library of the hugging fish called Transformer okay Transformers see Transformers is the architecture but they have also named it as a library okay because it is having all the model which is based on the Transformer architecture only so that's why they name this particular Library as a Transformer Library okay so inside Transformer Library whenever you will be writing the code let's say you want to perform language translation summarization you have to create a pipeline for this okay so we have to discuss the pipeline then we'll be discussing different different NLP task you can perform with the help of this hugging face library then we'll be discussing very important concept called tokenization okay because in hugging face everything is all about tokenization so whatever pre-processing whatever textt representation you have to do with the help of tokenization only then we'll be discussing about the data set like what are the data set it is having then we'll be also discussing about another super important uh service called spaces let's say you don't have good configuration PC but you want to train one large language model so what you can do you can also take the hugging face spaces that means hugging face infrastructure but definitely you have to pay for this so there actually you can train any kind of large language model okay and this machine is like very good configur tion machine you can take there then the fifth topic we'll be discussing about fine tuning okay fine tuning llm okay uh with the help of hugging F that means we'll be learning how we can fine tune any kinds of llm okay with help of hugging face platform then at the last we'll be seeing some of the project implementation okay so with the help of hugging face we'll be doing some of the project implementation that means we'll be doing Tex summarization language translation even we'll be also doing the research papers summarization so these are the project we'll be implementing month by month so I hope this is enough to know know about hugging F and if you understand these are the concept definitely you can use hugging F platform um if you want to build any kinds of application okay later on and trust me guys if you want to use open source large language model that means open llm okay open llm so hugging face is the only way okay you can use open llm okay hugging face is the only platform uh it will help you to work with the open source large language model but if you want to work with paid large language model let's say if I want to take any kinds of commercial large language model that time you can use something called open AI okay open a platform even there are some Cloud platform as well let's say Bedrock is there okay Amazon Bedrock is there then vertex AI is also there so we'll be also learning these are the things one by one no need to worry first of all let's try to understand the hugging face because uh this is the starting point okay this the starting point in the field of generative so what I feel like if you want to understand the if you want to understand the large language model if you want to uh let's say use them as a practical so I will suggest first of all start with hugging face platform then try to learn openi and whatever Services you are having okay everything I going to teach you no need to worry okay so apart from that it is also having data sets guys as you can see different different data sets let's say you want to train one language translation model so simply you can select the task here let's say I want to uh do the language translation I select the task here so this is the translation now see these are the data related langu language translation okay see these are the data related language translation so it is having all kinds of language translation data you can see so see this data set is containing Canadian actually text as well as the English text that means you can part from Canadian to English otherwise English to Canadian I think okay apart from that you are having different different data set even you can also sarch here if you want to let's say find any kind of data set you can also search here it is also possible now apart from that you can also select different different libraries let's say I want to perform one task let's say I want to find a model let's say I want to perform something called uh text classification now I want to use one specific Library so see it is having different different Library you can use P torch then you can use transer flow then you have safe transource okay then you are having kasas different different Library it supports let's I want to perform with the help of pytorch okay py toor framework so these are the model related pytorch so if you want to use these are the model you have to use pytorch code so similar wise if you want to perform with the help of let's say tensor flow you can select the tensor flow it will give you all the model related tensor flow that time okay that time you have to install tensorflow Library okay not the py library so that's how it has given different different flexibility different different functionality so that you can filter out filter out the specific model filter out the specific data okay everything you can do here and it is having another uh amazing Service as I already told you the spaces so spaces will give you let's say uh this infrastructure if you want to train any kinds of large language model you can use their spaces service so there you can buy their instance and you can train your model see it is having different different spaces even you you can also create your own spaces now apart from that it is having another amazing documentation now see if you want to Deep dive uh in this hugging face platform like how you can use this hugging face platform properly so they are also having their official tutorials if you just go to the documentation so there they are having one uh documentation and inside that you will get one section called task now let's click on the task now see let's say I want to perform image classification task so I'll just simply click here now see it will give me the official tutorial so they have their the YouTube videos you can also refer the YouTube videos even you can also refer their blog okay how we can perform the text classification that time sorry how we can perform the image classification so everything they have written here okay so this is one of the amazing actually let's say platform I personally prefer if I want to implement any kinds of project and if you want to learn anything let's say I don't know about let's say zero short image classification I will go I'll come here I'll go to their tutorial section and easily I can learn okay how we can use this particular model okay so that's how actually you can also Deep dive but if you cover this video I hope you'll be learning everything about this hugging F platform but still if you want to dip dive you can refer their tutorial as well fine and if you want to take their premium subscription you can also see their pricing and all you can also check it up but as of now premium subscription is not required we'll be using free services okay free services is enough for us because here we'll be only accessing the models data set okay these are the thing as of now I'm not going to take this spaces everything I'll be doing in my Google collab because in Google collab we'll be getting free gpus okay that is the idea so yes guys this is the introduction of the hugging phase now I think you got it what exactly this hugging phase is and uh we saw like different different Services of the hugging face now in the next video uh we'll be doing some handson on top of the hugging face like how we can use the hugging face with the help of Python Programming so there we'll be installing my amazing Library called Transformer okay with the help of Transformer we'll be using the hugging face and it is also give you the API functionality guys if you want to take the hugging F API key you can also take for this you have to go to the settings now here you having something called access token okay you can also take the access token so with the help of access access token also we can access the model let's say some of the models you will be getting here those model actually you can directly download for this you need this hugging F access token okay so we'll be also learning how we can use the access token to access any kinds of model and how we can generate these are the access token as well so here I already created one uh collab notebook and here I have already mentioned each and everything you need uh for the hugging face okay practical understanding so as I already told you if I want to use hugging face platform form with the help of python we need to install one Library called Transformers okay so this is the library so Transformers Library is having all the functionality uh present inside the hugging face platform right so if you want to install Transformer Library so you have to execute this command called pip install uh Transformers okay now let me first of all connect this notebook and the resources should be shared guys in the resources section so from there you can download and you can also um code with me okay it is connected now now the first thing what what you have to do you have to select the run time uh to GPU okay because I'm I'm not going to use the CPU configuration machine here I'll be taking the GPU machine because here we'll be using large language model so definitely uh you have to select the GPU based machine there fine so let me select the GPU machine and if you're using free collab you'll be getting T4 GPU and if you're using collab Pro uh there also you can take actually different different uh see let me show you if I click on since run type see you can also take a00 GPU and L4 GPU as well okay these are the GPU you can also access so now guys you can see my notebook is connected now if I want to check the GPU you can execute this command called Nvidia okay hen SMI so this will uh show you the GPU configuration you got so here I'm using free collab that's why I got Tesla T4 GPU now first of all I have to install the Transformer Library here see Transformer is already installed now now see inside hugging face we are having different different task as I already showed you so if I let's say click on the models and if you see the left hand side you can see you are having different different task so here you are having different different task let's say uh here we are focusing on generative AI that means the natural language processing so here we can perform different different tasks let's say we can perform text classification uh token classification okay all kinds of tasks actually can perform whatever task actually you in the field of NLP or in the field of let's say generative all kinds of task you can perform here so if I want to perform these other the task I have to use one uh functionality from the hugging fist called pipeline okay so here you can see I have imported this pipeline from the Transformer okay so it is available inside Transformer now let's say uh we are having various uh NLP task as I already showed you text classification then we are having uh here you can see text classification token classification uh table question answering question answering zero shot classification translation okay now see I have listed down all the task here now let's say if I want to perform text classification so what you have to do inside pipeline you have to mention I want to perform text classification so this Transformer Library what it will do it will automatically try to understand you want to perform test classification so all the code actually it is having in the back end it will execute that particular code CIP it that means it's a high level raer okay on top of let's say hugging face it's a high level rapper this particular Transformer Library so you don't need to write the code from scratch let's say you don't need to write the code I want to perform uh text classification so code you don't need to write from scratch only just need to give this particular input to the pipeline and pipeline will automatically take care you have to do the uh text classification task and for this whatever uh let's say strategy you have to follow everything it will take care okay I hope you got it now see similar wise if you want to perform token classification you can mention token classification if you want to perform question answer you can also give question answering if you want to perform text generation summarization translation even also you can select the model let's say which model you want to use as I already showed you now now we are having so many model now let's say I want to perform uh translation now see you are having different different model OKAY different different model now see you can also give the model OKAY model ID now let's say I want to use this model I'll just click here and I'll copy the model ID this the model I'll copy and here I just need to mention so it will automatically download this model from the hugging face so you don't need to manually download it as well so that must powerful it is okay so that is why I told you you have to master this pipeline concept because going forward whatever let's say you'll be implementing you need this particular pipeline approach fine now see I have given different different actually example computer vision example also let's say you want to part from image classification in the pipeline just mention image classification okay even also you can specify the model it's up to you now see different different example I have given just for your reference so that you can refer this notebook later on now let's perform one specific NLP task let's say I want to perform sentiment analysis so here you can see the task as well as uh you will also get the all kinds of task in the document section so here you are having one tab called task now see all the task is also visible red computer vision naal language processing audios and multim model okay everything is there now let's say I want to perform sentiment analysis and sentiment analysis is what kinds of task it's a text classification task I think you saw it's a text classification task okay now either you can give the text classification okay either you can pass the text classification here either you can also give the sentiment analysis okay both it will work so I have given sentiment analysis okay I want to perform sentiment analysis in the pipeline now it will give you one object called pipeline object and this is my classifier now inside that you have to pass the input let's say here I given the input I was uh so not happy with the last mission impossible movie now this is the sentence I have given now see if I execute this line of code so it will automatically download one specific model now see here I haven't given any kinds of model name so it will download one default model and it will try to predict whether this particular sentiment is a positive or negative okay let me show you see if I execute this code see it is using one model default model called um distill bbased case Okay F tune SST to English model and this is the link of the model if I open it up see it is using this model this is the default model okay and here is the prediction guys it's a negative sentiment and it is telling 99 99% confidence it's a negative sentiment okay that mean it is performing amazing see that much actually it is easy to use this Transformer library and that's how actually pipeline helps us to perform any kinds of task I want to perform so I don't need to write the code from scratch only I just need to mention the specific task name it will automatically do it for me now there is another way you can pass the input let's say so let's say here is my pipeline inside pipeline you can mention the task I want to perform let's say a sentiment analysis and the second parameter you can give the input let's say this is the input I have given I was confused with the Barbie movie okay now now it will give you the same output so either you can follow this approach either you can follow this approach this is the one line approach okay so both it is possible now if you are having any big text that time what you can do you can also use multi-line actually string there also you can pass the text like that see again it's a positive review and this is the confidence score fine now let me show you how we can specify any kinds of model so let's say now I want to perform sentiment analysis and I want to use any other model let's say I want to use this model Facebook Bart large M let me search this model you'll see this is one of the large language model you can see but large uh mnl see again it's not a large language model I can say it's a language model because this model only can perform one specific task which is nothing but the um sentiment analysis but going forward we'll be using large language model like we'll be using Lama mistal Falcon jini okay so these are the model actually we'll be using and these are the model is multitasking model model okay that means large language model so there are two kinds of models are available guys uh just try to remember one is the large language model that means llm okay and this is like only LM that means language model only so language model can only perform one specific task okay one specific task and large language model can perform multiple task multiple task even it can also perform chat operation okay chat operation because I already told you now how large language model was trained okay because of that supervised fine tuning reinforcement learning through human feedback these are the technique has applied but whatever LM model you can see it has only trained with the transform Transformer architecture okay Transformer architecture okay I think I showed you the transform architecture example I think you remember fine so these are the model we using this is called actually language model only it can only perform one specific task so that's why here we are mentioning the task name sentiment analysis now see here we are giving the model name now you can use any kinds of model just go to the model section go to the model section now let's say I want to perform sentiment analyis for this I have to use text classification now just try to get any kinds of model let's say you want to use this model copy the model ID try to paste it here okay it will download that model and it will do the operation now let me show you see first of all this model will be downloaded from the hugging F now see it is downloaded and see the model size it's around 1.63 GB this is actually sentiment I'm getting this neutral sentiment okay it's not a positive it's not a negative it's a neutral sentiment and this is The Confidence Code you are getting fine great now how to perform the batch actually sentiment if you're having batch data let's say multiple let's say uh sentence that time how we can do you can use something called B sentiment analysis so again just try to create a pipeline and whenever you are preparing your input data just try to uh give inside a list you can see it's a python list and inside that I'm having different different sentence okay different different sentence now you have to pass this particular uh list inside your classifier now see it will take one by one all the sentence and it will show you the uh sentiment now see this is the first sentence sentiment second sentence third sentence and fourth sentence okay I hope it is clear but the model actually it is using the default model uh it is having only two level which is nothing but positive and negative but if you see this sentence it is having some emotion okay it is having some different different sentiment and if you want to capture different different sentiments you can use any other model let's say I will be using this model robot based go emotion model so this can actually detect multiple uh sentiment from a sentence okay you can see all kinds of sentiment they have mentioned see these are the sentiment it is having okay so that many of sentiment it can detect now let me use this model and let me again apply the same data now see it will give you different different sentiment see again it is downloading the model after that it will do the sentiment analysis now the first sentence it is uh admiration second one confusion then uh Amusement then anger okay I hope you're cleared so I can say this is one of the very powerful Library okay if you want to work in the field of gen or natural language processing now you can also perform T generation task so for this in the pipeline you have to mention T generation only okay I think I showed you different different task that's I want to perform TCH generation right now so Tech generation I think it is there natural language processing text generation okay now see they have also mentioned in the tutorial you have to give Tex generation in the pipeline okay and you can also give the model so the same thing I'm doing TCH generation model I'm using distill but and inside that I'm passing my input today is the rainy day in London now it will refer this sentence and it will generate the text okay based on this particular content now if I execute see see guys beautifully it has generated the text today is rainy day in London and one that no other City can remember orever uh even no a few days year ago the police arrested okay see beautifully it has generated the text okay so that's actually you can also perform Tex generation now if you want to perform question answering just give question answering and you have to give the question as well as the context okay so based on the context it will uh so by refering this context it will uh give you give you the answer okay let's say this is my question what is my job and here I'm giving the context I'm developing an AI model with the python okay now if I give my question as well as the context it will give me the answer again you can check their uh document ation for the question answering question answering so they're telling like that so you have to give the question context and you have to pass to the uh pipeline okay now see uh answer is developing AI model that means this is my job okay I hope it is clear so I hope guys uh now it is clear how we can use this uh hugging face platform if I want to perform different different task and how we can access different different model now let's see want to use large language model that means llm so I think I showed you one uh amazing uh GitHub open llm GitHub so you can open this GitHub and you can see different different large language model name let's say you want to use this model let's say you want to use um let's see we want to use this Falcon model falcon is a large language model you can copy the name and simply you can go to the hugging face go to the model section and simply s here okay simply s here now see Falcon model would be there see Falcon models is there and Falcon is nothing but it's a large language model it's not a language model okay with the help of Falcon actually we can perform different different task even we can also perform chart operation not only that all kinds of models are available let me show you let's say Lama 2 if you want to use l 2 I'll copy and I'll come here I'll search for the Lama 2 see Lama 2 is from M okay like that we are having some another model Also let's say mral is there then we are having something called Jimma so this model is from Google site so that's how we are having different different large language model and no need to worry going forward we'll be using these other the model but before using these are the model uh we have to learn some additional let's say um tools and Technology like we'll be learning some gen VI framework like Lama index then langin then we'll be also learning about Vector database okay then we'll be learning these are the model as well fine so yes guys this is all about from this video I hope it is uh clear now so in the next video we'll be understanding about tokenizer uh tokenizer inside actually hugging face what exactly this tokenizer okay and why we need it okay why tokenization is required so as I already told you inside hugging face actually we're having another uh super important concept called tokenization and now we'll try to understand why tokenization is important and why we use tokenization inside hugging pH I think you remember I taught you one concept called text reprocessing and text representation so there uh whenever I was passing any kinds of text to my model first of all I was doing the processing then I was converting that particular text to the vector representation right and for this I was using different different technique like for text vectorization I was using TF Ida what to F bag of word then that time actually I told you we are also having some other technique which is nothing but Transformer based technique okay because it is having something called attention mechanism and uh then I taught you the attention mechanism concept the Transformer architecture so there I show you how it will give the attention to a specific word now it's time to show you this part as a practical that means now we are using Transformer based architecture Transformer based model and whatever data see whatever data actually we're passing as an input to my model okay so internally how it is processing that okay internally how it is processing that internally how it is converting to the vector representation so it is using something called tokenization technique okay tokenizer so inside actually Transformer we are having something called Auto tokenizer okay so inside Auto tokenizer we have to first of all give the model name like which model you have to use for that particular tokenization task so to explain this tokenization I I just simplified this particular code so first of all I'm importing some of the library necessary Library I need and here you can see I'm importing Auto tokenizer okay so let me import all the library if you want to use any kinds of tokenization so first of all you have to define the model name like which model you want to use so here I I'm using this model bbased multilingual an sentiment model so this model will uh so with the help of this particular Transformer based model first of all it will perform the tokenization that means this input we are giving to the model right now yes or no right so first of all it will um this tokenizer what this tokenizer will do it will first of all pre-process let's say if it is having some HTML tags or any kind of word it will try to remove then it will try to convert this text to the vector representation okay then it will pass to the model and model will uh actually do the sentiment analysis now see if I execute the code so first of all it will download the tokenizer okay then after downloading the tokenizer it will also initialize the model after that it will do the sentiment analysis so this is the high level understanding and I will also show you the low level how it is generating the vector even we can also visualize the vector as well see now we can see this is the result we are getting fine now let's try to see how tokenizer is working so if you want to use tokenizer you have to import one Library called Auto tokenizer from Transformer the first thing what you have to do you have to load one pre0 model OKAY pre-end Transformer based model so here let's say we are using bbased Case Model so this is one of the Transformer based model okay you can see this one of the Transformer Bas model so we're giving the model ID here then this is my example text let's say I'm giving into my tokenizer okay so inside tokenizer we're having another function called tokenize now after tokenize it I'm just printing okay after tokenizing I'm just printing now let me show you what it will give me the output so I can card these are the example now let me execute as of now H now see when you apply tokenizer do tokenize it will give you the individual token that means the tokenization we used to perform with the help of NL iCal Library I think I remember right sentence level and level tokenization now it is possible with the help of this tokenizer class only okay that's why I told you Transformer is like very powerful so it's a high level rapper inside that they have written all kinds of code it will handle each and everything you don't need to write any kinds of code from scratch okay now if I want to convert this textual representation to the vector what I have to do I have to pass this particular token to the convert tokens to IDs this particular method okay and it is available inside tokenizer object the tokenizer object we have find here now it will give you the input IDs now let me show you this input IDs I can take different cell and here I can execute see this is the input ID and this is nothing but your representation of the text the text actually you have given I was so not happy with the Barbie movie now you can see this is the vector representation of this particular text and it is using Transformer model okay it is using Transformer architecture in the back end and it's like more powerful okay it's like more powerful technique than your bag of word or TF IDF or what to whatever you have learned okay and going forward we'll be using this particular approach only okay I hope you cleared but whenever I have to pass this particular Vector to my model I won't be using this particular method for this you have to use this particular method so here there is another function uh so here you have to pass your data uh to the tokenizer okay directly you have to pass to the tokenizer and tokenizer will give you this output let me show you see this is the entire output encoded input now see input IDs now it is familiar so this is the input IDs and here one additional token you can see one1 what is one1 this is the start of the sentence and start of the sentence represent 101 and end of the sentence represent one2 and in between actually you can see your entire Vector the vector actually you got okay now it is having another actually uh things called token type IDs as of now just try to skip this part it's not required and this is the important things guys attention mask okay now I think you remember what is attention mask that uh attention mechanism concept that means uh whenever let's say it will pass this particular data to my model in which word it will give the more attention Okay it is telling now see it is giving the attention to all the word because every word is one one one one you can see that means this one will get the same attention this one would give the same attention Okay this one will give the same attention okay and how it is getting to know how to give the let's say attention uh I think I showed you the calculation that uh I mean one one calculation I was discussing in that uh J our blog okay that's how it is calculating the score and it is able to decide okay I have to give the attention to this particular specific word okay I hope it is clear so these are the actually output you'll be getting after doing the tokenization now if you want to decode the tokenization that means if you want to again convert this uh let's say Vector to text representation you can use decode function for this now I'll give my input ID so whatever input ID I'm giving getting I'm I'll pass in in the decode function and decode will give me the previous text actually you can see I was so have uh so I was not happy with the Barbie movie okay I hope it is clear now now if I execute all of them all together you can see this is the output this is your tokens this is input IDs this is the encoded input this is the decode output that means this tokenization will first of all perform the pre-processing then it will perform the tokenization then it will convert your let's say Tex to Vector representation okay and additionally it will also give you some of the let's say number which is nothing but attention mask okay based on this attention mask your model will decide in which word it has to give the uh let's say attention mode so now I think guys this uh token tokenizer is clear like what is tokenizer exactly inside hugging face because many people will have this question later on that's why I just clarified right now because going forward whatever experiment we'll be doing we'll be using the tokenizer okay from the Hing itself so for this again I kept one example so here we'll be fine tuning uh one data set called IMDb okay IMDb movie review data set and and we'll be using one uh language model OKAY from the hugging face itself so for this year we'll be using hugging face data set only because I already told you hugging face is having data set okay data set actually services so you can also get see different different data set and this is the data set count guys okay now you can search any kinds of data set now let's say I want to use something called IMDb data set so IMDb so this data set is already available see this is the IMDB data set okay so this is a movie reviews data set so here you have the movies and based on that you have the uh reviews okay whether it's a negative or positive so here we'll be fing one uh text classification model that means we'll be performing sentiment analysis okay this is our main objective so if you want to use actually hugging face data set for this you have to install one Library called data set okay so first of all try to install data set and make sure you also install Transformers okay because I already installed Transformers so that's why I'm not going to install again now you have to restart the run time now see it is restarting the on time after that we'll load the data and loading data is very much easy only you just need to give the data set name okay so there is a load data set uh function inside data set you have to call it and inside that you have to pass the data set name it will automatically download the data from the hugging face okay now see this is the data set name IMDb just copy the name and give it here okay it will automatically download now if I show you so not only this data you can use any kinds of data even I think you remember in the previous video I showed you that tokenizer so in the tokenizer also you can take different different model OKAY different different model for the tokenization so there I was using BB Cas model you can also use any other model but remember whatever actually model you are using for the tokenizer the same model you have to use for the model training as well for the model inference as well okay this is the uh idea now let me show you huh see my data set is downloaded now if you want to see the data set metadata so this is the data set now we are having um uh training data take and labels we are having and this is the example that means 25,000 actually rows we are having inside training example and test data we are having 25,000 and here we are also having unsupervised data so here we'll be using this data only train and test data okay uh for my analysis now first of all let's do the pre-processing task so for this I think remember we have to perform the tokenizer so here I'm importing Auto tokenizer so again I'm using this model but best Case Model okay so first of all I initialize my tokenizer then here I have created a function tokenize function inside that I'm just tokenizing my example now which example I have to tokenize guys I think remember if I show you the data let's if I show you the first example you can see this is the text okay this is my reviews okay this is my reviews and this is the sentiment so I have to apply on top of the reviews only okay so that's why I'm giving text example text because inside example we are having the text okay text uh Keys actually you can see because it's a dictionary format okay that's the idea and here I'm adding pad padding max length let's say what is padding I think remember let's say there is a sentence this movie is good now now let's say there is another sentence I hit this okay now just see the actually input length 1 2 3 4 1 2 3 so this input length actually having one word list so in case actually what you can do you can add some padding padding means zero value okay so that's why actually we adding this particular parameter padding is equal to max length that means first of all it will try to figure out the maximum length sentence based on that it will decide what would be the padding size okay this is the idea now uh here we are applying this particular function you can see this tokenized function on top of my entire data set okay and for this I'm using map function and map will apply on top of the entire rows okay this is the idea now if I execute see uh this tokenizer will apply on top of my entire data set then I will get all of my vector now previously I only had this many of example now after tokenization you will see uh you will you will have some more actually Keys like your attention uh attention mask then you'll also get the input IDs okay these are the thing you'll also getting so guys as you can see my tokenization is completed now if I show you my tokenized data set right now so see now I'm having uh all of the features like input IDs token type IDs and as well as the attention mask okay uh everything now if I want to show you the data how it will look like so here you can visualize that's I want to see my training data let's say I want to show you the first example now you can see the first example this is the raw text okay and after doing the tokenization uh you got the input IDs and input ID is nothing but is the vector representation of the entire text okay you can see this the vector representation and it will also have something called uh this one attention mask let me show you token type IDs would be there as well as the attention mask see attention mask okay I hope it is clear now that means we have successfully converted our uh textual data to Vector representation now we can start the training but before that I have to first of all set some of the training argument and Transformer provides actually one uh actually function called training arguments okay inside that you can mention training arguments so these are the default actually arguments you can keep as of now no need to change anything because again it's a hyper parameter tuning only just uh change you can do number of epoch let's say how many Epoch you want to train let I want only want to train only let's say one Epoch as of now okay only one EPO I want to train and output directory so it will create a folder here called output directory inside that it will save all the models and everything right now let me set the training arguments so again this is kinds of template kind of code you don't need to remember anything all the codes are available in the hugging face platform so from there you can refer okay you don't need to remember anything here F now see that many of actually training argument you can set here okay after printing you can see okay but I don't need to set all the training arguments we can only set these are the training argument F now we can initialize the model so here to initialize the model first of all you have to import to library Auto so here you have to import one Library called Auto model for sequence classification because here we are doing text classification for this you have to use this particular class then you have to also import the trainer now first of all you have to load the model you can see this is the model part based case model I'm loading okay so if you give it here it will automatically download and number of labels I'm giving two because we are having only two labels positive and negative we are doing the sentiment analysis now of the IMDb data set and if you see the sentiment only positive and negative fine if you're having let's say four four sentiment that time you can give four okay I hope you're clear now simply we can initialize the trainer inside trainer give the model give the the training arguments okay the training arguments we're getting from here this is the training arguments then we have to pass the train data so this is my train data tokenized data train okay training sample and evaluation data I'm giving my testing data fine now let me click here now see it will download the model and it will initialize all the trainer now see training has not started yet because if you want to start the training you have to call this particular things okay trainer. train now see if I click here now it will start the training and after training it will save all the artifacts in the result folder okay so it will take some time guys so let's wait once training is completed I will come back if you're using free collab so training will take some time so you have to wait now what you can do you can also evaluate uh the model on top of the test data so just try to execute this code so again it will take some time let's wait after this execution you will see the evaluation metrics and in between let me show you the training loss and validation loss you got after training so this is the training loss and this is the validation loss in only one Epoch so here if you increase the epoch size you'll see that this loss would be decreased so try to increase the EPO size whenever you are uh training your actual model as of now I'm only training monip because I just wanted to show you okay this the idea now let's see the evaluation metrix uh what is the evaluation metrix we get here so guys as you can see this is your evaluation result so this is the evaluation loss this is the evaluation runtime uh that means uh that many seconds actually took to execute this entire code and you can see we only train manip okay so you just only need to see this losses like how much loss you are getting so this loss should be close to zero if it is close to zero that means your model is performing better that time now you can also save the model the model you have trained you can also save the model even you can also save the tokenizer why you have to to save the tokenizer because uh let's say uh in future user will come here and they will be using your model so they will give some input right and input is what it's a text so again you have to convert that particular into the vector representation yes or no right so to uh convert this input to the vector representation I need to use my tokenizer my train tokenizer okay not the previous tokenizer okay that's the thing you have to remember and as well as I also need to save my model now let me save both of [Music] them now you can see in the results folder we are having all the check points of our model training and all I think you already know if you have already learned previously like how to train uh computer vision model tensorflow model I think you know what is checkpoints okay now see we have successfully saved our model now if I refresh now see this model has been saved here now inside uh this folder actually we are having different different actually file sequency config Json then uh save Tor okay Json so this is how actually uh your hugging face save the model okay it will contain actually multiple file inside config you will have the entire configuration of the model okay this is the main idea so see we have successfully saved our model as well as the tokenizer now let's see actually one uh project now let's try to do one small project so here we'll be using uh this uh archive actually so I think you know archive is a website so here you will get different different research paper okay all kinds of research article um you will get here so first of all we'll install this Library uh because in Python we have this library with the help of this Library we can uh actually download all kinds of article right we can get all kinds of article data so now let me import now see if I want to now see if you want to use this particular Library archive first of all you have to prepare one query you need AI or artificial intelligence or machine learning related let's say paper here you are giving the query now here you have to search okay you have to search in the archive now here you can see I've given the query maximum result I need 10 and you have to pass this particular parameter called sorted by just try to mention submitted dat as of now now it will give me different different page and I'm looking through the page and I'm extracting the published date title and abstraction and category of the paper okay then whatever data I'm getting I'm converting to the data frame and I'm just plotting it here now let me execute and let me show you so guys you can see I got the results now this is the publish date this is the title of the paper and this is the abstraction of the paper Okay abstract of the paper and this is the category now let's say I want to uh create a research paper summarization system so what I can do in the pipeline I can mention I want to perform summarization okay and which things I want to summarize I want to summarize this abstraction okay this abstraction I got you can see this is the abstraction column okay abstract column now that's why I'm passing the abstract column from the data F and here I'm using this Facebook part large CNN model okay inside that I'm passing my abstraction now see will give me the summary so this model actually they train on the summary okay summarization task you can open it up and you can see the description of the model they're doing the summarization task okay so execution is completed now I got all of my summarization result now let's say I only want to uh see the first one okay first summarization text now I can execute this code you can also print all of them it's up to you but I'm only showing the first example see this is the summary of the first results okay so I hope guys uh it is clear how we can perform the let's say fine tuning operation on top of a pre-end model and no need to worry going forward also will be exploring lots of model and we'll be doing the fine tuning operation we'll be implementing different different application okay on top of it we'll be implementing different different projects in this video I will show you how we can generate hugging face API key because I told you sometimes we need this API key with the help of API key will be accessing the model okay so for this uh we have to learn how we can generate a key so as of now we'll be generating the key later on we'll be using that so for this uh definitely first of all you have to login with your hugging face account now click on the profile icon now go to the settings now left hand side you will see one option called access key okay access token now click here now see previously I already created some of the access token but for you it would be empty now if you want to create a new one just click on create new token now you can give the token name let's say I give uh my new okay my new token now you can uh give the permission now here you can uh provide the permission whether uh you want to create for the read access or whether you want to create for the right access okay so let's say uh as of now I want to create for the read access I only want to perform the read operation and uh later on I will also show you how you can push your train model to the hugging face Hub so that time actually you need the right access okay so as of now let's create my token this is your token just try to copy and save it somewhere don't no need to share with anyone otherwise they will also access your account okay so it should be private I'll delete it after the recording that's why I'm showing you now let me uh close it so as of now uh I showed you the hugging F demo like how we can use this hugging face platform how we can access different different model even how we can also fine tune those are the model on top of our custom data so in this video we'll be uh using the same technique and we'll be implementing one project called takech summarization okay so here is The Notebook guys I already prepared so the first thing what you have to do first thing just connect the notebook and make sure you change the run time to the GPU because here you need the GPU if you want to let's say uh implement this project because here will be fine tuning one uh Transformer based model okay we'll be fine tuning one LM model here on top of our custom data I'll tell you which model we going to f tune even on top of which data set actually we're going to find tune but first of all uh let me tell you what is take summarization take summarization means let's say you are having a bigger paragraph and you are uh summarizing that particular paragraph I think you know okay what is the summary right what is the T summarization project so in Internet actually you will be getting different different summarization actually application let's say if I write text summarization online so there are so many application you will see see this is another application from qu bot actually so here actually you can also give any kinds of text and it will give you the summary so let me show you if I search for English story so what I can do I can copy this text as of now as it is and here let me paste it now if I click on summarize button you'll see that it will give me the summary of the entire text now you can also control like how much uh summary you need so let's say I need a little bit bigger summary now if I again res summarize now see this result I'm getting uh this is the actually little bit long than our previous summary okay so that's how actually we're having different different application over the Internet so we'll be implementing this kinds of project but here I'm not going to implement a user interface user interface wise will be implementing later on so as of now we'll be only doing the experiment on the collab notebook okay we'll be using uh Transformer based model we'll be using uh LM model and we'll be doing this kind kinds of project okay this is the main objective here so let me so let me get back to my collab notebook and first of all let me execute this command so this command will uh show you which uh GPU actually you are using so here I'm using Tesla T4 GPU because here I'm using free Google collab now the first thing what you have to do you have to install Transformer Library okay why because here we'll be using hugging face actually platform and to use hugging face platform I already showed you you have to install Transformer Library apart from that you need some additional package like sentence pieces okay then you need uh scare blue then row score okay and Pi 7 Zer and data sets why data set because with the help of data sets we'll be downloading the data set from the hugging phe itself okay that is why and these are the dependency package you also need to install here fine so let me install all the package one by one so my installation is completed so the next thing what you have to do you have to update some of the package the first package you have to update called accelerate then you have to uninstall your older version of Transformer and accelerate and you have to install the latest one because what happens actually in Google collab sometimes uh they're using older version of the Transformer package and accelerate package okay so that's why I'm updating it again okay that's is the things you have to do and what is accelerate see accelerate will help you actually to access your GPU that means here you are using GPU you're using something called cuda okay so to use your Cuda uh actually instance this accelerate will help you so whenever it will do the find un operation that time actually it will access your GPU right so that's why actually this package is required now let me update all of them so as you can see uh update is successful there is no error that means everything is working fine now the next thing you have to import some of the necessary library to test whether everything is working fine or not so here you can see I'm importing pipeline then I'm also importing load data set from the data set okay and apart from that I'm also importing some additional Library okay some extra Library also I'm importing here it is not required but what the library actually I'm going to use like later on I'll tell you okay why I'm using that one so as of now let me import all of them see this execution is fine that means there is no error we have successfully install all the package now I think I already imported torch so I don't need to import this line I can delete HM now the first thing what I have to do I have to check the device okay whether it is utilizing my Cuda or whether it is utilizing my CPU so as I already showed you I have changed my runtime to the GPU right and here you can see it is connected with my T4 GPU that means it should use my Cuda so let me check see it is utilizing my Cuda so here I'm using torch pytor library to check it whether Cuda is available or not if yes print CA otherwise print CPU so you don't need to manually set the your machine type so if you have the like GPU install in your system and if all the tools and let's say services are already installed so it will utilize that particular GPU that means your ca otherwise it will automatically utilize your CPU okay so if you see any kinds of pyos implementation pyto use this particular cod in the pit okay to map with your Cuda or with your CPU I hope it is clear now the first thing what I have to do I have to load my tokenizer okay tokenizer and what is tokenizer I already explained with the help of tokenizer we'll be preprocessing our data and I will be converting my text to Vector representation so for this I'm going to import auto tokenizer from Transformer library and another class I have imported Auto model for sequence to sequence LM because here we'll be uh loading one LM model that means we'll be loading one Transformer based model and to load the Transformer based model actually you have to use this particular class fine now let me import this package now here is the model checkpoint guys so here we'll be using one model called Google pagas CNN daily mail okay so this is the Transformer pre- model and this is the model guys this is from Google so Google has trained this model and this model can perform T summarization okay now if you want to test it here is the inference API now here you can see it will give you the summary okay summary of the entire text now you can see like what kinds of data set they use to train this model every information they have given okay about the model so if you're interested uh to De dive you can check this documentation you can check this model card you will see each and every details now if you want to see the model just click on files and version you will see the GB of the model it is around 2.28 GB and there is another file it is around 3 3 GB okay so total I think 5 to 6 GB this particular model so whenever I will download this model you'll see that okay what is the like model size as of now let's let's get back so now let's load the tokenizer and I already told you uh the model actually will be using the same model you have to use for the tokenization as well fine this is the idea now let me load the tokenizer so for this I'm using Auto tokenizer from pre0 and here I'm giving the model checkpoint it will automatically download from the hugging face itself so fine I have already downloaded the tokenizer now we'll be downloading the model okay so to download the model I'll be using this class Auto model for sequence to sequence LM this class and there is a function called from preent you have to give the model checkpoint and two device like in which device you want to load the model I want to load the model inside my GPU okay that's why I'm giving GPU two device is equal to my device now let me load it load it okay my model has also loaded now we'll be loading the data set and data set wise we'll be using my data set named Samsung data set so this is the data set guys so this data set is from Samsung actually so they have published this data and the Samsung data is nothing but it's a data set containing about uh 60 16k messenger like conversation with somebody that means it is having actually different different conversation okay and uh in the another column actually it is having the summaries okay of that particular let's say conversation so if I show you let's say this is the conversation okay this side you are having the conversation and this side you are having the summary so let's say this is the conversation and this is the summary okay again this is the conversation this is the summary so that's how they have collected the entire data and it is having 16k actually messenger like conversation data fine and the data set name is Samsung data and if you want to see the data set is split so it is having around 14732 example for the training validation that many example and testing that many example fine so again you can uh see this documentation if you want to learn more about this data now let's download the data so for this I'll be using load data set from my data set uh package now let me download the data as well now I'll give yes and I'll press enter it should download the data okay now if I show you the data set metadata so this is the metadata guys so as I already told you it is having dialogue and summary and that many of example you are having for the training testing and validation fine now if you want to see any kinds of let's say dialogue that means your entire let's say conversation you can also visualize so let me visualize one of the example so this this is the dialogue guys you can see Olivia is telling who are you voting for this election then Olivia is saying Liber as well and Olivia me too Olivia great okay so this kinds of conversation it is having and based on that it is having one summary so let me show also show you the summary so I'm printing the summary here you can see so Olivia and Oliver are voting for the Liberals uh in the in this election okay so this these kinds of actually data set they have prepared now this particular quote cipit will print the number of example you are having in this data set as as well as the split length and the let's say enter dialogue and ENT summary now let me show you see this is the split length this is the training validation and testing and these are the features it is having like ID dialogue and summary and this is the entire dialogue you can see okay and this is the summary of the dialogue so this is the preview of the data that's why I just printed let I just wanted to show you okay how what kinds of data they collected now let's say you are having some different kinds of data so what you can do you can give your let's say entire let's say paragraph As a dialogue and the summary as a summary okay and you can follow the same approach okay it doesn't matter now the next thing what I have to do guys I think you remember I have to pre-process my data and convert to the vector representation so for this what I have to use I have to use my tokenizer okay I think you know and on top of which actually let's say column I have to apply my tokenizer under dialogue because dialogue is my uh dialog is my actually paragraph and again if you see the summary summary is also at text okay so I also need to apply the tokenizer on top of the summary as well so here I've written a function convert example to Features so it will take the example batches that means your dialogue and summary and it will perform the tokenization operation you can see so first of all I'm applying tokenization on top of my dialogue then I'm applying tokenization on top of my summary then whatever results actually I'm getting I'm just returning that means you will get input IDs attention mask as well as the labels I think I showed you okay from that example now let me execute and now let me map this this function on top of my entire data set okay so see here I'm doing the map operation now first of all let me convert uh to vectorization then I will show you okay how it will look like so see execution is done now if I show you my data set right now now see it is having different different features ID dialog summary input IDs attention mask and labels okay because I converted to the vector representation right now now if you want to see the input IDs so these are this is nothing but your input IDs that means this is the vector represent of the first first dialogue okay and if you want to see the attention mask you can also print attention mask so this is the attention mask that means uh it is giving all the word as the same attention I already explained this part fine and if you want to print the level as well that me the summary you can also print it let me show you so here I will print the labels so this is the labels okay that means this is the summary of this dialogue fine I hope it is clear now we'll start the training but before that what I have to do I have to set some training arguments I think you remember right but before that one thing you have to do if you're using uh large amount of data so you have to uh initiate this data collator okay so what data collator will do data cator will help you to load your data as a batches in the memory see here you are having so many example I showed you now in the training validation and testing so I don't need to load the entire data in my memory because here if you see my memory size uh I got actually uh 12gb RAM so if you're having huge amount of data so 12gb Ram is not enough so for this what you can do you can load your data as a batches that means that means some amount of data you will be loading you'll be training again you'll be taking another batches again you will be training that's how you can perform the operation so this data collator will help you to load your data as a batches and if you want to define the data collator you have to use this class from Transformer data cator for sequence to sequence so here you can see I'm passing my tokenizer and model inside the data C letteror fine then you have to initialize this data call letteror object so let me initialize it right now now the same thing you have to set the trading arguments so as I already told you just keep all the arguments as same no need to change anything only you can change the number of epoch okay you will be training so as of now I'll be showing you only one Epoch training because again uh it will take time we are we are using free Google collab okay and the output directory I want to create Pegasus Samsung okay so it will create our output directory Pegasus inside that it will save all the ARs fine so let me initialize the argument as well then I will initialize my trainer object so it will take the model your training argument tokenizer data cator and you have to pass the training data now see here one small hack actually I'm doing see if you see the training data size it's very huge so as I already showed you here so that many training example it is having almost 15,000 so if I'm taking 15,000 data for the training it will take lots of time and this is my validation and testing so what I'm done actually uh instead of taking the training data I used actually uh test data as my training data because inside test data I'm having very less example so that I want to show you the quick training but if you're training actually okay if you are doing the actual training that time you just use train data okay not the test data so this is the hack Guys small hack I'm doing because if you want to experiment something and you don't have that much of time so you can do you can take a small amount of data and you can perform the let's experiment okay so that is what actually you can you can perform and here you can see evaluation data I'm giving my validation data it's completely fine okay now let me initialize my trainer now if you want to start the training you have to call trainer. train now it will start the training of the model so it will take some time so I will pause the video and once training is completed I'll come back okay so my training is completed now here you can see my training losses and uh different different matric that it is giving but you have to take the training losses so this loss should be close to zero guys okay if it is close to zero that means your model is performing well now if you want to evaluate this model on of of the test data you have to use this function calculate Matrix on test DS okay so here uh you'll be calculating something called row score okay what is row score see row score is a matrix for the uh summarization model take summarization model you can search on Google you will find the row row score actually equation but as of now I won't suggest just don't deep dive into the equation just try to consider it just a evaluation Matrix like for the classification actually what evaluation Matrix we used to use like accuracy score then we used to use confusion metrics AOC carve right and here we are performing something called T summarization and T summarization uses one Matrix called row score if you want to evaluate that model so similar wise for language translation we use another kinds of matric for let's say name entity recognization we use another kinds of Matrix for let's say a conversational agents we use another kinds of metrics okay all kinds of task is having their different different evaluation metrics okay this is the main idea here now before that let me show you the models actually it has trained now inside Pegasus Samsung folder this is the checkpoints inside that you will you can see this is the model actually it has train now we'll be saving this model as well just uh let me first of all show you the evaluation matrics then I will say uh tell you how we can save the model and now you can ask me where I got this function see if you just go to the hugging face that documentation go to the T iation task you will see that they are suggesting this function okay so they're suggesting if you want to perform the evaluation on top of the let's say your Tex summarization model you can use this row score function okay this is the idea now here we'll be calculating our row score so here you are having actually Four kinds of row like Row one row two row large and row L sum okay now let me calculate the row Score first of all I'll be loading all the row matrixes I have to give yes then I'll be calculating the score on top of my testing data okay now let me execute and again I'm only taking 10 example guys because again because uh it is having actually lots of data and it will take time that's why I have taken only 10 example but if you're performing actually so what you can you can remove this line that means you are performing on top of the entire data right now fine this is the small small hack you can follow if you're doing the experiment only now see guys this is my row code I got now guys you can see I got the row score and this row score should be close to one okay if it is close to one that means your model is performing better so as of now we used our test data for the training and we only train one Epoch that's why this uh Roy score is not good okay but if you're using actual training data and if you train multiple EPO you will see that you will get a good Roy score here fine now let's save the model my Pegasus model so I'm using save F pen function and here I'm giving the name it will save my model so now if I refresh you can see my model has saved so this is my model Pegasus model my train Pegasus model then I also need to save my tokenizer because uh later on I'll be giving my uh let's say testing data and if I want to do the let's say summarization task that time it will also convert that data to the vector representation now see this is my tokenizer I also save fine now if you want to load any kinds of pretend tokenizer what you can do you can use uh Auto tokenizer from pretin now you can give your tokenizer location okay now see here I'm giving my tokenizer location not the tokenizer we downloaded from the hugging pH okay now let me load my tokenizer so this is my custom tokenizer right now now this is the prediction code okay now to perform the prediction first of all you have to generate some arguments now you have to set the length penalty then number of beams then max length so you don't need to change this parameter just keep it as it is only you can change this length panalty what is length penalty I think you remember so here we had one let's say interface like we can generate short output we can generate long output now if this parameter is close to one that means it will uh generate actually long output if it is close to let's say zero it will generate short output okay this is the idea now here you can see I'm taking a sample text from my test data I'm taking actually dialogue one uh dialog the first dialogue okay you can see from the testing data I'm picking up the first dialogue let me show you so if I execute it here so this is the first dialogue I'm taking from my test data and I'm Al also taking the reference that is the actual summary of it because I want to match this summary with my actual prediction of my model this is the actual summary right then what I'm doing I'm creating a pipeline I think you know what is pipeline in hugging Fist and here I'm telling I want to perform summarization right now and I want to use my model the model train so this is the model train I'm giving the name of the model you can see okay Pegasus Samsung model and here I'm passing my tokenizer the tokenizer actually I loaded here F then I'm creating the pipeline now here I'm printing my sample text that means the text actually we have loaded this uh first dialogue as well as the uh reference that means my actual uh summary then I'm predicting my uh model you can see I'm passing this sample text to my pipe object okay my Pipeline and here I'm giving all the parameter I set here okay then whatever output I'm getting I'm only printing the summary text of it now let me show you if I execute this code see this is is my actual dialogue this is my actual summary now my model is predicting okay the prediction summary let's wait and let's try to match okay how much accurate it is now see guys I got the prediction now just try to see now you can see this is the model summary that means my model has uh given me the summary now see it's not very accurate but still it is close to because again I told you we only trained one oke and we used our testing data for the training okay that is why uh it is uh actually it is not giving actually good performance okay and if you want to increase the performance what you can do you can increase Theo size and you can test and you have to train on top of the training data okay not on top of the test data okay this is the small modification you can apply so I hope guys uh it make sense right now how we can actually Implement different different projects with the help of hugging face platform now okay that means I showed you how we can use different different model whether it can be LM model whether it can be llm model how we can use different different data sets okay and how we can use use the hugging face pipeline okay to create your application so this was my main objective the proper use of hugging face okay because going forward we we'll be utilizing this particular let's say technique only to perform all of the let's say project okay whatever project we'll be doing we'll be following this particular approach only and going forward I will be also showing you how we can use large language model so see now we are using LM model only okay language model only but going forward we'll be using large language model that means we'll be using uh uh Lama model okay we'll be using Lama model from meta we'll be using let's say mral model okay we'll be using Falcon model different different like large language model will be exploring okay so I hope guys this is clear now how we can uh perform this TCH summarization project now one task I want to give you see I already told you now we are having different different data sets in the hugging phase so you can select based on the task let's say if I go to the task let's say I want to perform summarization I'll click the summarization now see these are the data related summarization now what you can do you can pick up any kinds of data set from here okay and you can perform that t summarization on top of the data see here I used Samsung data but I want you to use some many other data okay so please try to attempt this task Because unless and until you are not doing like a practical from your s it would be little bit difficult for you so if you want to uh actually generate image from the text so you have to use something called diffusion model OKAY diffusion model and what is diffusion model diffusion model is kinds of actually large language model it is available in the hugging phas okay and if you want to use diffusion model you have to use one Library called diffuser okay diffuser so this diffuser will help you to actually load these kinds of diffusion model and you can perform these kinds of text image generation so again it is available inside hugging face only so you don't need to go to the any any other platform okay so additionally we just need to install another Library called diffuser and with the help of that we can easily access that diffusion model as of now I don't need the gradio here I can remove it so these are the library actually I have to install here so as you can see diffusers is the hugging face page for uh using the diffuser diffusion model from the hugging face Hub so here you can see let me show you the page actually I have already um given the link so see this diffusers is available inside huging face only so they have already uh written like how we can install it okay and how we can load the diffusion model and all every example they have already given here fine so I have followed this documentation guys and I prepared one notebook for you and let me show you how we can perform this texture image generation with the help of different different large language model and here the model actually will'll be using guys this is actually multi model that means this model uses both kinds of architecture your uh NLP architecture as well as the computer vision architecture because here you have to give the prompt that means text is nothing but your prompt okay and it will generate the image that means first of all it will process the text then it will process that particular image okay image output so that's why it is using something called hybrid architecture okay so it is called actually multimodel I hope you cleared now let me install all required package I need here now let me import this stable diffusion pipeline for diffuses uh the same way actually we used to load our pipeline I think you remember from the Transformer so here also we have to load the pipeline for the defur okay now I also need the matte plot Le because I want to visualize the image then I also need the torch Library now if you want to see the version of any package you can execute this command keep show the package name it will show you the version okay now here I kept actually two kinds of diffusion model uh this is the model ID one and this is the model ID 2 you can see the first model this is the first model so the model name is uh dream like diffusion 1.0 so this is the model guys and it is available in the hugging fiz Hub okay see whatever models actually you can see in the model section this is called actually hugging fiz Hub that means in the hub also you can upload your own model it is possible let's say if I click on the model now so inside this model you can upload your own model let's see fine tuned one model and you want to share with the community you can also push your model here okay so that other people can download your model and they can use it okay I also tell you how you can push your model to the hugging pH Hub everything I'll try to show you even you can also upload your own data set okay it is also possible here now this is the model guys you can read about the model and this is the few results actually you can see they have given different different prompt and these these are the results they have generated okay this is one of the amazing model even they have also given the code s it how we can use it and all everything they have given now another model actually uh this one the model name is St diffusions Exel base 1.0 this is the model so this is the model architecture high level architecture that means first of all you have to give the prompt and with the help of actually Transformer model uh what they will do they will just try to understand this prompt and they to try to perform the tokenization convert to the vector representation okay that means converting to the embedding then they'll be creating one latent Dimension 120x 120x and this latent Dimension will pass to the unit model if you don't know uh inside stable defion actually unit model is used so Unit Model will try to generate the image okay with respect to the prompt user has given okay you can see last time getting the image output again they have already given the paper link and all if you're interested you can open it up and you can learn okay see they have also given the code example now let me show you how we can use this model so what I've done guys uh I'm loading the first model you can see uh St divion pipeline from preon I'm loading the first model and here you have to give some parameter okay that means TS uh data type t. float 64 and use uh save tensor is equal to two Okay you have to pass this two parameter now I'm loading this uh model inside my Cuda that means inside my GPU because if you load inside your CPU it will take lots of time right so that's why I'm loading everything inside my GPU now let me show you see it is downloading the model now here I have prepared one prompt guys you can see this prompt dream like art a uh gri woman with uh rainbow hair traveling between Dimensions Dynamic poses happy soft eyes and narrow CH chain uh extreme bouet Dy figure long hair straight down and tone uh qualy shot and baggy okay so this is my prompt actually I have prepared now you can give any kinds of prompt if you feel like okay you have to use this prompt you can give it here now this prompt actually I have to give my pipeline object that means inside my model and model will give me the image Matrix okay so let me show you so it is generating this image right now I think currently in the chat GPT also it is having one model called GPT 4.0 okay so this model also can generate uh actually different different image so see create an image for my presentation now if I click here now see it is utilizing something called GPT 4.0 see if I click here see GPT 4.0 they're using now it is asking uh just try to give any kinds of prompt let's say if I give same prompt here let's see what happens see it is generating the image right now so they are also using these kinds of uh like diffusion model in the back endend U multimodel model that means they're understanding The Prompt then they're generating the image okay see okay this is the output I got now let's see uh from my model actually the model actually I'm referring from the hugging face see if I uh plot this image right now you can see this is the results I got now see the chat GPT and see my results both are pretty good now you can also plot with the help of M plot Le it is also possible first of all I'm uh like uh printing The Prompt then I'm printing the image okay now let me give another prompt a girl is sitting on a chair and she is accompanied by her tiger make sure to keep it cinematic and color to be golden ID okay now let me see the output the same prompt you can give to the chat GPT as well let's see so here I think I got the results now let me plot the image see this is the image I got and see this is the image I got from my chat GPT so both are good guys now I think you got it how we can use these kinds of actually multimodel as well okay if I want to let's say generate text to image or image to text okay everything is possible now if I show you so if you just go to the hugging phas model section uh here if you click on the model now see here you are having different different task let's say you want to perform text to image gener generation so here is the task guys inside computer vision you can select it now see you are having different different model so here I was using diffusion model you can also use any other model okay see how that many of models are available around 34,000 model you can use any of the model okay any of the model and you can try so this should be your task guys I will uh leave it to you you can explore any kinds of model from The Hub itself okay only select this task text to image okay now let's see if you want to perform image to text that time select this one and you can see the different different even if you want to see the example open it up they have also given the lots of example here okay for snippit everything they have given you can learn from here so this is the best platform guys if you want to Deep dive inside hugging face fine now we'll be learning some uh parameters of the diffusion model like you can set some of the parameter okay uh let's say You Want U actually different dimensional image you want to let's add some more uh parameter in that image you can also do it for this I created a function generate image so it will take the pipeline object prompt as well as the parameter and whatever things actually will be assigning the parameter it will set inside Pipeline and it will render the image with the help of M plot l so let me execute see that many of actually parameter you can play with negative prompting n num inference St height weight okay number uh number of IM part prompt okay let to say this is another prompt I have prepared as of now parameter I'm not giving anything it's empty now if I pause these are the thing inside my generate function so it will give me the image so this is the prompt uh dream like beautiful girl playing the Festival of Color wrapped in traditional India uh at throwing uh colors okay this is my prompt now you can see based on the prompt it has given me one beautiful image okay see beautiful image it has generated now you can give any kinds of prompt let's say number of inference step I have given 100 now let's see what kinds of input I get you can see the documentation of the like this one uh def diffusers you will see different different um actually parameter we having there see this is another example now you can see both image are same I can't see any difference now let's see with any other actually parameter let's say height I want to change actually different height uh height and weight so for this you can pass this height and weight parameter here now let me see so now you can see guys I got the results and in a different height and width right now so that's how you can play with different different parameter now let's see another parameter uh number per image prompt that means if I want to let's say generate multiple image that time I can give image number of image per prom two that means it will give me two image right now so here is the results now I'm getting two uh output from my image now let's say you want to get three you can give three here now let's also see the negative prompting so here I have added negative prompt ugly destroyed and low quality let's say this this is my negative prompt now let's see whether it is able to generate or not so right now you can see uh See this results and this results I think you can see the difference this is little bit uh low quality and the prompt I have given ugly destroyed and low quality so it is almost matching I think fine so yes that's how we can uh use this kinds of like multimodel and I can uh do the text to image generation fine now I already showed you we are having so many model guys just try to explore from your end some of the model and try to um like Implement any kinds of projects fine so guys so far what we have learned so we saw like uh how we can use the existing model from the uh hugging pH that means let's say if you want to use any pre-rain model pre-train model you can directly use it so you have to use something called pipeline okay pipeline for this inside pipeline you have to mention the task you want to perform okay let's say you want to perform sentiment analysis you want to perform let's say translation you want to perform let's say summarization you can mention all else what you can do you can also do the fine tuning operation okay fine tuning of a pre-end model okay and I already showed you one fine tuning example like I did the tex summarization okay take summarization so there I trained on top of my custom data now you can ask me when we have to use pretend model and when you have to do the fing operation so let's say whenever you are having a problem statement let's say uh let's say you want to do T summarization only take summarization only okay take summarization only first of all try to use the existing model that means the pre-end model OKAY pre-end model let's say I showed you one model now Google Pegasus that CNN daily mail model try to use that model and try to see whether your model is able to give the correct let's say summary or not correct summary or not if it is able to give the correct summary then why you need to do fine tuning definitely not you can use this model as it is right but let's say if your data is little bit different let's say you are using something called um let's say banking data okay banking data banking related let's say conversation you are having and this conversation is not working with that pre-end model that time what you can do you can collect your own data that means your custom data okay custom data and based on that you can f you one okay f t one pre model that means you are using one freend model on top of that you are adding some more knowledge then this model will be able to also work with the banking data as well this is the idea only okay now I think you got it when you have to use the pre-end model and when you have to do the F evening operation it can be for all kinds of let's say model it can be for the multi model it can be for the for the let's say LM model it can be for the LM model any kinds of model actually it can be applied okay so the model I showed you now right now this diffusion model this text image generation model let's say if it is not able to generate the image the way actually you are generate giving the prompt that what you can do you can find tune this model it is also possible you can also F tune the division model and how to fine tune again they have given all the let's say article here fine tuning everything they have given if you just go to their documentation you easily learn even I I will also show you in future okay how we can do the fine tuning of the large language model for this we'll be using another technique called p e f T okay that means parameter efficient fine tuning what is PF I will tell you parameter efficient fine tuning because what happens these kinds of large language model is very huge and I can't train this kinds of model actually on my uh this kinds of machine the Google collab actually I'm taking because it's a huge model huge parameter for this we have to follow this parameter equation fing process okay that time I'll discuss what is the use of that and how we can find tune those example on example and all okay everything I'll try to clarify as of now I'm only the exploring like uh the service actually it is having so that you can get familiar with okay that are the things actually we can perform with this particular platform like how we can do text to speech generation with the uh llm okay uh with the help of this hugging face platform so again I have to install this Transformer library because inside that uh only I'm having all the let's say if I search for hugging fish so if I go to the model section so now let's say we'll be working with the audios that means text to speech now if I click on text T to speech see uh it is having actually different different model OKAY different different model actually it is having but the model actually I'm going to use this model called Sono bark small model so this is one of the Transformer Bas text to Audio model created by Sono okay now if you want to read about this you can go ahead and try to read about this particular model even they also given the example even though they have also given the collab notebook how you can use it see this the collab notebook they have given but so many things they have written so what I have done I just simplified this notebook and this notebook I created okay now let me show you how you can perform the text to speech Generation Now for this first of all I have to import the uh pipeline from the Transformer and here is the text guys so this text actually I'll be converting to the audio now see python is a high level uh uh general purpose programming language this is my text now in the pipeline I want to perform text to speech I Have to Give and I have to give the model so here I'm giving my model ID this is my model ID bark small model then device is equal to CODA because I want to load my model inside my GPU now it will give you the output and output would be a uh numpy array so let me show you if I just execute this program see now if I print the output output would be a numpy array okay now I have to convert this numpy array to audio that me audio frequency for this I'll be using one Library I python display audio this Library will be using and I have to give this array as well as the sampling rate okay so here you can see I'm passing my audio that means this array as well as the sampling rate now if I execute it will automatically convert this uh array to the audio now see if I play python is a high level general purpose programming language um see I think you uh hard of okay it is uh speaking that particular text now you can give any kinds of text it will generate the speech for that fine now you can play with different different model guys I already showed you it is having different different model you can try with different different model OKAY U see I was using this model bar uh small model you can also use any other model okay it's up to you so that's how guys you can explore this hugging face it's an amazing platform and it's like very powerful platform guys in the field of generative a or in the field of natural language processing if you don't know about open a open is a platform for the generative a so with the help of open you can Implement any kinds of generative a application open provides lots of commercial large language model like GPT series uh I think you already used hugging F right so this is the similar kinds of platform of the hugging F so hugging F provides all the model all the data set as free but uh provides uh actually everything as a paid that means you have to take their subscription so if you're taking their subscription that time actually you can use their premium model apart from that openi provides some of the model for the fre access so that at least you can do some experiment okay with this model but if you want to build let's say production grid application that time uh they are suggesting to take their premium model so guys through couple of video we'll be learning about this open and its platform so here we'll be learning all the services from the openai how we can use the entire openform platform so everything I'll show you here how we can generate open opena API key how we can access like different different model okay and how we can Implement different different application so let's open our open platform so guys if you want to open this open platform just search for openi login uh so you'll get the first website open platform so make sure you have one account if you don't have account you have to first of all create one account and whenever you are creating an account uh it will ask for your card so try to add your C so you will get initially actually $5 credit here okay I think $5 credit you will get then once you use that $5 credits then what you have to do you have to pay for the services okay whatever Services you will be using whatever model you'll be accessing So based on that you have to pay now you can ask me how much let's say money it will take okay I'll tell you how much money actually it will charge um it will charge based on the token size as of now just try to see the like uh overview of this open then I'll tell you each and everything so here you can see guys after login I'm getting to window is like chat GPT and is like API see chat GPT is also product of a open I think you already know right so this is my chat GPT and this is the product of open that means it is using GPT model you can see if I click here it is using GPT model OKAY GPT model so GPT has like different different model VAR like GPT 3 is there 3.5 is there four is there even uh recently one model has public GPT 4 and this is another like powerful model they have published apart from that it is also having some multimodel like uh uh it can generate text to image like Deli model is also there right then it can also let's say generate like text to text from a audio that means whp model they are using so it is having actually different different model I'll tell you what are the model it is available so first of all click on the API part so now see this is the API interface but as of now I'll go to the playground see this is the playground that means if you're opening this uh openi for the first time so what you can do you can test different different model here you can see but again I'm telling you guys you you have to first of all create your account and make sure this $5 is uh let's say credited in your let's say account okay otherwise you won't be able to use this uh playground okay that means you want you won't be able to access this at the model so make sure your account is active Okay then after that you will be using so whatever let's say chat operation usually perform with the chat GPT the same thing you can perform here okay so here you can select different different model you can see so by default it is GPT 3.5 turbo you can also take GPT 4 om mini GPT 3.5 turbo 16k okay that's how different different model it is available okay so here you can give the prompt and here you can pass the system instruction that so I'll tell you about that what is system instruction so whenever let's say we are using GPT model we are having two kinds of let's say API the chat completion API and other is like the completion API okay so both has the difference I'll tell you now here you can also perform the assistant related task let's say uh if you want to create your own assistant okay you can also use this service you can also do the text to speech generation okay with the help of this openi you can also perform the uh completion operation that means sentence completion operations so you can write one sentence it will complete the entire sentence all its entire story okay so all kinds of model it is available even it is also having Del model apart from that actually they are also having something called Del model Del is a text to image generation model if you are giving any kinds of prompt it will generate image for you now it is in the chat GPT also they integrated this functionality let me show you so this is what I will select create an image now it is asking for a prompt okay it is asking from a prompt so let's give a prompt a dog is flying on the sky let's see this is my prompt let's see now see it is generating the image so guys as you can see this is the result I got that means here I pass the text prompt and it is generating the image okay so like that they also have one model called Deli Deli to let me show you so Delhi Del 2 so this is one of the model uh I think recently they have also published Del 3 okay Del 3 is also there so this is actually text to image generation model you can give different different prompt based on that actually it will generate a image right so guys you can open this playground and you can test different different model okay as part your requirement now let's go to the dashboard so let's say you want to create uh like generate application without writing code so what you can do you can use there UI interface so from here actually you can create different different assistant system and all if you want to fine tune these are the model that mean GPT model you can also fine tune from this these Services it is also possible then it is also having batches Storage storage means uh it provides one vector database services so you can also use the vector database services to store your vector representation and no need to worry uh I will also discuss about this Vector database why it is required and why we'll be using Vector database with our large language model and if you click on the uses uh you will see like uh your uses limit that means let's say if you are have being uh $5 credit so how much you have used here so everything it will show you here now you can also generate the API key I'll will tell you how to generate the API ke so with the help of this API key actually we will be interacting with our open a platform okay otherwise you can't use those are the model okay without this API see all the model actually they have hosted in their server so you don't need to download this model in your system everything will be accessing through the API okay this is the best part here now this is the documentation guys you can see related all the task they created the documentation let's say if you want to perform any kinds of task if you want to see the models like what the model it is having see these are the models actually it is having so GPT 40 GPT for mini gp355 Delhi I already told you about Delhi TTS that means text to speech whisper so you can see whisper is a model it general purpose speech recognization model it is trained on large data set of diverse audio and um is also multitask model that can perform multilingual speech recognization that means it's a speech model actually even it can also work with different different langu languages okay even it is also having embedding model with the help of embedding model we can generate vectors and why we have to generate the vectors I think I already told you now in the text pre-processing and text representation session so first of all what we have to do we have to uh let's say convert our uh text to uh embedding representation for our model let's say you want to F tune okay you want to F tune this openi model that time what you have to do you have to use this embeddings okay to find you let's say you want to create any kinds of gener application definitely you have to first of all generate the embeddings okay of that particular text whatever documents you are having so that's why embedding models are required we'll also learning how we can use this embedding model whenever we'll be doing the projects that time actually we'll be learning now it is having also some GPT based model you can see so these are the GPT based model okay this is called actually completion model uh we can use completion API only okay to use this model I'll tell you how to use that them and all see everything they have given okay everything they have given let's say if you want to do the fine tuning so there is a fine tuning guide they have also given okay so all information they have given in the documentation and this is the one of the best resources to learn this open if you want to let's say learn anything just go to the documentation they have the proper explanation with the code sample as well okay great now this is the API reference now if I click on the API reference you can see this is the API reference that means let's say if I want to use their uh let's say model and all how to call call with the help of API even how to call with the help of python C code okay everything they have given as an example you can see different different example they have given but you can see there there are so many things they have written but I don't need all the let's say concept here so whatever actually let's say concept you need to master this openi uh so I will show you each and everything that means we'll be learning about uh chat completion API completion API and we'll be learning another super important concept which is nothing but uh function calling okay open function calling so these are the thing we have to learn here so yes guys this is the overview and this is the introduction of the openi uh I hope you cleared now in the next video we'll be generating One open API key okay then after that actually will be uh doing some handson on this opena that means we'll be accessing different different model with the help of API key so to generate the opena API key so first of all just click on the dashboard and here left hand side you will see one option called API key just click here and now see I already created one API key previously that's why it's showing but for you it would be completely empty now if you want to create a new API key just click on create a new secret API key now give the name let's say I want to give let's say test one or anything you can give it's up to you now what you can do you can uh give the permission uh only read only permission or whether actually it's restricted okay you can give different different permission but I want to give permission uh for everything let's say I want to read I want to write everything I want to do that's why I will be selecting all now I'll just simply create the secret key now see this is the secret key guys just try to copy and try to save it somewhere and don't share the secret key with anyone otherwise they will uh able to access your account okay I remove it after the recording that's why I'm showing you now uh just click on done now see my your API has created that's actually you can create different different API key and with the help of one API key you can also create multiple projects so there is no issue with that so guys I think you remember I was talking about this playground and I told you with the help of playground you can do different different task and you can use different different model okay now see this model is having some of the parameter okay so these are the parameter is having so going forward whenever we'll be accessing these are the model through python code we'll be also using these are the parameter right so the first parameter you can see called tempor so what is temperature parameter see temperature is a parameter if you decrease the temperature parameter close to zero that means you are telling your model just try to be stick okay with the let's say prompt whatever prompt user is giving no need to take any kinds of risk and don't generate any kinds of random output if you're not sure try to give uh I'm not sure I'm not able to generate but don't give any kinds of random output that means you are creating you are giving the Restriction to the model okay it will only work uh with the true okay true generation okay true data generation okay this is what actually temperature parameter do that means you can decrease close to zero that means if you want to get a more stick output that time you can give close to zero and if it is close to one that means you are telling your model try to take risk okay whatever response you are generating it doesn't matter but try to be more creative here okay this is the idea here there is another parameter called maximum token maximum token means like you are setting the maximum tokens let's say let's say whenever you are giving any kinds of prom to the model and model is giving any uh let's model is giving out output right and it is also a token okay it is also a token and you can set the token limit like how how many tokens you want to get as an output so that time actually you can set this maximum token let's say maximum token is 256 it will give you 256 token output okay I'll discuss about these tokens so there is a token counter inside this openi with help of you can also count the token then there is another one called top P top p is nothing but like how many let's say output you want to generate from the model how many response you want to generate from the model model let's say top p is equal to one your model will give you only one response let's say top p is equal to two your model will give you two response okay and from the two response you can select which one is the best okay that's how you can play with these are the parameter so if you want to learn more about it you can simply hover so they will give you the description of this parameter and all so these are the parameter actually we'll be using frequently that's why I already told you here so guys uh yes this is all from this video so in the next video we'll be doing the environment setup like we'll be doing our local uh environment setup like what the tools and let's say service you need uh for this uh genv project implementation we'll be doing all the setup then after that we'll be performing the Hands-On okay of this open a platform uh let's say sometimes actually we'll be using cloud services sometimes actually we'll be using local setup okay so that's why for the local setup what are the tools and Technology we need everything will be making the setup in this video so the first uh tools actually you need which is nothing but anaga okay anaga distribution so this will give you actually python interpreter so inside that actually we'll be uh creating the environment will be set uping the package okay and we'll be implementing our genbi application so if you have already anag in your system it's completely fine but if you don't have what you can do you can simply click on free download and you can download this particular anaga in your system so I already install anonda so let me show you so this is my anaga guys so if you have installed successfully you will see these kinds of window like anaga prompt anaga Navigator if you're getting this kinds of window that means uh your installation is completed and the installation process is very simple only just click on next next next and install the tool okay in your system now the next thing you need which is nothing but visual code Studio why we need the V visual code Studio because uh see we'll be writing the code okay and to write the code I need a code editor right that means ID integrated development environment so either you can use pyam either you can use visual code Studio but personally I prefer visual code Studio that's why I'll be using visual code Studio in this particular course fine so again you can install with respect to your requirement whatever operating system you're using you can install this visual code Studio in your system now the next thing we need the git okay git is nothing but it's a let's say client for the GitHub I think you know if you have already familiar with GitHub so if you want to let's say comit any kinds of code in the GitHub what you need you need this git client okay and if you install the git actually will get one B terminal which is called actually git bash okay so sometimes actually we need this G bash because with the help of G bash will be executing different different Linux command because going forward we'll be implementing genv n2n project so there I need this G bash to execute some of the Linux R command Okay so that's why make sure you have this G bash install in your system fine and again you can um install from here just click on this button and it will uh download it then you can do the next next and you can install this G bash in your system so as of now these three tools actually I need for your local setup and once uh this setup is ready guys then I think we can start our implementation so in the next video I'll show you the handson on this open a that means we'll be accessing different different model we'll be exploring CH uh like completion API will be exploring completion API will be exploring function calling of the openi okay everything will be exploring one by one so as I already told you openi having two kinds of API that means if you want to use open model uh it is having two kinds of model one is like CH chat completion model one is like completion model so we'll be exploring both of them so here you can see we are having different different model so these are the model actually related uh chat completion model you can see these are the chat completion model and apart from that it is also having completion model so if you go to the base model section so I think there is a option called base model let me find so here's the base model guys zpt B model and this model is nothing but it's a completion model okay it's a completion API now what is the difference between chat completion model and completion model I'll tell you so before that uh what I will do I'll just uh open up my visual code Studio and there I will uh do the openi let's a package setup and we'll set our API key and we'll start our implementation so what I can do I can open up my local folder and inside that you can create a folder let's say I will create open okay open demo inside that I'm going to open up my uh visual Cod studio so this is my visual code Studio guys let me Zoom then I will also open up my terminal you can also open up your terminal G bash okay whatever you are using you can open it here see I have opened up my G bash you can also open up your anagon The Prompt whatever actually you are using whatever teral you are using you can open it here okay so I have integrated my anaga with my G Bash that's why you can see B has been activated okay you can also integrate anaga with your let's say G bash for this you can simply search on Google you will see the uh like process okay how we can set your anaga with your G bash otherwise you can also use your anaga directly okay it will also work okay anything you can use I'm using my G bash here fine now here the first thing uh we'll be set uping our open Package see if you want to use openi so you have to install one package actually so if you go to the documentation let me show you so this is the open a so if you go to the quick start section so first thing what you have to do you have to export your open IPI key that means you have to first of all collect your open IPI key and you have to add it there okay so we have we have already collected our open IP I think you remember then second thing what you have to do you have to install one package called uh openi okay with the help of openi package you can access all the model that means you can access all the let's say chart completion API completion API everything you can access here okay now see you can access access different different model okay you only need to give the model name and you can access the model f so let me first of all install this package so I'll go to my vs code and here I'll create a file called requirement okay requirements. txt so the first pack actually I'm going to install called openi so here I'll be installing one specific version of the openi that's 0.28 why 0.28 because this is the stable version so uh see openi has different different version even currently they have updated their package so in the updated package what happens actually so sometimes actually we will get the error so that's why I'm using one specific version you can also install the latest version it will also work fine now the next package actually I need pandas why pandas because I want to list down all the let's say open model through my code and I want to show as a data frame that's why I need this pandas library then another Library I need called python. whyb because I need to manage that secret key okay secret API key whatever API key you have collected from our opening right dob so with the python. package you can easily manage this API that means we'll be creating a DOT EMV folder okay inside that we'll be writing that open IPI key okay this is the idea so here let me paste my open IPI key guys so this is my open API key guys I have already pasted and here you have to give this particular key name and here you have to give this key name open API key equal to you have to pass your API key here whatever API key you have created okay I think remember in the double quotation now let me save F now let's me install this requirement so guys before installing these are the package first of all you have to create a virtual environment here so to create the virtual environment you can execute this command cond create ipenn give the name of the environment let's say I will give um open AI okay open a demo this is my environment name and uh I have to specify my python so here I'll be using Python 3 point 10 and hyen Y and why 3.10 because again 3.10 is the stable version of the Python okay that's why we are using because it supports all the library okay and hypen y means I want to create I'm giving the yes permission now see if I execute the command it will create the 3.10 environment uh inside my anaga then after that we'll be activating then we'll be installing all the requirements there this is the idea so guys as you can see my environment is created now I have to activate it so to activate this is the command cond activate open AI demo okay it should be activate sorry H now see my environment is activated now I'll be installing this package so I'll just write keep install ienr requirement. txt so it will install all the packets one by one here so as you can see my installation is completed now let me clear my terminal now here first of all what I will do I'll create a jupyter notebook file I'll just create uh click on on new file and I'll create a file let's say open AI demo 1. ipy NB okay ipnb file is a jupyter notebook file and here you need to select the Kel I'll select my python environment so the environment I created uh called open demo so let me refresh see open demo is there I'll select it now if you want to test it just give the any kinds of let's say code here let's say print hello it should execute now see guys it needs this uh IPI Cal package to run this uh jupyter notebook so let me install I'll click on install so it will install all the necessary things uh it needs to run this jupyter notebook after that you will see that this code would be executed here so let's wait so as you can see all the necessary package has installed and now I'm able to execute my code in my jupyter notebook fine all right now we'll be importing some of the library here so let me import operating system then I need my openi then I also need so to import theb you have to import like that fromb import load EnV okay load. EnV now see if I execute it will import all the library now if you want to check any version of any package simply you can write this command so P show let's say I want to see the open version I'll give open a here now see it will show you the summary of the openi openi name version summary okay homepage author everything it will give give you okay now the first thing what I have to do I have to set my open API key if you check the documentation I showed you the documentation this one this documentation if you check the documentation so the first thing what you have to do you have to set the Opia API key okay and if you're using python uh program so that time you can set the open key like that so just open call your openi package and inside openi package we have one attribute called openi API key okay API key so equal to uh first of all what I have to do I have to load my API key so to load the API key and to load this uh API key from the EnV folder what you have to do you have to take the help from load EnV package we have imported right so just try to write load. EnV okay now after that just write this one o dot uh G en EnV Okay g EnV inside that you have to pass the key name so key name is nothing but this is my key name open a API key I'll pass it here okay and it will give you open a API key I'll store it here now see if I simply print it now see it should load the API key now see it is loading my entire API key fine now let me comment it as of now I don't need to show now this open AP ke I'll pass it here now see if I execute this code so it has set my open API key okay inside my environment okay you don't need to do anything that means openi will automatically load this API key right now from the package itself okay now as I already told you open is having different different model so if I click on the model section you you will see different different models is there so if you want to list down all the models so what you can do you can use this code snippit so open AI dot sorry openi do model do list okay it will give you the Entre list of all the model now see if I execute now see it is giving me all the list of the model it is having but I want to only see the I want to only see the data Okay so here I'll filter out the data now see these are the model now if I want to show as a data frame what I can do I can use pd. data frame I have to import pandas first of all so import pandas as PD now PD do data frame and inside that I'll pass this data whatever I'm getting fine now see if I execute it will give me as a data frame now see all the model ID object created date as well as the owned buy okay see everything it is showing now see you can see different different model now as I already told you there are two kinds of API you will get uh one is like uh chat completion API other is like completion API so here you can see we are having different different model so if I want to use these are the model first of all we have to know what are the models actually uh my uh chat completion model and what the models actually only completion model that means when I have to use the chat completion API when I have to use the completion API so for this you can simply go to the model section now let's say you want to use this GPT 3.5 turbo if I click here now see this model is a chat completion API model okay if you want to use this model you have to use the chat completion API and if I go to the base model section so this is a completion API that means you have to use completion API for this model okay now let me show you some example of chat completion and completion API so first of all let's try to see the completion API demo okay let's say I want to use this GPT 3.5 tarbo model GPT 3.5 TBO model see so again if I go to the documentation so here is the model guys GPT 3.5 TBO I have to use chat completion API and how to use CH chat completion API if you click here that means you have to use uh chat. completion okay do create this particular Cod cipit so let me show you you can also write like that so here uh I'll just call uh open AI dot uh chat completion there is directly one function you will get called chat completion then you can call this create okay create one and inside that first of all you have to give the model name there's a model is equal to I want to use which model GPT 3.5 turbo so this is the model so you have to give the name like that fine okay now the second parameter you have to pass the masses okay and message should be a list here now see how to write the masses so they have already given the example that means the first thing what you have to give you have to give the role so Ro you are giving system okay system you are a helpful assistant that means you are giving a system prompt here I think you know like large language model is all about prompt okay you have to give the prompt here then you are giving the user prompt that means what whatever user want to ask so user will give it here so let me show you how we can pass this prompt so the first thing what I have to do guys I already written so the first thing you have to give the role as a system that means you are so here the first role you have to give as a system that means you are giving the system prompt and what is the content of the system prompt you are a helpful assistant you can give any kinds of prompt here let's say you are a helpful assistant you are helpful translator you are a helpful let's say uh chat bot anything you can give the prompt here so going forward we'll be also learning about prompt engineering there I'll try to clarify what are the prompts actually you are having okay different different prompt you can set here now the second role you are giving as a user that means whatever user will ask okay whatever user will ask so if you open the chat GPT also in the chat GPT back end they have given the system prompt as well as the user prompt that means as the user we give our prompt in the chat gbt but in the back end they have given the system prompt okay in the chat gbt that is the idea fine now let's give one prompt as a user here so let's say prompt is equal to prompt is equal to I'll give uh let's say hello how are you so this prompt uh here it will come okay as a user prompt now it will give me one response and that response I'll print here simply okay now see if I execute the program so it will give me the response so it is giving invalid request at missing required parameter message you provide message okay so let me check so it should be messages okay not messes now see it should work now see it is giving me the uh response right now and here is the response guys okay if I show you so here is the response hello I am here ready to assist you how I can help you today if I want to extract this content only that means this uh let's say response only what I can do so simply I can copy this example as it is and here let me paste so here you can see first of all I have to go to the choices okay because it's a dictionary I have to take the choices so let's take Choice first of all I'll take the choice now choice is nothing but it's a list so I will take the first let's say item of the list now I have to go go inside the masses now I need the content only now see it will give me the content only okay hello I'm just a computer program so I don't have any feelings but I'm here to ready to help you how I can assist you because every time whenever you will execute this uh program it will give you different different response okay it will generate different different uh response for you this is the idea fine now what is the main benefit to use this chat completion API that mean chat completion model see in the chat completion model you can pass multiple prompt okay here you can pass multiple prompt so how let me show you so here I have given one example so this is the example guys see here I have created actually three prompt hello how are you second prompt I am uh 25 years old I'm a programmer now third prom I've given tell me about me that means in the prompt itself I have given my data and I'm asking tell me about me now this the same way I have created my chat completion API I have initialized my model and in the message section right now you can see the first role actually have given the system role that means you are a helpful assistant second role I have given my first prompt third role I have given my second prompt and fourth role I have given my prompt three okay that means you can pass multiple prompt here this is the main benefit to use this chat completion API that means in the chat GPT also so if I go to my chat GPT let's say here I give my data hey I am let's I'll give the same prompt here this is the prompt I want to give I'm 25 years old I a programmer now you can see memory updated it it has memory updated right now if I give this prompt tell me about me now it is telling you are 25 years old programmer who created courses and playlist okay see now it is giving me the answer the related my information because it it has remembered okay it has remembered my previous prompt so this is what actually they're using something called chat completion model that means it can understand multiple prompt okay not one prompt it can understand multiple prompting so here you can see I have given one demo so I'm giving the same thing hello how are you I'm 25 years I'm a programmer tell me about me now see if I execute the program right now it will able to give me the answer see based on the information you provided you are 25 years old programmer is there anything specific you would like to know or discuss I hope it is clear now what is the use of chat completion API and and what is the benefit to use the chat completion API model that means chat completion model got it great now we'll be tweaking some of the parameter here so the first parameter will be tweaking which is nothing but mix Max token okay so what I'll do I'll copy the same example my previous example now instead of asking this question I'll write what is python let's say this is my question okay now there is a parameter you can set called Max token maxcore token let's say I want to generate only 25 tokens okay okay 25 tokens now see if I execute the program right now it will only give me 25 tokens output now if you want to see that you can copy and you can go to the open AI token okay tokenizer now go to the first website now here you can simply give it this particular let's say uh response you have copied now you can see maximum token 25 that means whatever token limit you have set so it will give you that particular token output only now if you want to see the detailed information you can simply print the response instead of printing the content now see so now if I execute this program you'll see that my completion token 25 fine now it will charge you based on the token limit so if can go to the openi pricing so in the pricing section they have given how it will charge you so so guys as you can see this is the openi pricing page so here they have given the pricing as per the token limit you can see this is the input token this is the output token that means if your input token is that much that means 1 million and if your output token is let's say 1 million so you uh you will charge that many of dollar okay that much of dollar so you can see this different different example so this is GPT 40 mini this is the embedding model you can see if your input token limit is 1 million token and if your output token is and if your output token is also 1 million tokens so he will get 0.020 okay $2 only it's like very less amount now see different different model with respect to their different different price price okay so you can check all the models see Audio model as well as the image model assistant API okay see whatever assistant API actually you will be using and Vector SS okay every model they have given the pricing okay every model they have given the pricing so that means it will charge based on the token limits let's say whatever token it is giving you the output as well as the whatever tokens actually it is receiving as an input it will first of all do the count operation how it will do the count operation so with help of this tokenizer so they have one inbu tokenizer inside that it will automatically make the count now you can see I'm having total 141 character now you can see like how many character they are considering to calculate only one token I think four to five okay four to five character they considering to count one token here okay this is the idea so here they have written you can see a helpful rule of thumb is is that one token generally correspond to four characters okay uh whether it's a four character or sometimes it would be more than four character of text for the common English text okay this is called actually one token so they have given each and everything you can export here now let's get back to my code editor now I think this parameter is clear okay what is Max tokens here now I think you remember in the playground also I showed you this parameter so if I go to the playground see in the playground also I showed you this parameter Max Tok okay now it is I think it is clear now I'll show you the next parameter right now so the next parameter is nothing but our temperature parameter so you can see I have given the same example but uh one parameter I'm using called temperature and I already told you what is temperature parameter means uh it will give the randomness okay Randomness to the response like how much Randomness you need let's say if it is close to zero your model would be more stick to the let's say prompt you have given and if it is close to one that means it will try to take some risk and it will generate some random output as well now let's say here I have given 0.6 that means I'm telling my model uh try to be actually balanced okay balance with the prompt user is giving try to give some creativity some somehow even U also try to be strict with the prompt user has given now see if I execute the program now see now the response actually I'm getting this is the uh this little bit different response from the previous response you can see so here is the response I was getting python is a high level inter programar Simplicity and visibility it supp multiple paradigms okay now see this is the another response actually I'm getting okay that's how you can increase and decrease this parameter size but what I saw like people are using this parameter around 0.5 to 0.6 to 7 like that okay no need to decrease and no need to increase much but if you sometimes need it you can increase otherwise you can decrease okay it's up to you now there is another one that n parameter uh n parameter means it will give you like how many response you need from the model let's say if n is equal to two it will give me two response now if I if I execute the program see it has given me two response so this is one response and this is another response now if it is three it will give you three response see one response two response and if I open in a text editor two response uh this is one this is two and this three okay that's how you can get multiple responses if you want so this is called actually n parameter like number of response you want to get here great so yes these are the parameter you can play with guys because these are the parameter we'll be using frequently now see uh with the help of chat completion model you can perform different different tasks so let me show you so you can give different different prompt so let's say here I have given a prompt give me a sentiment of this sentence okay this movie is amazing now I think you know this sentiment would be positive now let's see whether my model is giving me right answer or not now see this sentiment of uh of the sentence this movie is amazing it's a positive that means it's working fine nowart from that you can also give any other prompt let's say I'm given give me the Hindi translation of this sentence this movie is amazing now see it should give me the Hindi translation see so whatever things we used to perform in the chat JP now okay that means we can perform multiple task I want to do language translation uh then sentiment analysis anything I can perform here the same thing you can also do here okay because it is using the same model only okay and we able to access those model with the help of API key that means whenever you are uh sending this request uh it is first of all calling that API and API is actually hitting the model and model is giving me the response and this response actually we able to see this is the idea only I hope you're clear now let me show you another prompt let's say detect the language of this sentence this movie is amazing so the language should be English see it is the English uh language okay now you can also generate code okay you can also generate code uh with these are the model so I've given a prompt give me a python code to add two numbers now let me see see this is the code I have given to add so here I got the code to add two numbers in Python okay so that's how actually we can create different different application with these at the large language model fine so yes guys this is all about our chat completion API now let's try to export the completion API as well so as I already told you so here is the definition of completion API guys you can see uh hooks you up with text comp comption from a single prompt that means it can only support single prompt you can only pass one prompt here in the other hand actually in the chat completion you can give multiple prompt to keep the conversation uh flow intact okay as I already told you you can give multiple prompt and that prompt actually this model can remember but in the completion API you can only pass the one prompt here okay this is the idea in completion API you can pass only one prompt now if I show you some completion model model section and let's say this is the GPT base so this is use actually completion API and these are the model are available related completion API okay now let me use this Babs 002 model and let me show you one example see if you want to use completion API that time you have to call this completion open Dot completion okay open. completion. create not chat completion you have to call completion only and inside that you have to give the model first of all which model you want to use let say I want to use this Babas model that babz model okay and it will take the prompt so let me Define an prompt here let's say this is the prompt okay what is python this prompt I'll pass it here now I'll print the response okay now if I execute now see it is giving you the response okay it is giving you the response so that's how actually you can give uh actually only single prompt here and whatever let's say parameter you saw temperature then maximum token then n parameter you can also give the same parameter in the completion API as well okay it will also work but uh see we'll be using the chat completion API a lot we'll be using chat completion Model A lot going forward okay because I have seen like people are using this chat completion Model A lot instead of completion API because here we can pass multiple prompt okay this is the main advantage okay I hope it is clear so yes guys uh this is all about our chat completion API as well as the completion API and this is all about a Hands-On part on the open a platform okay because see going forward we'll be using these are the concept only to implement any kinds of project even I will also Implement some of the project I'll tell you how we can Implement different different projects with the help of openi that time also you will see I'll be using these are the concept only okay now in the next video we'll be learning about another super important concept inside openi called function calling okay again it's the very powerful concept inside openi so we'll be learning that function calling see first of all you have to understand what is function calling and what is the use of the function calling so for this I will go to my Blackboard and there I'll try to clarify okay see function calling helps the open a model to interact with different third partyy API let's say here you are having one API let's say here you are having one API okay let's say you are using uh one databases okay databases so let's with the help of API you are hitting the database and database is giving you some kinds of response which is nothing but a just on response because most of the time whenever you will use API right API to hit any kinds of website or database you will get the juston output let's this is a weather okay weather data database and with the help of wether API you are hitting this website and it is giving you the Jon response that means wether related data now what you can do with the help of function calling okay with the help of function calling inside open a you can use open a API open AI API okay to interact with this model because let's say this is my large language model OKAY openi model now with the help of open API key what I can do I can interact with this model that means with help of function calling what it can perform okay it can perform the Comm communication with this data communication with this data that means this model can directly communicate with this data that means whatever response you are getting whatever response you are getting from this database or let's API you can directly communicate okay you can directly communicate communicate uh with the help of your large language model okay this is the main power actually this function calling will provides okay that means you don't need to manually extract this information and manually let's say feed inside your model you don't need to do like that you'll be using function calling and what your model will try to do it will directly let's say communicate with this particular response whatever just on whatever response you are getting it will directly do the communication okay so that's why with of function calling my large language model will be capable enough to communicate with any kinds of third party API okay third party API this is the main benefit to use this one and without this function calling uh what you have to do you have to manually extract the data and you have to manually fine tune this model OKAY manually fine tune this model and again it's a very hetic task like because again it's a large language model and you can't do the fine tune okay easily okay and again it is having lots of cost involvement so that's why open uh this function calling helps us to do this communication that means instead of like feding the data in my model directly function qu calling will try to uh make the communication between my response of like API response I'm getting and this particular model okay this model will try to communicate with my output okay it can be any kinds of API it can be not only weather API it can be any kinds of API any heart party data okay so that's why openi supports actually different different uh third party actually integration you can U connect like different different platform you can connect let's say slack you can connect let's say different different uh uh website you can connect different different database okay directly you can connect and it can directly to the communication with the help of function calling okay now let me show you one example I think then this part would be more clear so what I'll do I'll go to my code editor and here I already created one file you can see now we'll be exploring the function calling here again what I will do I'll import all of the lid then I'll select my cardal and I'll set my environment variable H now I can use the same example from here just to test whether everything is working fine or not I can copy see everything is working fine okay there is no issue instead of printing all the response I can only print the content so as I already told you uh it can actually communicate with any kinds of third party API so as a third partyy API what I will do I will use one API here so called rapid API okay rapid API inside rapid API you are having different different API whether it's a weather API okay and you API it is available so this is the link so let me open this link guys I will search on Google so this is the rapid open.com and make sure you have created One account so for me I already created One account okay for you also you have to create one account now here what you have to do you have to search for the API now simply left hand side you can click on view all categories now I need actually wether API so I'll simply search here wether now see different different weather API is coming but I need this AI weather by Metro Source okay this this one I'll click here now see initially if you're doing it for the first time you will see one button here subscribe okay subscribe to the API you have to do the subscription that means you have to take the basic plan that free plan okay you can also take that premium subscription but you can take that free plan free plan actually will give you some of the a request you can hit right now I already do the subscription that's why it's showing me test endpoint now simply what you need to do you need to copy this code snippit copy this code snippit and with the help of that I have written a function let me show you so this is the function I have written so the function name is uh get current weather okay so it will take the location and it will return you the current weather in that particular location okay see this is the U that means the same code now here see the same code actually have copy pasted same code I have copy pasted you can see you can see the same code I have copy pasted and this is my API key rapid API key and this is my rapid API host and don't share with anyone otherwise they will also able to access your account okay I'll delete it after the recording now with the help of request package I'm sending the request and it will give you the response and that response actually I'm doing the returning and as a Json format because I already told you now there any kinds of API will give you as a Json response and that particular Json response I want to uh do the communication with my large language model okay this is the idea now I think yeah everything is fine now let me execute this function now if you want to test what I can do I can call this function inside that I can give any location let's say I will give Delhi and it will give me response now see the place ID uh area India latitude longitude okay see all the information it is giving me okay all the information it is giving me uh related Deli you can give any kinds of place okay it's up to you you can give Bangalore Delhi Mumbai okay anything you can pass here now if I show you the response so this is the response okay this is the response I'm getting as it just on fine now what I will do I'll just connect my large language model with this response okay with the help of function calling for this you need to create a functions see this is the function format you have to follow it's a uh it's actually you can see again it's a kinds of Json format only so you can see I have written a list inside that I have mention a dictionary only okay so this is called actually function again if you go to the documentation if I go to the documentation let's say documentation so they have one function calling you can also start here function calling see whatever things I explained they have written here also now see this is the format you have to follow okay this is the format you have to follow that's how you can write the function calling here so I already simplified this thing and I written a function okay so similar like format you can also follow now first thing you have to give the name so current get current weather so I have written my function name here you can see this the function name get current weather that means this will hit that particular function because this is my third party API okay you can also consider database here but as of now I'm considering the function now this is the description get the current weather in given location parameter object properties location string and the final thing required location that means it needs the location okay if I if it needs to give any kinds of output first of all it need the location because my function takes the location out input okay I hope it is clear now let me initialize my functions now I think remember whenever I was using this chat completion API okay chat completion model that means I can give multiple prompt I can add multiple prompt okay in that particular let's say um message section so that concept actually will try to utilize here see here I have given an example let's say this is uh here I'm using chat completion model and I have to prepare the message function I think remember this message function inside that I can give multiple Ro right that is multiple prompt so what I'm doing here I'm appending one prompt here you can see user masses masses. append because it's a list I can append roll user content user message okay now it will add this particular prompt inside my message now see if I execute now if I show you the now see if you want to see the output see this is the output hello how I can assist you now if you want to see the message only now see in the masses one prompt has been added okay this is the user prompt has been added that's how I can also add multiple prompt again what I can do I can do the append operation see again I have taken another user message what is the temperature of Del now I'm appending in the message now roll user content user because this is a user okay user message only now again I'm adding the message and I'm also adding the function the function calling I have defined now here this particular function calling so with the help of this function it will try to understand okay I need to execute this get current weather okay this particular function and this particular function will return return the Json output that means the data data related by that and it will automatically connect the large language model in that particular data see the same diagram I showed you now here it will give you the response and my large language model will connect through function calling okay now let me show you so if I execute it now if I show you the masses now see two masses has been added two prompt has been added hi there now second prompt what is the temperature of Del you can also ignore this prompt I've just only given because I just wanted to show you okay whether you can add any new prompt or not okay this is the idea now if you see the completion that means the response see this is the response you got see as of now it is only calling the function you can see it is only calling the gate weather function okay and here you have given the location of Dilly you can see it is automatically extracting the location from your prompt okay you can see location D you have given okay now if you want to get the information what you can do now if you want to get the actual information what you can do let me show you let's say say you want to see the masses you can also see the masses this is the massage it is calling my function and this is my location now this is the response okay this is the response now if you only want to extract let's say the function name what you can do you can extract like that so it is inside function called name okay and it is my get current weather function and if you want to see the location so what you can do insert function called insert argument location you can see argument location I'm extracting the Delhi here see this is my location okay now this response actually I'm getting I need to pass to my large language model for this you can execute this code uh message. append response the response actually I'm getting I'm again adding to the message that means as a prompt okay as a prompt actually I'm adding I think remember here now um here I showed you you can give multiple prompt this prompt this prompt that means I was providing the data Based on data I was asking the question the similar things I'm doing the response actually I'm getting this response entire response I'm getting now this is I'm passing as a prompt okay as a prompt data and on top of this font I'll be asking the question okay with the help of function calling see the same thing I'm doing appending the response message. append now I'm appending the role as a function name function content location okay this thing actually I'm passing one by one if I show you the entire masses see this is my entire masses right now now I can initialize my gbt 3.5 tarbo model inside that I'm passing my message as well as the function calling now it will give you the accurate response see the prompt you have given um the current here is the prompt you have given I think remember what is the temperature of Dilly now see this is the temperature of Dilly right now okay and it is coming like that because it's a 32 uh 32° cius so degree is a special character that's why it's coming like that okay you can convert to special uh see you can convert this UN code to special character okay it is also possible now see here I have executed actually line by line that's why you can see you can also execute as a snippet of the code it will give you the complete response now see instead of giving DHI I can give let's say Mumbai now let's see the Mumbai temp see uh it is not able to fetching the Mumbai temperature currently so what I can do I can give any other location let's say I give U as of now I can comment this two line it's not required I'll give let's say Bangalore now see this is the current temperature of the Bangalore okay so that's how actually you can uh uh uh give any kinds of information any kinds of API you can connect with your large language model with the help of this function calling technique and it's like very powerful technique guys trust me it's like very powerful technique okay if you're uh interested learning more about it like what are the things you can connect you can go to their documentation okay they have written each and everything what are the things you can connect with it here right okay so yes guys this is all about from this video I I hope you liked it now in the next video we'll be implementing one projects whatever concept you have learned so far uh the project name is telegram bot okay telegram bot with the help of openi that means we'll be creating a chat bot and we'll be integrating with the telegram okay so all the fundamentals we have already discussed now it's time to implement one projects uh with the help of openi so in this video I'll show you how we can Implement one telegram chatbot with the help of open that means uh here we'll be using one chat completion model that means one large language model we'll be using called GPT 3.5 uh and with the help of that actually we'll be implementing one chatboard and we'll be integrating this chatboard with the telegram platform okay so make sure you have the telegram guys uh it can be a smartphone telegram application or it can be your desktop application as well anything you can keep both will work okay so here I'm going to use my desktop telegram you can also use your smartphone telegram it will also work fine so before starting the implementation guys first of all let me show you the architecture diagram like how we'll be implementing the entire projects then after that we'll be doing the setup and we'll be starting the implementation so guys let's say uh this is the user that means you so you will be asking one query okay you'll be asking one query and this query will go to the front end okay front end of our application so here front end wise we'll be using something called telegram fine then what will happen uh this s will go to the back end back end means our openi openi API okay open a API then this API will access the large language model that means here will be using GPT 3.5 okay you can also use any other model like GPT GPT uh 4 you can also use GPT 4 or it's up to you okay I I I think I showed you how to like select different different model there is a model list so if you click there you will see the model ID so that particular ID you have to write there okay and this model is I think you already know this is a chat completion model okay why that completion model because it can take the instruction that means multiple instruction you can give multiple prompt you can give okay you can also create with the help of completion model like the babz one okay I already showed you uh which will also work but what I feel like this chat completion model will be more powerful okay this is the idea here now it will happen this uh uh large language model will give the response so where so where it will give the response it will give the response to the backend API that means your openi API and openi API will send the uh let's say response to the front end okay front end means our telegram okay and from telegram actually user will again get the response response let's this is the response and this is the question okay so that's how actually we'll be implementing the entire projects okay uh this is our actually high level architecture of our project now what I will do uh first of all uh I just need to get my open API key and I already told you how to get the open API key so make sure you already created your open API key and you keep it with you now in my computer I'll just create a folder here and I'm going to name it as uh telegram chatbot okay telegram chatbot and inside that I'm going to open up my visual code Studio H then I'm also going to open up my terminal here you can also open up your um command prompt then you can also open up your anagon prom it's up to you now here the first thing what I have to do I have to create one virtual environment so to create the virtual environment just write cond create tyen in uh give the name of the environment let's say this is my t Okay telegram so I'll just write tbot uh specify the python version let's say python is equal to 3 let's say 8 okay I'll use it 3.8 uh you can also use 3.9 but let's use 3.8 then H can bu um yeah now let's create the environment so my environment is created now let me activate just write cond activate teleport now let me clear now uh what I will do I'll just create a requirement. txt file requirements.txt so inside that I need to mention all the let's say library I need to implement this project so here you can see um front end wise actually uh I'll be using telegram okay and to integrate my chatbot with my telegram I need a python package that means this package will communicate with my telegram so inside telegram will be generating one uh let's say API token so with the help of API token we'll be communicating with our telegram app right so for this actually we need one python package so let me show you this package actually the package actually I'm going to use so guys as you can see this is the package actually we'll be using uh the package name is AOG so as you can see a is a modern and fully ason chromos uh asnr framework for telegram B API and this is the complete documentation of this AI even they have also given the sample code like how we can connect with theam and all okay they have discussed each and everything uh but you can see they have written actually too much line of code but uh that many line of code actually is not required so what I've done I just uh made it uh like simple and I created one Basics template for you if if you want to connect with your telegram okay so how you can connect for this uh what kinds of code you have use I already prepared one for snippet okay I'll share with you so first of all let me mention this package name inside my requirements so so the first package I'm going to add called a fine now the second package I need open and I'm going to use the same version of the openi I already used in My openi Demo then I need another package called python uhv why python. EnV because I already showed you if you want to manage the secret key so you can use this uh python. to load that secret key from the environment that means EnV file okay this is the idea now let me save now what I will do simply I'll install everything in my uh environment so for this just write this command so P install tyen at requirement. txd so guys you can see my installation is completed now let me clear my terminal and now first of all we'll be testing our uh this one telegram whether we are able to make the connection without telegram or not so for this I'm going to create a folder here called resarch inside that I'm going to create a file I'm going to name it as eobot eore bot so here we'll be creating one uh Eco actually Eco functionality that means if you're sending any message okay to the let's say chat that means to your telegram chatbot it will give you the same message okay this is called actually eobot that means whatever message actually will be giving as an input that message actually will be getting as an output okay so that means I just wanted to experiment whether I'm able to successfully connect with my telam or not okay this is the idea here but before that I just need to create this EnV file now inside that first of all you have to uh write your open API key so let me just write my open API key so this is my open API key I think you remember I already created this API key okay now let me save now just open up your telegram app so here I'm using my desktop telegram so you can see this is my desktop telegram to search for BFA so after searching BFA you will see different different B further but you have to take the verified one you can see this is the verified one now just try to open it up see I already opened now see uh previously I already created some of the bot with the help of Bot F that's why it's coming um that's why here you can see some of the uh like older masses but if you're opening for the first time you won't be seeing any kinds of masses okay you will see a start button you just click on the start button okay then it will give you the suggestion okay what you want to do here so here I want to create a okay I think my screen is visible okay so here I want to uh let's say create a new uh actually telegram bot so for this what you can do you can write this command new Slash new okay new bot you can see new bot just select this one now see now it will ask you all right a new bot how are we going to call okay please choose a name for your Bot now you can give any kinds of name here so let's say I will give U my live okay my live bot let's say 24 let's say this is my bot name I want to give now if I hit enter see it's telling good now let's choose the username for your Bot it must end with bot like uh this is example ter bot or terore bot okay so you have to give a username and that username should contain underscore bot okay at the last so I'll give the same name let's say my live bot okay 24ore bot now if I hit enter now see my bot is created now it is telling congratulations on your new bot you will find your Bot here but before that what you have to do you have to collect this user uh you can see uh use token so let me collect this use token I'll copy okay and I'll open up my visual code Studio inside environment what I will do so here I'm going to paste it as of now and you need to also give the key name that means this is my telegram bot token okay now I'll be mentioning inside my string so here we have collected two secret key one is my open API key another one is telegram bot token so with the help of telegram bot token we'll be authenticating with our bot actually we have created here you can see this is my bot if I click on the URL right now see this is my bot now if I click on the start now see there uh you won't be seeing anything because this is not connected yet now see if I send any message here so you won't be getting any kinds of response because as of now we haven't made the connection so here first of all we have to make the connection and how to make the connection with the help of this telegram bot token okay and this open API key we need to access our GPT model because this is my main large language model right with the help of that actually we'll be getting the actual response this is the idea here fine now in the eobot uh I'll be writing some of the code to connect with my telegram okay so as I already showed you so this is the AOG documentation and they have given the code snippet you can use to connect with the telegram right but I already told you this uh that much of actually code is not required so I just created a Basics template let me show you so here first of all let me import some required Library so you can see I have imported some library but here it is coming this yellow mark because I haven't selected my current environment right so right hand side below you can see there is one option so my base environment is selected now I have to select my own environment which is nothing but telegram B okay now see this arror would be disappeared now see these are the package you have to import like login aam from aam you have to import bot dispatcher execute executor and types okay if you see the documentation also they are importing the same thing see they're importing the same thing as well fine but as I told you they have written so many line of code I just simplified the code okay that's why um my code might be a little bit different um okay from the documentation this is the idea now I'm loading because with help ofb I'm I'm going to load by okay that means my secret okay inside uh inside my environment now operating system I need because with the help of operating system I'll be loading now O.G I think you remember previously you also did the same thing and why logging is required because if you see the aam uh if you see the aam they are also using login okay so you have to uh write the login okay login here see basic config loging so by default it will take the log because it will let's log all the information in the back end okay because see this is their implementation they're suggesting to use these are the let's say Cod cipit okay that's why I'm using it's not my implementation so whenever you are using any kinds of let's say framework or Library first of all try to check their documentation whatever things they are suggesting based on that you have to write the code okay no need to do any modification at the very first if you understand their implementation then you can do the modification but the core implementation you have to always keep as same okay this is the idea here now the first thing what I have to do guys I have to set my I have to set my I have to load my API key right so for this I can use this load EnV now simply o dog uh EnV inside that I can pass my key name let's say I want to load my telegram bot token I'll pass the key name here fine so it will return return me my telegram bot token now if I print this one my telegram bot token now see if I execute the file right now it will print the bot token so let me show you so python let's say my it is inside my resarch folder resarch I want to execute this eobot okay sorry uh eobot dop so guys uh you can see it is showing me one error it is telling from aam import bar dispatcher executor types import error cannot import the executor from a okay so it is uh throwing me one error so to solve this error what you have to do so you have to create actually uh python uh let's say interpreter 3.7 that means python environment you need uh 3.7 so let's create one another environment so I'll just write Conta create typen in uh let's give the name let's say mybot python is equal to 3. uh 7 actually I want to use typ and while okay now let me activate Honda activate mybot now let me clear and let me install the requirements right now so P install ienr requirement. dxt see it has installed all the packages in my environment okay so I already installed that's why it's telling requirement is already satisfied but for you it will take some time okay so once it is done now let's clear my terminal and now if you execute the command uh this command python research E.P that means if you execute this Eco bot right now now see it should work now see it is printing my uh API token okay it is printing my API token right now telegram B token fine that means it is working now now let me comment this line it's not required now what you have to do you have to first of all initialize the login so that's how actually you can initialize the login so you just need to write login. basic config Lael is equal to loging doino okay because if you check the documentation they suggesting like that okay you have to configure the loging like that okay after that you have to initialize the bot and dispatcher so this is the bot and dispatcher so inside that you have to pass the API token okay now see what will happen you can see from AIG I imported bot right because I want to Conn connect with my telegram bot the bot actually have created now if I want to connect what I need I need the API token tegram bot API token yes or no right so here you can see I'm passing this bot token inside a token actually attribute so what will happen this bot will be initialized that means it will authenticate with my credential if the authentication is correct that means this uh statement would be true okay if it is true that means my dispatcher will be connected okay dispatcher means let's say the synchronization that means whatever message I want to pass okay so it will go to my telegram B okay this is called actually synchronization so it will be connected okay it should be connected that means this is the authentication code okay with your telegram I hope it's is clear now fine then after that I think you saw they they have written different different function with the help of asence and Aid keyword okay asence and Aid keyword so what is the use of asence and Aid uh see uh this is the concept of python if you don't know about python so what you can do you can check out our YouTube channel okay okay so there actually I already uh let me show you so guys you can see this is our YouTube channel so there I already created uh like python playlist so there I already covered each and every topic okay you need you need to master inside python so there I already explained what is asence and Aid okay so you can check those video so let me tell you as a high level what is Asin and AIT see what this Asin and AIT will do it will keep on sensing okay it will keep on sensing your update that means if you uh update anything okay if you update anything in the code base it will automatically get that update okay that means what happens actually let's say whenever U you update anything in your code so you don't need to send the request okay you don't need to save and send the request it will automatically sense that it will automatically sense that and it will send the update okay so this is the work of asence and a and if you want to use AI you have to use this particular keyword okay ass and Abit with a function so I already created two function let me show you so I'll tell you what this function will do so this is the first function guys so the function name I have given command start handle okay I think you saw whenever I started my telegram board okay whenever I started my telegram bot so there was a start button see I given SL start whenever I will give the SL start my bot will start okay my bot will start see if I show you the bot father if I give SL start see bot father started and it has given me all the suggestion actually I can perform here so this kinds of functionality I want to implement even and if I want to implement so for this I have to create a function and with the help of asence and a keyword I have to give here inside the function now you have to create a decorator uh your dispatcher decorator now inside that there is a function called message Handler inside that you have to pass the command like what kinds of command you want to pass let's see if I give SL help as as well in my bot father slel so it will give me the uh menu okay what are the things I can perform with the help of Bot father that means if anyone using my bot for the first time they can get the information with the help of start and help okay SL so I I want to give two commands SL start and SL help if if you are passing this one so what your Bot will do so what your Bot will do your Bot will reply hi I'm a eobot powered by AOG so this message actually it will give now here you can give any kinds of messes okay you can give any kinds of message I have given this message now let me show you how it will work so for this what I have to do I have to start my bot so for this this is the syntax you have to write so inside this keyword you have to write executor start pulling then you have to give the dispatcher object and as well as the you have to give one parameter skip updates is equal to true what is Skip update is equal to true I'll tell you later on as of now just try to remember this parameter you have to give okay if you check the documentation they are also giving the same thing now let me save and now see if I execute my program my eobot see so it has connected now see it has start pulling now if I go to my bot let's say this is my bot now see if I give let's say SL start here so it has given me hi I'm eobot Power by aam now if I give let's say slash help it will give you the same thing because you have mentioned two command there I think remember you have mentioned two command never from that if you give any commment let's say slash hello it's not working if you give any other message also it's not working okay that means it will only work whenever it will get this two command and here you can pass any sub masses okay I have given powered by aam or anything you can let's say powered by buy here you can give my name so once you changed anything just try to reexecute the code so I'll just stop the execution with the help of contrl C now if I reexecute now again I will go to my Telegram and now if I give let's say slash help now see it will give me hi ma'am eobot powered by buy okay I hope it is clear now but see it is not able to handle my casual response okay let's say if I'm giving any other message let's say hi hello okay hi hello whatever it's not giving me the response because I have to create another function for this let me show you so here I will create a function called Eco that means it will give me the same message again and again okay so this is the E Eco function and see I'm using the same syntax only message hander now see here I'm not providing any kind of command I'm not providing any kind of command because see whenever I'm giving my casual message this is not a command Okay so that's why you don't need to mention the command that means whatever message user will give that message actually it will send okay it will show you as an output you can see with the help of AIT now let me save and again I have to re-execute let me stop the execution now reexecute my code now if I go to my telegram now let's say if I just write High it will give me high if I write hello it will give me hello if I write let's say I am buy it will also give me I'm buy because it's a EOB bot we have created that means I'm successfully able to connect with my bot the bot actually I have created in my telegram that means telegram collection is completed okay telegram connection is completed there is no issue that means we are able to communicate with the front end now we have to make another functionality that means back end API that means we will be using open API uh to uh let's say process the response sorry process the question whatever user is asking we'll be taking the help from the llm llm will give the response and this response I'll will be sending to the front end again okay so now let's create our actual application so what I will do uh outside of resarch I'll create a file I'll name it as let's say main dot uh Pi okay main. Pi inside that I'll be writing all the code so what I can do I can import all the necessary Library again you can see have imported all the library even I also imported here as well okay apart from that I'm also importing openi as well as the system package okay this is the idea now see this application I'll be creating little bit advanc because if I show you my chat jpt now so let's say this is my chat GPT let's say if I give any message to the chat gbt let's say I need a python code to add two numbers sorry I think my prompt is incorrect it should be add again I can give the prompt I need a python code to add two numbers okay now I think it is perfect now see it is giving me the code okay but see it is giving me with the function but I don't need the function what I can give I can give uh without functions okay now see I just given without function it will automatically remember I'm asking this particular response okay it has remembered okay it has remembered my previous input so this is actually using one memory okay temporary memory so I also want to implement this kinds of temporary memory inside my chart B so for this what I will do I'll just write a class here I'll just name it as reference okay reference so inside that what what I will do I'll just write a Constructor and this will and it will return actually none okay so inside that I'll just write self dot response and it should be empty initially okay that means as of now let's consider this is my empty memory okay this is my empty memory that means whatever question I'll be asking as a uh like as a temporary memory that question actually I'll be saving here so that if I want to ask any new question my previous question my model will try to understand okay it will try to remember now here you can also pass the doc string so let's say this is my uh class I have written to store previously response from the chat GPT API okay you can also give open API opena API okay this is the idea now let me uh load my open API key as well as my uh um this uh telegram bot token so first of all I will load my open IP key and I'm setting my open I key then I will also load the telegram bot token okay this is my telegram bot token fine then let's initialize this reference class so here I can initialize I'll just write reference is equal to my reference then I'm going to uh Define my model name let say which model I want to use so model underscore name is equal to let's say I want to use GPT 3.5 tar model if you go to the openi platform okay if you go to the openi openi models see here is the different different model and I want to use this uh 3.5 series actually CBO model okay this model actually I'm using right now fine now same way I have to initialize my dispatcher as well as the bot because it will authenticate uh with my telegram the same code guys from my previous uh let's say uh file and copy pasting okay I think you remember so we are initializing our bot and dispatcher so here the first thing I want to create a function so this function actually will do the welcome okay so if you give let's say start uh start command it will welcome you so this is the function I've written guys you can see simple function using using the same concept okay same concept so this is the function dispatcher message Handler and here is the command only start okay if you give start command it will give you hi I'm a tbot created by buy how I can assist you okay this is the message actually it will show you that's it now if you want to execute you can simply copy this line and here you can past it that's it okay now it's a dispatcher object DP previously WR as a short form but now what I did I just written full full name okay this is the idea now let me execute and let me show you so I'll open up my terminal let me stop the execution now let's say if I execute the file right now now I need to execute my main. Pi file so clear python main. by now see if I open up my bot and if I give SL start right now so it is giving hi I a Teleport created by papy how I can assist you that means it is working fine now let me stop the execution H great now I also want to create a help our function that means I showed you now if I go to my B father and if I give SL help so it will give me all the Manu actually I want to part from here so I also want to give one manual function in my bot so for this I have created a function and I named it as a help see this is the function so it will take the help command after that it will show you this message hi there I'm a CH GPT telegram or I can write I a telegram board okay created byy please follow this command start to start the conversation clear to clear the past conversation and help to get the help menu okay I hope this helps now it will give you this uh this actually menu okay now see here I've written clear SL clear to pre like clear the previous conversation now let's say uh if you're saving any conversation and if you want to clear it so you can use the clear function for this so what I will do I'll just write a function named clear so here I can write so it will just do the clear operation on the previous conversation see I think you remember we initialized our reference here so inside reference we're having one variable class variable called reference so here I'm doing the clear operation see reference. reference I'm making as empty that means whenever I I will save something okay inside the variable and if I call the Clear C past function it will clear that particular response okay this is the idea if you go to the chat GPT as well and if you write forget my past prompt it will forget that okay it will remove that memory so same way I'm creating the same functionality here and to execute this clear past so I will pass one command so I'll just write clear this command clear so it will automatically do the clear operations so for this I will be writing another function here so function name is clear and it will take the clear command and it will call this particular function you can see clear past okay then it will give you message I have cleared the past conversation as the context okay this is the idea now I have to write my main code that means my uh main brain functionality of my application so for this I already prepared the open code see this is the openi code and this is nothing new guys this is nothing new just try to see here I'm using chat completion API okay now let me check everything is fine or not now you can see guys everything is fine uh so I'm creating the chat completion API and role assistant content I'm giving because you can see reference. response first of all it will check this response okay this response if there is any response or not okay if not that means it will act like a you are using for the first time that means there is no previous context but if you are starting for the second time let's say I think remember here in the chat GPT I have given a prompt I need a python code to add two numbers that means one response it will remember and when whenever I'm asking the second second question it will refer my previous let's say question I have asked okay the same thing actually happening here that means it will first of all check whether you are having previous response or not if not that means it's a completely new rule otherwise uh it will refer my previous let's say response okay now this is the user message then it will give you the response this response actually I'm uh only getting the content and I'm printing in the terminal and I'm also printing in my user interface that means in my Telegram and it is also updating the response okay you can see this reference response is also getting updated okay now if you call this clear P it will also do the clear operation it's a simple code I have written now let me show you how it will work so I'll open up my terminal now let me execute my app now if I open my bot let's say if I just write uh uh Slash start I think this command I already showed you now SL start SL help it is working F sorry SL start okay now see if I give any casual message let's say hi see it is giving me hello how I can assist you let's say if I give hello how are you doing today let's say I'll ask what is python this is telling python is a high level programming language okay now I can also give the same promt let's say give me a python code to add sorry code to add two numbers see this is the code I got now I'll ask give me as a function now see that means it is remembering my previous context now if I give slash clear I have cleared all the past conversation okay now if I give the same message give me as a function now see here it is giving me the function okay it is giving me the function but not these kinds of function that means my previous uh let's say question function okay that's why I uh created this clear okay clear functionality as well okay now you can ask any kinds of question okay whatever question you can ask in your chat JB the same question you can also ask here okay there no issue so that means we have created one beautiful application now one thing I want to show you this is keep update is equal to True let's say if it is true what will happen let's say if my application is offline right now let's say I'll stop the execution let's say it offline now if I give any message let's say hello now see it is offline okay it's not giving you any response but if it is online let's say if I execute the program right now now let's say my application is online okay now see still it is not giving me the response still it is not giving me the response because let's say sometimes it's possible your application will go offline and if user is giving any question when it is online again it should return the answer right but it's not giving so for this what I can do I can stop the execution and this parameter I can make it as false okay now let's save my application is offline let's say hello now if if I reexecute my program see it will automatically take the hello okay hello message whatever you asked during offline now see it is giving you the response okay so this is one of the amazing parameter you can play with if you want to let's say keep your application offline but if you want to reply it okay when you are online you can update this particular parameter fine so yes guys this is the um like chat bot we have implemented uh you can also share this uh bot with your friends and family so what you need to do you just only give uh need to give the username let's say this is your username of your Bot now if they startch with this username they will be able to access your Bot okay and if they're asking any question they will also get the response okay that's how just try to ask your friend to use your chat bot okay you have developed with the help of open so in this video actually I will show you like how you can f tune your uh gpt3 model okay with your custom data so basically what I'm going to do here so basically here we'll be funing add classifier okay to distinguish between two sports like basball and hockey so basically we are going to perform one classification task here okay so here I will uh like take one sports data and with the sport data okay I will uh train my uh gpt3 model which is nothing but Ada okay adaa classifier I think you already know it has various model okay if you click on the model so ad is one of the one of them okay so uh let's install first of all open AI and uh here you don't have to worry about your system configuration because here you are using uh open API okay so all the training and all the you can say computation everything will be performed on the uh on their website itself okay on their uh you can say engine itself okay so you don't have to worry about so you just need the API key and just try to open up your Google collab okay and try to start the training that's it so because see uh it has like millions of parameters so it's not possible to train in our system okay so that's why they have proposed uh API okay gp3 API instead of giving the raw model to us okay then uh this command actually you can actually upgrade your openi so let's upgrade it also and here I will uh import my data so this data actually is already available inside psyit learn data set okay like 20 News Group data set the name of the data set is okay so here here you have two categories one is like baseball and hockey now if you want to see the example the first example so this is the data basically it kinds of email okay and here you have the news sports data okay uh if you want to see the label Target so you have uh sports baseball and hocky okay now if you want to see the first one see the first example I shown here first data set with respect to that I'm showing my um first Target okay which is nothing but it's a b baseball okay now if you want to also see the count so you have total example uh 1,197 uh baseball has 597 okay example and hcky has 6 600 so basically this data is not imbalanced so it's fine now inside data preparation first of all we need to prepare the data so what kinds of preparation we need to do here if you see uh if I show you the target so it has actually uh r. sport. baseball okay so this is the additional information I don't need okay so I need to suppress that so if you just run this code so basically what it will do it will take all the data okay and it will create two columns one is like prompt and completion okay so why I'm creating prompt and completion because if you uh go to documentation of U open a so here is a uh uh section called fine tunes okay just click on fine tunes so they have given like how you can find Tunes okay uh gpt3 model so here uh one thing they have mentioned data preparation I think uh here F tune guide and if you just go below prepare your data set okay so if you just read read it okay if you just read this uh okay entirely so you will get to know you need prompt and completion okay so that's why I have given this name prompt and completion so prompt is nothing but your data okay your input data and completion is nothing but your level okay so that's actually you need to prepare the data so once it is done now um you need to convert them uh a file format called jonl okay so this is the command just run it okay now let me show you what is jonl okay so if you just refresh here and let me download it now if I open it okay so this is the same data format okay like this is your prompt and at the last you have the completion see this is the completion okay and if you see this is the same format if I come here this is the same format okay so that that is why you need to uh you can say convert your entire data frame to jonl format okay is done now openai has a data preparation Tool uh so if you just call open a and from Tool itself you just call prepared data okay so it will actually uh uh I mean prepare your data first of all it will take this jonl okay see I'm just passing Sports to jonl hypen Q it will take this one and will do some analyzing okay if something is okay wrong with your data set it will throw error otherwise it will actually uh uh fix it okay so see I have run this command so it has generated two file which is nothing but isort to prepare train Zess validation Zess okay so it is also it will also do like Trend split okay you don't have to do it separately okay so this thing actually you need to run and here also they have written okay they have their own data preparation tool you need to execute so whenever it is done now uh this is the section actually you can uh execute okay to F tune your uh you can say model okay this is the training command actually so here you need to change this API key because this is my older API key so I will what I will do I will change it uh with with the newer one you can also read it from uh secret okay uh but I will uh give it here just for Simplicity now here API find Tunes create okay now here actually you need to give your data path okay so this is my train data path and this is my validation data path but here one issue actually I was having so I was uh trying to actually uh execute this command because here if you see if I show you my model okay so find TS here I have like already trained to model models okay with the same data so here actually you can't give the same ID again and again okay if you give this same name so it will create the same ID again and again okay and it will give you uh error like just give a new ID okay so that's why uh if you have done training one time okay you just change the data name otherwise it's fine okay if you're doing it for first time it's fine just keep it as it is otherwise what you can do just rename this name with a unique name so I'll just rename so I'll just give Sports uh 222 okay because this name is already present in my model so I that's why I'm changing the name sport 222 okay similar wise just change it also here Sports 22 this is your validation okay and computation metrix uh okay everything you providing and at the last you're selecting the add model OKAY epox is not required so it will basically uh okay automatically observe whenever your loss is not decreasing or accur is not increasing it will stop the execution okay so now everything is prepared now just click on this one so it will take the data and it will start you can say training your okay it's telling okay it's telling this data is missing so let me do LS okay so here one mistake I have done here I have given one okay one won't be there so just remove the one and now I think everything is fine now let me execute again so guys uh actually uh training takes a lots of time so uh what I'm going to do I'm going to show you my previous notebook okay I did the training so basically whenever you will click on the command so actually it will start the training and it will start the epox okay see this is the epox actually it will be running okay and once uh your training is completed it will save your model okay it will save your model so where you will get the model just come here okay come here and here you need to refresh this page okay so if you just refresh this page now if you just click on the model and at the last there there would be a section called fine tunes okay inside fine tunes actually you will get your model okay see I train add a model okay and this is the ID okay it is the ID and basically this is the date actually when I train this model model okay so this model actually you have to use okay whenever you'll be doing the inferencing so now how you can do the inferencing so this is the code so basically you can also uh like uh see the evolution Matrix okay performance Matrix actually you can U see okay uh you can also save it as a result. CSV okay and here you can also plot this uh accuracy score okay this is the accuracy score and uh this is my data okay this data set actually I'm like taking one prompt okay and here actually I'm doing the generation okay basically I'm loading my model so why do you need to give your model so let me show you yeah so here actually you need to provide your model name okay the model name actually you'll be training okay here see I I have took this model okay uh so this name actually you need to copy and you need to paste it here okay and it will load the model from the opener itself okay and it will like uh do the inference see this is the score of your hockey and baseball and after that if you want to see okay this is the baseball and hockey so that's actually you can uh okay see see the example okay U like uh do the inferencing so yes guys I think you got it like how you can uh find tune your openi uh like gpt3 model okay with your custom data set and if you want to learn more about fine tuning I will Su just try to explore this U documentation it is pretty good documentation just try to read everything not only like uh classific you can also do it from summarization and other task okay for that actually you need to prepare the data like you need to learn how to prepare the data okay so yes guys I think you got it uhu this was all about from this video and yeah that's it actually you need to learn about open a and uh like gpt3 okay so once you are comfortable with this API I think you can do anything okay so as I already showed you the opena platform even I already use different different model Even in our previous video we also implemented one projects called telegram chatbot so here we'll be exploring another actually variant of the model so the model name is whisper so I think I showed you the whisper let's say introduction what is this whisper model so let me show you again so if I go back to my uh let's say openi platform so here if you go to the model section and uh if you just go below this is the whisper model guys so let me open it up so you can see whisper is a general purpose speech recognization model it is trained on a large data set of diverse audio and it is also multitask model that can perform multilingual speech recognization as well as the speech translation and language identification okay so this is actually a speech based model that means you can uh give any kinds of speech or audio so it will give you the transcript of that particular audio so here uh what we'll be doing let me show you the Entre diagram see here we'll be implementing one audio transcript translation let's say uh here here I will pass one audio file okay it can be MP3 or any other format you can pass uh I'll will pass to the whisper model okay and Whisper model will return return uh transcript of this audio okay transcript that means it is a text the enter audio text actually it will return then what I will do I will use one um actually chat completion model that means here I can use any kinds of model let's say here you will be using GPT okay gpt3 so I'll pass this transcript to the gpt3 and here I will provide a prompt uh Translate okay translate so here as an input you will pass one language okay you'll pass one language and it will give you the um like translated text okay translated text okay so this is the entire actually high level diagram so for this I'll open up my uh local folder and here I'm going to open up my uh visual code Studio so this this is my visual code Studio then I'm also going to open up my terminal here okay I think you remember previously we created one environment like openi demo so let me activate the environment instead of creating again and again so what I can do I can just write P activate open AI demo okay so this environment I'm going to use because inside that openi is already installed there right fine now here I'm going to create a requirement file so here the first requirement you need the openi I think openi is already installed but here I'm adding because I want to share this uh material with you so later on whenever you want to install it you can check the requirement. txt file then I also need python. EnV uh I think uh you know why python. because we'll be managing the credential right that means we'll be creating a EnV file and inside that I'm going to mention my uh open API key I think you remember we already created One open API key so this is my open API key okay let me save it here fine now see here I'm going to create a user interface that means see this audio file uh user can upload user can upload this audio file for this I need a web interface okay web application so to create the web application I'm going to use one uh framework called flask so flask is a framework inside python with the help of that you can create the web application okay so let me also install the flask here okay flask now simply what you have to do open up your terminal and write this command P install hyen requirement. dxt for me it is already satisfied but for you it will take some time to install all the packet fine now the first thing uh I'll show you the demo like how we can use the whispar model so first of all let me import openi and it is showing this warning because I have to select my environment I have created openi demo then I also need to import operating system because I want to load my EnV then EnV as well so from EnV import load EnV F first of all I load my EnV so here is my open API key w. gmv then I need to add this API key inside my open API key so open. API key is equal to my open API key fine H I think my authentication is completed now now what I will do I'll just uh open up one audio file so let me show you I have one audio file with me so this is the audio file guys let me play so this audio actually I have recorded python is a high level interpreted general purpose programming language it is very easy to learn and you can use Python Programming in data science fine so this is the audio file actually I have recorded so I just need to open this file so to open this file I think you can use this U open and inside that you can pass this uh name so recording dot MP3 okay MP3 and again it's a binary file so you have to give the mode uh RB read binary fine so it will give you one uh object let's say audio underscore file okay so I have successfully uh loaded this file now if you want to get the transcripts what you can do you can use this open uh sorry open a whispar model so I'll just write open a do audio this is Audio model I think I told you so you have to call one F function called Translate Okay translate and inside that first of all you have to mention the model name so I want to use whispar one model so it is having different different model I want to use whar B model then you have to pass the audio file so audio file now here uh it will give me the output now let me print the output H now let me show you so guys here is the text I'm getting python is a high level interpreted general purpose programming language it is very easy to learn and you can use Python Programming in data science that means uh whatever uh things you can uh actually hear in the audio the same thing you can see as a text so it is like very powerful model it will give you the accurate result always okay you can try with different different audio I think you will get it now what I have to do I have to translate okay I have to translate this transcript uh in a different language okay for this I'll be using uh gpt3 or GPT 4 model whatever you can use here okay and we'll be creating one user application so that user can upload this audio there okay this is what actually will be implementing so for this what I can do I can create another file here I'll just name it as app.py H now I'll copy paste the same code this code actually I'll just try to copy request here because here we are authenticating with our openi only fine now apart from that I also need to import another package called flask okay uh because with the help of flask will be creating this uh user application okay that is why I'm importing flask so you can see from flask I'm importing flask request so redirect URL this is not required as of now just un ify render template okay so with the help of that actually we'll be rendering our web webp for this you need a basic HTML file I'll tell you how we can create a HTML file you can also get different different template you can also use that fun fine now the next thing I'll be initializing my flask to initialize the flask just write this code this is the code guys flask u in the parenthesis you have to give underscore name now you can ask me how to initialize the flash go to the flash documentation you can see that okay you can see the code the basic template they have already given so first of all here I'll just add one configuration so have. config that means whatever audio actually user will upload so this will save so this will save actually first of all let me just write upload unders folder this will save inside a folder name static static okay now let's create this folder left hand side I'll create a folder name static okay inside that this audio will be saved fine this is the idea now let me create a route so I'll just give at theate app. Route so as you can see this is my route so it will look for actually two kinds of let's say request one is like get request and is like post request okay if it is matching what will happen this will execute this function so here I'm going to create a function called main okay so this will execute this main function so inside main function the first thing I have to check uh whether it's a post request or not so if uh request okay if request. method is equal to is equal to if it is post okay if it is a post request that means if you upload if you upload one audio file and if you click on the button that that means it would be a post request okay that is the idea if it is a post request so what I will do first of all I will get the language okay I'll get the language that means user will also pass the language like uh in which language he or she wants to translate this uh let's say transcript okay that's why I also need to take the language input so here I'll take the input I'll just write request do form uh so from the form itself I'll take the language now how I'll get the language because for this I'm going to create a HTML file so let me create a folder here first first of all if you're using flask you need to create this folder guys called templates okay templates inside that I will be creating a sorry it should be templates not spelling is not correct H now it is fine now inside that I'm going to create a HTML file called index do HTML okay now here I have written one very simple HTML code it will only uh accept the audio file see here I've given the title and this is like very basic uh CSS code I have added here just to like show my front end little bit actually beautiful that's why now see it will uh user can upload one audio file okay you can see user can upload one audio file uh input type is file and user will also able to give the language input that means in which language he or she wants to translate that transcript okay then there would be a button called upload so whenever uh they will upload so what will happen it will hit the post request okay it will hit the post request and that time my you can see method is equal to post that time it will hit this route okay it will hit this route and I will then I'll be able to get the language and whatever audio actually is submitting everything I will get okay from the back end this is the idea only fine so this is a simple HTML code and now you can ask me why to get these kinds of HTML code there is a one beautiful website you can follow called bootstrap okay bootstrap so here you will get all kinds of FD HTML CSS template you can go to the example section and see different different actually template you are having you can uh get their HTML and CSS code even you can also SE let's see you need a file uploader button okay file upload see different different codes in if they have already given okay that's how actually you can also get the code you can also get the code okay so I just referred this website and I uh actually let's say collected this HTML and CSS code and I modified okay with respect to my requirement this is the idea now I think everything is fine now what I will do I'll go back to my app app.py and I'm getting the language then I also need the file okay so to get the file I'll store inside a file and I'll just write uh request. form uh request dot not form do files actually because it's a file type input right so it should be a file you can see here I have mentioned it should be a file okay it should be a file type should be a file now once I get the file uh first of all I will check whether this file is available or not if file is equal to True okay if this is not false that means user has uploaded the file that time what I will do I'll just simply save this file where I will save I'll save inside my static folder so this is the code I think you remember we said the configuration okay static okay upload file static so it will save the inside stratic folder and to save this file I need a file name so let's create a file name here I'll just write file name is equal to file do file name okay it will give you the file name now after that you can easily save this file inside stratic folder then I will load my audio so to load the Audio I think you remember I was using this code snippit so I can use the same code here H now see this recording. MP3 would be available inside static folder so I need to also give the path of the static okay stratic / recording. MP3 now the same code I'll be writing here I'll copy and here I'm going to paste it so this will give me the output that means the transcript here I can mention it as transcript okay transcript now what I have to do I have to translate this transcript to the another language for this I already told you here we'll be using something called gpt3 or four model okay so let me initialize my GPT model so I think remember how we can initialize it uh we can use chat completion API so here is the Cod s it guys so here I'm using chat completion API inside that I'm mentioning I want to use GPT for model OKAY GPT for model and this is the message I have given role you can see RO system content uh you will be provided with a sentence in the English and your task is to translate is to language that means whatever language user is giving that in that particular language then role so let me bring it here I can see R user content transcript. text that means whatever text actually I'm getting after doing the let's say I mean audio to text I'm just passing it here and here is my prompt okay here is my prompt I have given to my large language model and this is the temperature parameter and this is the max tokens okay I already explained this parameter okay why it is required now simply what I will do I'll just try to return return this response but I just try to return with the Jony why justy because whatever let's say response you want to render in the HML P it should be Json format okay that's why I have to do the jsonify so inside that I will be passing my response okay and this on ify I already imported I think you remember from here then if it is not a post request okay if it is not a post request that means if it is a get request what will happen it will only render okay it will only render my index.html okay this index.html that means my uh web app okay my web app menu it will open in front of the user this is the idea and to render it I'm using render template function you can see I've already imported it here now if I want to execute my application so you can execute it here for this you have to give the app host and app Port see app.run host 00 that means I want to run in my local host and debug is equal to r that means if you change anything it will automatically update the changes and this is the Port Port number 8080 now let me execute and show you this application so I'll open up my terminal and now if I execute let's say python app.py now it is running on my Local Host now let's go to the Google and search for local host port number 8080 now see if I search so guys you can see this is my my interface okay interface of my application now here you can upload any kinds of uh audio file now let's upload so let's say I want to upload my this audio Now language let's say I want to translate in a Hindi okay Hindi now let's upload it now see guys this is the response I got and this is my response you can see this is the Hindi translation okay this is the Hindi translation whatever actually I had in my audio now you can Al give any other language let's say again I will pass my audio let's say I want to translate uh in the let's say I want to translate in Bangla okay Bengali now I'll upload see this is the Bengali translation I'm getting okay now you can also extract the content only uh instead of like let's say getting all the response but I have printed all the response I just wanted to show you each and everything whatever things it is returning okay I already showed you how we can extract out this content okay from my previous I think session I think remember fine so yes guys that's how actually we can implement this project and we can use the whispar model okay now what you can do you can improve this project you can add some more functionality let's say you want to again convert this text to audio you can also do it for this just go to the whisper documentation and try to check there okay so I hope guys you like this project so if you have like this project guys so please try to subscribe to the channel and share this video with your friends and family so I already showed you openi is having different different actually large language model uh like different different kinds of large language model like uh language model multi model OKAY image model like different different model actually it is having so we'll be using another model uh this is called actually Deli so Deli is having different different like version like Del 2 is there Del 3 is there so we can use openi API to access this model okay so let me show you this Deli model so guys if you go to the openi documentation so here you will see this Deli model let me show you so this is the deli model so as you can see Deli is having different kinds of uh let's say version like Del 3 then Del 2 okay so different different version it is having and Deli is one of the model actually it can create actually realistic image from a prompt let's say here you will be passing one uh like text prompt and with the help of this prompt actually it will generate the image okay the prompt you will be asking the same kinds of image actually it'll try to generate and this would be realistic image okay now let's see how we can use openi API to access this Del model and let's build one uh image generator application so what I will do guys I have uh used the same template as I already used in my previous project implementation I think remember we are using FL there so I use the same template and I just did little bit modification here so the modification I have done uh the entire HTML code okay I've done the modification uh let me show you the application like how it will look like let me clear now if I open up my app.py again so let me go to Google and Local Host port number 8080 so guys you can see this is the interface of of my application so to build this interface I have actually collected this HTML and CSS code from the bootstrap website I think I showed you that bootstrap website right so you don't need to do anything only you can change the title and all okay everything you can keep it as default because you can use this uh HTML and CSS code uh as a template okay let's say you want to build any other application with the same template you can use this code as it is okay if you're not familiar with HTML CSS code it's completely fine you can copy paste from different different website okay now the second changes I have done I have created two route one is my default route that means if user is hitting my uh let's say default route that means port number 8080 so he will get this kinds of landing page okay and to render the landing page actually I'm using render template index.html okay and whenever user is giving any kinds of prompt and there submitting okay submitting button so it will hit this route and it will generate and it will execute this function and this function will take the prompt whatever prompt actually user is giving here I think you can see okay and this prompt will go to the open AI Del model you can see to use the open Del model you have to use this Cod spp it open. im. create okay inside that just try to mention the prompt number of image you want to generate just give the number of image and the size of the image okay everything you can set here now I'm printing the response as well as that and here you can see I'm also rendering on my user interface okay and again I'm running on Local Host and port number 8080 and debug is equal to True means if you're changing anything this will reflect automatically fine so this is the simple modification I have done guys otherwise everything I kept default okay everything I kept default whatever things we have implemented in our previous project so yes guys I think you got it uh using openi is like very easy only you just need to know how we can access different different model rest of the things you can take care okay let's say if you want to create any kinds of application you have to design how you'll be creating okay otherwise the fundamental will remain same now let me show you the demo guys so what I can do I can give a prompt here let's say I'll give a dog is flying and smoking let's say this is my prompt I have given let's see whether it is able to generate the image or not you can give the same prompt in the chat GPT also let me show you chat GPT is also using uh this kinds of image model recently they have published one model called GPT 40 okay GPT 40 so this model is able to actually create these kinds of image okay uh from your prompt now let me pass this prompt a dog is flying and is smoking see it is uh generating two response and let me see my see this one actually it has generated okay this is a curon version even you can also generate the realistic one let me show you another prompt so guys uh this is the prompt I have prepared you can see uh dream like a beautiful girl uh playing the Festival of Color drapped in the traditional Indian uh throwing the colors okay now let me send and let me see the response and if I go to the chat jbt see this is the CH jpt response fine see uh this is the output actually we got okay it's amazing you can see so you can give different different prom like that and you can generate image and you can also control like how many image you need so here I mentioned I think you saw only five images that's why it's giving five images okay and you can also mention the size everything you can mention so yes guys uh this is the application we have developed I hope you liked it and now uh what you can do you can improve this application you can add some more functionality see I think the previous application we created that uh whispar model what you can do you can integrate like both application in one place okay and you can create a complete platform okay that thing I think you can perform okay this would be a good project for you so yes guys this is all about from my side please subscribe to the channel and share this video with your friends and family and please support the channel guys uh if you support the channel so definitely uh we'll be bringing up these kinds of content okay for you and you can let us know what kinds of content you you want okay from my end I'll try to provide so I think as of now we have worked with the large language model I have showed you the hugging face platform even we have also worked with the openi platform there we use different different large language model and whenever I was using these kinds of large language model I think you noticed I was passing the prompt okay uh again uh if I'm talking about chat GPT Google but whatever application you can see in the field of geni all the application takes the prompt as an input okay based on the prompt it will decide what kinds of output it should generate okay that means prompt is everything inside large language model okay whatever let's say large language model you are using whatever generative model you are using prompt is everything here okay you have to give a proper prompt to get a proper answer otherwise you will be getting random kinds of answer from your large language model okay so that's why there is a separate concept inside genbi called prompt engineering why prompt engineering because whenever you are writing these kinds of prompt you have to know some uh technique okay how we can design this prompt efficiently so that I can get the output I can get the effective output I can get the let's say useful output from my large language model okay otherwise what is the use of large language model if it is giving you a random kinds of output fine so that's why we'll be learning about this prompt engineering and make sure you are watching this video till the end because in this video we'll be covering each and everything you need to master about prompt engineering so guys uh as you can see what is prompt engineering prompt engineering is nothing but so prompt engineering is nothing but prompt engineering is the process of structuring uh an instruction that can be interpreted and understood by by a generative AI model that means I already told you now in said generative prompt is everything and whatever prompt actually you are giving to the generative EI model or your large language model okay this should be well structured okay this should be well structured and well organized okay otherwise what will happen your model will give random kinds of output okay that is why here I have written the definition what is prompt engineering exactly okay I hope it is clear now now as a generative engineer you should have some responsibility whenever you will be working with the large language model whenever you'll be preparing the prompt and all see here have listed down some of the points write uh refine and optimize prompts perfect the interaction between humans and AI that means you always need to make sure whether your prompt is perfect or not okay to communicate between human and AI that means you will be communicating with your AI assistant let's say whatever let's say application you are having with the help of large language model okay there is a a good interaction on not okay The Prompt actually you have given you have to always make sure continuously monitor those prompt you have to continuously monitor those prompt whether this prompt is perfect or not and is there any change in the model or not then maintain and up up toate the prompt that means if let's say model model got updated let's say they again did the fine tune that particular model and if let's say previous prompt is not working better in that case what you can do you can maintain and update that particular promt for that large language model so these are the key responsibility you should have as a generative engineer now let's try to understand why prompt engineering okay so for this I'm going to show you one demo I think this demo will give you the clearcut idea why prompt engineering is super important if you want to work with the genbi so here you can see I have written a prompt uh you can see this is a prompt I have written correct my paragraph today was the great day in the world for me I went Disneyland with my mom it could have been better if it wasn't raining you can see some of the spelling mistake is there that means grammatical mistakes are there in this paragraph I have written so I will do I'll give this prom to my let's say large language model so large language model wise here I'm going to use ch GPT okay you can also use Google b or any other actually let's say model it's completely fine but just to show you the demo actually I'm going to use the chat GPT platform later on whenever let's say we'll be implementing different different let's say application with the help of large language model that time actually we'll be using this prompt with the help of python code okay as of now just to show you the demo I'm going to use the chat GPT application so guys as you can see I'm inside my chat GPT now let's say if I give this prompt uh to my chat GPT now let's say if I send it here see what will happen see it has given me straightforward results without let's say explaining this uh like paragraph I have given without let's say asking me any kinds of question it has given me straightforward answer so here is my uh paragraph and here is the correct okay correct of my paragraph correct version of my paragraph today was uh today was a great day for me I went to Disneyland with my mom and it could have been better uh if it wasn't raining okay you can see so here you can see this uh grammatical mistake I did it is resolved okay by my large language model now let's say you are learning about English language you are learning about grammar you are learning about let's say spelling and everything like that means the complete let's say English guidance you want okay from your Mentor but as a mentor wise what you want to use you want to use the chat GPT let's say your large language model that time instead of giving these kinds of prompt to the large language model what you can give so instead of giving the prompt like that you can design your own prompt in an effective way so let me show you another example so guys as you can see this is the next prompt I have designed so here is the problem guys I want you to act as a spoken English teacher I will speak to you in English and you will also reply to me in English to practice my spoken English I want you to keep your reply NE uh limiting the reply to 100 words I want you to strictly correct my grammar mistakes and and typos I want you to ask me questions in your reply now let's start practicing you could ask me a question first remember I want you to strictly correct my grammar and mistakes uh typos and factual errors okay so this is the prompt I have designed okay see previously The Prompt I have given it was like very straightforward prompt I had given right but now what I did I just designed one very powerful prompt here now see what should be the response from my large language model right now so let me give this prompt to my large language model this is the prompt guys the same prompt I have given now let me send now see it is giving me great let's start with a question what is the most interesting place you have ever visited and why did you uh did you find it uh so fascinating okay now let me give the answer let's say the most interesting place I visited India because I loved Indian okay Indian food Indian food okay now you can also do some grammatical mistake let's say here I'll just write like that okay now let's say this is my response I have given to my uh model right now see my model will try to correct first of all you can see here is the correct version the most interesting place I have visited in India because I love the Indian food now see the reply you have given so there actually lots of spelling mistakes were there there are lots of actually grammatical mistakes were there now it has corrected everything now as a learn that you can easily get to know okay so that's how actually you have to uh write this particular sentence okay now you don't need any kinds of actual actually English teacher okay with the help of this kinds of large language model you can easily learn this kinds of syntax yes or no fine now again it is you can see it is asking me one question can you tell me more about your favorite Indian dish that means now this conversation is like more interactive it's not like straightforward answer it is giving me it is like more interactive the way actually human communicate with each other yes or no now yes I can give another response so here I can give um I loved CH uh V okay now let's see the output so here is the correct version I love CH V what do you like most about CH V okay so here I can write the Puri now see this is the correct version I like the Puri uh what do you enjoy about the Puri okay now see this conversation is more interactive now you can um just keep on replying uh to the question actually uh this model is asking that's actually you'll be learning about the correct let's say grammar correct let's say spelling and all yes or no now see with the help of just only one simple prom design I got like very interactive output from my large language model okay this is called actually prompt engineering and that's why it's useful okay that's why it is important because sometimes whenever you'll be creating any kinds of application any kinds of LM PR application that time you have to design The Prompt in such a way so that it can give the correct answer to the audience even it can it can be more interactive to the audience that means those who are using your application so they should enjoy your application yes or no so guys that is why it's like very interesting concept and it's like very important concept inside gener B you have to master now see to master the prompt engineering the first thing you should know about the Linguistics okay what is linguistics Linguistics is nothing but it's a study of language that means whenever let's say you are uh studying any kinds of language let's say English Language inside English language you are having some kinds of uh let's say Linguistics okay what kinds of linguistics you can see uh phonetics is there so phonetics means the study of how speech sounds are produced and perceived okay then there is another one called phology the study of sounds pattern and changes that means whenever we are speaking any kinds of let's say language like how these sounds look like okay how this sounds look like how you're pronouncing this particular word and all this is called actually phonetics and phology got it then there is another one called morphology the study of word structure then there there is another one called syntax that means the study of the sentence structure that means whatever grammar you usually learn inside English then you have also having the semantics that means the study of the linguistic meaning then the next one is pragmatics the study of how language is used in the context then historical the study of language change then so on okay you can see these are the actually Linguistics are available to study about the language okay and if you have good knowledge if you have good knowledge on these kinds of let's say Linguistics definitely you can design a very good promt for the large language model so that's why I have written here Linguistics are the key to the prompt engineering that means if you are having good knowledge about linguistic definitely you can design a good prompt for the large language model now we have already studied about like large language model or our generative a model right so there are different kinds of generative AI models are available like GPT Bart then Lambda Palm Bloom Lama cloudy okay then uh Nemo llm okay generate so these are the actually apart from that like there are so many large language models are available I think I showed you one GitHub right I think you remember open llm GitHub there I think you saw thousands of large language model were there and these are the provider and brander okay like those who are created this these are the actually large language model see all kinds of large language model over the internet all the large language model accept this prompt okay that means you have to give the promt there if you want to use this kinds of large language model okay because this large language model is already trained with huge amount of data huge amount of unstructured data even they also did something called supervised fine tuning they also applied something called reinforcement learning technique to improve the quality of the model that means this model is also trained with the instruction lots of instruction that means they did the chat operation with this model I think I showed you one uh in one video one of my video I already explained how chat GPT train okay so that's why whenever they train with this kinds of instruction data that means they are passing the prompt and whenever you want to use this particular model you also need to provide the prompt I think now it is clear why this prompt engineering is super important and whenever you want to use any kinds of large language model why you have to use the prompt engineering technique that means why you have to give the correct prompt always to the large language model now let's learn about some best practices to design a prompt see if you want to design some best prompt for the large language model you have to keep some of the point in your mind let's say the first thing clear instruction definitely you have to give the clear instruction to the large language model then adopt a Persona then specify the format avoid leading the answer and limit the scope okay so these are the thing actually you have to always remember now let's open our CH gbt and let's try to see some of the best practices okay we can perform whenever we're giving any kind of prompt to the large language model so guys let's say if I give a prompt here let's say I'll give when is the election okay when is the election let's say this is my prompt okay now see if I pass this prompt to my large language model let's see the output it depends on which election you are referring see election can uh be vary by the country definitely because it's the correct one now you are asking what is the election but you are not clarifying okay you are not clarifying in which country you are referring okay that means you have to always pass a clear prompt okay clear instruction to the large language model now see I can give this prompt like that when is the next president election in USA okay now see this prompt is clear and it is like well organized for my large language model now see if I pass now see this is the answer the next US president election election is scheduled for the November 5th uh 2024 okay now I'm getting the correct answer from my large language model but whenever you are not giving any kinds of clear let's say clear let's instruction to the model it will give you unnecessary output and again it's a chargeable because whenever you are using Char GPT or let's say uh any kinds of let's say commercial large language model It is charging based on the token input and output token I already showed you okay how it will count the token and how it will charge so whenever you are getting these kinds of unnecessary output that means unnecessary you are spending your money yes or no okay so that's why whenever you are using these kinds of commercial large language model make sure you have the proper promp so that in just one prompt you will get the actual output you are looking for okay this is what actually you have to always remembered now let me give you another example I'll just write write a code to filter out the ages from data so let's say this is my prompt I have given now see my llm model has given me this this is the output but let's say you are looking for Java code you are looking for Java code but it has given you the python code again what you have given you have given actually uncleared instruction to the model yes or no right so you have to give the clear instruction always now you can write this prompt like that uh write a Java code okay to filter out edges from the data now see now it is the clear instruction to my large language model now I will get the Java code now let's see the next one like the add of the Persona okay like uh what is the Persona exactly whenever you are giving any kinds of let's instruction to the model uh what kinds of persona you have to add up there let's say this is one prompt I'm giving to my large language model write a poem for a sister's High School uh graduation that will be read out to the uh to family and close friends okay let's say this is my instruction I have given to my large language model now see uh here is the response I will get so here is the response I got that that means this is my poem now if you read this poem actually this is not actually much interesting the poem actually I was looking for now what you can do you can actually uh give the Persona okay you can give the Persona whenever you are giving the prompt so now let me show you another prompt I have design for this so This Is The Prompt guys now here I'm writing write a poem as Helena Helena is a 25 years old and amazing writer her writing style similar to the famous uh 21st century poet uh rupik cor so I think you know about rupik cor you can also search about rupik see she is the actually Canadian poet and illustrator okay you can read about her now see write as a Helena writing as a Helena write a poem for her uh 18 years old old sister to celebrate her sister's High School graduation this will be read out to the friends and family at the uh Gathering okay now see this is the prompt actually have given now see if I send it uh if I this prompt right now now see the response actually I got here now if you read this poem actually it is too good it is too good than my previous response I got okay so that's how actually you have to adapt the Persona always you have to adapt the Persona what kinds of things you are looking for now see this large language model is already know about rupic cor okay because it is already trained it is already trained uh let's say around 2022 data okay till 2022 data it has already return and in that data actually rupik or poem was there okay that's why you that's why so that's why this model is already known about rupic cord and it is trying to get the similar kinds of let's say poetry okay whatever let's say poem actually rupik used to write okay the same actually syntax context actually is trying to Let's gain now the next thing you can also specify the format let's say what kinds of format you want as a output let's say what I will do I will give you one example for the summarization let's copy one English story here so let's say this is one English story I'll just try to copy the entire story and here I'll go to my chat GPT and I'll just write uh please summarize this story okay summarize this story now I can pass the entire story here now see I can send it now see it is giving me the summary but see this summary again it's a paragraph okay it's a paragraph now I can also specify the format let's say I'll give I want I think I can copy the same instruction now here just try to modify please summarize this story in bullet point okay bullet point now see I'm specifying the format now see if I pass this now see it will give me inside the bullet point okay now see it's like more readable now it's more readable it is giving me uh some actually important uh important actually summary of this entire story it is trying to return me okay so that's how you can provide any kinds of format you need let's say you need a data and you need a juston format data you can also provide I need a juston format data okay you can pass the prompt and it will give you that so that's how actually whenever you are designing your prom you have to always keep these are the point in your mind okay the point actually I listed down in my presentation I think you saw that right now there are some types of prompt are available uh so the first type you can consider zero short prompting and the second type actually few short prompting apart from that actually there are like some types of prompts are available like emotional prompting and all right but this is not actually required but if you want to create any large language powered application so this two prompt actually very famous so I have seen like people are using this to prompt a lot like few shot prompting and zero shot prompting so let's explore this zero shot and few shot prompting uh in the example so again I will go to my CH gbt now first of all let's write the zero shot prompting zero shot prompting means you are only asking the instruction because the see this Char GPT is already trained with huge amount of data so this Char GPT has already like lots of knowledge about let's say the data over the whatever data they have trained now let's say I will ask one question when is the Christmas in America now see Christmas United States celebrated on December uh 25th each each year okay now it is giving me the answer so this is called actually zero shot prompting that means you have only give one prompt okay one prompt that means the instruction you have given the question you have given okay but let's say if I ask these kinds of question now let's see if I ask this kind some question what is BU favorite types of food okay let's say this is the question I have given now see it will give you I don't have the information about buy favorite types of food could you please provide more details clarify who is buy okay now see here actually uh zero short prompting is not working so here you have to pass the few short prompting that time okay now see here I'll give a prompt now I'll just write buies buy is a data scientist and his favorite types of food are or you can write uh food includes let's say burgers burgers Pizza okay and chicken now I can pass this prom to my large language model now it will learn about me okay because I have given a few short prompt here okay now see got it puppy uh s types of foods are Burger pizza chicken and if you need any more details or have a questions just let me know now here I can give another prompt what is the or I can write what restaurant now let's say this is the prompt I have given what restaurant should I take buy uh to in Dubai this weekend okay now see if I pass now see it will suggest me some restaurant Dubai has fantastic range of restaurant that CS a vity of test since buy like barers piz and chicken here is the few recommendation so here is the restaurant now see this is called actually few short from that means you are also giving some few short prom that means some some let's say information information about the question you are asking okay this is called actually F short prompting so these are the thing guys you have to master so uh see this prompt engineering will come automatically whenever you will be writing these kinds of prompt so unless and until you are not writing you are not experimenting you won't be able to understand okay which prompt will give you what kinds of output so try to practice a lot okay you have the chat gbt you can give different different prompts and you can get the response from the chat gbt and the prompt actually you're giving to the CH the same prompt you can use to any kinds of large language model OKAY in future you'll be using whether it's a let's G whether it's let's Mistral Falcon whatever let's say your model are using you can use it as it is fine now there is another concept inside actually generative AI model called AI hallucination now what is an AI hallucination see AI Hallucination is when a large language model generates false information that means let's say you are giving a prompt and that model is giving you the false information okay so this is called actually AI hallucination that means the prompt you are asking the information you're asking this information is not available to the large language model okay so that time what we have to do if we are getting this kinds of alation so that time we can use something called rag concept that means retrieval augmented generation that means we can connect our external data source to my large language model okay and from that data sources my model can learn okay this is the information uh you are looking for and if rag is not working that time what we can perform we can perform something called fine tuning of a large language mod model I think I showed you now we can perform fine tuning with the help of hugging face okay so I'll also show you how we can fine tune different kinds of large language model on top of our custom data we can also perform F tune operation but fine tune is a costly task because here you need a good system like lots of lots of data okay so again it's like very costly task but rag application is a very easy kinds of task see here you don't need lots of cost here you don't need lots of computational power okay so both we'll be exploring one by one like what is uh rag concept and what is let's say fine tuning concept will be exploring okay so yes guys this is all about our prompt engineering now I think you got it why prompt engineering is super important and how you can Master this kinds of prompt engineering technique okay it's nothing but it just a way of let's say communicating with your large language model the input you are giving to the large language model this is called actually prompt okay and the way you are designing this particular prompt this is called prompt engineering okay I hope it is clear now see if you want to learn if you want to master Genera VII if you want to work with the large language model so this is super important concept you have to first of all master and uh this this is called actually Vector database because see whatever let's say data you will be using whatever documents you will be using let's say to work with your large language model so first of all what you have to do you have to convert the documents to the embedding representation I think I already explained like what is embeddings right so my model can take the English input directly so for this I have to uh create some number okay that means I have to generate the embeddings I have to generate some vector and after generating these kinds of embedding and Vector uh we have to store these are the vector to a databases uh because I have to connect my large language model with these kinds of databases okay so this is called actually Vector databases okay I hope it is clear now so no need to worry I will give you the entire idea of this Vector database like what Vector database is even I will also show you the different different practical uh with different different Vector databases so here we'll be covering almost all the famous Vector databases whatever let's say people are using broadly in the market we'll be covering all of them no need to worry and guys to show you this Vector database demo I'll be using one framework called langen so langen is a genbi framework with the help of langen actually we can build different different genbi based application because inside langin actually all kinds of vector database functionality are already available okay so that's why I'm going to use langen uh throughout the entire let's say series of this Vector database but if you're not familiar with langin no need to worry go through this tutorial and try to implement whatever things I'm implementing so after this Vector database series I will start the complete langen series as well so there actually we'll be uh starting from very basics of the lch even we'll be covering till Advanced part of the lch okay we'll be learning each and everything as of now let's say as a code wise just try to understand okay what are the functionality actually I'm using from the Lang chin and try to implement with me and make sure whenever I'll be installing any kinds of package on my collab notebook try to see the version okay try to see the version of that package because uh today actually I'm creating the video I know that because this is a completely research field so some of the functionality they will change in their package and then you will uh get some issue okay you might get some issue you might get some error so make sure whatever let's say version I'm installing on my notebook try to also install the same version and if I'm not mentioning the version okay with the package what you can do so whenever I will show you the installation uh Below in the console you will see the version okay like what is the L chain version what is the openi version what is the let's say Vector database version okay just try to see the version try to just note it down and try to install the same version it will work because see it's a completely resource field every day they are updating their package and all so I know that if you're learning something today so tomorrow actually they will update that package and you might get some issue okay so that's why I'm telling you guys always try to use one a specific version okay uh if you're using a specific version so you won't be having any kinds of issue because you know that this version will work fine okay the code you have implemented so that's why just try to see the version whatever version I'm installing uh see the console console of that collab notebook there actually you will see all the version has been written okay for all the package so note it down and try to install the same version now let's try to see what the topic actually we be covering uh through this Vector database Series so guys as you can see uh here first of all we'll be learning about Vector database like the in detail explanation of the vector database what is Vector database how it is work work and all everything we'll be learning then we'll see that why we need the vector database how Vector database Works use cases of the vector database then some weedly used Vector database we'll be also learning then at the last of the series actually we'll be also doing the Practical demo with the help of python and langen as I already told you we'll be using langen framework to work with the vector database okay now let's try to see what is Vector database is see Vector database nothing but a vector database is a database used for storing High dimensional Vector such as uh word embeddings or image embeddings so I think you already know that uh we are lots of unstructured data and higher dimensional data like documents image PDF okay then we are also having audios videos and so on right so this is called actually unstructured High dimensional data so what we have to do inside Vector database concept we just need to first of all convert desert the higher dimensional documents to the higher dimensional Vector you can see we are converting this documents to a vector representation and this Vector actually we restoring to the database and this is called actually Vector database okay that is why here I have written a vector database is a database used for storing High dimensional Vector such as word embeddings as well as the image embeddings because I think you already know that inside generative VI we are having textual data as well as the image kinds of data that means video data audio data and so on right so that is why you can consider any kinds of data and whenever you're considering any kinds of data it will have some embeddings and that particular embedding you have to save to the vector database so this is the introduction of vector database I think it is clear now you can ask me like why we need these kinds of vector database because we have lots of existing database are available in the market now uh to give you the answer actually uh I want to show you one example so first of all let's see like uh why we need these kinds of vector database uh because if you see over like 80 to 85% data out there is unstructured data like we have images we have videos we have text and we have audios okay so these are the data actually unstructured data so we can't uh easily store these kinds of unstructured data to the relational database or let's say our traditional database like we have my SQL then we have postre SQL then we have uh sqlite so these are actually relational database and these are actually traditional database so we can directly store these are the data so we can directly store our unstructured data through these kinds of relational or traditional database okay why we can't store I will uh show you one example it would be very much clear so guys to give you one example let's take one image data as an example so let's say I want to store uh these kinds of dog images to our relational or our traditional database so if I want to store it I can directly store these are the data to our uh relational database okay so if I want to store it so what I need to do I need to create some of the schema let's say I have some schema here I have some table so in this table let's say I have one column called animal okay animal then I have another column called color okay then I have another column called Tags so basically you need to manually label them uh to store these are the images okay if you want to identify a similar kinds of images if you want to apply the query on top of that then then you need to uh create this kinds of schema manually now here uh you just need to set those parameter manually let's say animal wise it's a dog okay it's a dog then color-wise let's say it's black or let's say I can and color-wise you can give any color let's say golden okay this is the golden uh dog golden dog then we have let's say black dog as well okay black dog you can give anything based on your image actually you are trying to store then you also need to assign some of the T let's say this is very cute um let's say this dog has black eyes Okay black eyes so these are the tags actually we'll be assigning uh manually so what happens actually so whenever you assign these kinds of schema manually so what happens let's say you want to uh query uh the similar images okay from the database so you just give these are the parameters so it will return these are the image for you okay based on the tags actually you have written based on the schema you have prepared right but again it's a manual thing okay it's not a efficient way to uh store our data and it's not a efficient way to like query out our data because let's say I want similar kinds of image so I need to assign these at the labels manually and it's like very uh hard task for us right so that's why actually we can't use our traditional or let's say relational database for these kinds of unstructured data we can easily use this kinds of relational database for the structured data let's say we have CSV data we have uh Excel data but for this kinds of unstructured data it's like very much difficult to store these kinds of data right you can store them uh there is no issue but uh the thing is like whenever you will be quing out uh from your database let's say you want similar kinds of dog images at the time it would be very much difficult because if I let's say convert this image to Bas 64 string so using B 64 string I can easily store the data to the relational database but I'm talking about whenever let's say you are applying query on top of that let's say you want similar kinds of dog images from this database at that time it would be very much difficult for you to quering out because because it doesn't know like whether this best 64 string is a dog image or let's say it's a cat image or let's say it's a horse image okay it doesn't know so there is only one option to uh filter out these kinds of images uh the thing is like you need to create one manual schema like these kinds of tags you need to generate you need to label out these are the images uh using that actually you can filter out these kinds of data but again it would be very hard approach uh as I already told you because you need to apply manual observation here now guys I I think you already got the idea like why it is difficult to store these kinds of unstructured data to the uh relational database because as you can see image is nothing but it's a pixel and your relational database doesn't ever know like how to query out similar kinds of images using these kinds of pixel right so guys this is the one major problem uh with these kinds of relational database uh whenever we are using unstructured kinds of data so guys whenever I'm talking about unstructured data it is not only image data so it can be video data it can be Text data and it can be audio data as well so guys to overcome this issue uh there is a concept introduced called Vector embedding so let's say we have unstructured data let's say we have image we have a text and we have audios and it can be also videos so first of all what we need to do we need to apply something called embedding model okay so embedding model is nothing but it's a neural network based model it's a deep learning model so using this embedding model first of all you will be generating some of the embeddings or let's say vectors okay let's say this is my image we have applied embedding model embedding model will give you vectors okay like this is the represent ation of the image okay this is the numerical representation of this image it can be also applied to the text data so you see here I'm giving the text Data uh and this is my embedding model and it is returning these kinds of vector again uh you can also put audio data so it will convert to the numerical representation and this is the representation of the audio so here if you see embedding model is nothing but it's a neural network based model here you can use any kinds of embedding model let's say we have what toake then we have Transformer based embedding model as well right so these are the things actually you can use so if you're already familiar with NLP that means natural language processing I think you have heard of like what to V then you have heard of like Transformer embeddings okay and uh nowadays actually we have large language model based embeddings like we have open a embeddings we have uh lots of Open Source llm based embeddings as well we have hugging face embeddings as well so using these kinds of embedding model we can easily generate these kinds of vectors and we can store them in a vector database so guys this is the entire idea uh on top of this unstructured data like how we can store these kinds of un structured data to the vector database so first of all uh what we are doing we are just trying to convert these are the unstructured data uh to the vectors Vector representation then we are uh storing these are the vectors okay to the vector database so guys here is an example you can see so let's say we have a text unstructured data and here you can use any kinds of embedding model so in this case actually I have referred this uh open a embedding model so it is already trained on GPT model okay gpt3 and four model and if you put these kinds of unstructured data to the embedding model it will you these kinds of vector okay this kinds of vector representation of all the text actually you have in the documents then once you got this Vector actually this Vector embedding then you will be using some uh uh Vector database it can be anything any database you can use so here you can store one by one these are the data okay so this is the complete idea of this Vector database like uh instead of directly storing our Text data to the database first of all what we are doing we are taking help from the embedding model uh and using the embedding model we are trying to generating these kinds of vector embeddings then restoring this kinds of vector embeddings to the vector database and guys this kinds of vector database has one beautiful function called similarity SE so using this similarity sech functionality it can return return you similar kinds of vector represented in the vector database okay I will show you this similarity search as an example like how it is uh doing actually simil search now guys you got to know like what is embedding uh but you don't know like how these embeddings are generated so to give you one example I will open my whiteboard and there I will try to make you understand so guys I'm inside my whiteboard and here first first of all what I will do uh I will take one pan and here I'll be using U unstructured data unst structure unstructured data as a text Data here I'll be using Text data to give you the example so so first of all what I will do uh let's create one table here so let me create one table uh so guys let's say I have taken one table here so here uh we are using one embedding model so let's say we are using one embedding model to convert our uh text to numbers so here you can use any kinds of embedding model you can use open a based you can use uh what to F you can use like uh large language model based you can use anything here okay now whenever uh let's say I have some wordss here so let's say I have something called King then I have something called Queen then I have something called men and I have something called women then I have some uh let's say monkey so let's say I have five words here now what this uh embedding model will do it will try to uh generate some of the features on top of the words okay let's say this is my feature column features column okay so what kinds of features actually uh it will generate let's say it can generate um it can generate anything let's say it can generate gender it can generate wealth it can generate power because this is a neural network based model we can't say like what are the features actually uh it will generate because U it it will generate these are the features based on the back propagation so it will calculate the loss and all based on that actually it will try to uh find out the best possible features okay for these kinds of work so here I'm just giving my example that's why I'm taking these are the features okay but it might not like generate these are the features but to give you one example I will be using these are the features now let's say it will uh generate weight and it can also generate something called speak okay now what happens actually based on the features actually it will assign some of the value let's say let's say here uh my first word is King okay now King has gender or not yeah King has gender and the gender is like male so it would be one and for Queen uh yeah Queen has also gender so it would be zero because Queen is a female so similar wise man man has a gender so it will have one and women also has gender so it would be zero because it's a female and monkey uh let's say it's a male monkey so I'll assign at one okay now it will come to the next features called wealth okay now here and here you can see King has wealth right because he's the king and he has lots of wealth so it would be let's say one I'll assign it as one uh Queen will also have wealth because Queen is also part of King and uh man will also have wealth but it would be less than king and queen so let's uh assign as 0.5 and women will have also wealth but less than man so here I can give 0.3 monkey doesn't have any wealth so I'll give as zero okay now King has power so I'll give one Queen has also power but less than King so I'll give 0.7 man has also power let's say man has power but it's less than King so I'll give as 0.5 women has also power but it's less than man so it would be 0.2 and monkey uh doesn't have any power so I'll give as zero now weight yeah King has also weight so I'll give 0.8 and let's say king is little bit obese uh Queen has also weight so I'll give as 0.5 because let's say queen is Slim and all man has also weight so I'll uh give it as 0.7 women has also we I'll give 0 point um uh 0.5 weight is fine I think monkey also has weight let's say 0.3 now King can speak so I'll give one Queen can also skip speak I'll give one man can also speak I will give one women can also skip uh speak I'll give one and monkey doesn't uh speak okay so I'll give as zero okay now see guys beautifully it has generated these are the vectors okay uh by generating these are the features now let's see if I want to represent King okay if I want to represent King so what would be my king Vector so here this is your king Vector so King Vector is nothing but 1 1 1 0.8 uh one so this is the king Vector now if I want to represent Queen so this is my queen Vector so Queen Vector would be 0 1 uh then 0.7 0.5 and one okay now if I want to represent man so this is the man Vector so one 0.5 0.7 and 1 okay now let's say if I want to represent women okay I think you are getting it like how uh we have generated these are the vector now this is the vector of the women so 0o uh 0.3 0 0.3 and 0.2 0.5 and 1 okay now let's take one 2D Dimension okay and plot these are the vector and try to understand like what will happen so let's say here I will take one two dimensional uh space so let's say this is my two dimensional space okay so this is my X and this is my y so if you plot all the vector here okay if you plot all the vector here you will see King and uh queen king and queen will appear uh to the similar so here let's say this is my king and this is my queen okay so what will happen uh whenever you will plot these are the vector to the two dimensional space or let's say three dimensional or any Dimension okay you will see king and queen will appear uh like very close together because if you see here okay if you see here as per the features if you calculate the number if you calculate distance between these are the vector you will see this distance would be like very less okay that's why king and queen would be appearing very closely together and here man and women let's say this is my man man vector and this is my women okay this is my woman so these two Vector would be uh appearing closely and here if you see here uh there is another Vector called monkey okay monkey will appear uh completely different from these are the vector because monkey is a different different entity here so let's say this is my monkey okay now if I show you see so it has buil one cluster so this this is one cluster this is another cluster and this is another cluster okay now if you see here uh using this concept called Vector embeddings uh we are easily getting these are the similarity score okay similarity Vector so now if I want to extract any kind of vector okay let let's say I want Queen okay I want Queen so it will go to the this cluster and will return this vector and let's say not only Queen let's say it would be let's say I want something called Princess okay I want something called Princess Vector so what what will happen it will come in this cluster because if you calculate the vectors okay of the princess you will see it will have these are the features okay it will have these are the features related to the king and queen okay so now this princess will appear here so that's how actually this uh embedding model Works actually so it will first of all assign some of the features based on that it will generate these are the vectors and it will plot these are the vectors to the H High dimensional space so here in this case I have taken two dimensional space but it might be 3 4 five and so on okay based on your dimension of the data so whenever I'm using unstructured data whenever I'm using U real world data so Dimension might be vary okay it might be Millions Dimension it might be thousand Dimension we can't say like whatever Dimension it will have but as a visualization we can only show 2D u space here okay so this is the complete idea guys I think you got it like how this embeddings mod model are working okay and how it is generating these kinds of uh Vector okay now here in this case actually you have lots of embedding models so we have open AI open AI embedding model and this model is trained on GPT okay GPT model I think you have heard of GPT model then we have something called hugging face hugging face embedding as well okay hang face embeding so uh it is already trained on let's say lots of Open Source open source llm okay that means large language model then uh we also have uh something called uh LMA okay Lama to embedding I'll be discussing like what is Lama 2 and all okay uh as a open source model then we have something called Google uh Google Palm embedding so these are the open source embedding you can directly use so this is from Facebook Facebook research okay and this is from Google research okay and this one is paid because if you are using open AI uh embedding an open model so you need to pay this is completely FID and these are the things are uh free okay these are the things are open source and free but to get the Lama to access actually you need to uh like uh uh send some information then they will give you the access I'll tell you like how to take this Lama to access and all okay everything I'll be discussing about don't worry about like just try to stay with the video I'll be discussing each and everything so guys I hope you got the entire idea like how this uh embeddings models works okay and how it generate these kinds of embeddings as a vector right so guys here I kept uh another example uh if you just see this example uh your concept would be very much Clear see here I have uh this kind of work okay and we are using these kinds of embedding model and we are generating these kinds of vectors and if we plot these are the vectors to the 2D Dimension so it will look like that so let's say we have this three word we have this three word and we have this three word and we are getting different different vector and this is the cluster okay this is the cluster of each of the words if you see here King man uh women is appearing in the same cluster then apple banana orange is appearing uh to the another cluster and football Golf and Tennis it's appearing uh in the another cluster because uh this is related uh to person okay person and this is related to fruits and this is related to sports okay that's why this cluster is different now I think you got it the vector embeddings like how this Vector embeddings looks like and how it is generating okay I have given you the entire idea but uh one issue actually uh with this Vector embeddings uh which is nothing but uh whenever you are uh like getting any similar kinds of vector it is applying something called distance formula I think you have heard of like distance formula we have ukle distance okay we have Manhattan distance or let say we have something called cosine similarity score as well okay so using these are the equation actually it Tred to calculate the similar kinds of vector but again if you see here it would be very much time-taking because uh it will calculate uh with respect to one by one all the vector then it will give you uh the similar kinds of vector so uh the main problem is like the time if you're using uh this thing directly so it will take lots of time to give you the similar kinds of vector so to overcome this issue actually they propos something called indexes in the vector database okay like we call it as Vector indexes so what is Vector indexes so let's say whenever we are having this kinds of unstructured data we are applying this kinds of embedding model and it is generating this kinds of embedding okay so on top of this embedding uh where uh what is trying to do it is trying to add some kinds of indexes okay so this indexes is nothing but it's a data structure it's one kinds of data structure actually so what it will do it will find out similar kinds of vector and it will assign some of the indexes okay and it will make some cluster kinds of thing so when let's say you have any new data first of all it will see like which uh indexes actually lies this data so in that index only it will search that query so uh to understand this let's say this is my U example so first of all let's say it has assigned these kinds of indexes now you have one new data now first of all it will see like which cluster actually this this is lies okay so it will go to that cluster then it will return the similar kinds of vector with respect to the uh new data you are giving okay instead of searching to all of the Clusters so this is the idea of this indexes uh in this Vector database now uh using uh this indexes uh to our Vector database it's like very fast now whenever you are asking any kinds of query to the vector database and it is returning any kinds of vector so this process time would be very fast now guys I hope you got the entire idea like what is uh Vector database and all about and what is embeddings and all about now you can tell a vector database indexes and store Vector embeddings for first retrieval and similarity SE uh so we used to use our traditional database to directly store our data but uh in the vector database first of all we try to convert as Vector then we try to store them to the vector database okay this is the complete idea now guys let's uh discuss some use cases like U why this Vector database is useful like what are the use cases are there so as you can see uh it will help you the longterm memory for the large language model because it is uh storing all of the data as a vector to the vector database so whenever you are connecting these kinds of large language model to the vector database so it can be uh used as a memory okay memory of your large language model like long long-term memory and it can also perform something called semantic search I already told you how to perform the semantic search using the formula and using the indexes and all so s based on the meaning of the context let's say if you're giving something called let's say king and queen so it will uh not only consider the text you are giving it will also consider the context like what is King what are the features of King what is the features of Queen based on that it will uh give you the S uh similar kinds of vector okay as a output then it can also perform something called similarity S as a already told you like on the text data image data video data or let's say audio data let's say I have one image let's a dog image I will tell hey just give me some dog images okay similar kinds of dog images so it will uh first of all try to see the like vector okay similar kinds of vector and it will return uh the similar kinds of like representation of the dog to you okay so we call it as similar uh similar SE then it can be also used uh in the field of recommendation system uh because as as you already saw like if you if you're having these kinds of vector together and it it can perform similar SE let's say I want to build something called recommendation system so let's say I'm asking for like food related content so it will uh suggest me food related content only okay using these kinds of similar SE and all so guys this is the entire idea of this Vector database and this is are the use cases actually uh you can consider okay inside this Vector database so guys I think uh so far everything is clear now let's try to see some weedly used Vector database so you can see we are having chroma DB we8 then F so F has implemented by Facebook AI then we are also having pine cone then Neo 4G neo4j is a graph based Vector database okay so uh these are actually very common Vector database people are using in the market and it's like very famous Vector database okay in the market right now so here we'll be exploring all of them one by one so in the next video we'll try to see how we can use chroma DB and chroma DB is a local Vector database and this Pine con wave Neo 4G it's a cloudbase vector database okay and here is another Vector database you can see f f is also a local Vector database that means if you want to let's say store your data as a locally so what you can do you can use chroma DB or F and if you want to store them in the cloud you can use pine con weate or NE 4J okay now in this video actually we'll start with uh one practical uh demo that means we'll be learning one amazing Vector database local Vector database called chroma DB you can see chroma DB is a local Vector database so they're also bringing the hosted version of the Chad DB so you can see it is still under development so once it is done you will be also able to let's say use this chroma DB in the Cloud Server as well so as of now if you want to store your let's say uh embeddings in the local okay that means if you want to set up everything in the local you can use chroma DB Vector database for this so this is the documentation of chroma DB guys you can see this is the official documentation so they have given each and every guideline so you can follow this documentation like how we can set up and all okay so what I will show you guys uh I will show you one uh complete practical that means we'll be uh experimenting this chroma DB on the collab notebook okay so guys let's open up my collab notebook and let's see how we can use this chrom ADB Vector database so guys as you can see my notebook is connected now if you want to test it whether it's working or not just write one message here so I'll just write print uh okay so it should uh yeah so it's working fine okay so now the first thing I'll be installing some of the uh like required packages like uh I need to install the chroma DB and all so there is the guide actually they have given like you need to use peep install the chroma DV and how to like uh uh set the client and all everything they have given okay so first of all what I will do I will just set up this chroma DB so to set up the chroma DB you will need some more required package okay some some more dependency I'll tell you like what are things you need so just right peip uh hypen Q uh install uh first of all I need something called chroma DB so I'll copy the name from here proma DB then I need something called open AI because I'm going to use open Ai embeddings and open AI like you can say LM model okay that means GPT 3.5 turbo model so that's why I need openi and I also need something called Lang chain because I told you I'll be using Lang Chen here Lang Chen and there is another dependency unit something called tick token okay tick token so if we are using open AI embedding so you need this package actually Tik token now yeah I think these are the things actually I need now let me install it and guys you need openi account for this video actually uh so just try to create an account here uh otherwise uh you won't be able to do it because you need the open API key okay to run this uh like you can say notebook so guys installation is done now if you want to see let's say any uh version of any package so what you can do let's say I want to see the chroma DB version so I'll just copy the name and here you can just write Peep Show um pep show and just uh give the name of the package now if you execute it will show you the version and every uh information about this package see guys uh name is chroma and this is the specific version and uh this is the entire summary of your uh like chroma DB package okay so that's how you can see for all the packages okay you have installed now uh here first of all I need to uh download uh some data uh because here I'm I'm showing you Vector database example and there actually I need the data okay to show you like how to store and all so uh for this actually what I will do so there is a actually this Dropbox links actually you can see this is the Dropbox links and inside that actually you have some article data if you see Google article is there then you have some AI startup article Amazon article then you have databas article chat jpt article so we have different different articles here okay and this is a txt data txt format data now if I open any kinds of txt file see this is the article related to this uh default okay generative VI so they have written all the article and all okay so I'll be using this kinds of data um you can use any kinds of data it's up to you but this is the open source data actually I got uh from the internet and this is the link of the data so to download this data first of all I will copy this link and here I'll be using something called W gate to download this data so I'll just write w w gate so Wate is a Linux command and here we are using Google collab and Google collab is running on the uh Linux operating system okay so it is running on the Linux kernel so that's why you can execute any kinds of Linux command here so here I'll just write w k um hypen q and here I'll just paste this link okay I'll paste this entire link now once it will download uh let me show you how it will download so if I execute this cell left hand side you will see it will download that zip file okay see new article. zip file this ZIP file has been downloaded now I also need to unzip this ZIP file so I'll just write unzip hen q and this is the name I'll just copy the name I'll just copy the name and here I'll just uh tell the directory like where uh you need to um I mean unzip it so I'll give the same name so this is the name new uh underscore articles okay so it will create one folder new UN articles and inside that it will uh unzip everything okay now if I show you it's done now if I refresh the page I think inside new articles uh now see guys all the articles are present okay now let's if you want to open it you can also open and see so this is the article and all about so now let me close this thing so we have successfully uh downloaded our data now what I need to do I need to uh first of all create one openi API key and uh I'll be setting up my environment okay uh so for this actually what I need to do I'll uh first of all open up my openi account so you just also open up your openi account just say uh just search like open.com and here just try to loging with your account account so let me quickly log with my account so guys as you can see this is my account now here I'll just click on this personal my U this uh this is my profile I'll click here and here you'll get one option called view API Keys okay now I'll click here and here you will see uh API Keys option okay now see previously I created some of the API Keys that's why uh you can see here but for you it might be completely empty it's completely fine so you'll get one option called create a new secret key okay just click here and just give the name so in this case I'm using um Vector DV so Vector DV I'll just name it okay you can give any name I'm just giving Vector DV and create the keys now you need to solve one puzzle here uh it will verify whether it's uh whether you are a human or not okay so I'll just click here now it's telling just try to move this object uh with respect to this hand Direction so let me move it and submit I think uh yeah attemp is complete now uh I will get my secret key yeah now I'll copy this key and here uh I'll paste it okay as of now I'll paste it and I'll just uh give a comment here uh setting up um setting up environment and don't share this key with any one guys otherwise they will also able to access your uh like you can open AI account I will be removing this keys after this recording so that's why I'm showing now here first of all I will import operating system package called W and here I'll set the environment so I'll just write o dot environment Environ okay and here you just need to give the keys like uh which name you need to save it so I'll just give uh open AI underscore API underscore key and equal to I'll set my API key here so this is my API key I'll copy or I'll cut it and here I'll set it yeah that's it okay now I can remove this uh cell now let me execute done now I need to import some of the necessary Library so import so so first of all I need to import something called uh chroma okay so if you're using langen so langen already has this chroma API because I already told you uh the integration so it is the integration with the langin as well as the LMA index so instead of uh like importing directly like import uh import coma okay import chroma import chroma we have to uh import it uh like from The Lang chain itself because here I'm going to use langen framework okay to build my application that's why I need to call it from the langen but let's see if you're using it for any other uh like task parpose let's say you are not creating any generative VI application let's say you are doing some different thing okay different application at that time you can directly import it and all the functionality will remain same only all the code will remain same only you just need to change the import okay at that time so here I'll be using Lang change so I need to import it from the Lang itself so how to import it so just write from l do Vector store so there is a uh function you will get called vector vector stores import so I'll import my chroma so I'll just write chroma then I also need to import uh open a embedding because I think you remember let me open my board uh I think you remember first of all what I need to do let's say I have my unstructured data so let's say this is my data so the first place what I need to do I need to use something called uh embedding model embedding model so this model might be anything so in this case I'm going to use uh open AI open a embedding model open a embedding model I'll be using so you can use any model here okay then after that it will return me uh my U vector embedding Vector embeddings okay and that Vector embeddings I will store inside my Vector database okay Vector DB so in this case I'll be using something called chroma chroma DB chromat okay so this is the complete idea so first of all I need to import this uh embedding model as well so here I'm I'm going to use opena embedding so I can directly import opena embedding so let me do it so here I'll just write from lanen do embeddings uh import open AI embeddings open eddings okay then I also need to import open AI because I'm going to use openi large language model so again I'll just write from Lang chain uh llms that means large language model I need open then uh I need to load my data as you can see this is my data and it is uh present inside a directory okay and again this data format is a txt data okay if you see it's a txt data so for this I again need two libraries so I'll just write from Lang chain so guys I'm expecting you are already familiar with this Lang chain because if you check our YouTube channel so we have already covered this Lang chain tutorial and all okay so you can go with uh that tutorial and you can learn the Lang chain so here from Lang chain U there is a uh class called document loader so just write document loaders okay so first of all I will be import something called directory loader okay directory directory loaded because uh my data set is present inside the directory that's why I need this directory loaded then I also need to load my text loader because it's a txt data right so I'll import the same thing only uh sorry it should be uh data loader I think uh document loader document it's a document loaded okay now it should be uh text loader text loader okay uh yes so as of now I need these are the libraries uh and if I need anything I will be importing later on so let me just quickly import them now we'll be loading the documents so load uh data so guys uh to load the data just write uh directory loader directory loader and inside that you just need to mention the directory so here this is the directory I'll just copy uh the name copy path and I can give it here so this is the directory and inside that actually I have but txt data okay I have if you see I have txt data so I only want to load the txt file so if I let's say I have some many other file okay I will be ignoring so for this there is a parameter you you can give called Globe okay just write Globe equal to so it should be txt file so all the file just load is means all the file okay it should be Dot dxt then you also need to define the loader class okay so just write loader loader class and and should be my text loader because uh all the file are txt format okay that's why you need to give this uh text loader okay now it will load up your data and I'll be storing this data inside a variable called loader so this is my uh object of my data loader now let me uh execute it now to load the data you need to call one function called uh loaded. load okay if you call this function it will load the data and this data will store it in a variable called document okay and see guys it will uh load all the data inside this document see guys this is the all of the text actually you can see here so it has loaded all the txt file one by one and it has has extracted a data and this is your entire data as you can see so let me show you see guys and this is a document object okay this is a document object now uh we have successfully loaded our data now guys before converting this data set to the embedding and storing uh it to my chroma DV first of all I need to apply something called text Splitter on top of it basically I need to convert my entire uh data as a chunks because as you can see this is my complete Corpus okay see this is my complete Corpus if I show you so if I show you the see this is the complete uh data okay this is the complete Data Corpus but this data is like very huge okay I can't like you can say directly convert it to Vector okay so if I'm converting so what will happen Okay let me explain so what is the use of this chunks okay so see so whenever you are using any llm model okay whenever you are using any llm model so it has one input size okay it has one input input size as well as each has one output size okay output size so whenever you are giving something as a input to the llm okay you need to always take care about the input okay so I'll tell you like where you need to check the input size and all so in this case let's say I'm using open AI open AI llm okay open LM so open LM wise I'll be using something called GPT 3.5 turbo so there there is a model you will get from openi called GPT 3.5 TBO TBO and it has actually one specific input length so that input length actually you need to uh see so if you want to check the input L just uh search like open model open models so this is the link just open it up and here you will see all the models are available inside open so we have gbt 4 gbt 3.5 GPT based Deli okay gpt3 Legacy so these are the model actually and and uh here I'm going to use uh this GPT 3.5 Series so I'll just click here now here if you see the first model is GPT 3.5 turbo and this is the description about the model OKAY like uh what are the things they are doing and all and this is the Max uh token length as you can see so it can take a input around 4,000 97 tokens okay at a time and this is the training data okay like up to uh September 2021 they have trainer data okay so this is the input length Okay but if you check if you check your uh input here uh if I open my data if you see this input length actually will be more than this 4,000 token because here if you see I have loaded the entire documents I have loaded the entire documents all the articles I have loaded okay so there is a possibility uh this input size would be more than 4,000 tokens okay and if I'm converting all the Corpus as my uh vector embeddings and I storing to the vector database so it will create issue okay so again uh during storing it will create issue and and whenever you will be giving this data to your llm model again it will be creating issue and you will also get some memory error and all okay so it's better to split our data as a chunks okay now what is Chunks so let me first of all tell you chunks is nothing but here I have already written chunks is a size of the maximum number of the character that uh a chunks can contain okay and there is another concept called chunks overlap okay so chks overlap is nothing but this is the number of character that should be overlap between two uh adjust chunks okay so let's say so to explain this one let's say I will take one text here so let's say this is my entire Corpus okay now first of all I need to convert it to chunks okay chunks means I'll be taking uh some of the Chun size okay let's say if I am writing chunk size is equal to let's say 500 so it will take uh let's say I'll take a new color so it will start from here and it will uh go and it will count like 500 character okay it will count 500 character so let's say this is uh this will end here okay this will end here and this should be one chunks okay this should be this should be one chunks okay so again it will start from here again it will count let's say 500 word uh sorry 500 character uh and we call it as a token okay so let's say this is uh here it will end so this should be another chance okay so let's say this is another chance this is another chance now again let's say it will start from here it will start from here again it will count let's say it will end here this is another chance let's say again it will start from here and it let's say it will end here okay I'm taking it randomly just try to consider so this is another chance and it will start from here it will end here okay now how many chunks we have got so one chunks two chunks three four and five okay so here I got five chunks okay five chunks five chunks of the data see now if if you count this input length okay now it should be less than it should be less than less than my 4,000 uh I think uh what is the number it should be 4,000 97 okay 4,997 okay now my input now my input uh size is less than 4,097 okay so this is the idea of creating this chunks okay instead of converting my entire Corpus to the vector first of all I need to create as the chunks okay then I need to convert it to Vector embedding then I will be storing and that embedding I will feed my llm model okay and there is another concept called chunks overlap okay so what is Chunks overlap so if you set this chunks overlap let's say I will set this chunks overlap chunks uncore overlap overlap let's say I have set as 20 so what it will do so whenever uh first of all I will gra these are the chunks okay now let's create a new chunks again so let's say whenever it will create a chunks let's say it will start from here and Chun size is 500 so let's say it will end here now you have mentioned chunks overlap is equal to 20 now what you will do instead of starting from here it will go back and it will count 20 character okay it will count 20 character let's say this is my 20 character okay now it will create the chks form here now again it will count and let's say your 5 500 character will end here so this is my another chunks okay so basically chunks overlap means like how much overlapping you are needed from your previous chunks okay so that that is called chunks overlap so it helps you like to understand your context of that text okay U instead of using only Chang size you can also use chunks overlap so that it can also got to know like what was the previous context okay whenever it will let's say see I'm giving this chunks by chunks let's say this is my chunk one the Chun two and Chun three so okay so instead of giving directly the chunks if I'm also mention s overlap what will happen your llm model llm model automatically will get to know okay so this is the context actually so this this sentence okay this sentence and this sentence so after this sentence actually this sentence is coming okay so that's why this Chun SI this chunks overlaps actually helps us okay this Chun overlap actually help us to understand the context of the uh entire story okay so that's why we'll be using this two concept called Chun size and chunks overlap okay now I think this thing is clear now let me show you how to do it using Code so I'll come here now here first of all you need to to import uh something called recursive character text splitter okay so from langen from langen uh dot text splitter textor uh splitter input recursive so recursive character text splitter okay so this is the uh class actually we'll be using to convert my entire Corpus as a chunks okay now I'll just call this class and inside that you need to mention two parameter I think I already explained one is the your chunk underscore size okay CH size so let's define as 1,000 okay I am considering 1,000 character uh as my one chunk okay you can give any number so it's a hyper parameter tuning you can uh set any number here but I I saw like people are starting with 1,000 here okay and there is another parameter will give called chunk underscore overlap so chunk overlap I will give let's say 200 okay so again it's a hyper tuning now guys I have created this object now I will save this object so I'll just uh create a variable called text splitter now guys finally I will convert my entire Corpus to my chunks so I'll just call this object and here you need to call split dot split _ documents and this is my Ed documents okay this is my raw documents so I'll give it here and I'll store in a document variable okay or I can store it I think in a text variable I think it should be fine so let's make it as separate now uh let me execute it's done now if I show you my text guys so you will able to see it has converted to chunks and how many chunks it has converted I will also show you see guys uh so if I just go up so guys see this is my first chunks okay and it is ending here then again it is another chunks okay then it is ending here then again this is another chunks and it is ending here and from uh and if you see in each chunks actually you have thousand character okay th character and here if you see the chunks overlap so if you read this text carefully so you will see some of the sentence are coming okay in this uh new chunks as well okay because we have set this chunks overlap as uh 200 okay so see this is my entire chunks now if you want to see the length like how many chunks it has created so just print the length so I'll just read as my text so it has created 23 uh3 chunks okay all together now uh it's fine now if you want to see any chunks specific chunks you just give the index let's say I want to see the number one chunks this is the number one chunks and I can also print number two now uh we have successfully converted our uh like Corpus to chunks now what I will do I will uh create my uh DB object okay like vector DB object so just write the comment here creating DB object so as I already told you chroma DB is nothing but it's a local database so first of all you need to create a local uh like DB here okay local DB so you need to specify the name uh so here I already prepared uh this code so here uh you need to first of all create one par directory and the name can be anything so here in this case I'm giving as DV that means database and uh you need to specify the embedding first of all okay like I think you know why we need the embedding because uh first of all I need to convert my text to embeddings okay that means Vector then I will store this uh Vector okay to my Vector database which is nothing by my Comm so in this case I'm using something called uh open a embedding I think you remember here we imported so open a embedding so I'll just uh call it it open a embeddings and by default if you execute uh this code so let me show you which embeddings model it is using so it is using something called text embedding add a model OKAY 002 this is the model now you can search also here uh so if you check here so it has this model called text embedding um add 002 this is the model it has also another version text uh add a 01 okay now we have successfully uh loaded our embedding model now what I need to do I need to create my Vector uh instance okay uh I need to like create my Vector uh database instance so to create it so this is the code for it it's a simple code only so first of all I have created one variable called Vector DB and here I'm just calling my chroma I think you remember we imported chroma from my Lang chain I'm just calling this chroma so inside chroma you have one function called from uh documents okay from documents now here you just need to give the data like you just need to give your text like you just need to give your chunks like which uh chunks actually want to convert as a vector so in this case this is my chunks called text as you can see this is my text I'll just copy the name and here I'll just name it text okay and it will also take the embedding model okay so this is the embedding model I want to use so in this case you can use any embedding model you just need to import it here okay so here I'm using openi based embedding model so that's why I have initialized it here so here I'm giving the Ming model and here you also need to give the proc directory like where it will save after let's say converting to vectors where it will save so it will save inside this DB folder okay so here I'm giving the directory so these three parameter users only need to give here okay that's it and if you're not giving any embedding model uh inside chroma it will automatically take Opia embedding model okay I think they have already uh written here if you see here uh embeddings so they're automatically I think taking uh some embedding model using open API key and all okay so they have already mentioned here like it will automatically load but it's better practice to mention okay always better practice to mention here that's it now if I execute it uh so first of all what you'll do I'll just remove this directory now see it is converting everything uh to the uh vectors okay all the text has been converted to vectors now I need to uh save it to my disk okay now see it has uh converted everything to the Vector now I need to save it to the database okay now this is the code for it just write Vector DV persist and Vector DV uh is equal to none now if I execute it now you'll see it will create One DB Here Local DB now if I refresh see guys DV has been created now inside that it has saved all the vector now see it's a binary format you can't see the vector here so that is the issue with this local DB but whenever I'll will be showing you like pine cone and wave you will able to see the vector like how it it has generated the vector okay how it has generated the embedding everything you can see in the cloud okay you can like see all the list of the vector there okay so that was the beauty of this Cloud uh uh Vector database but again it's a local one okay so that's why it's a binary presentation here so yes guys we are successfully able to save our Vector here okay now uh let's say you want to uh load it so how to load it so this is the code for it so here you just need to mention chroma okay just call the chroma and here you just to mention the the directory you have your data so this is my database DB so here I'm giving the par directory which is nothing but DB in this case and here you also need to give the embedding okay so this is the embedding I'm using uh now here I'm giving my Pur directory so in this case it's DV okay now it will automatically load this vector and everything okay from this DV itself because it's a binary presentation I already told you okay and as well as I'm also giving my embedding model now let me load it now I think you remember I told you something called similarity s okay now once we have loaded this uh Vector uh to my uh Vector database now you can apply similarity s on top of it okay we call it as uh retriever okay retriever so now let's show you the demo of the retriever so I'll just comment it out make retriever okay so uh to retrieve any uh specific information with respect to the question you are asking you need to set this parameter called Vector as R okay Vector DB so this is my object Vector DV as rer and this is my rer object now let me execute now here I'll just call this R object and uh here there is a parameter called get retrieve documents okay that means that means I'm trying to tell my uh Vector database uh whatever question I'm asking try to uh give the similar kinds of uh you can say data okay with respect to the question I'm asking so here I'll ask one question let's say here I have Microsoft articles as well I think if you see here I think Microsoft yeah Microsoft articles is also there so I can ask one question just like how much micro how much money did uh Microsoft race okay so let's say this is my question now uh by default uh I'll store it in a docs so by default it will return for uh relevant uh answer okay four relevant answer if I print it see it will return return you four uh similarity answer okay for most similar answer okay like whatever Vector are closed I think I was explaining in the theory so it is the most uh relevant and most similar answer okay four most similar answer so if I show you the length so you can also set this parameter like how many relevant information you want see it is uh rning me four so let's say you only want let's say two relevant answer okay so in this case you can set this parameter Vector DB as retrieve search keyword as K2 okay K me like how many answer you want okay so let's say I have given two now if I execute it okay done now if you want to see like search types so so it's a similarity Matrix I think they're using similarity equation they're using cosine similarity to calculate this uh answer okay like the question you are asking basically it will match with the vector like what are the closest Vector okay it will come so it will return you so they're considering this similarity uh coine similarity Matrix I think they are okay qu similarity equation and this parameter will give you like number of um return actually it will provide so uh it will only provide two uh answer okay two answer now if I again execute this code now see guys now length is two okay it is only returning two answer okay so using this parameter you can set like how many uh like answer or how many uh similar answer you want okay from your uh database okay now see guys it has written two or let's say four similar answer but I want a specific output let's say the question I asked okay let's say if I print my document so it's a different kinds of answer actually it will return okay but it's not understandable actually it's like U it is giving like lots of answer and all okay it's giving lots of text but I want like a relevant answer like I just asked like how much money did Microsoft raise so it should give me like that is the money Microsoft raise okay so it should give me that kinds of answer but it is returning this kinds of document okay these kinds of chunks so uh to get a specific output okay from your uh data you can take a help from the L M so what you can do let me show you the diagram so let's say this is my this is my Vector DB Vector DB okay now we have stored our uh Vector embedding here Vector embedding we have stored here okay now you are uh giving uh any kinds of query let's say this is your query so here in this case let's say you ask like how much money uh Microsoft raise right so this is your question so it is returning let's say four or let's say two output output documents okay but this for output documents is not readable okay I am not getting my specific answer so what I can do I can integrate LM model so let's say I will initialize my large language model here which is nothing but GPT T point five turbo in this case Okay turbo so I'll give this answer to my llm model okay I'll give this answer to my llm model and llm model will analyze this answer it will also Analyze This quy okay it will also analyze this quy with respect to that it will give me the authentic output okay the correct output correct meaningful output okay that is the power of L&M I think you know why it is powerful and all okay because it is it has strained with huge amount of un instruction data so it can perform all kinds of task okay that's why uh we will be using llm okay to retrieve our specific answer with respect to the specific question I'm asking okay so this is the idea so now to do it actually uh first of all I need to make one chain okay so let me just comment it out I think you know what is chain in uh Lang chain okay so I'm not going to explain because I think you already learned this uh chain in Lang chain okay why we use uh chain and all so first of all I need to something called retrieval QA chain okay so I'll just write from Lang chain from Lang chain do chains input retrieval so whenever you are using uh Vector database okay it is returning retrieval output right like related output so you need to use this retrieval qway that means retrieval question answering chain okay so it will help you to ask the question okay to the data actually you have stored in your DB okay so that's why this chain is required Ral question answering so I'll import this chain now here first of all you need to make one chain so I have already make made one chain here so this is the chain so I'm just calling retrial Q chain and there is a function called from chain type so here you need to specify the llm model so here in this case I'm using open AI llm model okay so let's let me show you how it will give you the model so if you just run it in a new cell now if you print this llm so this is nothing but your GPT 3.5 turbo yeah so it's not giving the name but if you see the documentation by default whenever you call open a so it will give you something called gbt 3.5 turbo okay this model actually uh if I gbt 3.5 so this model actually it will return okay so I'll be using this llm and here I'm giving this llm model and chain type is tough okay I think you already know what is chain type and all and retriever so you need need to give the retriever object here okay this is the retriever object so basically whatever question uh you are asking okay whatever question you are asking uh it will return you from this retriever right because you have given this retriever here okay so that's why you need to give this R object here and you also need to give the return Source documents okay return Source documents means U it will return the source also like see we have lots of uh we have lots of data here if I show you we have lots of article here okay now which article it is referring to give the answer okay it will also give you as a reference that article okay so this is the idea of this now if I execute now let's ask one question and print this response okay so here I'm calling my qn and this is the query same query I'm asking how much did Microsoft raise uh the money okay so this is the quy I'm giving my inside my chain and this is the response of the llm now if I print this see guys this is the query now it's sing around $ 10 billion okay U raas like this Microsoft and uh this is the source document okay but it's not readable so what you can do actually uh you can write one function here process LM output or process llm response so this is the function you can write so whatever response it will give it will process only like it will give you the result source and the answer okay now if I execute now if I call this function here now I'll just remove this response here okay now I think it should give me the uh yeah so now you can see this is the clear output now around $10 billion and these are the source actually it has referred this two file as a source now see guys uh we are able to successfully uh store our Vector to the vector database and we are also able to make the query on top of that and we we also saw that like how we can found a similar uh of you can output okay using this retrieve okay using this retrieve option okay so you can ask any different question also so let's say I will ask another question here so uh what is the news about Pand so there is again another Pand articles you will see inside the data now again I'm giving inside my chain and it is giving the response and I'm just processing the response now see Pand is a startup that has raised $3 billion uh in a series B round and bringing its total raised okay so this is the complete answer and this is the source it is giving okay I think I don't need to print this yeah so this is the source so yes guys that's how actually you can uh do it and one thing I also want to show you like how to let's say you want to delete this database so how to do it so deleting DB so it's like very easy first of all you can make a z file okay of your existing DB so that later on if you want to retri it you can retri it okay so first of all I'm making it a z file then I'm I'll be deleting it so first of all I'll make a z file now see guys if I refresh so first of all it will make a z file of this DB okay now I'll be deleting so this is the deleting code so it will clean up everything now if I refresh now see uh database has been deleted okay now let's say uh you want to um get your previous DB okay like you had let's say specific some specific or let's say important Vector there you want to uh get back so what you can do you can unzip that zip file okay so this is the zip file you can unzip now again your database will come now what you need to do you need to restart the run time okay so just click here and there is option called restart on time if you restart on time again you can able to use your DV same wise okay like we already imported out DB right here so here that's how you can uh load your DB again okay so this is the functionality actually chroma DB provides okay uh if you see the documentation they have written everything even they have also given the stter notebook and all okay so guys I think as of now you got the entire idea about the chroma DB like how we can use chromat Vector database and how we can connect the large language model and how we can perform this uh let's say Vector sarce operation right so one thing I just wanted to show you see if you click on the integration see this chroma DV is having like different different integration that means you can use chroma with openi Google gini CAD hugging face okay instructor hugging face embedding server G roof flow okay Allama embeddings everything you can use okay everything you can use with this chrom RB now you can see some framework integration like it can also support Lang chin llama index then brain tast open uh llm uh llm tree okay then uh stream lead highest stack open lead so these are the framework also you can connect okay that means it has actually all the integration uh if you're using different different framework different different let's say large language model different different platform everything it can support okay so as of now we saw like how we can use with the help of Lang chain going forward we will be also learning how we can use with the help of llama index and so on right so yes guys this is all about from this video in the next video we'll be learning another amazing uh Vector database called uh Pine con and pine con is a cloudbased vector database that means we can store our embeddings in the cloud platform as I already told you Pine con is a cloud-based Vector DB that means you can store your embeddings to the cloud so if you want to use pine cor so search for actually pine cone in the Google so Pine con so you will get the first website just try to open it up and make sure you create one account okay you just need to create one account inside this website so for this you just do the sign up operation so with the help of your Google account you can create one account so once you have the account just try to do the login so I already have the account so I'll just try to do the login here so once you have logged in guys you will get this kinds of dashboard so guys now let's try to see how we can use this Pine con Vector database to instore our embeddings so guys what I've done I already recorded one video previously on this Pine con that detailed video how to use this Pine con and all so I'll add this video here so this video will give you the entire idea how we can use this Pine con with the Lang Channel all so guys as you can see recently they have updated their dashboard but previously uh it was actually different kinds of dashboard but see functionality wise it is same you have to use as it is but somehow actually they have updated some kinds of actually dashboard you can see uh previously this index was like out that means there was a option called index directly create index option was there but they have actually created this index now inside databases okay see ins databases now there is a index option so guys this Pine con is not a free Vector database for this actually you have to take the subscription but if you creating let's say new account for the first time here you will get actually free actually some storage that means 2 GB storage you will get that means you can only create one index there that means one cluster you can create so if I click on the create index you will see I can only create one index and and whenever you are creating uh free index make sure you are selecting Google Cloud okay not any other Cloud otherwise actually it will ask for the charge see I already occupied my let's say free plan now if I click here see it will ask for the upgrade that means I have to upgrade with their let's say subscription I already utilized the free plan but for you actually will see the free plan option is there because you have created the new account but for me I already use this uh account okay that's why uh it is showing I don't have any free plan right now fine so make sure guys you just try to create on new account and try to use this Pine con and to create the API key guys just click on the API key and here you can create the API key okay and this API keyy will help you to connect with your uh this Pine con server okay from your python code now let's try to see how we can use this Pine con uh Vector database with our Lang Chen and guys one thing uh whenever you're installing Pine con client make sure you're installing 2.2.4 okay this particular version because uh whenever uh I was using this pine cone that time actually this version was the stable version and try to use this version guys because this version will help you a lot because it is like it is having like very easy syntax to store the embeddings to the Pine gon server so make sure you're installing this 2.2 four version so let's try to see how we can use this fine gun right now first of all you need to install uh some required packages so just let me write down the comments here so I'll installing these are the packages so I'll be installing something called langen then uh Pine con client okay so if you want to so if you want to use this Pine con uh Vector DV so you need to install this package called Pine con client and this is the python package and it will help you to connect with this Pine con okay then I also need P PDF Li because uh here I'm going to load PDF data so previously I showed like how to load txt data now I will show you like how to load PDF data so I'll show you like all kinds of data like how to load and all okay so that's why I need uh to install these are the packages so let me install so guys as you can see my installation is done now I'll take some new cell and here I also need open Ai and T token okay I think you already saw from my previous demo so openi is also needed because I'm going to use open embedding and as well as this tick token uh because I'm going to use open embedding so Tik token is the dependency there now installation is done now let's import some of the Liberties here so here I'm going to import these are the libraries and I think you are already familiar with these are the libraries why I'm loading and all I also need something called operating system so I need this Pi PDF reader loader because here I'm going to read like PDF data so for this actually I need to load this one from documents loader but previously I was loading like text loader okay so this is the difference then recursive character text splitter means like you want to make uh your data as a chunks because I told you why this chunks is required and all so that's why this is needed and open embedding I will be using and open llm model that means GP 3.5 turbo so for this actually I'm using this open llm then uh from uh Lang chin I'm also going U and here from langin I'm also importing like vector restore which is nothing but my Pine con but previously I was loading my chroma DB and uh retrieve retrieval QA means like you can also make some uh question answer okay on top of your uh data uh you have stored in the vector database I think I was discussing okay with the help of this chain then you can also import something called prompt template uh basically you can uh give your custom prompt here so this is also possible okay I'll show you one demo here so let's import this at the library so first of all here what I will do I will create one folder uh so let me first of all give one title like load data so first of all I'm going to create one folder here um called PDFs so inside that I will download some of the PDFs I have in my Google Drive so this is the code to download anything from the Google Drive so here if you see in Google Drive you will see this ID okay of any kinds of file otherwise you can U download it and manually upload it inside okay it is also fine but I'm just downloading so I have one uh yellow V7 paper in my Google Drive and also I downloaded one uh resume okay like uh from Google itself I've downloaded one resume uh so called so the name of the resume is like richel G CV okay so this is the resume I have downloaded so this two file I'm going to download uh inside my PDF folder and with the help of this G down package you can download anything from the Google Drive now if I refresh and if I show you my PDF so see these are my data are available inside that okay now what I will do first of all I need to extract the text from the PDF so for this uh let me give one title here so how to extract the text from the PDF so this is the code you need to take the help from P PDF uh directory loaded and here you just need to provide the path of the PDF file you have so this is my path like PDF so here I'm giving the path and once uh you have given the path you just need to call this load function and it will automatically load the data so let me show you so it has loaded my data now if I print my data you will able to see my data see guys all of the data has been extracted okay now what I need to do I need to uh convert it to chunks because I can't um directly convert it to my Vector because uh input size might be vary because I told you uh whenever you are using a large language model so it has one input size okay so you always need to take care the input size so that's why uh we need to create as a chunks so uh to create the Chun so this is the code I think you remember so I'll be just calling this recursive character text splitter and here you need to give Chun size and chunks overlap okay I I think I have already discussed what is Chun size and Chun overlap then uh simply I'll just uh execute it then I will apply on top of my data okay so this is my entire data and here I'm passing this in my text lior object okay now it will give me that text chunks now let me execute and show you so guys uh this is my text chunks okay see uh this is another chunks this is another chunks so let me see like uh how many chunks I got here so length takech chunks so I got around 168 chunks here okay now if you want to see any specific Chun so you can also print let's say I want to see number one you can also print for other this is number two okay now here if you read it carefully you'll able to see like also some chunks overlap is also there like some uh text is coming from the previous chunks also okay now guys uh you can also print like third one as well now guys uh first of all I need to download the embedding so download the embedding first of all you need to set up the environment uh you need to first of all what you need to do you need to set up your openi API key okay so I think you remember uh I can use my previous notebook so in my previous notebook I already created this API key and I already set up my environment I'll just copy copy this code and here I will paste it okay now I'll set my OPI open API key so let me set it here now first of all I need to download the embeddings so this is the code for it so it will give you the embeddings like open embeddings now first of all let me test one uh thing here so what I can do uh I'll just call my embedding like I just want to show you like uh what is the length of the vector it will generate okay so I'll just call embedding do embed embed query and here if you pass any word let's say I will give hello okay now if I execute uh you will able to see the vector okay see this is the representation of the hello okay and this is the uh Vector okay this is the vector representation numerical representation so I'll store it uh u in a variable called r okay now if I uh show you the length of this results so let me see the vector length yeah so uh by default actually if you're using open AI embedding so the each Vector length would be uh 1,5 36 let's say if I give any any word here let's say I'll give uh something called uh good okay let's say good if I give good so you will see uh the length would be same okay now if I give let's say anything like uh I can give hello or let's say how are you how are you so again the length would be same see length would be same so basically what is happening I think I was discussing uh this thing in my uh uh theoretical lecture so whenever it is uh like trying to generate this kinds of vectors okay so it was following this approach basically it was creating some features okay so with the help of the features actually it was uh generating these kinds of vector so basically what is happening so the sentence you have given so uh this sentence is representing uh in this Dimension actually 1,5 and3 uh 36 okay this is the dimension of the sentence okay and it is representing in that here I was referring this uh word by word but you can refer as a sentence by sentence so basically this uh King is uh appearing in this Dimension actually 1 2 3 4 5 6 okay six feature we have cre so this was the six Dimension okay six Dimension uh this six uh this King was representing there okay but whenever I'm uh using open AI so I have written like how are you there okay how are you is representing with the help of 1,590 um sorry 1,536 Vector okay that is the this is the dimension okay if you if I plot it okay so this should be the dimension and this is the representation of the how are you okay I think you are getting like how it is generating this vector and all okay so if you give any sentence here so this should be the length so now now I need to store uh these are the vectors okay like uh I will apply this vectors embedding on top of my data I have uh created the chunks then I will store it on uh in my Pine con Vector database so for this first of all I need to initialize the pine cone so let me initialize it so uh for this first of all what you need to do you need to collect uh uh some uh pine cone credential so you need to collect like Pine con API key and pine con environment okay so how to collect it so just go to Pine con and this is my uh dashboard and here I already told you how to collect this API key just create a API key and try to just copy and here just replace your value okay no need to use my value because I'll be removing my keys so you need to use uh your value okay so just try to replace this value okay then you need to uh also collect something called uh Pine con API environment okay so how to collect it so here if I go go to now just click on index so here you just need to create one index here so first of all it would be empty and here you just only can create one index because it's a free uh one I am using okay now I'll just click on create index and need to give the name so here I'm using let's say this is my test uh or you can give any name I'm I'll give test test index and here you just need to specify the dimension of the vector okay now here I already showed you so this is the dimension of my each Vector okay so this is the dimension I'll copy this value and here I'll just write it and you can also select the metrics like what kinds of metric you want to use to retrieve your similar kinds of vector okay so by default it is cosine you can also use ukian and Dot product but uh cosine is a little bit fast okay because if it calculating cosine distance okay so uh uh it will be like little bit fast okay to calculate because I already I was already discussing right if I show you that uh graph so see if I want to calculate cosine similarity within this two Vector so it will just create one angle here and it will give me the cosine similarity score but if I'm using nule distance so it will just calculate with respect to all the data points I have here okay so that's why cosine is uh first of in this case okay so I'll be using cosine metric now here uh this is the default pod you need to select and this is the free plan I already told you now I'll just create the index now see guys it is initializing so you need to wait for some times once uh it is done so it will give you this uh green status okay now see guys has created now here you will see the environment name okay and this is the gcp provider so basically this uh uh cluster has been created in the gcp cloud and this is the region and this is the uh uh environment name so this parameter you can set if you're taking their paid subscription but by default if you're using three one so they will assign these kinds of provider and region okay now I'll copy this environment name and here I'll just need to replace okay so for me I have already replaced which is nothing but gcp starter okay now let me just quickly set this uh uh environment variables okay inside my environment now here I will initialize my pine cone so if you visit pine cone documentation so they have given this code like that's how you need to initialize Pine con so here you just need to provide this API key so here is my API key it will read from my environment and here is my Pine con API environment so this is the environment so it will automatically read it and it will initialize that okay and here you also need to provide the index name so this is my index index name we have created called test but if you creating any other name you can give the same name here now let let me just quickly initialize this pine cone yeah so it has initialized now what I need to do I need to create embeddings from my chunks so let me first of all comment so to create the embeddings from the Chun so this is the particular code you need to execute so first of all uh here whatever embedding I'll be generating okay so I'll store it my pine cone that's why I'm just writing writing pine cone from text okay and here I just written one list comprehension okay I think you know list comprehension in Python okay so basically the chunks uh text chunks I have so I'm just reading one by one then I'm just reading the page content okay then uh this is my embedding object I think you remember so this is my embedding object and I'm also passing my embedding okay embedding objects and also I'm giving my index name okay that means this is the index name so this pine cone client will automatically take it and it will automatically uh convert your chunks to embedding with the help of this embedding objects and it will rest inside this index name that means my this index okay inside this index it will store all of my Vector okay and it will give you one object called docar okay now let me just quickly uh execute and show you what will happen see guys it is taking all of my chunks one by one and it has converted to vectors and it has stored inside the pine con uh cluster now if I go to my Pine con cluster and here if I refresh this page so guys as you can see I refreshed my page and now I able to see all of the vector here if you see if you just click on browsers so here is the vector okay and first of all it will show you like top uh like 50 Vector here if you see this is the representation so this is the text and on top of that actually this is my Vector okay I'm getting so you can also copy the vector and you can also see okay and the length of the vector is uh this one actually I think you remember um 1,536 okay this is the length and this is the beauty of this Cloud uh Vector DB you can see your vector here like how this Vector has been created and what is the text with respect to that and you can also see the scores okay like what is the scores uh uh with respect to these vectors like this is the distance actually okay that's how it create the index okay I think I was also talking about like index in Vector database right indexes in Vector database this is the score okay using this score actually it try to figure out the similar kinds of vector whenever you start any quity right so this is the beauty of this vector and I love this uh pine cone one because it looks look very uh easy and it's like very beautiful interface it provides okay and you can also see the second page and you can see all kinds of vector here even you can also change the parameter let's say I want to see top 100 Vector here so if I just U search the query so it will give me all all the 100 okay 100 Vector here okay so yes guys and you can also see the Matrix like how many times you are raising the request and all so it will give you all kinds of log here like if any request is failed so it will give the logs and everything it will give you okay so yes so this is the simple uh interface of my this pine cone and Vector counts is U 68 because if I show you uh if I show you my uh chunks okay my chunk size was 168 so that's why you you are able to see this uh Vector count is 68 because I have 168 chunks so with respect to that this Vector has been created okay so yes case this is all about my pine cone one now we are able to successfully store our uh data here and this is the cosine and this is the dimension and all kinds of host and provider you can see here now let me uh show you like how to query out on top of your vector and all so for this uh what you can do you can use something called similarity sear but before that let's see if you have already one class T here okay um so what you can do you can load this class T directly instead of storing that uh Vector again and again so this is the code for it so let's say I have already one cluster so you just need to give the index name which is nothing but let's say test and here you also need to give the embedding like here I'm using open embedding so here I'm giving the embedding objects now if you execute it will automatically load this uh index okay it will automatically load these are the vector here now see it has loaded this Vector now on top of that you can perform similarity score uh operation now here let's say I will ask one query let's say I have one yolow V7 paper here I think you saw that so here I'm raising one query like YOLO V7 outp part from which model OKAY like we have lots of YOLO model right so from them actually YOLO V7 performs actually which model so this is the query I'm asking so now this query I will give it to my uh docar this doers this is the object okay basically it will it will have all the like you can say Vector objects and all okay so here I'm going U so here actually I can directly ask the quy so it has one uh function called similarity SS okay so inside that you just need to pass the query and you need to set the K okay I think you know what is K so K means like how many output you want to get okay from your uh search results okay so it will give me three results okay now if I execute and show you uh query is not defined because I haven't executed now let me show you see so it will give me a top uh similar uh three output see this is the three output it has given but again it's not readable so what you can do you can take the help from llm so llm if you give this query and this output to the llm llm will try to understand this query and the output and it will give you the best uh uh answer okay from them so here let's ask uh this query to my llm so I'll first of all initialize my llm and here I'll be using retrieval question answer from langen I think you remember I was also using and CH type is stuff and here I'm just giving this ret objects as my doc s okay and as ret okay okay you need to give it like that then it will consider you are uh it will you want to ask any kinds of question okay and you want to get the answer now let me initialize this uh question answer uh object now you can ask the query here so I'll ask the same query so this is my query and I will ask it to my uh llm model so I'll just initialize keyway run and if I give the query so it will give me the answer see guys YOLO V7 per outperforms YOLO V5 uh L6 YOLO X YOLO ex okay so these are the model actually uh it outperforms okay see it is giving the correct answer now I'm not getting these kinds of answer okay I'm getting my relevant answer now I have one uh uh resume I think you know okay I have one resume also uh Richard uh G uh CV so let's ask some query from this uh resume also so here is one question I prepared called Richard green uh experience okay like what is what is our experience okay so uh see it will uh automatically give you that experience as well this is the power of llm see it's giving richel green has a PHD in English from the University of uh uh it is giving like some more information about uh richel green but is pretty good right um yeah so you can ask any kinds of questions so you can um also create one while loop here so let me show you how to create while loop so this is the while loop I have created and here I'm taking the user uh uh prompt so here you need to import one Library called CIS basically whenever you are uh you want to exit so you can exit it also so this is like uh input I'm taking from the user and if user is giving like exit so it will exit Okay this code would be exit and if it is not then it will ask take the query and it will return you the answer okay now let me show you so if I ask like what is uh YOLO V7 now if I press enter so it will give me the answer see yellow V7 is a real time object detection which surpassed all known object detection in Bon speed and accuracy okay it's giving the correct answer now let's ask any query uh tell me about tell me about uh recel green yeah I think recel spelling is not correct I think it should be now let me ask see uh it's giving the correct answer okay now if I press let's say exit now it should exit the yeah okay guys I think you saw the entire uh like demo how we can use the pine con and you got the clearcut idea now in the next video we'll be learning another amazing Vector database called webat webit is also a like you can say cloud-based Vector database there also you can create a cluster and you can store your embeddings so if you search web in Google uh you will get this documentation so here they have already mentioned like how to connect this we8 with the Lang CH and all everything they have given all the integration and all how to install okay how to configure everything they have given so guys what I've done I prepared one notebook this notebook will give you the entire understanding like how we can use this Webb Vector database now this is the official website of the webat web iio so here you need to create one account first of all make sure you have created the account and after creating the account actually you will get uh free credits with the free credits you can only create one cluster the same way you would do it for the pine con as well right and again it's a paid one guys you have to pay if you want to use there let's say Advance let's say I mean functionality you have to pay for that so here we'll be only exploring the let's say free one the free Ty one because free TI one is enough for landing fine later on if you need it you can also upgrade your subscription so if you want to create the account just click on try now button so you will see uh they will ask for the email and password with that actually you can create your account and you can log with this uh web so guys now let's try to see the Practical how we can use this web at Vector database so here first of all you need to install some of the libraries so these are the libraries are common so here so guys here now I'm using something called wave so this is the like python package like wave client so you need to install this package to connect with your O Okay o um cloud data database now let me just quickly set up them uh now guys what to do uh you need to collect some of the credential so these are the credential are required so first of all I need my openi API key then I need my wave API key and wave at cluster okay cluster URL so this three thing actually I need so I think we already created my open API key just try to copy from my previous notebook so here is my API key so I'll just copy and here I will just try to paste it okay now let's see like how we can collect this W API key so for this just uh visit your U so for this just visit your uh weat dashboard and here just try to create one cluster just click on create cluster okay you need to give the cluster name so let's give any name so I'll give a test okay so you can give any name so everything will remain uh same because this is a free free one and it will expire in 21 days because this is the free version free tire I'm using okay but if you want to use for your production grade application so at the time you can take the subscription okay now just try to Cate the cluster so it will take some time once it is ready so it will give you the status message and guys if you see web also support these kinds of client like python client Java client CLI uh typescript then go so it has actually multiple client support so like those who are working in Java and all so you can also use it now guys see my web at cluster is ready now if I click on detail now here it should give me that uh detail of my cluster now here first of all I need to uh copy this uh uh cluster URL okay just copy this clust URL here from here you can also copy now let's go back to my wave and here you need to paste it oh sorry uh this is my API so I need to paste it here this is my cluster URL okay now I also need to copy the API so here is the API option just click here and this is the API key just try to copy and don't share uh I'll delete it after this this recording so that's why I'm sharing and I'll just uh past it here okay now I got my three credential now let me execute them okay so first of all I need to read my data so let me read the data so here first of all uh so here first of all I will create One Directory called uh MK DRS data okay now data folder has been created now inside that I will upload one uh so inside that I will upload one PDF file I have here so this is the Yello paper actually YOLO related content so you can download any kinds of PDF and you can upload here no issue with that you can either use text Data okay doc data it's up to you uh so guys as you can see uh my PDF has been uploaded here now what I will do uh I'll just try to load this PDF okay and uh I'll just extract that text from it so let me show you like how this PDF will look like so guys see this is the yellow uh like presentation okay so I have downloaded as PDF I'll just execute this particular code so here I'm giving the data directory and I'm telling just load the PDF file okay then I'm loading the data now let me load so it's giving one error it's telling unstructured package not found uh please install it with people install on instruct okay so what is happening actually so if you see here I have downloaded this uh Google uh like you can say uh slide Okay Google slide as PDF that's why it is considering as unstructured PDF okay so that that's why we need to install uh one package called unstructured unstructured PDF so let me install it so this is the command to install but if you're having like like uh PDF like very simple PDF so you don't need to install it okay so this is for like unstructured PDF so if you have any complex PDF so you need to install this package so previously I was using like uh ppad and all okay that's why it was a uh simple uh PDF but now I'm using like Google slide PDF that's why it's giving this ad and it's pretty good like it will tell you like what are the package you need to install and all so it will give you the message as well so guys it's done now it's telling just restart the run time so let's restart our run time okay now let me uh execute Discord now it is extracting all the text from this PDF you can also upload multiple PDF here uh it's up to you but I have already added one PDF I just want to to show you the quick demo done now let me show you the data so guys this is the entire data I got from my PDF okay now I need to apply something called text splitting I think you remember I need to convert it to chunks so let's convert it so Rec character text is spitter okay I'm importing from langin and this is the Chun size and chunks overlap you can give any number here so let me just do do it quickly now I got my chunks okay see this is my chunks and also let me see the length see all the things are common only we are just changing the data uh database client okay like I'm using chroma DB M code and weave so just client is changing but steps are same I think you are getting now I need to convert to embeddings so let me just comment it out so here I'm going to use open a embedding P embedding and here you need to pass the op API key uh if you're not passing it's fine you need to add inside the environment variable so previously we added if you see here environment variable but here I'm not adding environment variable if you're not adding inside environment variable you can directly pass them okay that will also work okay it's giving error open a is not defined because we have restarted the run time so I need to execute this cell again H now I think it should work now here I'll be uh initializing my we Vector database so if you visit we documentation uh there's the documentation and here they have given the installation guideline then configuration then what is the schema libraries everything they have explained okay so you can visit the documentation and uh you can get all the information but here I already uh gone through the documentation and I uh prepared this notebook so this is the code actually you need to write to initialize your web actually uh that's why actually I like Pine con one because pine cone looks easy uh okay to me because what I feel like Pine con is like more easy and it's like more uh easy to understand and uh like more clear but if you're using web so you need to write some extra Cod it okay uh but it's completely fine okay no issue you can use it I I will share my notebook you can use this notebook as it is so here I'm just first of all importing weat from langen you can also import directly it is also fine now here you just uh so first of all you just need to connect with your wave cluster okay this cluster we have created here I think you remember this is the cluster to connect with the cluster you need to give the API key W API key and I think you know we already collected the oi o API key here and we stored in the video able okay then I also need collected the cluster URL okay both I have collected now cluster URL you also need to give then you need to initialize the client and inside that you need to give the cluster URL and as well as the open API key also because uh using the open API key it will use the open embedding okay whenever it will convert your um data to Vector embedding so it will use that open a embedding okay so that's why you need to give the open API key here now I also need to give something called uh authentication configuration so this is the Authentication configuration which is nothing but my API key wave API key and this is the startup period these are some default parameter you need to give and let's execute okay now if you want to check it whether this client is ready or not so this is the code for it so is ready so now it is true that means my client is ready now it is connected with my wave client now wave is telling you need to uh prepare something called schema okay here uh they have given uh one client schema so if you visit this client libraries Okay so so here if you see example client schema so you Al also need to Define some schema here schem is nothing but it just a it kinds of configuration it will take okay as input like you can uh change the configuration with the help of code so that's why these are the things they are giving but if you're not able to get it okay it's completely fine so you just need to give this schema and it will common for every U experiment you'll be doing so this is the complete schema guys okay so client schema detail U first of all if it has any schema it will delete then it will add this schema so here uh you can give any name okay so I have given chatbot here then U here you can give an description then uh what the vector actually model you are using you can give the name here so in openi actually you have Adam model okay so here I'm using Adam model I think you remember if I print my embedding so here I was using something called Adam model okay as you can see here I was using something called text Adda embedding add model that's why you can also give the name and these are some description you can give and after that you can create this schema and you can uh create your client okay now this is the code so you can execute and this thing is not required in Pine con so Pine con can handle these other the thing automatically but in weave you need to uh provide that's why I personally like like Pine con okay now once it is done you need to initialize the uh vectory store okay now this code will initialize the vector so what it will do basically it will take your documents okay I think you remember we have um we have uh created the documents okay uh we have created a cluster and from this cluster uh with the help of this embedding we are just trying to generating the vector and storing inside the wave okay now let me St uh execute and show you now see guys now if I go to my wave8 and refresh now it hasn't updated yet so after some times you will see it will update like how many embeddings had generated okay then uh how many times you have uh you can say did the request everything it will show you here okay so all the information actually it will give you and these are the and Guys these are the embedding model are available by default with this we so you can use any of them it's completely fine but we are using this Adda model uh open a generative model okay so yeah so guys usually it takes some time around uh like uh 5 to 6 minutes after that you will able to see all the update here so in between what I can do I can show you the other step now we have successfully stored our embeddings now now let me just do the similarity measurement that means similarity charts so here first of all I will ask one query called what is YOLO because this is the yellow related content and here I'm initializing this similarity SAR okay because Vector store is it this is my object and on top of that I'm just writing similarity search here I'm giving the quy and top K that means how many output you want to get so here I'm given 20 you can give any number now it will return like 20 results okay 20 similar kinds of uh results see okay but um I can't actually take the answer so what I can give I can give one chain with the help of Lang chain so here uh there is another parameter called question answering okay load QA CH you can also use this chain otherwise you can also use retrieve uh qn okay that that is also fine now here I'm going to use open LM now I'll Define my chain and here I need to pass my open API key and uh this is the CH typ and temperature means like uh if temperature is zero so your model would be like more uh you can say stick to the U answer like it won't be giving any Randomness and if you're changing the temperature to close to one so it will uh give some random output as well okay so this parameter you can change I think if you have learned like llm so I you know this parameter and all okay so these are like Basics thing okay in llm now let me Define my chain now here I will ask this query so chain. run input documents so this is my documents this is my entire documents I'm giving okay the documents I have and uh see this is the documents that means I got all the answer right uh 20 answer and from this 20 answer I want my query that means the query I'm asking which is nothing but what is yellow so now with the help of U my llm I will get my authentic answer see see is an algorithm for object detection that is uh uh that is uh unified real time and has higher accuracy it is presented by shivang Shing and this is the date of the publication okay so yes I'm getting my output and all so now you can ask any kinds of question about yolow and all okay I think you got it like I already showed you multiple time you can either create one while loop and you can ask many question here all right guys I think everything is clear now how we can use this weate uh like vector database so we have learned different different Vector database guys so far now we'll be using all of them to implement different different like gni application if you don't know about Lang chain Lang chain is a genv framework with the help of that we can Implement any kinds of generative AI based application with the help of large language model so I think you already used something called py and tensor flow whenever you used to learn deep learning right so inside deep learning we used to implement uh computer vision project NLP project so there we used to use these kinds of framework like P and tensorflow so both are actually deep learning based framework so with the help of that you can create a neural network right that means all the functionality this framework provides to implement any kinds of neural network to let's say work with your data to load your image everything you can perform there so similar wise if you want to work in the field of genbi so inside gen if you want to work with the large language model and all so you have to use this Lang chain framework because Lang chain is having all kinds of integration all kinds of functionality okay so only you just need to learn how we can use this Lang chain properly and with the help of that how we can access different different large language model and how we can build different different kinds of application I think you saw the chat GPT right chat GPT like it's a very powerful application so if you let's say give any kinds of prompt that particular prompt actually it will try to remember Okay then if you are asking the next prompt it will also try to remember that prompt because it is using something called memory okay memory inside chat GPT and how this memory is utilizing so this concept is already available inside langin langin is also having the memory functionality so if you use this langin to implement this kinds of project so you can also create a memory okay memory for that application so that if user is giving any kinds of prompt this prompt would be also remembered by your application so not only that actually it is it provides actually lots of functionality guys unless and until you are not learning about langin so you won't be able to understand so what I will do guys uh let's uh quickly start our uh this practical demo of langin because langin is all about practical here nothing theory is there so I already prepared one amazing notebook for you so there I will show you the entire Lang chain demo so guys as you can see this is the collab notebook I prepared so first of all let's connect this notebook and make sure you select GPU because going forward actually we'll be using uh some open source large language model from the hugging fa itself and to use that one you need a GPU based machine okay so make sure you selected the GPU if you're selecting CPU it's completely fine it will also work but the execution time would be little bit High okay that is the thing now let me cancel H now if you want to see the official GitHub of langen guys this is uh so you can see this is the official uh GitHub of the langen okay see it's like very active resarch the last comit was 3 hours ago only okay now you can see um they have given all the let's say uh tutorial how we can install and how we can access uh let's say different different Services of the Lang chain everything they have given apart from that see uh they are having actually a very huge community that means uh these are the communities supporting this Library a lot that means if anything is going wrong in this Library they uh let's instantly solving that uh let's issue even they're also upgrading this framework day by day now apart from that it is also having one beautiful documentation so let me show you guys this is the documentation link if you just search Lang chain documentation on Google you will see this documentation now see this is the entire documentation they are having okay now see different different uh things they have developed they have also develop ecosystem like Lang speth Lang graph we'll be we'll be also discussing about Lang spe and Lang graph no need to worry first of all let's try to understand the fundamental of langen like how we can install the langen how we can integrate with different different let's say platform like you can see it is having different different integration let me show you so if I open the third party integration see it supports anthropic then AWS Google hugging face Microsoft op and many more okay many more see all the different different Cloud jni servic it is also support all the different different let's say lar large language model platform it is support even you can also integrate with hugging face that means whatever hugging face model I think I showed you now I think remember all kinds of Open Source large language model is available inside hugging F you can also easily use these are the model with the help of langin and always try to remember guys langin doesn't have any kinds of large language model OKAY langin is just a framework it's just a framework to work with the Genera VI based application with the help of large language model large language model wise it will connect with different different platform let's say hugging face let's say open AI let's say AWS let's say you can see different different integation it is there let's say Microsoft okay so those who actually provides these kinds of large language model okay so it can connect with those platform this is the idea only got it so it's just a framework you can see they have also written Lang chain is a framework for developing application powered by large language model llm okay I hope it is clear now see uh they have written so many things so what I did guys I just prepared one amazing notebook so this notebook will give you the comprehensive idea how we can install and how we can use this langen I think this is enough for you okay to learn about langen now see this is the overview so these are the things actually be covering inside langin like installation we'll be learning about how we can like access different different large language model we'll be learning about prom template chains agents and Tool memory document loader and indexes okay so these are the thing we'll be learning apart from that we'll be learning some more advanc let's say technique like we'll be learning about ecosystem like Lang speed Lang graph okay these are the thing also we'll be trying to cover now let's see how we can install the Lang chain so this is the command guys to install the Lang chin just right P install Lang chain and with that you need to install another package called langin Community now let me install the langen okay so after installing I just need to set up some environment like I need to set up my open API key as well as the hugging face API token okay why because here I'll show you how we can uh use open okay open language model if you want to use let's any kind of commercial model how we can access it even I will also show you how we can access any kinds of Open Source large language model from the hugging face uh let's say Hub okay so for this I need to collect this authentication API I think you know we have already generated One open API key so see here I have already written my open API key so you can also write your open API key and you need to also give the hugging face API token and where you will get the hugging face API token go to the hugging face platform click on the profile go to the settings now left hand side you will see access tokens now you need to create a token for me I already created the token guys you can see Lang chain now if you want to create just create a token give the name let's say I will I'll give test okay after that give the read permission and create the token now copy this token and try to mention it here okay I hope it is clear now let me delete I think I already created so I don't need it I will delete it okay this token so my token name is langen you can give any kinds of name it's up to you now let me set these are the token inside my environment okay it is giving one error because I have to initialize the operating system package first of all then let me set inside my environment variable okay now what will happen whenever you will using Lang chain now it will automatically load these are the API key from the environment itself okay you don't need to manually set that this is the idea now we'll be learning about how we can use any kinds of large language model with the help of Lang chin so I think we saw we are having like two kinds of large language model one is like commercial model one is like open source large language model OKAY commercial wise we already saw the entire openi platform we are having gbt based model and the open source wise we are having this hugging face model that means we are having let's say llama model we are having mral model falcon model like different different models are available okay in the hugging face Hub if you see okay there are thousands of like lar langage models are available I think I showed you one platform open llm okay it should be open llm GitHub Now list of all the open llm see all kinds of large language model you can see and these are actually open source large language model fine now first of all let's try to see how we can access actually open large language model see whenever I think I showed you the open platform and I showed you the demo of the let's say model like if I want to access this model if I want to give any kinds of prompt so how we can do it see this open ey is already integrated inside Lang chin so I think I showed you the integration now so this open source integration just open it up now see open is already integrated with uh Lang chain so you don't need to manually so here you don't need to manually uh use the openi platform like the way we used previously like chat completion API completion API no you don't need to use like that see it's the very simple first of all install the open a then just import from langin large language model I want to use openi okay openi platform that means open large language model just try to import this particular class now here just try to set the temperature parameter okay temperature parameter now what is temperature parameter I think you remember temperature parameter it's just a creative actually parameter like how much creative you want to be your lar langage model you can see if it is zero close to zero that means temperature uh it means model is very safe and it is not taking any bits that means it won't be taking any risk okay it will stick to the output and if it is close to one that means this will be taking risk it might generate wrong output but it's like very creative okay I think I already explained this part now let me initialize my open a rer now see I have already initialized my open a raer now see this is my large language model so guys whenever you initialize this rapper by default actually it will utilize one model called GPT 3.5 turbo model okay but if you want to use any other model you can give the model parameter here there is a model parameter with the help of that you can also give any other model name okay later on I'll show you how we can change the model as of now let's take the default model only now let's say this is my prompt you can see what would be a good company name for a uh for a company that makes colorful socks okay this is the let's say my prompt I'm giving to my large language model now let me initialize this prompt now see if I want to let's say generate output gener the response I need to call the predict function lm. predict inside that I need to give my prompt now see it will give me the answer now rainbow trades are vibrant socks uh company okay so this is this is suggesting the name of the company okay that makes colorful socks it's great now you can also directly pass this text to the large language model rapper so instead of calling the predict you can also give like that it will also work so these are some actually way we can uh give the input to the large language model now see it is also giving me the name now you can see uh uh now you can see it has given me this name okay this is the response now I can also use something called invok function okay inside invok function also you can give the input it will also work see invok has given some more detail output you can see it has suggested me different different actually company I can uh use this name uh that makes actually colorful socks okay it's pretty good now let me show you the second example so I have written the same code guys you can see now here I've given another prompt I want to open a restaurant for a Chinese food suggest me a fancy name for this so now let me give so it is suest me Imperial Dragon Palace okay great now I can give the input like that also inside LM object now dragon fire dining okay great name now let me show you the hugging face okay hugging face model because see at the end openi is a chargeable that means if you're sending any request to the open open AI okay that is open AI model it will charge you based on the token so it's a at then there is a cost involvement but let's say you don't want to spend the money you don't want to use this kinds of paid model you can also use open source large language model with the help of uh Lang chain it is also possible for this what you have to do you have to use hugging face up okay because inside hugging face I showed you we are having lacks of model we are having lacks of model and all the models are open source okay all the models are open source and these are like Lar language model from the different different organization you can see from meta from Google okay from open uh then we are also having see openi also having some kinds of actually free model they are published in the hugging face you can also use them m is also there different different model see that many of models are available inside hugging face it's like very hug model now even I also showed you different different task you can select based on that also you can also select the model it's up to you now let me show you how we can uh integrate hugging face platform and how we can access hugging face large language model also for this you have to install one Library called hugging face Hub so let me install hugging face Hub because the models are available it is present inside hugging face Hub because I already told you now the model they have published it is called Hub okay Hub inside Hub actually this models are present now see I installed the hugging face up now let me import hugging face up from Lang chain now see uh this is the model actually I want to use so I've already provided the link let me open so this is called actually flant T5 model this is from Google and this is one of the large language model guys you can see if you are interested you can go through the documentation okay what can this model can perform and all everything they have given they have also given the paper link of the model now if I go to my notebook now see here I'm using the large model see this is the extra large model and it's like very huge I don't want to load this model I want to use some smaller model because here I I want to show you the quick demo that's why so I'm using this model actually T5 large model let me show you so this is the model the same model only but this is the small variant this is the small variant and this is the X large variant like this is like more bigger than this one okay I hope it is clear now see if I want to load the llm object right now that means large language model idty to use hugging for from Lang chin inside that I have to give the repo ID that means the model you want to use just copy the repo ID and pass it here and you have to give some arguments okay you have to give some model arguments that means the same parameter I think remember temperature what temperature will do I think I already showed you this is the creative parameter and the max length I think you remember inside open I also used to pass the max length that means how many let's say output token you want to get from your large language model so here I have given 64 okay you can increase and decrease as per your requirement you can also remove this one okay it's completely fine because at then it won't be charging you okay it's a PRD model so you can use as many of length you can okay now see this large language model we are using this is not like very good large language model but somehow actually just to test actually I'm using it going forward we'll be using very powerful large language model like we'll be using Lama model mol model falcon model OKAY Jimma model we'll be using different different model but this is like very basic SL language model actually I just wanted to show you as of now now this is the prompt I have given translate English to German this particular sentence okay now see how old are you this sentence I want to do the translate operation English to German and for this I'm going to use this model okay now let me execute and let me show you the magic see this is the output I got this is the German translation of how are you and this model actually it is trying to access with the help of hugging face API okay hugging face API that means the token you collected and anything you just set inside in enir variable with the help of that it is sending the request to the hugging face hugging face is returning the answer okay we are accessing through API request right now going forward we'll be also learning how we can download the model as well and we'll be loading that model with the help of langen and we can create a llm rapper and we can do the application building okay so I'll also show you this part no need to worry as of now I'm showing you the API access okay if I want only want to perform the inference operation how we can perform it that is the idea now again I've given the second example the same example I want to open a Resturant for Chinese suest me a fancy name for this again I initialized my LM rapper with the help of my huging f model now if I give this prompt to my large language model see it is giving me Chinese Resturant so this is not actually creative Rim because I told you I'm using very basic SL language model that's why okay so yes guys this is the introduction of Lang Chen I think you got it what is uh Lang Chen is and how we can use Lang Chen exactly okay and it's like very easy to use very easy to use it will trust me guys it will make your task very easy if you're using Lang chain it will make your task very easy okay now in the next video we'll be learning about something called prompt template okay like how we can create different different prompt template and how we can pass to the let's say large language model okay with the help of langin so previously I think I showed you how we can use this uh langin to access different different large language model and whenever I was accessing this large language model that means uh whenever I was let's say sending my prompt to the large language model you can see I was giving the complete prompt okay this is the the complete promt actually I was to pass let's say this is the prompt I want to open a restaurant for Chinese food suest me a fancy name for this now let's say if user needs to change this food okay food let's say category let's say uh he wants to let's say put Indian food here so what he has to write again he he has to write the complete prompt yes or no that means if I show you let's I can copy and I can paste it here let's I will comment this line now let's say here instead of Chinese food I will give Indian food okay Indian food now if I execute see it is giving me Indian Resturant now let's say if I want to give any other food let's say I want to give Korean food I want to give let's say Pakistani food I want to give let's say I want to give let's say Italian food so I have to every time write the entire prompt okay but let's say you are creating a complete application you are creating a complete let's say web application or let's say stream late application or any kinds of application there you don't want to pass this entire prompt again and again because if user let's say needs to pass this prompt entirely again and again so it would be little bit actually let's say hard for the user yes or no now see instead of passing the entire promt you can see we can only change this uh food category okay the food category will only change otherwise see this promp will remain same now every time so that time actually I can do the slight modification here that means I can create a template of the prompt and user will only select that part he needs to change here okay this is the idea now let me show you how it can be done so for this actually be using something called prom template okay now inside Lang chain we are having uh inside Lang chain prompts we having something called prom template now here I've created a promp template and here I've given the input variables is equal to kuin now this is the same prompt I have written you can see I want to open a student for now you can see in the bracket I've written kuin okay now this is going to be the input only and rest of the let's say prompt will remain same okay as per the prompt you have written previously so me a fancy F this okay now here is the prompt template I'm creating I'm just doing the format oper and kuin is equal to Italian that means user will only give the food category right now let's say Italian Indian Pakistani okay or let's say Bangladeshi anything they can put here it's up to them now user don't have to write the entire prompt user will only change the food category here got it so this is called actually promt template so whenever we'll be creating any kinds of let's say large language Prov application whenever will be creating any kind of GNA application we always need to take care this particular prompt let's say I don't need to pass the entire prompt instead of that what I can give I can only give the prompt which is required to get my output okay this is the idea now see if I execute this line now see it is creating my complete prompt that means user is giving Italian food now see in the cuisine section it will come the it now you can see in the cuisine section it will replace with the Italian now if I give let's say Indian now see here it uh Indian will come okay I think you got it now there is another way you can uh Define this prom template now you can write uh prom template doore template now now this is another prompt I have given what is the good name for the company that makes now you can see product should be the input now here you can pass the product name like that prom. format product is equal to colorful socks or any other name let's say cakes or let's say biscuits anything you can give here if I execute see in the product this uh input would be replaced okay so this is called actually prom template inside langin and this is like very powerful concept guys because going forward whenever you'll be implementing application this concept will help you a lot got it so yes this is what I just wanted to show you in the next video we'll be learning about chains inside uh uh langin and with the help of chain actually we'll be inting this prom template as well as the large language model and we'll be again doing the inference operation and what is the use of promp template I already explain now see if I want to use this prompt template with my large language model so what I have to do I have to combine my large language model as well as the prompt template I have created okay for this we'll be using something called chin you can see combine llms and prompt in a multi-steps workflows okay to create a multi-state workflows I have to create a change now let me show you one example I think then this part would be clear let's say first of all I will initialize my large langage model rapper and here I'm using open AI model now see previously I think you remember we learned this prom template that means if I want to let's say give any kinds of prompt but I don't need to uh pass the entire prompt only I want to pass some specific let's say U point of that particular prompt you can see here only I want to change the product name so for this I created a prompt template and the product name I've given the colorful socks okay this is my entire prompt you can see now it will create my entire prompt so which is the good name for the company that makes colorful socks that means whatever input you are giving it will replace it here fine now as of now let me comment this line let's say this is the prompt I have created this is the entire prompt I have created I think you would remember now if I want to use this prompt The Prompt template I have created with my large language model I have to use something called LM Chen and how to import LM CH so from Lang Chen do CH import l M chain now the first parameter you have to give the large language model the large language model you have defined which is nothing but open open E large language model you can also use open source large language model you can use hugging face large language model as well the way I showed you then you have to give the prompt template the second parameter you can see prompt is equal to prompt that means the prompt template I have created this object actually I'm passing here then just try to call this function chain. run and inside that give the input let's say whatever input you used to give like that instead of giving you have to give chain. run and give the input let's say colorful soof now if I execute see it will give me the output see Rainbow traits or chroma shocks I think okay chroma shocks actually it is giving me the output that means now we are able to use our prom template as well as the uh let's say llm okay and for this we are using something called LM CH that means first of all it is creating the entire prom template first of all it is creating the entire prom template that means this entire prom template if I show you that means it is first of all creating the entire prom template and this prompt actually is passing to the large language model and how things are happening with the help of llm chain okay that's why here I have written um with multi-step workflows that means it is creating a workflow in the back end it is creating a pipeline so first of all it will create the prompt then this prompt would be passed to the large language model and this things are handling by the llm chain I think you know what is chain now chain is chain means like one let chain would be connected with another one okay that means complete pipeline complete workf flows sequence of you can say chains okay so I think now you got it what chain exactly inside uh Lang chain now let me show you another example example two so again I'll initialize my large language model and see now here I'm using the second approach I think remember we can also create the prom template like that so let's say here input variable is nothing but my cuin that means kin will only change and rest of the prompt will remain same okay now this is my prompt template now if I want to pass this prom template to my large language model what I will do I'll use the llm chain inside llm chain I'll first of all give the llm then I will pass my prom template the prom template I have created now you can see I'm calling chain. run and here I'm giving the input let's say Mexican I want to see the Mexican now here you can see I have given Mexican as an input that means I want to open a resturent for the Mexican food now if I execute so it should suggest me some fancy name for this see this is the name it has me L sober D Mexico okay the flavor of Mexico now if you want to see internally how it is like creating the entire PR for this you can activate one parameter called varos isal to true now see if I again execute it will show you internally first of all it will create the complete prom template that means here you have given Mexican so it will first of all create the complete prom template with the help of Mexican this prom template will be passed to my large language model and large language model will give you the output got it so this is the work of chains now this is called actually single chains now let's see if you want to create a multiple chain that means let's say you want to create a chain and this chain output you want to again pass to another chain okay for this you can use something called multiple chain okay multi chain and to use the multi chain you have to use something called sequ Simple sequence chain so there is another class inside Lang chain chain called Simple sequential chain we'll be using this one let me show you one example let's say this is my large language model I have defined and this is the prompt I have created the first prompt you can see the same prompt I want to open a Resturant for the kisin food suest me a fancy name for this so it will take the cuine input and this is the LM chain I have created okay I think you remember this is the LM chain that means this is my LM rapper and this is my prom template okay now what I want whatever let's say Resturant name actually it will suggest okay whatever student name this prompt will suest that means this large language model will suggest this name again I want to pass to another prompt template for this I created another prompt template prompt template now input variable is restorent name that means this prompt will give you the restorant name yes or no because here you have given kuin fo suggest me a fancy name for this okay now it will give you resturent name and this resturent name I want to utilize and here I written another prompt s just me some menu item for this restaurant name that means let's say You have given Indian Indian let's say food now it will give you some Indian restaurant name and this Indian resturent name here I will pass and it will give me some menu item for the Indian resturent name okay I think you got it how it is interconnected with each other this is called actually multiple chain okay now see here Ive created another chain now if I you want to use this both chain I have to use something called Simple sequential chin now there are some limitation inside simple sequential chin I'll tell you what is the limitation as of now let me show you the let's say example so you can see I have initialized the simple sequential chain inside that chain is equal to first of all I will give my name chain you can see first of all I'll will give my name chain that means it will give me the restaurant name okay then I will give my food item chain that means this particular chain that means whatever Resturant name I will be getting from this chain I want to pass to the next chain okay which is nothing but my suest me some menu items for the resturant name okay now uh here is the final code chain. run here I've given the Indian that means first of all it will go in inside that and it will give the output and this output will go in the next next CH okay now it will give me the output let me show you now see I have given Indian now see this is the Indian menu I got that means what is happening first of all it is executing this promp template then it is executing this prompt template okay and how it is handling it is handling by the simple sequential prom template that means it is following the sequence first of all this sequence will execute then this sequence will execute that's how you can create multiple prompt not only two prompt you can create 3 four 5 six and so on if you need any kinds of let's say application uh this is like interconnected with let's say previous prompt okay you can create these kinds of sequential prompt now I think you got the idea how CH GPT works okay how CH GPT Works let's say how uh let's say if if you giving any kinds of input how it is connected with the previous prompt as well okay they're also using something called this sequential chain in the back end okay chain method they're also using I think it is clear now now the limitation of simple sequential chain is it is it is only showing you the last output last last chain output you can see only the menu item but if I want to also see the previous chain output what is the output it is giving for this you have to use something called sequential chain only okay sequ sequential chain not the simple sequential chain okay this is the difference only now let me show you one example let's say I've given the same example so I want to open a stent who in name okay here have to pass and here creating the llm chain okay now this is the another chain I created guys you can see so whatever let's say uh Resturant name actually I will get from my first CH you can see output key it will return you the resturant name so it should be the input for the next CH which is nothing but my uh menu okay menu of the resturant name here You' given the input is equal to Resturant name and this is the template suggest me the menu of the item for Resturant name and this is my second actually chain I have created and what would the output of this chain the output would be menu item that means whatever menu actually it will suggest you now here I have initialized my sequential chain now inside sequential chain I have to pass my chain first of all I have to give my name chain that means the first chain I have created then I have to give the second chain now here you have to specify the input variable what is the input variable I think you saw the first input variable is nothing but kuin okay kin should be my input variable and what be the output variable output variable would be the resturant name as well as the menu item okay resturent name as well as the menu item that means both it will show me now let me execute and let me show you see now I'll call my chain and here I'll give the input only which is nothing but Indian that means cuine name now see it will give you the output see first of all it will give you the cuine then the resturent name as well as the menu item that means this prompt it is giving you the output this prompt it is giving you the output even the menu item it is also giving you the output that means complete output you can see here so which is not available inside my simple sequential chin okay this is the difference only I think you got it right now got it so yes that's how actually we can use chin to interconnect my prom template with my large language model and we can uh easily get any kinds of response from my llm okay now in the next video we'll be learning about something called agents and Tool inside uh langin so what is agents and Tool exactly uh let me show you see agents and tools is a actually very powerful concept inside Lang chain so it will help you to let's say plug in with different kinds of let's say tool let's say if I give you one example um let's say I have traveled from Dubai to Canada I type this in chat gbt now give me to flight option from Dubai to Canada on September 1 20124 now CH gbt will not be able to uh give the answer because it has actually knowledge till September 2021 that means after 2021 if you asking anything to the chat gbt it won't be able to give the answer because it doesn't have like the new information new information regarding uh 2024 but chat GPT plus has uh xandia uh plugin if we enable this plugin it will go to the xandia plugin and uh it will try to pull the information about flights and it will show the information that means if it is not able to give the answer related 20124 what it will do it will try to connect some third party plugins third partyy API okay and from there actually it will pull the information and it will show you let me show you one example let's say this is my chat GPT now here if I give this prompt what was the G uh GDP of Canada in 2024 now see if I give this to the chat gbt see chat gbt searing Canada gbt see it is already searcing okay it is already searching in the third party API now see in 2024 now you can see it has given me the answer in 2024 what was the uh G GDP okay in that Canada that means it doesn't have the information about let's say 2024 uh what Wass the Canada JDP but it was searching okay it was searching in the third party API that me it has some plugins inside that okay so it is happening with the help of this agents only agents and Tool okay with the help of agents and Tool they are doing these kinds of task now let me show you how you can also perform this agents and Tool operation inside langin let's you want to create an application and this application will also uh be able to give the answer from the newest actually let's say uh information okay over the Internet for this you can connect actually different different tools different different plugins you can connect SARP apic this is the SARP API SARP API is a Google search actually let's say API you can also directly search from the Google even you can also connect the Wikipedia okay let me show you one Wikipedia example even you can also connect different different actually third party plugins okay there are so many third partyy plugins if you search on Google you will see different different third party plugins they are using okay you can also connected weather okay weather API to get the let's say recent weather it is also possible now see first of all I will be installing Wikipedia just to show you the demo of the Wikipedia now you can see I'm importing this Agents from the Lang chin I'm importing agents type then initialize agents and load tools and all then I'm also importing my openi that means I want to use openi large language model as of now now this is my let's say llm rapper okay now if you want to define the agents so you have to Define like that guys first of all call this load tools and inside that first of all mention which let's say plugins you want to use I want to use Wikipedia plugins that means whatever things actually I'll be searcing if it is not available inside my chart GPT CH GPT let's say knowledge base it will go to the Wikipedia okay it will hit the Wikipedia and from Wikipedia actually it will get the response then it will also use something called llm math tool and why llm math tool because let's say if you are asking something related JDP or let's say uh any any kinds of number any any kind of numerical representation so for this actually this llm math is required okay they're suggesting if you go to the documentation you will see that then I'm also passing my llm rapper this particular object okay now it will give me the tool now here I have to initialize the agents first of all give the tool the tool you have created then give the llm the llm you have created as well as the agent type so this is the agent type you can give and verbos is equal to True means it will also show you the output okay like what it is executing in the back end now just simply search agent. run what was the JDP of us in 2024 let's say this is my question 2024 JDP I want to ask okay now see if I execute this program now see uh it has actually connected with my uh Wikipedia and it has fced the information and this is the final results as you can see the JDP of us in 2024 was 28 trillion uh 28269 trillion okay it's great that means it is also able to get the current information okay newest information over from the internet itself and this is like very powerful tool guys trust me if you want to implement any kinds of let's say LM powered application and you want to integrate this kinds of functionality you can use this uh agents okay because Char gbt is also using agents in the back end it is clear okay now in the next video we'll be also learning about memory let's say I told you not CH GPT can also remember the previous context let's say if I give one let's say message here give me a code to add two numbers in Python let this is the prompt I have given now see it has given me the code now see it has given me one function but I don't need the function I'll just write without function now see it has automatically remembered my previous uh prompt I have given and now see beautifully it has given me the second response that means it is it is having some memory okay buffer memory in the back end with the help of that actually it is trying to remember my previous context so we'll be learning this part in the memory part I think I already showed you one demo of the chat GPT uh chat GPT can remember my previous uh let's say prompt that means whatever previous prompt you are giving it can remember that context right so how they remembering the previous let's say prompt and context because they're using something called memory okay memory in their application now with the help of Lang you can create this memory so whenever you want to create any kinds of genbi application so definitely you should integrate the memory with that because people will be asking the question and your application should remember that particular context okay this is the important things now let me show you one demo of the memory so here I've already written chatbot application like chat gbt uh you will notice it will remember the past information and how they're remembering the past information they're using memory so let me first of all initialize my llm rapper I'm using the open llm here now first of all let me show you if you are not using like memory okay memory let's say functionality from the Lin what will happen let's say here I created a pom template the same prom plate I want to open a restorant for the kuin food s me a fancy name for this now see if I create this prom template and if I give this prom template what I have to do I have to use llm chain here I'm passing the LM and here I'm giving the prom template okay now this is the let's say input I've given Mexican so it will give me the output the resturent name so guys you can see it has suggested me different different restaurant name now if I give Indian also see it has also given me Indian press random now if I show you the chain memory that means whether it has saved anything or not so I'll just write chain. memory see it is non type that means it hasn't saved my previous information whatever let's say question I have asked it hasn't save any kinds of information okay you can see it's a non- type completely it's a non- type now if I want to add the memory functionality what I can do I can use actually three kinds of memory inside Lang chain I'll discuss all of them one by one first of all let's try to see conversation buffer memory okay so just try to import Lang chain. memory import conversation buffer memory okay now see this memory will try to remember the previous conversation now first of all create a memory object you can see conversation B memory memory object now same thing you have to initialize only another parameter you have to pass memory is equal to memory okay now again I'm giving Mexican food now I have given let's say Arabic food okay now if I show you my chain. memory. buffard you will see that it has remembered my previous context so human has given Mexican then AI has replied again human has given the let's say Arabic input then again my agent has replied that means it is trying to remember my previous conversation amazing right now one issue actually will get with this conversation B memory it can remember all the input it will be giving let's say whatever input it will be giving all the input actually it will try to remember so whenever it is trying to remember all the input that means uh it is occupying your memory space so I don't need to remember all the let's say context of the user I can only remember let's say 5 to 10 let's say context it would be enough for me because if you go to the chat jpt also it can only remember five to let's say six uh let's say context five to six conversation okay apart from that whatever things it will say previously it will delete okay so for this actually we can use another actually memory called conversation chain okay now here I have already written conversation buffer memory goes growing endlessly that means it can save all the information and if I want to set only let's say five conversation or let's say or 10 to 20 conversation that time I'll will be using conversation chin now here is the example of conversation chin first of all you have to define the conversation CH and inside that you have to pass the your llm rapper now let me show you the template now see this is the template actually it will give you okay now you can see current conversation there is no conversation that's why it's empty now let me do some conversation so here I have given the first conversation who own the first Cricket World Cup let's say this is my first conversation so this is the output I'm getting you can see see the first Cricket World Cup own by the India in 2000 uh sorry in uh 1983 okay now here I will give another let's say uh prompt how much is 5 5 + 5 see this is the irrelevant question I'm asking now this 5 + 5 is equal to 10 now again I'm asking who was the captain of the winning team now it will refer my this this actually prompt okay this context now see the captain of the winning team in India was Kil Dev do you have any other question see amazingly it has remembered my previous previous let's say conversation okay that's how also chgb is working I think the same example I have given you you can also ask this question like uh this add number code question you will also see the same output okay now if I show you the uh my buffer memory right now so this was my input then this was my like uh model output again I asked this question again this was the output again I asked this question this is the output okay that's how actually you can say five to 10 conversation here okay five to 10 conversation here after that it will remove everything okay now you can also set the window size like how many conversation you want to save you also have one parameter to set for this you have to use something called conversation buffer memory window sorry conversation buffer window memory now just try to define the memory inside that just mention this parameter K is equal to one that means it will only remember one conversation okay now just try to uh refine this conversation chain inside that mention your llm as well as the memory now if I again do the conversation who won the first Cricket World Cup now I'll again Ask how how much is 5 + 5 now it is giving me the output now again if I ask who was the captain of the winning team now see it is telling I don't have an information context answer this question okay because I have only given K is equal to one that means it is only saving my one information okay now if I give there's a k is equal to three now it will remember my three previous three conversation let me show you now again if I ask this question who was the captain of winning team now see guys it is giving me the output okay now if I show you the conversation now you can see it is remembering my previous context got it so that's how whenever you are creating any kinds of application guys try to use this uh memory okay memory inside your application this will make your application very powerful and now I think you are getting the logic behind chat GPT how chat GPT is working it's just a application guys always try to remember chat GPT is an application inside that they're using large language model which is nothing but GPT series okay and whatever functionality they have created this memory functionality then chain functionality prompt template functionality they're using these kinds of framework langen framework or Lama index framework there is another framework called Lama Index this is the alternative framework of langen we'll be also discussing this part as well fine okay great now in the next video we'll be learning about documents loader let's say uh whenever you want to build any kinds of rag based application retrieval augmented generation let's say you have some custom documents and if you want to load these documents and you want to connect with your let's say uh large language model that time you have to load your documents okay whatever documents you are having whether it's a PDF documents documents documents or let a THD documents even you can also load the website also just on any kinds of file format you can open any kinds of website you can integrate here okay so L chain is very powerful guys you'll be loving a lot trust me guys so in the next video we'll be learning how we can load the documents then after learning this Lang chain we'll be also implementing different different projects so that this concept would be clear how we can load our custom documents how we can create a rag based application okay how we can create a chatboard different different things we'll be learning so if you go to the langen documentation you will see we can also load different different documents with the help of langen so you can load let's say custom documents let's say any any kinds of file format CSV then file directory HTML Json markdown okay Microsoft Office PDF Tex 3 okay any kinds of documents you can load with the help of this Lang chin even you can also connect different different let's say platform you can also connect slack you can also connect let's say uh Discord and from there also you can extract the data it's like very powerful guys you can go through the documentation you will get each and every IDE even they have also given the cod in it okay how we can let's say connect uh with different different let's say document format and how we can load the documents fine see always try to remember whatever let's say data we are loading inside langen it would be considered as a document let me show you one example so here let's say I want to load one PDF uh documents let's say PDF I want to load let's say I'm having one PDF let me show you so this is my resarch paper guys I so this is my research paper guys I published uh some years back you can see I'm the author so this is the author okay I'm the author now you can see this paper is about actually uh development of multiple combined regression method for the uh rainfall measurement okay and this paper is already published uh in the research gate let me show you if you go to my LinkedIn profile this is my LinkedIn profile you can connect me on LinkedIn guys you can follow me so if you have any question you can ask me there I'll try to reply now see if I show you uh this particular publication so see this is this is what I've already added now if I open this publication see this is the publication and this is in research gate okay even if you open the Google Scholar also you will get it there so this PDF actually I have downlo downloed this paper PDF I have downloaded now what I will do I'll just try to load the documents okay whatever let's information I'm having in this let's say uh PDF I want to extract these are the information for this I'll be using langen so let me show you first of all I need to install one package called P PDF now let me upload that PDF here so my paper I'll upload it here now see it is getting uploaded you can use any kinds of documents guys docs dxt csb just on anything and again visit the documentation you will get all the codes let's say you want to use Jon so this the Json okay Json loader you have to use let's say you want to load csb you have to use CSV loader for this okay now I'll be loading something called PDF that's why I'll be using PDF loader okay now see this is updated now I'm importing this PDF loader from Lang you can see document loader PDF loader now here you have to give the location of the file let's say this is my location okay now you have to call load loaded. load now see it will automatically extract all the information and this uh data would be considered as a document let me show you always try to remember inside Lang chain inside geni all the data would be considered as a documents okay that's why I think you remember in the vector database session I was talking about documents okay chunking documents these are the thing okay now I think you got it now see it has extracted all the pages now see this is considering as a document this is the type of documents right now and all the information present inside my paper it now we can use this data to implement any kinds of rag based application that means with help of vector database I can store these are the data with help of embeddings and I can connect my large language model and I can ask some information there okay don't need to worry I'll be explaining this rag concept and all okay why rag is important why we have to create the rag even we'll be also learning about fine tuning okay how we can let's say take our custom data and we can perform the fine tuning as of now we have learned the fundamentals of langin and I think I covered almost everything about the L chin whatever things you need to work with the Lang chin but I will show you some more advanced concept of the Lang chin this will also help you okay so so far I think we have covered so many things inside Lang chain we have uh learned the entire fundamental concept of the Lang chain so one thing I wanted to tell you see Lang chain also can work with this one your pandas data frame that means directly pandas data frame you can pass to the large language model and you can ask some question there okay it is also possible for this uh you can use your large language model any kinds of large language model and with the help of langin framework you can perform these kinds of operation let me show you so first of all I have to install some of the library so here you can see I'm installing langin and langin experimental why langin experimental because this Panda's data frame actually agents will be using now this is available inside Lang and experimental okay that's why I have to import all of them so let me import and I'm going to use open large language model that's why I'm using open here now I'm going to import some of the required liabilities I need now you can see from Lang chain experimental agents A toolkits I'm importing create pandas data frame agents okay you can go to the documentation you can see pandas data frame documentation inside langin and they are also loading in that way okay and they are giving u a data set okay any kinds of data set they're loading with the help of pandas and they are performing lots of operation okay see you can use different different large language model and you can perform chat operation okay with this uh data frame let me show you so let me import the library first of all I'll import the pandas as well I'll set my open API key then this is the data I want to load let's say this is the csb data Titanic csb data it is available in this GitHub if I show you the live GitHub link so this so this is the data guys it is already available so let me first of all load this data with the help of pandas so here is the data guys I think you already familiar with this Titanic data now first of all we'll be performing this chat operation with the single data frame so I'll initialize my large language model now create a agents to create agents just call this create fond as data frame agents this class inside that give the llm data frame varos is equal to two means it will show you the entire let's say execution details and here you have to give another parameter called allow dangerous code is equal to true now I'll create the agents now here I can ask the question right now I'll ask how many rows are there in the let's say data frame now see it will count and it will automatically give me the answer see around uh uh 891 okay rows are available I will give another question how many people have more than 23 Ed see amazingly your model will try to um go through that data frame and it will give you the answer see for 468 now I can also work with multi dat Fame so for this what I can do I can copy this data uh in another variable called df1 see I'm copying this DF only and I'm creating another df1 here this is the data now what I will do I'll just fill the uh nonone value okay which is present inside H because H is having some non value I'm just fing now again I'm creating the agenty you can see now here you can see I'm giving multi data frame DF and df1 okay now let me create that agents now I'll ask one question how many rows in the ages columns are different okay now let me show you because I already filled the information now around 177 rows were have the N value now you can see rows have different values in the agge column I think you got it now I'll create another data frame called df2 and now I will just multiply two with the age whatever age I'm having I'm just multiplying two now this is the results now I'll create another agents and it will have three different data frame okay now let me create the agents now we ask one question are uh the three of The Columns same in the all the data frames are not definitely it should be same for all the data frame because I because I have just copy pasted the same data frame again and again three times so so here all the column name should be same if I show you the output C uh so see guys I'm getting the output agent stop due to the iteration limit or time limit because I'm executing multiple time now that's why I just uh uh use the limit okay that means my limit has been done uh so what you can do you can restart the run time again you can execute the entire code you will see that all the column should be same okay in three different data frame okay you'll get this kinds of output now you can ask any kinds of question okay about this data frame so this is called actually multi data frame agents inside Lang chain and this like again very powerful concept if you want to work with the data frame and all going forward we'll be also implementing some projects with that okay this concept will help you a lot so as of now I think I showed you lots of example lots of demo of the langen like what are the things we can perform even I also told you we can also let's say access different different uh open source large language model from the hugging F itself okay so this would be the dedicated video about this Lang chain integration with the hugging F so there I will see that how we can access different different model uh with two kinds of method like one method I will show you how we can access through the API request other method I will tell you how we can download the the model okay uh in our Google collab and how we can use this particular model okay this is the idea so first of all let me install some required package so you can see I'm installing Lang chain Lang chain Community hugging face up Transformer why Transformer because I want to use hugging face platform I want to download the hugging face model that's why Transformer is required I think so I think I already taught you about the hugging face like how to use hugging face and what is Transformer Library everything I already discussed and these are some actually dependency package you need to also install with the hugging face that means your Transformer now let me install all the one by one so guys as you can see my installation is completed now let's import some of the library you can see I'm importing prom template hugging face up llm chain from the Lang chain itself now first thing what you have to do you have to setting up the environment for this you have to set the hugging face API token and how to get the hug API token I think I already explained go to the settings and left hand side you will see access token option so you can create a new token here I already showed you how to create a token okay so I'm not going to show you again so now let me set my token now we'll be learning the first approach like access the hosted model on hugging face through API request okay now see here we'll be accessing one text to text generation model so first of all let's create a prom template so here's the prom template I have prepared what is the good name for a company that makes product so product should be my input here now here I'm creating the LM chain I'm giving my large language model and you can see I'm using Hing face up and I'm giving this model ID that means I will be using this model so this is the flan T5 model uh this is from Google actually so we'll be using this model here so let me load this model and here is the model arguments that means temperature and max length parameter and here I'm giving the prompt okay the prom template I have created now let me create the chain object now here you can give the output let's say I give colorful socks let's see whether it is able to give the response or not see it has given me sock Mania okay this should be the name now let me show you another prompt you can see I have written another prompt can you tell me about famous footballer so it will take the famous footballer name and it will um tell you about him so let me show you so again I'll create the chin and see the same code actually I'm using now if I give Messi now you can see guys it is giving me the response Messi is a footballer who plays for Argentina great now you can give another prompt let's say uh can you tell me food items for the cuisin restaurant so kuin should be the input let's create and I'm using the same code snippit now let me initialize the chain and let me give the input let's say Indian now see it is giving me uh vegetable okay can you tell me the food items yeah vegetable is fine now if I again execute let's see okay vegetable it is giving because I told you now this model is not good now guys let's see how we can use any other model see again I have prepared one prom template and again I'm using the same thing can you please tell me about famous footballer now instead of this T5 model I'm using Falcon 7B so this is one of the large language model it is already available in the hugging P okay you can see so this is the organization they publish this Falcon and Falcon is having different different variant Falcon 7B 13B okay that's how is having different different variant and this is one of the like great uh large language model you can use now let me show you one demo now let's load it and see I'm using the same codit and I'm sending the request see this model actually I'm not downloading in my machine so it is using the API to access the model and it is giving me the response and that response actually I can see okay now see this is the response I got and it's like very detail response I got okay than your previous response now let's see the approach too like how we can download this model locally and how we can create a pipeline that means that hugging face pipeline I think remember right for this let's import hugging pH pipeline from Lang chin then I'm also importing some additional Library like Auto tokenizer auto auto model for casual LM then pipeline okay these are the thing I'm importing because I think you remember how to create the pipeline so let me import them now see I'm using this flant T5 model again so let's initialize the model and first of all I have to create the tokenizer if I want to download the model I have to create the tokenizer I think you know that right tokenizer will pre-process your input that means it will process input it will create them Bings and then it will pass to the model now and now here I'm going to initialize my model you can see I'm giving the model ID then device map is equal Auto that means it will load the model inside my GPU and make sure whenever you are like downloading the model locally you are using GPU based machine okay good configuration machine otherwise execution time would be very like slow okay but if you're accessing through API you don't need a GPU based machine now let's create a pipeline you can see it's a text text to text generation model so here I've given text to text generation model tokenizer and max length now let me create the pipeline now I'm going to initialize my llm rapper so I think remember we called this hugging face pipeline from langin now so here you can see I have initialized my llm wrapper and pipeline the pipeline object I'm getting I'm passing inside this H pipeline now this is going to be my Raper now again I'm going to create the prom template and this is the example I have taken the same uh like a company okay company example now let me pass to the LM chain and as well as my prompt see I'm passing my large language model as well as my prompt and now see the model actually I'm passing the this model actually have downloaded okay llm local local LM not the API one okay so both way you can use this hugging face now let me show you the results see socks Mania now let me prepare another prompt can you tell me about famous footballer now let me initialize the chain now let me ask about Messi see Messi is a footballer who place for the Argentina okay so that's why guys we can access uh hugging fish model open source langage model with the help of langen and going forward we'll be using this concept guys and with this concept we'll be implementing so many application so this project we'll be implementing uh with the help of whatever things we have learned so far let's say Lang chain large language model Vector database okay even we'll be also implementing one front end uh application of this project that means uh user will get one user interface and their uh us user will upload the data and they will get the results okay so these kinds of things actually will be also implementing that means I'm going to show you the complete project structure here that means we'll be doing modular coding here but before that I'll show you the notebook experiment uh like how uh we can implement this project through the jupyter notebook then I'll try to convert this jupyter notebook to the end to end manner okay so uh I think you saw the name interview question Creator I think you are already getting what is the project about interview question Creator means let's say you are having one PDF documents or let's say any kinds of documents whether it's a doc uh docs documents PDF documents TT documents or whether it's a books okay so what you have to do you just need to upload that let's say PDF uh to this application and this application will automatically generate the questions okay question as well as the answer okay uh of the topic actually will be giving let's say you have uploaded one python PDF here so this application will generate some python questions interview questions uh as well as the answer okay and that question and answer you can use let's say for your candidate or let's say you are a teacher you are a teacher and you want to generate interview questions or let's say uh exam questions what you can do you can use this application to generate these kinds of question and answer so it would be very easy for you to generate these kinds of question otherwise you have to manually find the questions manually let's say prepare the answer so it will take time but if you're creating these kinds of application it will help you a lot okay to automate your process again it seems like a simple project but whenever you will be implementing you will get the compx City and this is like very interesting project because uh this is the first project I will be implementing after learning Lin going forward will be also implementing some Advanced projects like we'll be implementing medical chatboard source code analysis okay so these are the thing we'll be also implementing so instead of talking too much guys let's start the implementation but before that uh I will show you the let's say the requirements actually I need to implement this project and I'll will also show you the project architecture so guys to implement this project uh I need some requ requirements okay I need some requirements so here we'll be using langin to implement the entire let's say uh project and why langin I think you know because langin having all the functionality right let's say you want to integrate Vector database you want to integrate large language model okay everything is available here so that's why we'll be using the complete Lang chain here and large language model wise we'll be using open model open we'll be using GPT 3.5 okay this model actually will be using going forward we'll be also learning how we can use open source starge language model with the help of that I will also show you how we can create the application now third I need uh Vector database Vector DB so here we'll be using F okay so FS is another actually Vector database I think I haven't covered in my Vector database series uh so that's why I thought let's also show you this F in this video so that you will be also learning about F so F has implemented by Facebook Ai and this is one of the vector database this is the local Vector database actually local Vector database so you have to set up everything in local machine going forward we'll be also using pine con we okay no need to worry then to implement the entire let's say front end part part of our application that means we'll be creating the user interface with the help of fast API fast API I think you know what is fast API fast API is a python framework with the help of fast API we can create a uh user interface web application apart from first API we are having let's stream lead flask Jango okay Falcone so these are the thing you can also use we'll be exploring one by one all of them I think we saw the flask previously I think remember flask I think we I showed you we created some of the application with the help of open uh we'll be also using stream lit streamlit is very easy if you're using a stream lit you don't need to write it in kinds of HTML and CSS code so guys yes as of now these are the requirements uh are needed uh if I need it later on I'll tell you okay now let me show you the project uh diagram okay the project let's say structure uh that means the high level architecture so here uh first of all user will let me just draw it here first of all user will upload one PDF documents okay let's say this the PDF documents so what I have to do I have to extract that data extract docs so why I have written docs because I think you already know if I I'm using langin and if I'm let's say extracting uh any kinds of data from any kinds of PDF or any kinds of let's say um I mean file format it would be considered as a documents I think I already covered multiple time like Lang chain data loader even I also showed you inside Vector database session so guys uh Vector database session is very much required here because inside Vector database session explained each and everything you need to know to implement any kinds of project okay how to connect llm what is documents what is Chun what is Chun overlap everything I have discussed there so please go ahead and try to watch that uh let's say session first of all then you'll be able to understand okay what is happening here because here I'm not going to uh explain in detail everything we are implementing the project only and we are using our previous concept okay this is the idea so make sure you uh complete that Vector database series first of all fine so we are uh we'll be extracting the document from the PDF then we have to create a chunks and what is Chunks I think I already told you why chuning is required because llm is having one kinds of input limit okay so that's why actually we have to create a chunks okay chunks then what we'll be doing uh we'll be using one embedding model what is embedding model I think you already know I already explain inside my Vector database uh session embedding model will help you to generate the vector embedding okay because I have to convert this chunks to the vector embedding so this will give me something called Vector embedding okay uh Vector embedding okay embedding and with this Vector embedding we'll be creating One centic S I already explain what is santic s santic search because uh I think you know the power of vector DB it will give you one CTIC s kinds of functionality now uh what I have to do I have to store this uh Vector to a vector database Vector database because if I want to perform the centic source operation I have to uh use the vector database okay I think you already know now guys you can see my knowledge base has been created so this is called actually knowledge base right now okay knowledge base because it is having the entire information about my data now I'll be connecting my large language model here so let's say um this is my large language model um llm that means that GPT 3.5 okay so this large language model I'll be connecting here with my Vector database okay and here I will set a prompt um I'll just set a prompt here so in inside this prompt actually I'll be writing what kinds of let's say task it has to perform so here I'll be writing you are a uh expert uh uh interview question Creator so what you have to do whatever let's say data user will give you you have to create a interview questions okay or let's say 10 questions 20 questions you have to create it okay this is the idea so this kinds of prompt actually I'll pass to the large language model so I think you already know prompt is everything if I if I'm using any kinds of llm right so with the help of prompt we can uh achieve our task this is the main idea so this llm will go to the vector database that time and because Vector database having all the information about the PDF and it will create okay it will create what it will create you uh interview questions so it will return interview questions interview questions okay fine now what I told you I'm not going to take only the interview question I will also um going to take the interview question answer as well from the large language model so again what I will do whatever questions actually I'm getting again I'll pass okay again I'll pass to my large language model again I'll pass to my large language model and I will tell you tell my large language model model also provide the answer the questions you have generated so it will give me the answer that time so it will give me questions answer okay as well so this is going to be my complete project architecture okay so based on this architecture we'll be developing the entire projects fine so first of all Let's uh do everything in my jupyter notebook then once jupyter notebook is working fine then I'll uh show you the uh let's say modular coding implementation as well so for for this guys what I will do I will open up my local folder and here I already created one folder here Mt folder inside that I'm going to open up my terminal okay so in case if you're using anaga G bash whatever terminal you are using you can open it up now here I'm also going to open up my visual code Studio so let me open up my visual code Studio now here the first thing uh what I have to do I have to create one virtual environment I think I already told you um you just need to create a virtual environment every time whenever you are creating different different projects so to create the virtual environment you have to execute some of the command so let me share the command with you as well so here I'm going to create a file called readme MD so this is the markdown file inside that I can mention all the command and this file uh uh will help you to render actually these kinds of message in the GitHub so let's say whenever you will be uploading this code to the GitHub that time you'll see that in the GitHub description that means your project description uh all the details has been written okay let me show you one example so guys uh this is my GitHub profile you can follow me here also because here I have created lots of repository that might help you a lot so let me show you my repository guys one of the project actually I implemented previously so let's say uh this project okay um MLS production ready machine learning project so this is the project actually I created now if you open this project and if you go to the read me section you will see that the complete details about my project okay see the complete details about my projects like how we can set up what is the workflow what are the command you have to execute okay everything I have set here so how it is rendering it is rendering because of this rme file you can see readme.md file okay so that's why we are creating this rme file here because whatever things you will be writing here it will render in the GitHub later on and this is the idea yeah so here uh some of the common command you have to execute every time let me show you all the all the command so see guys these are the command you have to execute first of all you have to create the environment after that you have to activate it after that you have to install the requirements to install the requirements you have to execute this command okay be install hypen requirement. txt so let's create a file here uh I'll name it as requirement. txl copy and let me create the file as well okay now first of all create the environment so copy this command and open up your terminal and execute it here okay execute it here for me I already created the environment what I'll do I'll just try to activate it but for you you just need to create the environment so for me let me activate so this is the environment I created already interview you can see fine now inside interview I have to install some of the required package the package actually I need I think I showed you the Lang genen open AI then uh Vector database fast API okay everything I have to install here so I already listed down all the required package you need h Huh so these are the package guys you need okay you need to install so you can see lch lch Community langen code so these are the actually dependency package if you want to use langen so you have to install it and again we are doing local setup guys that's why some additional package you can see otherwise what will happen actually you might get issue installation issue that's why I have added everything now open i p pdfi p PDF because user will upload PDF documents here as of now we are considering PDF documents fine and Tik Tok and Tik Tok is the dependency of open then then you can see I files fast API uh uvon so these are the dependency of fast API uh I'll tell you whenever we'll be using these are the package that time I'll explain okay as of now just consider these are the package actually I need to implement the entire projects okay now you can see we'll be using F and to install the F you have to um execute this command F CPU then python. EnV because I have to manage my uh secret credential okay now let me save everything and you have to install it to install it this is the command guys I already shared so copy the command and let's execute it here for me I already installed all the package that's why Stelling requirement is already satisfied but for you it will take some time okay now let me clear all right now first thing I'm going to create a folder here called resource inside resarch I'm going to create a notebook I'm going to as experiment I'm going to name it as experiment do ipy NB because this is The jupyter Notebook file I want to create okay that's why it's ipb file now let me select the cardal so the environment I created this in interview okay I'll select it up now here first of all let's import some Library I need the operating system then I also need EnV so fromb import load EnV now let me execute so it's working fine so I think remember I have to create a EnV file here inside that I have to mention my open API key so let me do it so guys as you can see I have created this EnV file inside that I mention my open a IPI key okay so for you you have to do the same thing now let's load this open II key so to load it I'll call this load EnV after that simply I'll call the key open API key and I'm going to use os. gmv inside that I'm going to pass my key okay so this will give you open a key let me show you see okay it is printing the open a a ke now let me comment as of now I don't need to print it fine and now what I have to do I have to set this hop AP key as an environment variable so for this you have to execute this line of code so it will set this open a key as an environment variable so that open a package will load okay from the environment itself I think I already explained previously this part okay how to do it and all now the first thing what I have to do guys I have to load the data but I don't have any data here so let me show you some of the PDF actually I'm having so guys as you can see in the data folder I'm having actually two PDF one is like HGD PDF one is like starts PDF let me show you let me open the PDF and let me show you so if I go to the data folder so this is the PDF guys I downloaded from the internet uh so the PDF name is sustainable development goals okay so about this topic actually they have written this PDF you can see what is sustainable let's say development and all they have written this particular let's a PDF so this is uh one PDF actually we'll be using to generate the interview questions let's say you want to generate interview question based on this topic okay so you can use this PDF not only this PDF guys you can use any kinds of PDF whether it's a python book any kinds of physics chemistry English anything you can use here it's up to you so this is the PDF guys actually I'm having now the next PDF let me show you so this is the statistics PDF so this is the topic of importance and the use of correlation in statistics and again you can see correlation topic has been written so we'll be also generating some interview questions based on the statistics okay that means the correlation so this two PDF actually I just downloaded from the internet okay now let's load the data here so I'm going to to open up my notebook so to load the data you have to I think remember you have to uh import one let's say uh function from the langin so let's import it from langin dot documents loader okay documents loader input uh input Pi PDF uh Pi PDF loader I think yeah this one p PDF loader because it's a PDF document right now let me import it now one thing I want to show you so let's say if I show you my uh project working directory right now so let's say PWD this is the command to check my project working directory now you can see that I'm inside my resarch folder okay you can see I'm inside my resarch folder so because this experiment. ipnb is available inside my resarch folder but where is my data located data located outside of the research folder yes or no because outside of the resarch folder data is available okay now if I want to go back if I want to go back uh to my root project directory that means Lang chain project what I have to do I have to execute one command uh this command is CD dot dot okay CD dot dot is the command so this will actually go back one folder back let me show you so now see if I execute the command now if I again check the project working directory now you can see that I'm inside my root directory that means this directory okay Lang chain project now I can easily access my data right now okay this is the idea so make sure you always check the path project working directory okay if you're working with let's say uh jupyter notebook uh in a specific folder okay this is the requirement now let me Define the file path file _ path is equal to so my file is present inside my data folder okay data and let's say as of now I want to load this hd.pdf so H sorry it should be S DG okay sustainable uh Development Goal this PDF I want to load PDF okay and to load it I'll be using pi PDF loader inside that I'm going to pass my file path okay and it will give you uh loader loader object now I'm going to load the data so I'll just write data is equal to loader loader do load that's it now see if I execute it should load the data now if I show you the data see so the complete documents it uh so guys you can see it has extracted all the data from the PDF itself and it is having around uh 24 pages you can see it has started from zero till three that means 24 pages actually it is having this PDF if I open this PDF you'll see that 24 pages it is having and all the pce content it has extracted and some of the places you can see p content is equal to empty because in this page actually there is no content that's so it's empty and whatever actually documents I'm having it has extracted okay one by one everything now if I want to uh show you the length you can see 24 pages are available okay in the PDF now what I have to do see it's a separate separate pH content now I'm having now I want to let's say uh store all the data in just one variable so for this what I will do uh I'll just take a variable here so let's say variable name is question undor gen you can give any variable name and subtitute it should be initially empty string now I'll just write a fold Loop so for page in let's say data let's say the complete data I'm having so it will give me all the page one by one and I just need to extract the content so question gen uh plus and equal I'll just I'll be just adding okay in this variable okay this is the idea I'll just write P dopor content okay so it will give me uh all the content one by one and it will save inside this question gen variable now let me show you now if I print my question gen now see all the data I am extracted okay see now it is in one place only this is the idea now see this part actually have completed that means whatever PDF I uploaded I extracted the entire documents okay now what I have to do I have to um do the chunking operation that means I have to create a chunks um for my large language model uh because if I want to let's say generate the embeddings before that I have to do the chunking operation I already explained this part I think remember so to perform the chunking we'll be using one package so it is available inside langen so len. text splitter so we'll be using uh one text Splitter Splitter here called token text splitter okay so previously I think we used something called character text splitter then recursive text splitter I think remember we use character okay character text splitter okay splitter so with the help of that we can perform the chunking operation I think remember then we have also have something called recursive uh recursive okay text is splitter so again this is another method to perform the chunking operation and now we'll be using something single token text spitter token text spitter now what is the difference between token Tex spitter and character and recursive see let's say this my entire documents so I think remember we used to perform something called chunk size okay CH size let's say uh let's say uh five okay 500 and there is another parameter called s _ overlap let's say it's 100 okay now how it will the chunks I think remember first of all it will start from the first and it will count 500 wat let's say 500 wats ends here so this is our first chunks okay and to start the second chunk first of all it will apply the chunk overlap let's say 1001 back actually it will go so it will count uh 1001 let's say this is the 100 W start from here so it will start the second chunks from here and again it will count till 500 wat let's say 500 wat ends here okay so this is my second chunk okay so that's actually it will perform the chunking operation now you can see uh there is a chunk overlap you got so this is called actually overlap okay this is called overlap and with this overlap actually my uh model will understand after this first chance this Chance is coming because you can see it is getting overlap now this is the actually manual manual approach actually we can consider this is the manual approach we can consider to get the context context of my first SS and second chunks okay and so on like whatever chunks actually are defining here but uh this is actually what we do in the character Tex spitter or recursive text splitter but what about token text splitter see token text spitter what it will do instead of using Okay instead of using actually this manual approach it will use one large language model it will use one large language model in case actually we'll be using something called GPT 3.5 okay so this GPT 3.5 will decide okay uh like uh how to create the chunk how to perform the overlapping and it will automatically remember let's say after this first chunks this second chunks is coming after second chunks this third chunks is coming after third chunks this fourth chunks is coming okay your large language model will try to remember this part okay and this is like more powerful method than your previous one Whatever let's say method you used previously because now LM is like remembering everything the context okay that's the idea so let's try to explore this uh one this token text is printer so for this I'm going to open up my notebook so I already imported now let me execute now see uh this is the synex to use the token text sper so I think you remember previously we didn't use any kinds of model name whenever we used to perform the let's say chunking operation now you can see I'm using the model name I'm using GPT 3.5 turbo that means my model will try to decide okay how to remember the context now you can see this is the Chang size Chang size I'm expecting 10,000 okay 10,000 actually what would be consider as one chunks and chunks overlap should be 200 okay as of now let's say this is the things I'm just showing you just to show you okay how it will work it just experiment okay I'm just showing you how we will try to create the chunk now let's define the splitter okay this is my splitter now inside that I'm going to pass my entire documents so you can see the entire questions and documents actually I'm having I'm passing to my splitter okay splitter objects you can see speed text it will give me chunk question gen that means the uh chunking okay it will give you the chunking result let me show you so here is the chunk I got see this is the chunk I got now how many chunk it has written for this you can use length function you can check see it has only given me one chunk because why the PDF you can see this PDF is DG so if you count all the words it won't be actually 10,000 words okay it won't be 10,000 words it is less than 10,000 wordss that's why here I given chunk size is equal to 10,000 it is only considering uh one okay one chunk the entire documents because I told you if you count the all the let's say what okay in this do let's say PDF it won't be 10,000 okay because it's a like hug size I have given here just to show you okay how chunking will happen now let's perform our actual chunking for this what I have to do I have to first of all convert this uh this actually data to the document format because you can see now it's a list format okay if I show the type okay if I show you the type of this one CH question now it's a list inside that if I just extract the first element it would be a string see it's a string but I have to convert to the documentary presentation so for this what I will do I'll import one uh class from lanin called doc documents import documents okay with the help of documents we can easily convert any kind of string to document representation okay now let me show you see now whatever let's say um data you got that means your uh this one chunk question gen so I'm applying on for Loop that means it will give me all the let's say data one by one and I'm converting to the documents you can see okay and I'm storing in this particular variable now if I execute now see I got the documents and it is format of documents right now okay now if I show you the type type of document question in it should be a langin code document BAS document documents okay it's a now document format because if I want to apply the splitter so first of all you have to convert everything to the document this is the recommended way okay if you're also giving the let's say string directly it's completely fine but this is the recommended way first of all convert everything to the document format then try to use the splitter that means the chunking operation now I'll do the chunking again see again token Tex splitter again I'm using gbt 3.5 TBO model now I have given the Chun size is equal to 1,000 that means 1,000 mod I want to consider as one chunks and chunks overlap is equal to uh 100 okay now let me execute now let me give my documents now you can see do document question gen okay I'm passing it to my uh splitter okay splitter object right now now it will give me the chunk now let me show you now see I'll get multiple chunk here so I got here four chunks okay four chunks actually I got from the entire PDF now if I show you the length see four chunks I got fine I think it is clear now so guys as you can see we successfully uh created the chunks now the next thing what I have to do uh first of all I will generate the questions uh like whatever let's say chunk I have created I will pass to my large language model and I will generate the questions okay interview questions based on the prompt actually I'll be providing I think remember I think you remember uh we'll be passing one prompt to the large language model okay so with the help of this prompt actually I'll tell my large language model um I need a uh interview questions okay let's say the documents I have given based on that it should provide provide me some interview questions that's what actually I need to perform so for this I don't need to convert this documents to the embeding representation because as of now we are only passing the let's say uh documents to my large language model large language model will give me the questions but later on whenever let's say I'll be doing the answer generation okay the complete answer generation that time actually I I need to pass the entire documents okay and it will create the vector embeddings and it will store to the vector database okay and uh Vector database I'll will connect my large language model and large language model will refer this interre inform to give me the answer as well okay this is the idea so let's define my large language model right now so here I already told you I'm going to use something called open uh large langage model that mean GPT 3.5 okay this model and to use it I can use this class actually chat openi you can also directly import openi it is completely fine but we can also import like that okay both way you can import and if I'm importing like that so here I can also give my model name that means which specific model I want to use whether I want to use let's say gbt 4 model 3.5 model you can use so let me show you so this is the Cod nibit so chat open inside that you can give the model name let's say I want to use GPT 3.5 TBO model and this is the temperature parameter you can also give max length parameter and so on so temperature parameter is a creativity parameter I already explained okay what is the temperature parameter now let me Define my llm now here I already created one prompt guys promt template let me show you so this is the prompt I have created guys you can see you are an expert at creating question based on the coding material and document mentation see uh whenever I designed this prompt actually I was uh like generating coding related questions and now I'm using any other documents you can see um that means the uh this one sustainable development goal and statistics one so if you're using statistics one that time you need to give statistics material if you're doing uh sustainable development goal you have to give sustainable development goal here that means whatever subject you are referring you have to give the prompt with respect to that because it's a changeable prompt is changeable okay you have to change every time based on your requirement now your is to prepare a coder for a programmer for their exams and their coding test you do this by asking the questions about the text below that means whatever let's say data user will provide that means this chunks okay based on that it will create interview questions that will prepare for the coder um programmer for their exam test okay make sure not lose any important information okay this is the prompt actually I have created and I already told you like how we can design a efficient prompt what is the art of let's say design a prompt I already took on session uh on the prompt engineering that uh session you can refer okay so that's how always you have to prepare a uh good prompt whenever you are preparing good prompt that means you will get a good response from the large language model this is the idea now let me Define The Prompt now to use this prompt I think I already told you one concept called prompt template you have to use something called promp template from the langen so let me show you so this is the Cod cipit prom template okay so here I'm passing the prom template the prom template I've created and this is the input variable is text that means user will give this data okay this is the input variable I think it is clear now let me execute the prompt okay now this is my template right now uh we can do another actually uh very important let's say technique here uh see if you're not doing it it's completely fine it will work but I was going through some of the research paper research article and I got to know people are using something called second layer verification that means they are doing refine template refine prom template so what is refine prom template let me show you I created one prom template see this is the prom template I again created that means whatever questions actually your model will generate from the first prompt you have to give those question to the second prompt that means it will refine that particular question let's say if there are some issue with the question if let's say this question is irrelevant based on the topic you are asking again this refine prompt template will try to refine and again it will give you some new questions okay on top of it so here you can see I've written the same prompt again but one more additional information I have added we have received some practical questions to certain context that means it will give me some questions okay this question actually I have to give to my second prompt and second prompt we try to check we have the option to refine the existing questions or add new one only if necessary with some more context below that means if some issue is there if let's say it is irrelevant that time what it will do it'll try to rectify that question okay this is the idea give the new context refine original questions in English if context is not helpful please provide the original questions this is the idea so this will actually refine from template you are refining the questions here that is the idea only and this will like very powerful method guys if you are using you will see that your result would be pretty good if you're not using it it's completely fine no need to worry but I'm showing you uh because see we are creating in Advan application and in Advan application we have to take care these are the part okay this is important let's also Define this refine prom template again I'm going to use prom template inside that I'm going to pass the input variable now input variable is two one is the this existing answer the existing answer I will get and the text that means the again you have to give the entire text that means the chunks okay so this two input now you have to give you can see text and existing answer and it will give me the refine prom template fine now I'll generate the questions for this I need to integrate my large language model as well as the prom template for this I'm going to use one function from Lang chain called load summarize chain okay previously I think I showed you we can use chain okay only chain we can use now there is another chain actually called load summarized chain because inside Lang chain you are getting different different chains okay okay we are using this particular chain actually load summarize chain now we'll be creating my entire CH see this is the entire chain first of all you have to give the large language model OKAY the LM we have defined GPT 3.5 then chain type is equal to refine because we have reped one refine PR template okay that's why it's a refine varos true that means it will show you the execution um all the let's say logs then here I'm giving the question prompt first of all the prompt I have defined at the very first okay this is the this is the question prompt okay because it's a chain it will execute after uh one one after another okay first of all it will execute and whatever question actually I'll getting I'll pass to the Define PR template okay you can see refine prom template okay now this is going to be my chain right now now simply I'm going to pass the document question that means that means this one I have to pass this one that means the entire document okay this document I have to pass right now to my large language model and it will give me the questions okay it will give me the questions and these questions I'm printing let me show you see it is generating and it is giving all the information because you have defined barbas is equal to true now see these are the questions I got I got 10 questions now if you got if you want to get 100 questions you can Define here you can Define inside the prompt I need 100 questions okay you have to generate 100 question it will generate 100 question by default it generating 10 questions now if you if I want to show you I will open in a text editor see all the 10 questions I got here but apart from that I'm getting some more additional information I don't need I only need the questions you can see 1 to 10 questions it is giving me what is the main goal of the sustainable development goals method what are the some key achievements in the see that means if you read this questions it's pretty good now as a human if if I tell you just prepare the question for me I think uh you'll be thinking in that way okay this is the idea that means my answer is pretty good guys and why I got the pretty good answer because I use the refine prom template okay so this is another powerful concept you can use okay so now we'll be creating the next part that means we'll be using the embedding model we'll be generating the vector embedding and we'll be storing to the vector database okay because I also need to generate the answer right now fine so this is what I have to perform so let's do it so for this first of all I have to Define one embedding model so here I'll be using opena embedding model so for this you can import from the Lang chain embeddings open I need open embedding model okay so let me initialize so here I'm going to use open embedding model so if you go to the open website and if you go to the model section you'll see that open also provides lots of embedding model okay so you can use any of them now I also need to initialize my Vector database so here I'm going to use f Vector database I already told you so it is available inside lanin lanin Vector restore F you can also use chrom RB Pine con web it's up to you but I'm going to use the F because I need to show you the f as well okay and F is very like Fast um I mean than your chroma DB okay you'll see that it's like very fast quite fast now let's initialize my Vector store see that's how you have to initialize the vector store F from documents and you have to give the documents here like which document you want to create the embedding I think remember we created a chunks this chunks I think remember document and Sur this chunks I have to pass and I have to create the embedding okay and I have to give the embedding model this the embedding model I'm passing so this will give you the vector store and it will save locally guys okay it will save locally you won't be able to see that okay it will save in memory actually and if you want to see that you can store in the cloud based uh I mean you can use the cloud Vector d in the cloud you can sa I think I showed you the pine cone there you can see the visualization of your vector okay it's possible now let me again initialize my large language model you can see again I'm using gbd 3.5 turbo large language model to generate my answer because you can see I told you now the question I'm getting I'll again pass to my large language model large language model will give me the answer okay that's why I'm initializing my llm now previously I um got some questions I think remember so this is the questions I got okay these are the question questions I got uh if I show you uh beautifully so what I can do I can split with the help of Slash in so it will give me line by line everything now this is the question list see so this 10 question I got now I have to generate the answer of this 10 question okay with the help of large language model now for this let's create a retrial QA okay question answer let's a chain because inside chain we are having different different chains I think I told you now I'm using retriable Q CH this CH I already used in my Vector DV I think you remember let's create it now let's initialize my qn so here you have to give the large language model first of all now you have to give the chain type is equal to stop because it's a qn okay now you have to give the object that means your vector store that means you are connecting with your large language model right now see llm you are connecting with the vector store okay for this you have to write this code Vector store as reter that's it now this is going to give you one chain now we can give the let's say question and you can get the answer for this I written a full loop here see what I'm doing whatever question list actually I'm having I'm looping through it that means I'm taking all the question one by one okay you can see then I'm printing it then I'm generating the answer you can see I'm calling this chain run question that means I'm giving the question it will give me the answer this answer actually I'm also printing after that I'm opening a txt file inside that I'm just saving it okay inside that I'm just saving it that's it as of now inside a txt file I'm saving it going forward inside a CSV file I I have to save it okay this is the idea now let me execute see first of all this is the first question it is generating the answer see this is the answer okay second question it is generating the answer third question answer fourth question answer so that's how it will generate for all the questions let me show you see beautifully it is generating so we have created one amazing application guys now we have to convert it the modular coding there the idea now see all the answer I got and if you read the answer guys if you open your text editor and if you read the answer it's pretty good it's pretty good if you see that question and answer is pretty good now you can use as it is as it is for any kinds of exam any kinds of interview you can prepare it's amazing right okay so this is the entire actually let's say notebook experiment of our project now let's try to convert everything in a modular coding modular coding is I just need to write everything in a function that is the idea only okay I'll refer the same notebook only I'll copy paste the same code code but I'll write everything in a function okay there is nothing new I'll be doing so let's start the modular coding so guys now let's start the modular coding but before that let me show you this answer. now see inside answer. it has saved everything all the question and answer but again it's not readable so next time what I will do I'll save everything in a CSV file uh in one column I will add the question in another column I add the answer okay that would be more readable so what I'll do guys now let me close everything so left hand side I'm going to create a folder and I'm going to name it it SRC okay SRC because this is going to be my Source folder inside that I'm going to write some helper related function that means if you open up any kinds of let's say um I mean real time implementation of any kinds of package or any kinds of project inside python let's say if I open this one gas GitHub you will see that they have also created this kinds of folder structure see this is the kasas now kasas is also using see it is having one root folder caras inside that they're also having the source SRC and inside SRC they have created all the let's say utility related functionality that means whatever functionality they need let's activation function application back end call backs they're writing everything here and they're integrating in the endpoint okay it is also having some endpoint see API gen this is the endpoint and they're importing it here if you open it any kinds of endpoint they're importing it here okay this is called actually modular approach that means instead of writing everything in just one file we have to create a separate separate file separate separate function and whenever I need it I'll just call it okay from that particular let's say uh helper function this is the idea so inside SRC I'm going to create a file called underscore uncore init uncore dop okay this is the Constructor file because this folder would be considered as my local package right now see this is the modular concept guys this modular concept I already explained u in my python session okay so I think you know so guys this is our YouTube channel so here if you go to the playlist section I already created complete python course so here I already explained about modular coding everything what is this Constructor file what is modular coding how we can write an any function in any other file how we can import it in the endpoint everything I have explained just try to go ahead and watch that one because modular concept is required here okay I'm expecting you are already familiar with this kind of python concept fine so you can uh also see the master op actually playlist so there also I have covered lots of advanced topic related python so that's why I'm creating this Constructor file because this folder would be considered as my local package right now okay and inside that I'm going to create a uh file called helper do PI and I'm going to create another file called prom. Pi okay prom. Pi so inside prom. Pi I'm going to mention my prompt so let me show you so the prompt actually I showed you in my jupyter notebook so here I'm going to just Define see this is my promp template first prom template and this is my defined promp template nothing new guys I'm just copy pasting from my notebook only see the same prompt I just copy pasted because because prompt is a changeable okay it's a changeable it's a static one people can change any time so that's why I have written inside prompt prompt let's say file so user will open the prom file and there actually they will change so that they they don't need to open the actual code code implementation and inside that they don't need to change okay I don't need to hard code these other the value that's why I kept this separate entity I I hope it is clear now now let me close it now inside help. Pi see whatever code I have written so far that means I loaded my documents I perform the chunking operation then I created the questions okay these are the thing I'll be writing inside a function only so inside helper I created two function first of all you have to import all the required package you need I think remember these are the packes actually I need I loaded in my notebook then I need to load my what I need to load my open and I have to set as environment variable I think you know got it right now the first function I have written called file processing same thing guys if I show you the same thing I'm performing here first of all I'm loading my documents I'm adding all the let's say um I mean content inside one variable I was performing this one um I mean chunking operation first of all I was doing with the help of 1,000 token then next time I was doing with the help of uh sorry first of all I was doing the 10,000 okay 10,000 chunk that means one uh chunk I want I want to consider as 10,000 then I was doing for the 1,000 that means the same experiment I did here remember same experiment see same experiment I just written inside a function only that's it that is the difference only this so This is called actually modular approach you can also create a python class but as of now it's a very let's say a small implementation that's why python class is not required but if you see the actually very big implementation any ml project or deep learning project you will see that there I written a lots of class let me show you so inside US Visa if I open the components let let's say data in this you can see I have written a class that time okay so class is recorded because you can see lots of function I have to handle and whenever you are having lots of function lots of method that time you can write a class but here I don't I don't have actually lots of method I only have one to two method okay that that's why I've just written directly a function not a class okay this is the idea so that's how you have to design your own project whether your project size is very huge or not if it is us try to maintain the class otherwise try to maintain the function this is the difference only so if you see any kinds of jni project so most of the time actually we create let's say inference on top of large language model create a rag application on top of large language model okay that's why the code implementation is not big that much of but whenever actually I'm creating ml project DL project there actually we are training our custom model that time actually uh lots of method we have to handle very big code base we have to handle okay that's how we need class concept this is the idea now you can see guys I will get my object okay object related my chunking you can see it will gen give me document question gen that means after performing the chunking and document answers then okay both actually it will provide so questions in is nothing but uh you can see I'm converting to the documents this question whatever questions actually I was getting so this is the document question that means after uh converting to the documents whatever documents I'm getting this is my document questions Z and after doing the chunking this is my document answerers gen so this question generation and this document I need for the answer generation okay the same thing I perform in by notebook I think remember see uh first of all I was using document uh question gen just to generate the question okay then I will was using document answer gen just to generate my answer okay I hope it is clear so this function I have created guys now the next function I have created my LM pipeline that means I will be using my large language model I'll be creating the vector embeddings okay so everything will happen inside this function right now llm pipeline first of all I'm calling the file uh file processing that means this function inside that whatever file user is giving this file would be process and it will give me document questions in and document answers in I'm creating my large language model creating the prompt both prompt actually that means my prompt question as well as the refined prompt okay both I'm creating then I'm first of all creating load summarization I think remember load summarization I was creating okay this one so it will give me the question it will give you the question and I was creating the vector embedding after that Vector embedding then I was uh creating the vector index you can see Vector index then I was uh I was creating the retal keyway that time okay it will generate you the answer that means question answer that means here you will get answer question generation and filtered question list okay both actually will get so this two function I prepared here now let me save now let me create the endpoint so here what I will do I'll create a file I'll name it as app.py okay now this is going to be a Endo so inside that I'm going to call this function actually this llm pipeline because inside llm pipeline I'm calling my file preprocessing that's why I don't need to call separately so let me open it up but before that let me initialize my first API related code so if you go to the first API documentation guys you will see this is the U start our code that means this is the demo code they will also give you so these are the library you have to import one by one okay then you have to initialize the fast API so how to initialize the fast API guys so that's how you can initialize the fast API okay see this is the code to install the first API now here you have to create two folder static and templates inside that you have to create the uh index.html file so inside template folder you have to create a index.html file because index.html file would be your homepage okay that means the user interface so you need some HTML code let me show you I already created so guys as you can see I already created one template folder inside that I created a uh HTML file okay now see inside that I have written already HTML code okay that means my front end part of my application and how I created again I referred that boot strapo side I think you remember I previously I also used the boot website if you don't know about HTML code it's completely fine you can skip this part you can use let's say any other framework let's say stream later on uh and see this HTML creation would be done by the front end developer as of now just to beautify this project I created HTML okay from my end that's the idea and there is another folder I created called startic inside instatic I created two folders called docs and output see whatever documents user will upload that PDF it will save inside documents folder and whatever output you will get from the let's say application that means the question and answer in a csb format because you can see I imported the csb it will save inside output folder and from output folder actually I will get that particular let's say csb output okay and inside documents it will store the PDF this the idea now this is the first API code guys first API will handle each and everything now I also need to import my this one that means my LM pipeline let's import so it is available inside uh I'll call it from let's say SRC SRC uh dot let's say helper import LM pipeline see it is inside helper I need to import llm pipeline because inside helper I have this LM pipeline okay now see if you I'm importing like that from SRC helper import LM pipeline that means SRC is now considering my local package and if I want to use SRC as my local package what I have to do I have to create one file called setup.py okay setup. Pi so this is the modular coding concept guys again inside setup. Pi you have to write some setup related code let me show you so this is the code guys setup tool first of all give the project name version author name author email package and install requires that means this find package will try to find okay wherever this Constructor file is available this folder would be considered as my local package now you can see Constructor file is only present inside SRC that means SRC would be considered as my local package now see if I show you pep list P list inside my environment see SRC is not mentioned SRC is not a package okay see SRC is not a package but whenever I will install it whenever I will set install this setup you will see that this SRC would be considered as my local package that means there would be a package name called genv project you can give any name I've given genv project now let me save and to install it in the requirements you have to add one more line called hypen space dot okay so this hypen space dot will look for the setup.py and it will install this package okay let me show you now if I again run let's say pep install henard requirement. txt see this would be installed as my local package right now done okay now see uh some egg info file would be created okay whenever this egg info file is created that means this setup is successful now if I again open up my environment there's a pep list now see uh there is a package it has created gen project okay now see it is my local package right now that means this SRC would be considered as my local package now I won't be getting any kinds of error right now if I'm importing like that okay so this is called actually modular approach I think you got it so here first of all user will upload one PDF for this I have written a function with the help of first API so this is the function uh there is a route called upload user will upload one let's say file and uh this file would be saved inside my documents uh inside Statics documents okay it will save now there is another uh function I will create called get csb that means the complete results okay I want to save as a CSV file so this uh function will help me to do that that means the file actually I'll be receiving here this file I'll give where in the llm pipeline and LM pipeline what it will do it will pre-process it will create the let's say prompt and everything then it will give me the um that me chain entire chain okay and that chain actually I'll utilize here you can see so you can see I'm getting the entire chain and whatever question list actually I'm having okay question list I'll pass the question inside my chain and it will give me all the answer and this answer actually I'll save inside my CSV file you can see right row okay CSV writer right row and with for this actually I'm using CSV package you can see csb package very simple code guys only have written inside a function only you just need to go through this code you will able to understand okay then I need another function guys called chat so this particular function what it will do it will load the output file that means the CSV file okay and it will show it will return you okay it will return that means you can also see the complete PDF okay in the UI let me show you how this application will look like so now let me execute my first API code see this is the first API code even on run app this is the local host and this is the port number 8080 okay now let me save and now let me execute so I'll open up my terminal so python app.py now see it is running let's me give the allow permission now I'll go to my Google Chrome and here I'll search for local host 080 see this is the user interface guys okay now here you can upload a file first of all let's say I'll upload this file inside data let's say I will upload this uh sdg first of all this sustainable go development and here I'll generate the question and answer let's see see it is generating this is the user interface we created basic user interface now see it's loading and how this uh I mean uh loading is happening animation is happening because I written everything inside HTML code so guys you can see I got the output now left hand side you can see it has rendered my entire PDF okay the PDF I uploaded and right side it has given me that uh CSV downloader now see if I click here it will download the CSV file see Q CSV now let's open the CSV uh how I can open let's open it here so I'll open it see this is the csb I don't have Excel right now guys in my system that's why I've open in a b code you can see this is the question this side and that side actually I have the answer you can open in Excel viewer you see that it's a beautiful format I have just stored okay so that's how actually things are happening okay now I think you got it why we have written Des are the function so this function will help you to render your PDF documents as well as the it will give you the download option okay to download this particular PDF now let's upload another PDF let's say I will upload this Statistics one right now now let's generate again so guys as you can see I got the results and this is my pdfi uploaded and let's download the Qs B well see this is the correlation answer and question I got fine so yes guys this is the project actually I hope you liked it and this is like very interesting project guys if you develop it I will feel like it's like very interesting going forward we'll be also implementing lots of project no need to worry so in the next video we'll be implementing another Amazing Project very interesting project called uh chatbot for any website that means let's say I think you saw website chatbot if you go go for any kinds of website nowadays they're having their chatbot integration with that okay so if you ask let's say some question related about the said about their let's say product and service it will able to give the answer so that means they're replacing the human behind it previously they used to let's say use one human they used to receive the chat they used to give the reply but nowaday they have uh added the chat uh chatbot there chatbot can handle all the answer if you go to any of the website you will see that so we'll be implementing these kinds of application that means uh the custom website chatboard it will only work based on our website data not any other let's say uh I mean question and all fine this is what actually we'll be implementing and this is kinds of rag based application we'll be creating okay that means we are using our custom data on top of that we are adding about let's say a large language model large language model will try to refer that data to provide you the answer fine so in this implementation also I'm going to use Lang chain large language model even we'll be also using something called Vector database okay with the help of that actually we'll be implementing this entire application but see this application would be little bit Advanced because here we'll be creating something called rag based system okay like r augmented generation this is the basic rag so here we'll be using our custom data so custom data wise actually we we're going to use our website data that means we'll be giving some website okay website URL so U my langen will automatically uh fix the information from the website itself and this data actually I'll give to my large language model that means my llm would be connected with this data and if you're asking something related about this website okay it will give you the answer related that okay so this is the application we be implementing so first of all let me show you the architecture like we are going to develop this project then I think this part will be clear so before showing you the architecture diagram guys let me show you one thing so let's say if I want to open any kinds of website let's say I'll open this open.com okay this one open ai.com so this is the open.com website now see if I want to like see the if I want to see the let's say XML page of this website so what I can do I can give this particular let's say uh U route here so slash sitemap um sitemap.xml so if you open any website and if you give SL sitemap.xml it will show you the entire structure of the website let me show you so guys here you can see uh this is the page actually I got now see inside opi.com okay inside open.com whatever let's say content you are having whatever content whatever sub Pages you are having all the information is coming here you can see if you just see it carefully so it is having different different URL okay different different URL for the different different tab let's say research for research actually it is having one URL for GPT 4 40 it is having one URL for safy company see company I think I saw here so see this is the company one okay this is the company one you can see okay company one so I think I showed you the company so see this is the company URL so that means it is having all the information all the data whatever data whatever content you can see in this website okay everything is visible now in this XML page now what I have to do I have to use this concept to extract the data that means I'll be using Lang Chen data loader so inside Lang Chen actually we are having website loader with the help of that we can easily load these are the content so I'll tell you how we can extract the information so this is the thing actually will be doing now let me show you the architecture diagram what we are going to perform here so let me open up my Blackboard see here first of all I told you we'll be using website URL okay website URL so from website URL what we'll do we'll just get this sit map uh sitemap.xml okay this page and from this page actually we'll be getting different different sub Pages as well let's say page one then page two page three okay and so on that's a multiple page actually will get from here now what I have to do from each and every page I have to extract the documents that means the data so it should be docs one let's docs 2 then after getting all the documents we'll be using one embedding model I think you know why embedding model because I have to convert all the documents to the embedding representation okay so I'll pass all the data to the embedding model okay and embedding model will try to return uh embedding Vector embedding so you will get different different Vector embedding let's say 0.2 0.3 0.5 and so on let's say these are the vector representation as of now just try to consider then with all the embeddings what I have to do uh I have to create one uh cementing index okay cementing index I think you know build cement index okay build centic index then this uh centic index that means this embedding I will rest where I will to the vector database let's say this is my Vector database so in this case actually I'm going to use f you can use any other V Vector DB let's say this is Vector database okay I'll be using F you can use anything you can use let's say chroma DB you can use find con I'll tell you how to use pine con chroma later on I will also tell you now what will happen so user will ask question okay user will ask some question about the website and this Vector DB will return some rank results okay I think you know what is rank results ranked results okay rank results I'll get but what I have to do I have to initialize my large language model because with the help of llm only I'll able to get the correct response so what I will do I'll pass this rank res to my large language model as well as this quy also okay and this llm will give you the actual response okay actual response so this is the complete idea okay this is the complete architecture of our application okay and this is called actually rag okay rank that means retable augmented generation because here we are inting our customer from data okay and we're integrating our large language model with that uh data that means this is called actually knowledge base okay knowledge B right now okay in knowledge base so now let's open up our collab notebook and try to install everything and let's implement this project so guys as you can see I open up my collab notebook so first thing just try to change the Run Tye so here run time just keep it as CPU only because here we'll be using open a model but if you want to use let's say any other open source Source model that time you can use GPU okay that time so as of now let's keep it CPU only so later on I will also show you how we can use a new open source large language model okay now let me connect this notebook so here first of all you have to install some package so you can see I'm installing Lang chain langen Community Pi PDF then sentence Transformer okay openi Tik Tok and these are the things so these are my dependency package actually I need so let me install all of them so some of the package actually you don't need I just written additionally because later on this project I will show you how we can Implement with the help of Open Source large language model okay that time actually this sentence Transformer is required because if I want to use any let's say open source embedding model that time this is required so as of now let's install everything then apart from that I also need to install some more package so tick token fire CPU and unstructured let's say if I want to load the website now website data that time I need this package unstructured because it's unstructured data and again I'm going to use f Vector database okay that's why F CPU I'm installing so let me install all of them then I also need to install NPI and nltk okay so let me install because these are some dependency package if I want to extract the information from the website so Lang needs these are the dependency okay so that is why actually we are installing everything now see uh after installing this nay ltk it will tell you restart the session so let me restart the session so it will restart the session then after that we'll be importing all the necessary Library we need you can see I'm loading unstructured URL loader from langin so with the help of unstructured URL loader we'll be loading this data okay here we'll be giving the URL website URL it will automatically extract all the information and we'll be performing the chunking for this we are using character text spitter open embedding we'll be using just to convert my uh data to the embedding representation we'll be using openi large language model GPT 3.5 turbo that's why we are using CH openi F this the vector DB rable QA with Source CH that means it will create the QA object that means the chain object okay and hugging face embedding as of now I don't need I'll just try to remove it okay later on I'll tell you how we can use the hugging p as well now let me import all of the package so it's working fine there is no error now let me uh download this uh two thing like p n KT and you have to download another thing a percept perception tagger okay so this one you have to download from the nltk so let me download then after that I will set my open API key because here I'm going to use open large language model definitely you need the key now I'm going to pass different different website URL now you can see I have just collected different different website URL let me open all of them let me show you so these are the website actually I'm going to refer so this is one uh blog website uh medium website you can see and the content about paper review Lama 2 open foundation fine tune chat model okay now if you just read it you will see lots of content related Lama to okay now there is another website datab I'm using introducing MPT 7B a new standard for the open source Community usable llm so this is another large language model now you can see uh the information is written about this large language model that means we'll be extracting these other the data and we'll be creating one chatbot it will uh provide and that chatbot actually will be able to give the answer related these are the topic okay the topic actually you have feed let's say Lama 2 then MPT 7B then uh stability. a okay so this is another website then uh you can see vuna so this is another website okay so these are the information actually I want to see so I have given all the website link so here you can pass any any kinds of website link you can pass any kinds of website link let's say you have one website your own website you can give the website link here so this will automatically extract your website information and you can create your website chatbot okay on top of it this is amazing now let me initialize the URL so it suppos actually multiple website URL it's not like that it only supports one URL no multiple URL you can give here now let me uh extract the documents with the help of unstructured URL loader inside that you have to pass all the URL and it will automatically extract all the information let me show you now if I print the data all the information it has extracted from all the website see okay amazing now if I show you the length you'll see that four documents it has returned why four documents because I have given four website 1 2 3 4 that means four website information I'm having right now and this is in the document format got it because I already told if you're loading anything with the help of lch that should be document format always so now I think this part is clear so we have extracted the content successfully now what I have to do I have to create the chunks okay I have to create the chunks different different chunks you can see these are different different chunks so I think I forget to mention this chunking here so it should create a chunk okay chunk okay all the chunks that means it will create all the chunks this chunks actually I'll give to the embedding model okay now let me create the chunk here so to create the chunks actually I'll be using character text splitter see these are some repetitive code again again I'm using previously i al already taught you what is character Tex bitter what is CH size what is CH overlap everything I taught you even in the vector database session so this is very much important session guys just try to complete the session first so you can see character text ler separator is equal to SL in because you can see Slash in is there okay sometimes so slash would be the separator so here SL n would be the separator it will separate by slash now CH size 1,000 chks overlap 200 okay now let me create my text splitter now inside that I'm going to provide my data now it will give you chunks now let me see how many chunks I got so here I got 86 chunks if you want to see them simply just uh print like that let's I want to see the first chunks this is the first chunks let's I want to see the second Chun as as well I can also see that see second chunks as well and you can see it is also giving me the source URL like from which URL it is giving you the data okay now we'll be initializing the embedding model because you can see the architecture now I have to download the embedding model then I have to convert everything to the embedding representation so let's use the open embedding now let's test whether it is able to convert to the embedding representation or not so here I'm calling the embedding model and I'm passing one sentence hello world so it should give me the embeding results let me show you and the vector Dimension is uh 1 1536 okay this is the dimension now if I show you the numerical representation of this sentence so this is the numerical representation that means this is my Vector embedding okay so we'll be following the same concept now let me convert my um text to the embeddings but for this actually I'm going to use f Vector database because whatever embeddings I'll be generating I'll store in the F okay F Vector database and F is a local Vector database I think you know so here I'm giving my text chunks and my embedding okay embedding model now guys see this is my centic Index right now okay this is my centic index that means my Vector Index right now okay now what I have to do I have to connect my large language model so let's initialize my large language model so here I'm going to use open a large language model by default it will use gbt 3.5 turbo now let's test our large language model whether it is able to generate or not so here I've given a prompt please provide a concise summary of Harry Potter book okay now if I execute it should give me the summary of Harry Potter book see this is the summary of Harry Potter book okay it has given me great that means it is working fine now with the help of llm as well as my Vector database I have to create my chain so for this I'll be using retal keyway with Source chain okay I think I already imported from the Lang chain and inside that I'm passing my large language model as well as my Vector database okay and this will give me the chain now inside chain actually I can ask any kinds of question right now see question is equal to how good is vuna so here I'm asking related vuna okay this particular vuna so vuna data I have already given to my large language model I think remember it is already available inside my knowledge base now it should give me the answer okay let's see okay now if I want to see the answer so I'll just call result inside that I I want to only extract the answer okay now let me show you see vuna has shown competitive performance compared to the others model like Stanford Alpha okay that means if you read it okay if you read this documentation if you read this documentation you will see that uh that is what actually they're telling that means amazingly it is able to give me the answer right now great now let's ask any other question let's say the next question I'll be asking about Lama 2 Lama 2 how does Lama 2 outperforms other model okay let's ask this question and whatever answer I will get I'll also print it here now see L 2 model out for from others models in various categories including MPT models and similar size and so on okay now see it is referring the L 2 right now uh yeah Lama 2 great now let me ask another question so I'll be asking about MPT uh this one MPT 7B model and whatever result actually I will get I'll just showcase it here see again I got the amazing response okay now see it is referring my website data that means my custom data not any other data okay this is the main thing here we have developed now if you're asking any other question let's say tell me about India it won't be giving the answer because here we have created the custom chatbot it will only refer my uh data the custom data I have given now here I can create a while loop and I can continuously ask the question okay so you can see I'm taking the prompt from the user and if it is exit I'm I'll do the exit operation otherwise I'll continue and I'll will keep on asking the question and it will generate the answer okay let me show you see it is asking the question so what I can give I can give the same prompt again copy and here I can pass and let me press enter now what you can do guys you can convert this project to the web interface that means web application I think I showed you how we can use different different let's say python package like flas then fast API so this should be your task guys try to create one web application at least basic web application that user will give give that prompt and it will provide the answer okay that's it now see it has given me the answer okay now again it is asking another question now let's say if I give exit it will exit the application sorry it should be exit only but I have given exit parenthesis now see if I if I'm giving this prompt it is telling that text provided does not seems to be relevant to the questions now see this question actually doesn't have any context whatever knowledge base it is referring that's why I told you it it it won't be able to give you any other information now if I give exit right now it should exit the application see okay so that's how we can create any kinds of custom website with the help of our custom data now what you can do you can open up any kinds of website and you can implement this project guys okay and later on I'll also tell you how we can use the open source language model okay and with that how we can create this application so with that guys thank you so much uh for watching this video and try to complete that task try to convert this application to the web interface as well so guys as of now we have worked with open AI based large language model which is nothing but uh GPD okay so we have seen like how to use GPT series uh to build these kinds of Genera VI application and one thing I think you have seen there like GPT is not free so uh you need to pay for it so whenever you are using open a API uh you need to pay some money okay for that uh but let's say if you don't want to spend uh this much of money here so what you can do you can use something called open source large language model so in the market actually we have lots of Open Source large language models are available so so if you are using it so you don't need to pay any money for this so you can directly use them and it is completely open source and for commercial use cases as well you can either do research on top of it you can either uh create a commercial application on top of it it's completely free for you okay so uh in this video actually uh I'll be discussing about uh like open source large language model like what is open source large language model okay and what are the open source large language model we have and from them actually I'll be discussing some of them uh like most popular uh used open source large language model and it is like very powerful okay and I will also show you how we can uh like build gener VI application with the help of these kinds of Open Source large language model okay so it would be completely amazing video so make sure you are watching this video till the end don't skip any part of this video otherwise uh you might get confused for sure right so so yes guys uh let's start with our uh video so guys here we'll be learning like most used and most popular very powerful large language model uh here you can see we have meta Lama 2 so this is the uh like model from meta AI I think you know uh like we also call them Facebook so they have introduced this model called Lama 2 it has another version called Lama 1 but uh uh Lama 1 is for like resarch purpose they have given the permission but uh you can't use Lama one for the commercial use cases so for this actually they have open source this Lama 2 model so you can either uh do research on top of it either you can create commercial application it's completely fine then from Google side we have another large language model called um Google Palm 2 so this is uh one of the very powerful large language model okay and it is completely open source and free then we have another like most used large language model called Falcon so Falcon had lots of variant I'll show you like whenever I'll be discussing like Falcon I will tell you like what the variant it has actually so it has different different uh parameter variant okay even meta Lama 2 has different different variant okay I will tell you whenever I will discussing about this Lama 2 and all okay so these are the most used and most popular large language model I'll be discussing like how we can use it okay and how we can create gener application on top of it I will be discussing each and everything so apart from that we have lots of large language model are available in the market and it is completely open source so guys I found one GitHub repository so there actually that guy collected lots of Open Source large language model list and uh he has created one uh read me file there so I'll show you that one like what are the open source large language models are available in the market so if you also want to explore that one you can also go ahead and check it out okay so if you learn like how to use meta Lama to Google Pam to Falcon okay you will also able to do that okay so guys as you can see this is the repository and the repository name is like open llms and here if you see uh we have lots of opens large language model are available you can see T5 E2 then pathia Dolly okay then here you you will see like Bloom is there then F chat then mp uh mptp uh 7B this is the 7 billion parameter then Falcon I was uh I will be discussing about Falcon so as you already saw like in my uh topic I will be discussing about this Falcone okay so uh even that actually they have also shared this paper blog and everything okay if you want to learn you can open it and all the steps actually you will be getting then then lamb 2 is also there okay then mrl 7B also there then Google Palm is also there okay so uh here actually we'll get all kinds of open um Source large language model okay and if you see here it was committed 4 days ago so it is like very update repository so here you can check it out uh if any large language model is coming in the market so here actually you will get all the list and all and apart from that you can also search from your site uh let's say if you are exploring any other topic and all so you can search and you can learn about okay so yes guys uh this is all about our large language model open source language model I think you got it okay so guys we don't only have the option using uh like you can say open AI GPT model apart from that we have these kinds of Open Source L language model we can utilize okay uh so I personally prefer this kinds of Open Source large language model because this is like very powerful so it it can also work like your uh GPT 3.5 turbo okay so it's like very powerful model so using these are the model actually you can solve very complex problem statement even you can create a very beautiful Genera application so why you need to pay right but if you also want to pay because see GPT is like very good model I know that but again U it's like completely I mean hosted like API so you can directly call the API you can hit the model you can get the response so this is the beautification they have created in their website but apart from that let's say you don't have money and you don't want to spend money on top of these kinds of model so you can use this kinds of llm model and you can create your application on top of that even you can also fine-tune them okay so this is the beautification of these kinds of large language model so in future I will also show you how we can fine tune this kinds of large language model on top of our custom data on top of our custom use cases and how how we can use it okay so fine tuning is not required unless and until your data is like very complex and it is like very uh private data so that time you can find tune them but most of the use cases can be solved using these are the model okay so yes guys now let's go back and try to see like what are the things actually we'll be learning from this video so guys uh in this video actually I'll be discussing like the introduction to Lama 2 like what is Lama 2 and all like uh who has published this Lama 2 like what the variant actually Lama 2 has and all then I will show you like how we can run this Lama 2 okay I'll show you like some difficulty level like how why we can't use the actual Lama 2 model OKAY hosted from meta AI so which model actually I'm going to use it so how to execute this L to okay I'll be discussing about on Google collab because you can also do it in your local machine as well but I will on Google collab because Google collab would be pretty much good environment for me because there I will already have lots of predefined Library setup right then I will U show you like how we can use this lambat to with langin because nowadays actually people uses this langin framework okay to create generative application so I'll also show you how we can use the langen okay with this kinds of Lama to open source large language model and at the end of the video I'll also show you how we can build generative AI projects using Lama 2 so there actually we'll be implementing one projects very uh interesting projects okay okay uh with the help of this Lama too even I will be using Lang chin there also okay then uh we'll see like how we can integrate open source model with these kinds of framework Lang chain then how we can create this kinds of generative AI projects so it would be completely end to end video about this open source lar language model okay you'll be learning each and everything about open source language model like you will be knowing each and every part of this Lama to and all so make sure you are watching this video till the end uh so this should be my request guys and also try to practice with me okay in Live or whatever things I'm writing you just also try to write with me even all the code and everything will share in the resources section from there actually you can get it so first of all let's discuss about Lama 2 and in the next video I'll be discussing about Google Pam and fcon so guys if you search on Google like meta Lama 2 so you will able to see this website the first website okay so this is the website of Lama 2 so here actually they have published this Lama 2 documentation and all like how we can use it and all and uh this documentation will give you the entire idea about Lama to like uh what is Lama 2 and U uh how many variants actually it has okay even The Benchmark also you will able to see so guys here if you see uh Lama 2 is nothing but it's a Next Generation open source large language model and Lama 2 is available for free uh research and commercial use cases as I was discussing about and if you want to access this Lamar to so they have given the link here so here actually you need to fill some information like uh your name uh email address then country and organization so these are the basics form you need to feel and you need to submit so after some time actually they will give you the permission because see you can't directly use this Lama 2 model so for this you need to send some information of you uh then after some time actually they will give you the permission okay I also applied this uh request form so uh after let's say 30 minutes or let's say 1 hour you will get the access for sure okay so uh I I will also show you one Al alternative so if you want to do it right now so one guy actually cloned this uh complete uh lambat 2 model OKAY in his uh you can say hugging face repository and it is completely public okay so you you can use that model uh if you're not getting permission and once you got the permission you can uh use official version of the uh Lama 2 model okay so I'll show you like both option how we can do it so for me I already got the access from this meta so they have given me the access I'll tell you like how to like uh uh apply for the access and all okay so as of now uh the experiment actually I'm going to do like how we can execute this Lama to model I'll be using something called quantized Model Because the actual like L model you can't execute on Google collab on free Google collab so for this actually you need uh good instance okay like good instance means like you need powerful machine you need more RAM okay you need more memory there but uh uh if you are using free version of Google collab and if you're using your local system so there actually you can't load this model so it would be very hard for you so better we be using some quantized model I think you know what is the quantized model so quantized model is nothing but it's a quantized version of the actual model so they have just uh compressed the model okay with the uh integer encoding and they have proposed this model and this model size is a little bit less so we can load this model in our memory okay in very easily I will tell you like how to use quantz model and all okay so guys here if you see Lama 2 was train on 40% more data than LMA 1 okay because I told you uh there is another model called LMA 1 and LMA 2 train U and here LMA 2 trained actually more than 40% data than lama lama lama 1 and it has actually double context length basically the context length is like double okay then you Lama one and see these are the LMA 2 variant actually Lama 2 has 7 billion parameter and another variant has like 13 billion parameter and another variant has 70 billion parameter and uh this is the pre-training token you can say so they have used true trillion token to train this model and here if you see this is the context length so it's 4,096 but uh whenever I was talking about Lama 1 so it has actually 2,000 something context length but it is like double okay double than your Lama 1 and uh this size is around 4,096 and here if you see uh the training strategy so they also use supervised fine tuning technique on top of it then they also use something called human and preferences I think you know like how we can train these kinds of large language model okay what is the idea and all about uh basically this is the strategy we follow in every large language model okay then they have applied something called reinforcement learning to understand understand the human human input don't understand the human uh you can say prompt okay so they they have used this strategy to train their entire model and Lama 2 Preen models are trained on two trillion tokens here I already discussed and uh have double context length than Lama one it's fine tune models have been uh trained over 1 million human annotation okay so 1 million human annotation means they have applied this supervised fine tuning technique so uh they have created one chat use cases so basically see whenever I'm giving any input let's say just just fix this code for me or let's say generate a you can say python code for me so these are the chat actually I'm giving so with respect to that actually what is human annotation human annotation means like see whenever you are giving these kinds of prompt so one human will be replying the actual thing here okay that's how your model will be learning let's see if you're giving any random message let's say Hi how are you fine okay and all so one human will chat with you like manually they will chat with you so we call them human annotation and with the help of this data actually we train our actual model and we create these kinds of uh very powerful large language model right and this is The Benchmark as you can see so here uh we have lots of model uh we have MPT 7B then Falcon 7B and we also have our Lama 2 7B 13B and we also have 60 5B and 70b okay so here if you see these are some Benchmark data and this is the performance of the model as you can see MTP uh MPT uh 7 billion uh this was the accuracy 26% accuracy and here if you're using Falcon so 26.2% accuracy and if you're using Lama 2 7B here so see accuracy is like very much increased here it's around 45 .3% of accuracy and if you're using 7B that uh sorry and here if you're using 13B that means 13 billion parameter version of the model so here this is the accuracy 54.8% of the accuracy and here if you're using m m PT 30 billion so this is the accuracy then I mean it's like less than your lamb 2 and Falcon 40 40b actually will give you 55.4% and if you're using Lama 65 billion so 63 uh 63.4% and Lama 7B uh like very good accuracy here 67.9% of accuracy okay so with respect to that you can see this is again another data so this is like mm Lu data so this is trivia QA data this is natural questions data so you have lots of Benchmark data with respect to that these are the model has been trained and this was calculated the acury okay and this is the and this is the complete Benchmark Benchmark table here you will see all the performance of the model okay and guys uh if you want to test this Lama to a model so here U there is one UI has been published here APC on top of the Lama 2 model so if you just write ww. LMA 2. a so this is the chatbot actually you able to see so this is kinds of chat GPT kinds of interface they providing and in the back end actually they're using LMA 2 model here ifpc so you can select Lama 2 model different different model so by default it is selected LMA to 7 billion so let's select this one LMA to 7B 7 billion parameter this model and you can also give the uh your system prompt here so let's take this prompt only and the temperature you can also select let's say if this temperature is close to zero that means this model would be more strict to the output so it won't give you any Randomness and uh if you set this temp as close to one that means your model will be like more random so it will give you like more random output okay and if you want to make your model like more uh generalized to Randomness so you can increase this parameter to close to one and this is the max length like how many output you want from your model and all so you can set this parameter and all and this is the top probability score and all okay so here you can write your custom prompt as well let's say here in this case I'll be doing uh chat chat operation with this Lama 2 here if you see chat with Lama 2 you can also set this prompt as summarization let's say code generation anything you can do okay so you need to just change this prompt I think you know what is prompt and all so this thing is very common okay in llm and all so you can give the prompt here so let's take this LMA 7B parameter this model and let's uh do some chat with this model so here first of all let's say I just write hey uh or let's say hi so here if you see this is uh giving me the response okay now here I can ask like uh what is the so what is the library uh we can use to build jna application I'm just giving any random question let's see whether it is able to uh answer or not so here if you see it's giving different different answer okay with respect to the question I have asked now let's say here I can also give any error of my code and if I tell uh it actually just try to solve this error so let's say I was trying one OCR code here so this is the error actually I got so let me show you the error so guys uh this is the error actually I got here so could not find a version satisfied the padal paddle okay this is the error I got so this error actually I will ask to this uh LMA to and let's see whether it is able to f F or not here I will just write fix it okay if I just write fix it now let's see what happens so guys see it is giving me the response and uh it's telling like U install this version of this paddle paddle okay and you can also use some third party GitHub uh to build this uh setup tool and all so it's giving all kinds of possibilities like you can try you can get this suggestion and you can try and you can solve this error okay so Lama 2 is telling actually this model is uh like more powerful than GPT 3.5 turbo model okay because see I already use this lamama 2 model and what I feel like yeah this model is pretty good than your GPT 3.5 turbo if you're using GPT 3.5 turbo you saw like lots of task actually don't be able to solve in a good way but if you're using Lama in this case Lama 2 in this case actually it can solve like various kinds of task okay so this is the playground you can play with this LMA 2 model you can select different different version of the model and you can play with this model all kinds of question you can ask and you can realize like how powerful this modalities okay so yes guys this is all about our Lama um you can say introduction and all I think you got it like what is LMA to and all okay the basics overview you got it now I will show you like how we can use this how we can run this Lama to model on the Google collab so guys for this actually I already prepared one Google collab notebook for you as you can see this is the Google collab notebook and here we'll be learning like how we can execute this Lama to model on the Google collab so as I already told you we can directly load this Lama to official Lama to model from the official Lama you can see this is the this Lama 2 is available on this hugging face so from hugging face itself actually you can see this uh meta Lama okay and this is the Lama 2 model this is the original Lama 2 model official Lama 2 model it is uh hosted on Hing pH from here actually you can load this model but this model actually I can't load in my free Google collab for this actually you need good instance good uh memory good GPU ANL but here I'm using free cup that's why I can't load and you can also load this thing in your local machine okay so for this actually what you need to do you need to use something of quantized version of the model so again hugging phas also provides like quantization model so uh some of the actually organization have already applied this quantization technique and they compress these are the actual model and they hosted on the Hing face community so here if you see we have like various kinds of quantized model here if you see so these are the Quant models so this is the so here guys if you see this is the GG ml format of quantized version of the model and if you see like lots of model are available okay so from this model actually I'm going to use one particular model so this is the model link I have given just let me open it so the model name is uh um Lama 2 13 billion chat GG ml okay gml is the format of quantization and this is the organization so this organization has quantized this model okay and uh it is published here now this model is like more uh like uh s small model OKAY than your ual Lama 2 model which is published on hugging face uh this model actually you can easily load in your 3D Google collab okay or if you're using your local system as well you can also load there okay and this model has lots of uh uh variant here if you see b means this is the model okay this is the bin format of the model that means binary model so from these are the model I'll be using one particular model because these are different different quantization uh you can say format so I'll be using one particular quantization here and this is the size of the model as you can see this is the the size of the model and after applied quantization the size size has been reduced because what is quantization quantization means all the weights you have in the model uh by default it would be floating number okay but if you apply quantization on top of it it would be converted to integer and your size would be reduced okay your model side would be reduced automatically so this is the like a idea of quantization model so here your accuracy might decrease but again um uh you are uh like getting the first term model here you are getting the smaller model here so this is the idea okay and if you want to uh use actual this meta Lama or that means this Lama 2 model so here actually you need to get the permission you can directly access this model so let's say if I open this link in a different or let's say incognito window so you will see it will ask for the permission actually because I'm using my account there so that's why you can't see the permission now see here if you see access to uh access Lama 2 on hugging P so here first of all you need to login with this website okay if I click on this log loing so it will ask for just logging with your hugging face so here you need to first of all loging with your hugging face let's say I will loging with my hugging face here okay now see here I have already logged in that's why it's telling like uh permission granted but for you actually it will show like you need to apply for the access okay so whenever you will apply for the access so it will give you that form I think you remember it will give you this kinds of form so you need to fill this form okay and need to select all the information so you can select like which model you want to use so you can select both of them and and you can uh just send a request okay so after some times you will receive one mail like that so after some times actually you will see one mail like that uh let's say I applied for this access so this is the mail I got so hi puy this is let you know that your request to the access model metal Lama 2 on the Hing face has been accepted by the author okay so once you got the access then you will able to see this kinds of window here uh this kinds of window here GED model you have the granted access to this model okay but initially whenever you will be applying so it will take some time at least one to two hours then it will give you the access but if you uh if you want to try Okay this model so again I will tell you another option because this model is available on the public repository as well okay because see in hugging F we have two kinds of repository one is like uh organization repository like that means private repository if you want to use private repository so you need to like take the permission from the author and one like you have like public repository so in public repository actually you will have the access uh to the model you don't need to take any permission from the author they will by default provide the access and all so you can directly use that so one guy actually cloned this entire model and he has published from his account here and I will be using that model okay same model only but this is The Unofficial and that is the official one okay I'll tell you like whenever I'll uh show you like how we can use this uh Lama model with the help of langen at that time I will show you like how we can use it but as of now let's try to run this quantied version of the model as I already told you I'll be running this quantied version of the model which is nothing but this model if I show you this is the quanti of the model okay and guys maai actually also provides like different version of the LMA 2 model as you can see so we have 7 billion we have 13 billion we have uh 70 billion so in this case actually I'm running this 13 billion so you can't execute this 13 billion in your free collab that's why uh we are using quantized version of the model but in our next experiment so whenever I'll be using Lang Chen over there so I'll be using this 7 billi parameter model and this model actually you can easily load in the Google collab or your local system as well okay so for this model I I'll take the permission and see guys these are the model are hosted if you see these are the model are hosted from the Lama 2 as you can see chat model HF model I'll tell you like whenever I will be using these are the model I'll tell you so yes guys this is all about now let me just quickly show you like how we can execute so see to execute like quantied model you need one Library called Lama CPP okay so this is the library actually uh you need to use Lama CPP is a library actually this Library helps you to make the quantized of the model okay and if you're using quantized version of the model you need to install this Library so first of all I will connect this notebook now make sure you have selected runtime as gpus so just click here and click on manage GPU uh sorry not here uh just click on the runtime and select uh here you will get one option called change runtime type and I have already selected GPU here so now if you want to check whether you've got GPU or not so you you can execute this command and here you will see I'm I got Tesla T4 GPU and it has actually uh uh 15 GB of uh like vram now here uh these are the requirements actually you need to install so first of all I'm uh installing this one uh Lama CPP Library okay and this is the command to install everything and uh here I'm also installing hugging face Hub because from the hugging face itself I want to access this model because see this is this model is hosted on hugging face and if you want to access any hugging F model so you need to install hugging Hub and here I'm also installing Lama to CPP python okay so these two command actually you need to execute to install Lama uh Lama CPP libr then I also need numai with this specific version now let me execute so guys as you can see my installation is done now uh here you just need to give the name of the model like which model you are using so here this is the model I'm using just copy this name here and here you just need to paste it okay so I have uh just uh given this name here now here you also need to specify the base model name like which particular model you you need to use so here I'm using Q5 1bin model so if I go here so it has lots of variant I already told you so here I'm using this key5 uh uh this model actually I think let me just see q51 dobin q51 dobin um yeah so this is the particular model actually I'm using so you can use any any model no issue with that so I'm using this model and this is the size of the model so I'll be executing so you need to give the same name just copy paste from here and just give it here now once it is done now so here first of all I'll be importing one uh class called HF hub download that means hugging face model download so this uh class will help you to download any particular model from HF first of all let me import then I also need to import uh this Lama from Lama CPP library because we have already uh install this Library so let me import it and if you're not using quantized version of the model okay uh you don't need to install this Lama CPP so we can directly download the model from hugging F okay I'll tell you uh whenever I'll be using this model actually because I already told you Lama to provide Slots of version of the model whenever I'll be using smallest version of the model I'll be directly downloading the model from the Hing face okay at that time I don't need this Lama CPP Library okay but here I'm using quantied version of the model that's why this needed now first of all you need to download the model to download the model first of all you need to give the repo ID repo ID is nothing but your model name so this is the URL I'm giving okay and you also need to give the file name like which particular file you you need to download so here you need to give this Bas name here now it will automatically go to the repository and it will automatically download for you see guys it's downloading and this is around um 9. uh 76 GB so let's wait it will take some time I'm able to load this model because here if you see my vram uh GPU vram I got uh I got 15 GB that's why I can load this model very easily uh that's why actually I'm using this contage version of the model but if you're using actual uh this model if I show you uh actual uh 13 billion parameter Lama 2 model okay uh without U you can say quantized model so uh it is more than your 9gb and you can't load it okay that is the issue actually so I'm following this approach see this model has been downloaded now if you want to see the path of the model like what it has downloaded so it has downloaded in this folder actually in my machine now first of all I need to load my model to load the model actually first of all I'll be defining one class Lama actually you have seen like we have imported the Lama and here you just need to give the model path so this is my model path here I have given and these are the parameter you need to keep it okay these are the default parameter you need to keep it now let me execute and load the model so guys as you can see my model has been loaded now here you can also check like the number of GPU layer you have in your GPU so we have 32 layers and and uh now first of all I'll be creating one prompt template because because we don't directly uh give the prompt to our llm uh we also create a promt template okay so we won't be directly asking the question because let's say what kinds of question actually you want to ask to your llm you need to specify using the prompt template I think you are already familiar with what is prompt template and all so here I have created one prompt template so this is my prompt this is the question of the users just write amist image classification code in kasas and here is the promt template so I'm telling my llm so here I'm telling to my llm as a system system means uh it will consider I'm telling to my llm and here I'm telling you are a helpful and respectful and honest assistant always answer as helpfully okay this is my prompt template and here I'm giving one example so user will ask this kinds of question and you need to give the answer as a assistant assist assistant should be the response from my llm okay so this The Prompt template I have created now let me execute now here I'm initializing my llm so here I'm giving first of all my from template then I'm also initializing the max tokens Max token means like how many output you wants from your model you can if you're using CPU so you can decrease this length if you're using GPU you can increase this length Okay temperature I think you already know if it is close to zero that means you are uh you are taking like more streak output from your model and if you are increasing to one that means uh you are taking the randomness from your model but here I have set 0.5 so it's middle position and this is the top probability score and uh these are some default parameter you need to give okay now let me execute it so it will take the prompt and it will understand the prompt template and it will give you the answer so here I have written like uh write a amist classification code in kasas so it will uh give you the code with respect to that and this model is pretty huge that's why the response time is little bit High uh so you need to wait for some time so guys execution done now let me print the response I got so this is the response but it's not readable so from this response I only need to see the text uh from my model so let me execute see guys so uh so here I got the answer so here if you see um this is my system that means this is my prompt I have given to my model and this is the question user has asked and this is the response I got from my assistant so first of all it's telling hello I would be help uh happy to help you your Mist classification projects using kasas uh before we uh begin may I ask what specific aspect of the projects you need to assistant uh assistant with do do you any pyro experience with the Deep learning and caras additional uh so it's giving some uh output so what you can do you can again execute this code I think it will give you uh that because if you're using for the first time I think it will give you that uh response now let me execute for the second time so guys now you can see uh it has giving me the code for the amist MS classification now let me give another uh prompt so here I'll just write uh wrer um linear regression code wrer linear regression code let me let's see like whether it is able to give or not so again execute now guys I got the response and guys this is the code for linear regression okay so it's amazing guys so we are getting our output and uh like uh yeah so that's how actually we can use uh our LMA 2 model OKAY Lama model we can run and this is the Quant version of the model again U some accuracy might be uh less okay you you might get some wrong output because of the Quant version of the model okay but again it's a pretty good uh you will get like all of the response okay whatever question you are asking now uh what I will do uh this was like how we can execute like qu PR version of the model because I was using uh because here I was using lamb to 13 billion parameter this model but next actually I'll will show you like how we can execute using Lang Chen okay how we can use using Lang Chen so there actually I'm going to use this model called 7 billion so s 7 billion parameter this model actually I'm going to use okay and it this model has actually lots of variant okay I'll tell you so we'll be using some HF version of the model okay then I'll show you like how we can load this model so yes guys uh this is all of about this execution of this Lama 2 model on Google cab now let's explore like how we can use this Lama to model with the help of Lang chin so guys now let's see like how we can use Lama 2 model with the help of Lang chain framework and uh we have already seen like how we can execute this Lama 2 model on Google collab so there actually I used like one particular model uh so 13 billion parameter model but there actually I used something called quantized Model because I can't load this 30 billion model okay in my uh free Google collab I think I was already discussing about okay but uh in this uh example I'll be using this 7 billion parameters so this model would be a little bit uh uh small for me to load in my memory so I can load this model okay in my fre Google collab there is no issue with that but but again uh to load this model uh you need to take the permission from meta AI okay uh this model is available on the hugging face website I will tell you like where where you can get this model so if you search on Google like Lama Facebook research so you will get this GitHub repository and there actually they have mentioned everything about Lama 2 and all and uh they will also give you the download link and all so if you click on this download link so it will redirect to this page and here you just need to fill out this information okay so I think I already showed you this thing and they have already written like how we can access this model from the hugging face also see uh this model is also available on the hugging face website so you can visit hugging face and uh see uh it has this three variant uh like 7B 13B and 70b I think I was already discussing about and again if you see here uh these are the model has lots of sub variant like Lama 27b chat model Lama 213b HF model model okay so these are the like sub bant of the model so this is nothing but like I mean some of the model would be bigger some of the model would be smaller okay so that's how they have trained different different model with respect to these are the uh variant of the model okay now here if you see here in the GitHub they have written one thing this Lama to comes with two different model one is like pretin model and another is like fine tune chat model so what is Preen model and what is this fine tune chat model so pretin model is nothing but these model are not fine tune for the chat or question answer they should be prompted so that uh expected answer is the natural continuation of the prompt so basically what they're telling actually with this pre-end model you can't do actually chat operation or you can't do actually question answering operation right like the way we usually perform with our llm model we ask any question we do the chat operation with that so with this pretend model you can do let's see if you want to uh generate text or if you want to let's say generate uh something okay from the model you can use these kinds of PR model okay and what is this fine tune chat model so this F chat model we trained on dialogue applications so to get the expected features from uh and performance for them the specific format define chat completion so basically what they're telling so with this fine tune chat model actually you can do the chat operation let's say if you want to do any question answering if you want to perform in chat operation you can use this fine tune chat model so in this example I'll be using this fine tune chat model because I want to perform um chat operation with the llm okay I want to ask some queries and all so I'll be using this model but let's see if you want to generate text and if you want to generate something so you can use this pretin model okay so now if you visit here in this metal Lama to on hugging face so they have different different model as I already told you so it has chat model also and it has without chat model also so now you can choose any of them okay uh so guys from these are the model itself I'm I'll be using one particular model so I'm going to use this particular model called Lama 27b chat H model so here is the model description and all about you can read it out okay so with this model actually you can do chat operation and all okay and this is 7 billion parameters so I can easily load this model in my uh free Google collab okay so there is no issue with that I don't need to use any U you can say quantized model okay uh from them so uh now uh what I will do before uh see before loading this model you need to take the permission from The Meta AI so what you need to do here so you will see one uh like option here just apply for the permission uh see for me I have already applied for a permission and and they have already given me the access that's why it's telling you have been granted to this this model okay uh so I already have the access to this model but if you're doing it for the first time make sure you have applied for the permission okay so once you get the permission so uh you will get these kinds of message here if you see here uh you will get this kinds of email like you have granted to this model and all so they will mail you with respect to that and once you click here so you will uh redirect to these kinds of form so here you just need to these are the form and submit your information so after some times actually they will give you the permission but if you're doing it right now and if you're waiting for the permission so what you can do in between I will show you another option okay another another alternative I will show you so that alternative you can follow and guys one particular thing you will always need to remember so whenever you are uh submitting the request okay whenever you are submitting the request for this model make sure the email address you are using the same email address you are used in your hugging face as well okay so the same uh hugging face email address okay you have created your account so same email address add you need to submit here okay as you can see you need to submit your email address here so make sure you have selected the correct email address with respect to your hugging F account so that you will get the quick access there so guys I already created one notebook for you so here I will show you the demo how we can use this Lama 2 model with the help of Lang Chen and I think you already know what is langen langen is nothing but it's a framework for developing application powered by language model or you can say we can also uh uh develop generative VI application with the help of langen and this is the langen documentation and G already given here you can go go and check and if you and if you don't know like Lang chain so we have a tutorial in our YouTube channel just go ahead and try to uh finish that lecture otherwise uh it would be a little bit difficult for you to understand like what I'm trying to say right so guys here I'm already expecting you are familiar with this langen framework uh like what is chain what is prom template and all about okay so this should be the prerequisite for this video now guys uh the first thing what I need to do I need to connect my notebook and make sure you have selected runtime at GPU because uh you need the GPU to run this model so change run type to GPU so for me I have already selected and let me connect the notebook so guys uh notebook is connected now first of all let's see whether I got GPU or not so this is the command to check the GPU so here I got Tesla T4 and here I got 15gb vram now what I need to do guys uh I need to install some of the libraries see guys uh if you're using any open source large language model okay open source llm model which is available in hugging pH so for this actually you need to install this Transformer Library okay so using this Transformer Library we can actually uh access our hugging face model okay so that's why this Transformer Library we need to install then uh I need to also install these are the two libraries accelerate and uh enops then I I need also Lang chain because here I'm going to use langin okay and uh this uh bense bytes okay so this uh these are the packet actually I need to install so these are the actually dependency so langen I need because I will be running these at the LM Model H LM model with the help of Lin and I also need Transformer because I will be using my Lamar to model from my Hing fa itself okay that's why this Transformer is required now let me install uh so guys as you can see installation is done then uh first of all what I need to do I need to loging with the HF account okay so to loging with the HF account uh uh you need to use hugging face CLI to login okay so here you just need to give the uh API key okay hugging face API key so there is a secret key actually you will get from your huging face account so let me open with my huging face account so guys this is my huging face account if you don't have any huging face account just try to create one account okay now if you click on the profile and go to the settings and here you will get one option called access token okay just click on the access token so here previously I already created one access token here so I'll be creating a new one so you can also create a new access token you can give any name so let's say I will give as Lama and uh you can get uh read and write permission uh I will be giving read permission because I only want to read the model from here then I'll just generate a token so this is my token guys now what I will do I'll just copy this token and guys don't share this token with anyone okay otherwise they will also able to access your account so I'll remove this uh token after this recording okay that's why I'm showing now let me execute this uh command and it will ask for the token so just click here and paste your token and just press enter so if you do it so now it will tell add token as G credential so what I will do I'll just give uh yes and press enter now guys here if you see my logging is successful now what I will do I will import uh then I need to import uh this HF pipeline from langin len. llms because with this uh HF pipeline so with the help of this HF pipeline class I will be loading my large language model which is nothing but my Lama 2 okay so I need to import this Library then I also need to uh import tokenizer so what is tokenizer guys tokenizer is nothing but uh it is responsible for uh pre-processing the text into Aras of number as uh input to the model because so whenever I will be giving any input to my model it would be completely a text input right but my model can't understand that uh text uh raw text actually I'll be giving so for for this actually what I need to do I need to convert to numbers right right even I also need to perform some pre-processing so everything can be perform using this tokenizer okay autot tokenizer class that's why I need to import it then I also importing uh Transformers then torch and this warnings okay now uh let's load our L 2 model from this huging face so as I already told you so you will get this kinds of access once you got the access and all okay so I have already attached some screenshot here and once it is done it will tell you this message right now here guys you need to define the model actually you want to use so in this case actually I'm using this model as I already told you I just copied this name and just paste it here if you see this is the complete name I have given and this is the model from meta because this is the official model actually I'm going to use and this model I need the permission I think I already told you this model I need the permission but let's say if it is taking for you to uh take the permission and all so what you can do you can use this model you just comment this line and uncommon this line so this is the same model but this is this is present in the public repository and this access is given to everyone okay so you can easily use this model and this is the same same model guys okay this is the same version of the model so what this guy has done actually so he has cloned the official version of this LMA to 7B CH HF model and he has published in his uh you can say uh repository here and this is completely and this is uh completely Public Access so you don't need to take any access uh okay from from this author so you can easily uh use this model so let's say if uh you have applied for the access and it is taking time and you want to do it right now with me so what you can do you can uncomment this line and you can load this model okay but for me I have already access to my official model so I'll be using official model and I will comment it out okay so it's up to you which model you're going to use now guys first of all what I need to do I need to load my tokenizer so to load the tokenizer you need to give the same model name okay so with respect to that it will load the tokenizer now here uh what you need to do you need to create one pipeline objects and here you need to call this Transformer pipeline okay and here you need to uh give the pipeline name so here I have given Tex generation because if I go to this model I'm using so this is a Tex generation model as as you can see this is a tech generation model so that is why I have given Tex generation here now I I also need to give the model um like which model I'm going to use so this is the model I have given here okay then I'm also need to give the tokenizer so this is the tokenizer I have given and these are the parameters just keep it as default and this is the maximum input length so I've given 1,000 you can also increase and decrease the size okay it's up to you now guys what I will do I'll just quickly uh load my pipeline so basically it will load the entire pipeline it will load your model it will load your tokenizer everything it will load as a pipeline so what is the use of this pipeline line means like first of all whenever you are giving any input to the model first of all it will apply the tokenizer and it will convert that text to numbers okay it will preprocess the text then it will apply uh this data to the model okay so that's why this pipeline handles each and everything you don't need to write any custom code for it and now guys here if you see uh it is downloading the model okay and I'm using uh free collab and I got 15gb vram there so I think you can see uh RAM is uh is not utilized till now because it is downloading the mod so once it will load the model it will utilize my Ram so guys my model has loaded now what I need to do I need to call this hugging face pipeline I think you remember we load this hugging face pipeline from langin okay here if you see from langin LM we load this Hing face pipeline now I need to give this pipeline object to this uh huging face pipeline from my langin uh so here uh you will get to parameter called pipeline so here you just need to provide the pipeline okay this pipeline we have created and another uh keyword you need to give the temperature value so what is temperature value so see uh I think you already know like what is temperature value so here I've already written so temperature value like uh so if it is zero that means the model is very safe and it is not taking any Bits And if you are uh like uh giving this uh and if you're setting this value to close to one so it will be uh taking risk okay and it might generate wrong output but it is very creative so this is the parameter actually you can change uh let's say if you want some stick output from your model okay you can set this parameter as close to zero and if you want let's say very creative results and uh you are not woring about the wrong output or let's say random output so you can uh give this parameter as one okay so this is the parameter you need to give so here I want streak output from my model that's why I set this parameter as zero okay so this is the parameter I have given now here I'm defining as llm so this is my large language model okay but I think you remember initially we I was loading I was using something called open large language model which is nothing but GPT 3.5 turbo you can use anything gpt3 GPT 4 anything you can use but there actually I I was using open API and it was taking charge for me right but this is completely free now see with the help of these kinds of Open Source large language model uh and it is also available inside hugging P we have easily loaded this model okay and we have created our llm object here now this is one prompt actually I have prepared so what would be the good name for a company that makes colorful socks so this let's say this is my uh prompt this is the user prompt this is the user input and it is giving this input to the llm and now let's see like what llm will predict okay so here I will uh give this prom to my llm and let me execute you can also set your custom template promp template I will tell you like how to set it but first of all Let's uh give my prompt without any template because uh by default your LM will have some C like you can say default template it will use that template so guys here is the response I got from my Lama 2 so I would suggest the following names for the company that makes colorful socks so Soul mats Hue and cry tall tally socks okay it's great actually even it is giving us the description with respect to the name it is suggesting now you can give any kinds of prompt you can check it out so let's give I I uh another prompt so here I have given I want to open a restaurant for a Chinese food suggest me a fence name for this okay so you can also give let's say Indian food okay I'll give Indian food now let's see whether it is giving me some name or not so I'll execute my llm now guys as you can see it has given me the name so restaurant I would suggest the following uh names for your Italian uh sorry uh for your Indian for restaurant so tandur kns then spice R Mumbai bazer K Leaf okay so great I am getting very good name let's say if you want to open any Resturant so you can refer these are the name and these are the name is like very unique okay and this is the description now uh also you can create your custom prompt let's say uh see this is the better practice to create our custom prompt always uh let's say whatever task you want to perform uh with the help of your llm so you can give the custom prompt okay instead of using the default prompt so to give your custom prompt you need to import prompt template from Lang Chen first of all so let me import and I also need to import something called llm chain okay from Lang chain now this is the first example I have given so this is my prom template one so here I I I've given the same prompt I I think you remember and uh I've just written I want to open a Resturant for uh here I've given kins cuin should be the input okay here I've given this should be the input variable could suggest me a fancy name for this now I'll be using this prom template and I will be giving to my llm model okay so it won't be using that uh default prompt template after giving it now let's say how it will work so uh this is the technique it will work so basically it will apply this format on top of it and whenever it will get this cuins actually it will replace this uh input okay the input I have given let's say I have given Indian now if I print this input prompt if you see I want to a resturent for the Indian food search me a fancy for this okay so this is the input I have prepared with the help of this code right now let's take take the second example so this is the another prompt I have created prompt two and here I'm using another prompt provide me a coze summary for this book and here I'm taking book name as input from the user so how it will work so whenever user will give an input let's say I have given an alchemist book book okay so it will take as input and it will make the complete prompt see it will make the complete prompt okay now let's use uh the first one first of all so I'll be using this prom template one so here just let me write now I'm going to use this prompt one the very first let's use prompt one and here I have created llm chain and here I have given my llm okay so llm model I have given so which is nothing but uh the llm we have created I think you remember this is my llm this is my llm okay and here I have given the llm and here I'm giving the prompt as my prompt template and here I'm also giving varos is equal to true that means it will also print the log like what is doing actually so if it is if you're making it false so you can't see the output log and if you are making it two so you can you can see the output log okay now here uh you need to call chain. run and here you just need to give the input okay so here let's say I'm running this prompt one and this is for the kin so here what I will give I'll give Indian kin Indian kin okay and this is the response I will get now let me execute and show you see first of all it is uh uh entering to new uh llm chain uh prompt after formatting so this is the prompt it has prepared so it has taken my input Indian and this is the prompt actually it has created now it is applying LM on top of it and it will uh predict now let's see now guys uh chain has been finished and this is the response I got aurent name uh is is a crucial aspect of the any business okay and these are the name actually it is suggesting now what I will do uh I'll give this prompt template two that means my book uh book prompt and here now we'll ask any book name so let's say I'll give uh Harry Potter Harry Potter book I want the summary of Harry Potter book let's see whether it is able to give or not and this model is pretty good guys just try to explore this model uh I am loving this model A Lot okay um as I opens model I can say like this is one of the best model you can use from meta AI so see guys uh this is giving me the summary again if you mention the book with a specific name let's say it is giving the summary of philosopher stone okay you can also give any uh specific book it will give you the uh summary in that summary it will give you okay so great guys we are able to use this lama2 model with the help of Lang chain and we have seen like how we can load this model with the help of Lang chin and all how we can create the template okay how we can create the LM CH and everything we have seen right now guys it's time to make one projects with the help of this Lama 2 now what I will do I will uh create one uh chatbot projects with the help of this Lama 2 and Lang so basically uh we'll be creating one chatbot so that can chat with any kinds of website so let's say if you have any website okay so you can integrate that website to your chatbot so whatever question user will ask with respect to the website it will give you each and every answer let's say uh this is one website Lama meta website okay so let's say I want to ask any questions okay from this website let's say I want to ask like what this uh website provides okay what are the services it provides uh give me the contact information and all so that chatbot will able to uh give me everything with respect to the uh website I have so these kinds of chatbot actually will be implementing with the help of this Lama to and Lang chin okay and I will also utilize like vector database uh with that uh projects okay because I have already explained like vector database so I already created one dedicated uh session on Vector database just go ahead and check it out if you haven't checked it out that session so guys we'll be using everything like vector database this Lama 2 and Lang Chen with the help of that actually we'll be implementing this entire projects okay and this is going to be one very interesting projects okay you will be enjoying a lot so now let's start with the projects and let's see like how we can develop these kinds of generative VI projects so guys now let's uh build one generative VI projects one uh like generate API application with the help of large language model so here I'm going to use uh lamp to and here I'm also going to use some of the additional tool let's say I'll be using Vector database then I will be using Lang and framework okay then we'll be implementing uh this uh uh amazing application so the application actually I'm going to implement called uh website bot so what is website bot I think you have probably seen like uh uh if you visit any kinds of website so some of them are already created some bot so if you ask some question in the website like uh what this website and all about like what the services is provide so everything it will give you the answer right whenever we visit any website let's say we visit open.com so if I visit this website so if you want to see this website structure like how many pages actually it has uh and uh like what is the layout of this website what is what the URL of that page actually everything you can see okay if you visit this uh link called sitemap sitemap uh sitemap.xml okay if you just write this one sitemap.xml and if you press enter so it will give you all the details about this website let's say this is the website and it has actually different different pages if you see if I go to again open again if I go to openi so if I let's say click on research and click on let's say overview so it will open a different tab for me like let's say this is the different page for this website so that's actually you have different different website and with with respect to that it has the different different links as well as you can see different different links actually it will also provide okay let's say uh this is another page okay this is another page inside open AI so let's say I'll copy this URL and if I paste it here so it will open that particular uh see it is opening particular that particular page okay so that's how actually you can export uh with any kinds of website uh so I already collected some of the website URL so what I will do uh I will use that URL and I will build this application so here if you see I have already prepared one notebook here and here I already uh collected some of the uh website link so if I open it so see this is one blog website link so paper review Lama to open foundation finding chat model so it has some content okay it has some content so we'll be chatting through this content like what are the things actually uh this content is providing okay everything we can ask in our bot whenever we'll be complete completing this thing not only this thing I have uh attached multiple uh URL as you can see this is another link okay this is another link this is another website so again some content is inside that again it has different different pages as you can see it has different different pages uh it has different different pages if you just visit that site uh map. XML you will see different different pages link you will see there then I also have another one so this is the website of stability. and again actually uh it has some content so you can give any kinds of website link here so I have collected these are the website link so you can use any of them so here here is another website okay so we we'll be using this uh four website URL and we'll be implementing one website bought on top of it so let's say if you're asking anything okay if you're asking anything regarding these are the four website like what are the content everything like what are the things actually it is providing what is this uh let's say if you want to ask something about Lama to open foundation fine tune chat model you can ask so it will give you the answer with respect to the content actually it is giving let's if you want to ask like M PT 7B okay this is another uh open open source large language model if you want to ask something so here you can ask so it will give you the answer with respect to this content so any any website you can refer let's say if you have created your custom website as well so you want uh to create one bot on top of it so let's say I am I'm the user so I will come to your website first of all I will ask to your Bot like what are Services actually provide what are the things actually provide I can get all the information from your bot then uh I don't need to visit your website okay again and again so I can ask everything from the B itself so guys this is going to be one Amazing Project and uh what you feel like just try to comment in the chat okay so uh whether it's helpful or not and make sure you are just watching this video entirely don't skip any part otherwise you might get some issue so guys now what I will do I will first of all give you the projects idea I'll be just uh giving you the projects architecture I'll be just writing the project architecture like what are the steps actually we are going to do uh throughout this entire projects like what are the component will be implementing okay so we'll be seeing the project architecture at the very first then once you understand this architecture we'll be moving to the coding part so let's uh go to our whiteboard and try to understand the project architecture so guys I'm inside my whiteboard so now first of all I will write just write the Project's name so it is uh website website bot using uh lama lama 2 okay so here let me give you the projects uh architecture like how we are going to do the projects so first of all what I will do I need to uh collect those uh website uh uh sitemap.xml basically I need to collect all the content okay from the website actually I'm referring so first of all we'll be uh taking all the content uh with the help of this sitemap sitemap.xml okay XML and you don't need to worry about uh manually you don't need to write these are the thing actually if you're using Lang chain so with the help of Lang Chen actually you can easily extract the content from any unstructured website okay I'll tell you like how to do it so what it will return return it will return return uh so it will return you page okay page let's say one page two and page three so after getting the page actually uh I need to get the documents okay present in the page so so it will return me the documents let's say docs okay docs one docs [Music] 2 docs 3 okay docs 4 and so on so docs 4 okay now it will return me that documentation like all the page uh content so once I get all the content okay uh basically here um let me write out here we are just extracting extracting text okay excting text and uh after getting all the text uh what I will do I will use my embedding API that means embedding model so in this case I'm going to use hugging face embedding embedding model I think you already know what is embedding model and all I already discussed this thing in my Vector database uh session so if you haven't uh watched that session you can go ahead and watch it so everything would be clear there so I I'll be using embedding model so with the help of embedding model actually I'll try to convert this text to Vector okay Vector representation now um this will return me the vectors so here I will get lots of vectors then once I get the vector uh I will build one build semantic semantic index okay I think you will know what is cementing index uh cementing index means you will be uh combining all the vector together okay then we'll be building the semantic index and you will be storing the semantic index to the knowledge base okay so what is knowledge base knowledge Bas is nothing but your vector database so let's say this is my knowledge base okay this is my uh knowledge base or let's say Vector DB Vector DB so these are the vector will come here these are vector will come here and it will store inside my Vector DB okay so once I'm able to store these are the uh vectors okay in my Vector DB now uh what will happen let's say this is the user let's say this is the user so user will H some uh queries so let's say this is the question from the user so the first thing what I need to do I need to convert this questions to the uh vectors because again it's it's going to be the raw text okay so again I'll be applying something called embedding model embedding model okay then I'll convert this text to Vector so here I will get something called quy embedding or quy vector so this quy Vector I will apply something called semantic semantic search I think you already know what is centic search okay so centic search on top of my vector DB okay so I'll do the semantic search so once you do the santic search it will uh return you some ranked result okay rank results now I will have my rank results now I will take the help from my llm I'll be using large language model which is nothing but my uh Lama 2 okay here I'm going to use LMA 2 so with the help of this large language model I will get my actual uh response okay the the query user has asked so it will give me the actual response okay so this is the complete idea and this is nothing but this is my user this is my user okay so this is the complete uh you can say diagram of our projects as you can see first of all uh we'll be using these are the website with the help of sitemap.xml we'll be extracting all the pages available in the website then we'll be uh extracting ing the documents that means extracting the text after that uh we are just converting let me write here converting text to Vector vectors okay here we'll be converting text to vectors then we'll get our Vector embedding that Vector embedding we be building one centic index and we'll be storing into the vector DB so in this case actually I'm going to use something called Pine con Pine con Vector DB okay you can use any any Vector DB where at you can use chroma DB you can also use face okay from Facebook anything you can use but I will be using pine con then uh What uh will happen user will ask some query I will be applying again embedding model and I'll be getting quum beddings and with the help of this qu quum beddings I'll be do semantic SS on top of my Vector DV it will give me rank results and with the help of llm I'll uh extract my correct output I'm I was expecting okay and it will give me the correct response uh to the user so this is the complete idea of this projects now what I will do and here I already uh prepared one notebook uh for this projects so I'll just explain like whatever things I have done so first of all I need to connect my notebook make sure you have selected runtime as GPU so here uh just click change run type type and select GPU so for me I've already selected now here I need to install some of the package so here I'll be installing langen then uh by byes accelerate Transformers why we need it I think you remember I think uh previous experiment I was showing how to use Lama with the help of um uh langin okay and I was reading that L Lama model from my hugging Fist and for hugging fist actually I need to install these are the libraries then uh these are the actually dependency you can install okay then uh PF should be another dependency and also you need to install sentent Transformer now let me install them so installation is done so so here I'm not going to use open AI so let me just delete this thing then I also need to install this library unstructured because uh the website will be loading so it has lots of unstructured format so to overcome this thing actually you need this package called unstructured so let me install it I'm not using F uh f is again a another Vector database so you can remove this thing I'll be using something called pine cone so this is done then I also need to install tokenizers then X forers as well uh now I will be also installing uh Pine con client because here I'm going to use pine con Vector database and guys if you haven't checked my Vector database session you can check it out okay it is available otherwise uh you might get some confusion so it's better to try to understand this vctor DV okay then you will get the entire idea now uh all the things I have uh installed now I'll be installing all the requirements libraries actually I'm going to use and whatever libraries actually I'm going to use I will tell you okay which Library actually I'm using for which purpose actually I will tell you at that time so here you can see some additional Library also I'm importing but um again I will discuss like what are things actually I need here now I also need to install punctuation mantk H so the first thing I need to collect some of the website URL the website URL actually I want to use for my bot so here I already showed you I I'm using this four website okay I'm using this four website you can uh use any of the website and you can uh use it so these are the four website link I have provided inside one variable called URLs okay now let me execute yeah now I think you already saw uh we have imported one uh class called unstructured URL loader from Lang here if you see un structure URL loader so this uh class will help you to uh extract all the data from this other the URL okay the I think uh I was explaining this project architecture like it will be using something called sitemap.xml then it will extract the pages okay from the pages it will extract the documentation so everything can be done with the help of this uh function actually we have imported here okay unstructured data loader and here you just need to give the URL and it is not only working with the single URL it will also work with the multiple URL as well okay so now if I execute and show you so it will easily extract the data and it will go through all the pages actually this website has and it will extract all the data for me see uh it has extracted now if I print my data uh see guys all the data you can see here it is amazing right so that is the power of Lang chain so that's why we use this Lang chain framework to build these kinds of generative a application okay now if I show you my data length so it should be four because I'm using four website so it will give you four website data okay here now uh this data should be in a document format I think if you see the format of this data it should be a document format okay and uh now I need to apply something called uh text split on top of the uh entire Corpus I have because I need to convert my data to chunks okay why I need to convert my data to chunks because uh see I think I already discussed this thing in my Vector database uh session why this chunks is important because whenever you open any kinds of model okay let's say if I open um let's say open a model here open a model open a or let's say if I open my Lama 2 model so here if you see uh it has context length as 4,000 uh 96 okay like it can take like 496 uh uh tokens okay at a time but if it is more than that actually at the time your uh model can take this and it will give you addor okay but the data actually we have extracted it has like more than 4,096 uh you can say tokens okay so that's why I can't directly pass this data I can directly uh pass this uh Corpus to my model so that's why I need to convert to chunks chunks means I will be converting uh different different chunks okay different different chunks mean different different paragraph okay and that paragraph I will be converting to like embedding Vector okay then I'll be giving that data to my model okay I already discussed this thing in my Vector database session just try to go ahead and check it out out this should be very much clear now here uh I'll be converting my enre Corpus to the chunks so this is the character splitter uh function I have imported from lch here if you see character is spitter from uh lch I'm importing now with the help of this one I will be creating the entire chunks now here you need to provide two things the Chun size and the chunks overlap Chun size means like how many tokens you need in a chunks and chunks overlap like how many um tokens actually you want to consider from your previous chunks okay so these two parameter you give here now let me execute now my chunks object is C uh created now I'll give my data I'll give my entire data I got from my URL and it will convert convert it to chunks okay now if you want to see the Chun size so it has created 90 chunks so if I print my text chunks okay so now let me show you see this is another chunks then again uh this is another chunks okay then again this is another chunks that's how it has created 90 chunks okay and if you want to see individually you can also see this is the Chun zero chunks one and if you just read it carefully you will see some of the uh tokens are coming okay from your previous chunks as well okay so this is the Chun overlap so basically it helps us to understand the context of the sentence actually you have okay now we have successfully converted our uh entire Corpus to chunks now I'll be downloading the Hing Bing because here I was discussing I got my uh all the documents okay and I have converted to chunks okay if you see we have converted to chunks dox one docs 2 docs 3 and docs so on now I need to use H Model H embedding model to convert this chunks into embedding okay Vector embedding so that's why I'll be downloading first of all HF embedding so to download The Hang embedding I think I already imported this Library here uh here hugging F embedding I think somewhere yeah so from Lang Chain embeddings Hang embeddings so it is available inside langas Lang chain now here I'm importing okay now if I execute it will automatically download the default model so hang has lots of you can say embedding model so this is the one of them okay so this is the name I have already given you can open it up so this is the model for uh embedding okay so you can read about this model I have already downloaded this model and now let me see the model which model I got here so here if you see I got something called sentence Transformer all MP net base uh V2 this is the model I got okay this is the embedding model now if I let's say uh if I want to convert any text to embeddings okay and I want to see like what kinds of vector and what is the length of the vector so I can test it so let's say I have given hello world and from the embedding I'm just doing qu embedding now see guys the length should be 768 now this is the vector representation of of this sentence okay this is the vector representation of the sentence so you can give any here so let's say I'll give hello or let's say how are you how are you and I have explained this thing detail in my Vector database session so that's why I'm again and again telling you just go ahead and try to check it out that video it should be very much Clear see again I'm getting the same length like 6 768 and this is the uh how you Vector representation okay now what I will do I will initialize my uh Pine con U Vector DB so for this actually I need to collect two things one is like Pine con API key and is like Pine con API environment so for this I need to visit first of all pine con so just write Pine con. iio and here make sure you have the account so I have already uh account so I'll just log with my account so guys if you logging with your accounts you'll able to see these kinds of interface so first of all you need to get the API key just click on the API key and here is my API key I have already created so what you can do um see this is my previous API key I will just copy this API key and if you don't have API key just create it here okay just click on create API key give the name and create the API key will get your API key then I'll just paste this API key here so this is my API key and don't share this API key guys I'll remove this after this uh recording that's why I'm showing and I also need like Pine con uh API environment so for this actually you need to create one index just click on the indexes and create an index index and you need to give the name of the index so let's give uh Lama projects Lama or you need let's give Lama only give Lama okay and here you need to give the dimension of the vector so this is the dimension actually uh so here I'm using hang embedding so hang embedding this is the dimension 7 68 so this Dimension to give it 768 and I will take this cosine metric okay so you have any other metric as well so I'll use this cosine metric and because I here I'm using free plan then I will create the index so it will take some time to ready your uh indexes so let's wait so once it is done it will give you this green icon now here uh you will get this environment name called gcp starter okay I will copy this name and here I need to give it okay done now let me execute so I have set my environment so API key and API enironment now I'll initialize my uh Pine con so here instead of giving inside your ways you can give it directly it is also fine so let me just give it directly so that's how I can provide now let me execute and now I'll will give this credential and I will just initialize my Pine con and here you need to give the index name you have created so this is my index name which is nothing but Lama I'll will copy and here I'll just give the name okay and this particular line will convert your uh entire uh like chunks to the embedding Vector embedding andore inside the pine cone see this is the code basically I have my text chunks and one by one I'm just reading the content and I'm using my embedding okay and I'm converting to vectors and index I'm giving also like this is the index like this is the index I have created so in this index actually your vector will store now let me execute and show you done now if I go to my Pine con and refresh the page you will see like uh all the vectors actually okay see uh this is my text with respect to that this is my vectors okay this is the vector representation and this is the index okay and now see we have successfully stored our U data we have successfully stored our vectors to the vector database okay and you can see all the vectors here okay you can also query out everything you can do and uh this thing you can learn from my Vector DV tutorial so there actually I've showed you like how to use this Vector DV and all so here I'm not going to explain in depth okay because they already explained and this thing now see guys I already stored my vectors inside my Vector DV now what I will do I will uh first of all loging with my uh uh logging with my this one uh my hanging face because I want to use that Lama 2 model from hanging face for this actually I need to login so let me log in so if you want to log in you need this uh um access token I think you remember I was collecting the access token so this is my access token I'll just copy you can create your access token okay I I think I already showed you how to create it now here I just need to give the token and login see logging successful now here you need to specify the model name which model you want to use I already told you I'll be using this Lama 27 B chat HF model so this is the model name I have given here and you can uh use that alternative also like let's say if you don't have the permission you can uh use that model that open source model I think previous experiment I was showing okay because I already have the access so I'll be using this model now first of all I'll load my tokenizer and model I already discussed like what is tokenizer and model okay why loading because I want to create the pipeline now let me load it see it is downloading the model so it will take some time let's wait so guys uh we have already uh downloaded the model now we need to create the pipeline I think I already showed you like what is Pipeline and all okay why we need it so now let me initialize the pipeline okay so here if I show you my diagram so we have compl completed till this point actually we have stored the data now we are initializing our llm okay then we'll be handling the user now pipeline has been initialized now I will be calling this huging face Pipeline and inside that I will give my pipeline objects and I will also give this uh argument called temperature I already told you what is temperature now let me initialize my large language model okay now let's first of all test it whether it is initialized successfully or not so here I'm giving one prompt please provide a concise summary of the book of Harry Potter so it should give me the summary uh so guys as you can see we are uh getting the output that means my llm has been initialized and it is working fine now let's do some question answer with my uh llm uh the data we have given like the website we have given okay so from the website we can ask any kinds of question now first of all I need to import this retrieval keyway okay this function now here this is my query like I'm just asking how good this uh uh vuna okay so there is another uh website actually I think you remember this is all about vuna so I want to ask something about vuna okay from this uh website uh so it will give me the response okay respect to that now this is my question now this is my query uh if I perform something called similarity SE uh on top of my Vector DB so it will give you uh three different uh results as you can see I think I already discussed this thing like similarity sech how to perform and now let's say if you want to get the actual results okay leses with respect to your questions you can take the help from the llm so that's why so that's why you need to uh call this retal QA and here you need to initialize the llm CH type and retal you need to give your vector restore object here okay and as rer it will so basically it will refer your vector database and it will also take the query and it will understand the quy with respect to that it will also understand the um question you have asked okay the documents uh response you got then it will give you the authentic results okay now let me initialize this one okay yeah now I will ask the same query like how good this vuna now if I ask this query to my llm see it will give you the answer so guys as you can see it has given me the answer viona is a chat B that uh uses uh stable diffusion 2.1 generate the response while is quality is high okay it is giving this response now I'll ask another question like how does Lama 2 outperforms the other model let's see because if you see here I have another website of LMA 2 so this is the LMA 2 Okay so I'm asking uh the question with respect to that okay so this is the power of this llm and we can create this kinds of generative application with with the help of this LMA to Pine con and langin see guys Lama to out performance model uh Benchmark okay so it is giving uh like GPT 4 p 2 okay uh basically yeah this is the response it is giving now let's another uh now let's ask another query like what is St stable LM okay I think again uh if you see like I am also passing one question with respect to other website see here you can also add your custom website you can ask any kinds of question with respect to that see this is the response I got now we can create one while loop um like ask the question repetitively one by one so now it will ask for the user input now here I will ask one query like what is uh MPT 7B so I think you remember we have one website of MPT 7B okay now let's ask one qu on top of it so yes guys as you can see I got the answer MPT 7B is a 7 billion parameter language model developed by llm foundary okay it is giving all the answer now you can ask any kind of question you can give see again it is asking for the prompt so I won't be asking I just write exit so it will exit my code see here I have written the logic so yes guys uh I hope you got it like how we can Implement these kinds of beautiful generative application with the help of Lama to Pine con and langen okay so this project actually you can also convert to uh stream lad app in future I will also show you how we can uh convert it to streamlit app okay and whenever I will show you like end project implementation I will show you that part so yes guys I think uh you have liked this particular session and uh you have learned everything about Lama 2 like open source large language model uh how to run it and how we can also implement this kind of gen application so if you have liked this particular video just try to share with with your friends and family and uh if you need anything from my side you can let me know in the comment okay so guys as of now we have seen like various kinds of Open Source large language model we have seen like how to use LMA 2 how to use Google Pam 2 so in this video I'm going to discuss another U open source very powerful large language model which is nothing but Falcon so guys this is another open source large language models uh even Falcon has lots of variant like uh so recently Falcon has published this 180 B billion par met this model but it has some other variant as well here if you see Falcon has actually 1.3 billion 7.5 billion 40 billion and this is the recent one which is nothing but 180 billion parameter so uh actually I can't load this 180 billion parameter with this Google collab and all so if you have good instance so you can load it process would be same but I will take this model guys uh 7.5 billion this model 7 7 billion model and I will show you one demo like how we can use this uh Falcon open source uh large language model to build our generative by application so first of all I will show you like how we can uh uh integrate this Falcon 7B uh model with our Lang chain so we'll be seeing like how we can perform inferencing on top of the model then I will also show you how we can create generative AI application on top of that so guys here if you see Falcon is nothing but it's a open source large language generative AI model and uh if you see here Falcon helps us to create a very Advanced application and it has actually lots of version like uh one 180 billion 40 billion and 7 billion and um 1.3 billion parameter and it is trained up with high quality like data set so that uh actually it can perform all kinds of job okay whatever you will be giving as a prompt so we'll see like how we can do it and it has actually these are the variant as I already told you 14b and even they have already given you the download guideline and all so uh to download this model actually I'll be using huging face because Hing F has already these kinds of model hosted here if you see this is the fcon 7B instruct model so this is the 7 billion parameter model so I'm going to use this model so you can uh use any other model as well let's say if you want to use uh this 14 billion model okay just uh try to search here you will get the model so in this example I will show this model okay I will use this model and I will show you the demo so for this actually I have already prepared one notebook as you can see this is The Notebook I prepared so first of all let's see like how we can perform the inference on top of this Falcon 7B model okay with the help of Lang chain so for this first of all uh make sure you have connected your uh notebook and you have selected uh GPU as a run time so I already selected so uh as of now whatever things we have learned like Lama then Google p all the steps are same only okay but only you just need to change the model there so this is the idea here so if you're using any kinds of large language model not only Lama Google pal or let's say Falcon if you're using any kinds of large language model I already showed you right like I already showed you like we have different different large language models so all the process will remain same you need to call the same method and all okay if you're using Lang chain and all and the way I imported my model here you can easily load it okay and you can refer some documentation because whenever let's say you are referring any kinds of large language model they will have their documentation you can go through the documentation you will get the idea and guys throughout this entire session actually I showed you three large language model like Lama 2 Google pom and this Falcon one and rest of the large language model you can explore all the process will remain same okay only you just need to do some exploration on top of it so guys here if you see I already connected my notebook now if you want to check the GPU whether you got GPU or not this is the command to execute then you will see the GPU then first of all I need to import some of the libraries because here I uh I'm using like hiding face model so for this actually I need to install Transformers and these are the libraries okay then I will be also using langen so I also need to install Lang Chen on top of it okay so let me install them so guys as you can see installtion is done now I will be loading the model so guys to load the model if you're using Hing face model so first of all you need to call this Hing face pipeline from langen as well as you also need to call the tokenizer okay and the pipeline objects now here is the name you need to Define so this is the name I've just copied from here and I pasted here okay this is the name and if you're using some other model you can change the name here so it will automatically download the model first of all you need to define the tokenizer tokenizer will help you to convert your text to numbers okay and it will also do the pre-processing steps before feding the data to the model then uh I will initialize in the pipeline so it's a Tex generation model that's why I have given the Tex generation it will take the model it will also take the tokenizer and these are the parameter you need to keep it as default okay now if you execute this particular code so you will able to see like it will first of all download the model so guys this is the model size around 9.95 GB so let's wait it will take some time so guys as you can see my model has downloaded now I need to load this model so I need to load this pipeline object actually so to load this pipeline object first of all I need to initialize this Hing face pipeline I I think I already imported you saw that Hest pipeline from lch uh then here I need to give my Pipeline and here one parameter I need to set called temperature so temperature I think you already know what is temperature temperature means like if you're setting it to zero that means your model would be like uh very strict and uh it won't be taking any risk uh whenever it will give give you the response but if you're setting it to one so it will uh it will take risk and it will give you some random output that's why uh you need to think about like whether you need very creative results or random results from your model or not okay if if not then try to keep this value close to zero otherwise otherwise you can keep this value close to one so here I've have given zero because I want District output from my model so let me initialize my llm okay now here first of all I need to initialize one promt template okay then I'm also initializing uh llm CH okay so let me import them then this is my template custom template I have defined so you are an intelligent chatbot help the following questions with the brilliant answer so here you will get this kinds of question you need to return return these kinds of answer okay so this is the custom uh prompt I have created now this prompt I will initialize with the help of promp template it will take the template and it will also take the input variable so in this case input variable is my question now let me initialize my template now first of all I will uh initialize my llm chain to initialize the LM chain first of all you need to give the prompt and as well as your uh llm okay then it will give you the llm Chen now this is my llm Chen so here is a question I'm giving explain what is artificial intelligence as nurser RS so uh it should give me that uh explanation okay so here I'm just writing llm chain. run and here I'm giving my question now let me execute and show you and if you see here guys my memory is getting full because I loaded this 7 billion parameter model so that is why I was telling like you can't load this uh 180 billion model because it's like very huge model for this you need good system you should have good GPU and good memory there but all the uh process would be remaining same okay only just need to change the model name there and everything will remain same so guys here is the answer I got a child may be small but with a AI can do all computers and machine learn faster and faster allowing the child to Great Heights so this is the response I got from my model and with respect to this uh nursary rims and you can ask any kinds of question like let's ask another question so I'll copy this one and here uh I can ask uh give me a code for adding two numbers so here if you see it it can also generate code so any kinds of prompt you can give any kinds of task you can uh do with this llm let's say you want to do summarization generate text generate poem generate code anything you can perform with this model okay and is like very powerful model guys even uh you'll be loving a lot after learning this one okay I think you got the idea now guys u in future I will also show you how we can fine tune this llm okay like we have learned Lama then Google pom then Falcon we can also F tune them with respect to our custom task let's say you have some complex data and this task uh your model can't perform so at that time you can also F tune them so in future I will also show you like how we can f tune them on top of our custom task okay but guys all kinds of task actually these are the model can perform so you don't need to even F tune them because fine tune is not easy so it like more costly so I'll always suggest just try to use this are the model okay these are the trained model so and you can perform your job here and you can also give the custom data like I already showed you like how to put the custom data on top of that like how to perform these kinds of operation how we can uh do the information ret operation how we can perform the summarization everything I have showed even in future I will also create some of the videos like we'll be implementing some projects and we'll see there like how we can create end to end Genera VI application with the help of these are the llm model now guys this is the inference on top of this Falcon 7B now let's uh create one projects with the help of Lang chin so here I'll be using chroma DB and we'll be creating one M multidock retrial system so basically here we'll be giving some documentation uh in the documentation we'll be doing the information retrial operation I think we already saw in our Google palom one okay there actually I was using PDF but here we'll be using the textual data so for this actually first of all I need to install these are the libraries so let me install them so I need to first of all terminate my previous instance done now let me install them so here I'm using chroma DV so you can use any kinds of vector database you can use pine con wave anything you can use and I'm also using langen so we are installing Lang chain Transformers we are also installing because we are using HF and we also need Cent trans Transformers okay so everything we need to install here so if you have already watched that Google Pam video so this uh notebook will be mostly familiar with you because I'm referring the same code only but only here I'm using Falcone model and I'm also changing the database here okay only this part I'm changing so installation is done now I'll be importing these at the libraries so I'm importing chroma DB then recursive character splitter then retrial question text loader and directory loader so first of all I need to download the data so this data is available in this URL so I'm first of all downloading this Z file then I'm performing unziping operation on top of it see if I show you the data so guys this is the stock market data so it has lots of stock uh uh detail like Nvidia stock then Tesla stock so these are the txt file data as you can see these are the stock data so on top of that we'll be performing this uh information retrieval operation with the help of this llm now first of all I need to load this data then I'll be extracting that text so this is the code for it then uh if you want to see the documents like uh the final data you got so these are the data I got now what I need to do I need to perform this text Splitter on top of it basically I want to convert my entire Corpus to chunks okay because I already told you what is Chunks and all so uh my model has like one particular input size if you see the documentation so if you're using this one Falcon 7 instruct so it has some particular U you can say input size uh input token size so you need to give that particular size so it's better to uh convert to chunks so that uh these kinds of problem you w be facing okay whenever we'll be fitting the data so let's convert to chunks so that many of chunks I got 49 now if you want to see some chunks so this is the code for it okay so see guys all codes are same as I already used in my previous experiment as well okay that's why I'm just going little bit fast because I think you got the idea like how we are performing these are the operation right now here first of all I will initialize my file instruct model the same way I'll be using I showed you in that previous notebook right yeah so it will first of all download the model from the Hang P so it will take some time let's wait so my model has downloaded now let's import my highing face Pipeline and Hing face embedding because see guys this Falcon model doesn't have any embedding model that's why I need to use highing face embedding and this is the model I'll be using for my embedding basically I need to convert my Tex chunks to Vector embedding so that's why I need this one now I'm initializing my llm and I'm also initializing my embedding model so see guys it is first of all downloading the medic model do done now I will initialize my chroma DB database uh and I already showed you like how to initialize chroma DB database in my Vector database session just go ahead and check it out so here is the DV name I'm giving and I'm also passing my text entire Corpus okay and I'm also giving my embedding embedding this is the embedding model as you can see uh so it should be embedding model so this is the name and I'm also uh giving my directory like this is my DV directory now let me I store the data in my uh chroma DV so it will convert all the text to vector embeddings and it will store inside your chroma now it has done now first of all I will load this uh so using this code actually we load this uh uh Vector emings okay so this code will load the vector Bings let me load so it should be HF HF is my embedding then here I'm initializing this retriever as my Vector DB then I'm creating one uh qn R qn and here I'm giving my llm now this is the process function I have just written so whatever response I will get from my llm so it will process the output and it will give me that one now let me initialize the qn uh now if you give any kind of query and execute this code you will able to see the response okay as you can see you will able to see the response I think I already showed you like how to to do it okay so that's how we can use this Falcon 7B um model okay with our custom task as well like we can create this kinds of generative application now guys I want to give one particular uh task to everyone uh basically see you have learned lots of concept right now in the field of Genera VI like how to use these kinds of Open Source llm model now I have already shown you like three very powerful open source large language model now one thing actually you can explore from your side there is another large language model called mral 7B so this is another very good model and this is the website of Mr 7B and this model is also available inside hugging face so Mr 7B huging face so this is the model guys Mr 7B uh version 0 01 so this model you can U load inside your fre Google collab there is no issue with that so you can follow the same technique to load the model and you can perform these kinds of job here and also try to share this notebook in the comment section I will happy to see that like whatever you have done from your site so it would be pretty much good learning for you right so yes guys this is all about our open source large language model we have seen like how we can use them and how we can create generative application on top of it now uh in the next video what I will show you I will uh create one end to endend uh Genera VI projects okay with the help of this Lang chain then Vector database and these kinds of llm I'll will be also using a streamlit package to create the web app and all so guys this is going to be very much interesting project just try to uh Butch that particular video then everything would be cleared like as of now we have done the projects in the Google collab but uh now we'll be converting that Google collab to like uh end to end projects we'll be creating app and all I think you have heard of rag inside genbi right because this is the most used uh actually topic inside gen VI so the full form of rag is like retrial augmented generation so in this video we'll try to understand what is rag exactly and how rag works and why rag is so important okay let's say whenever we'll be working with genbi whenever we'll be implementing any kinds of let's say application so why we have to follow this rag concept there fine so guys I think you already know inside generative we use something called large language model that means llms so LMS actually have some limitation you can see the first limitation it is having so the first limitation you can see llm can't answer correctly to the private data let's if we having any kinds of private data so that large language model won't be able to give you the answer related that so if I give you one example let's say we are having one personal website let's say I have one website called code Commander okay so code Commander is my website now if you open up your chat GPT and if you ask related code Commander your chat GPT won't be able to give the answer because chat GPT trained with older data that means I think CH jbt trained around 2021 to 2022 data okay around uh this year actually they trained this model after that actually I created this channel okay so this data is not available inside my chat GPT chat GPT knowledge base that means that time actually this data was not available in the internet okay so you can consider it's a private data or you can consider any kinds of private data your private uh let's say website data private let's say your company data anything so if you ask any question related to the private data your model won't be giving you any kind of respon to that right then you can see the second limitation llm can't provide the most current information let's say if you're asking uh any question which is like more current okay more current let's say information your model won't be giving you the answer let's say if you ask the question related this Olympic okay the current Olympic it won't be able to give the answer because it hasn't trained with the current information okay so these are the actually limitation we are having with the llms but I want to create an application that application will be also able to give the answer related to the private data as well as the current information so how it can be performed okay we can do it with the help of rag concept that means retrial augmented generation now let's see how rag works so guys here you can see rag allows LMS to use external sources for the better response that means let's see if we having any private data let's say any external documents so what you can do you can give that documents to the large language model how for this you just need to use one embedding model you just need to use one embedding model with the help of this embedding model you'll just try to generate the vector embedding of the data the data actually will be giving and this Vector embedding you will be storing to the knowledge base that means to the vector database okay I think we have already learned this thing previously previously we already implemented these kinds of application but I think you didn't know okay this is a rag application I just given some high level overview like uh how we can let's say use our external documents I think we already created some of the project right so yes this this is called actually rag that means we using our external documents we are creating our knowledge base and to the knowledge base actually we are inting our large language model okay now whenever user is asking any kinds of question okay whenever user is asking any kind of question to the private data what it will do it will go to the knowledge base okay it will go to the knowledge base knowledge base will give the response okay the question you are asking the relevant question you are asking and your llm will process that answer as well as the query and it will give you the correct response okay so this is the complete architecture of rag that means Ral augmented generation okay so with the help of this concept actually we can easily use our private data sources or let's say external documents to get the information okay I hope it is clear that means if you're using rag concept it would be more accurate answer on the private data stay updated with the new information let's see if you're having new new information new data what you can do again you can uh give that data to the knowledge base that means you can uh use embedding model you can convert uh those data to the embedding representation you can store to the knowledge base and you can connect your large language model there and if you're asking any question related that information it will give you the answer okay your model will give you the answer so this is the concept of retrial augmented generation or rag so guys now let's try to see how rag works so as I already told you uh whenever you are using rag that means you are connecting your external data that means your private data let's say you have connected your private data let's say you have connected your website okay you have connected your website that means from the website itself it will extract all the information let's say we are running one e-commerce site so user has has asked one question what are your business hours okay now how it will give the response uh by using your information so first of all what it will do it will try to use something called retriever so with the help of retriever it will try to fetch all the information from your website okay all the information it will fetch from the website itself then it will perform something called augmentation so what augmentation will do it will just try to augment the query that means whatever question user has asked okay and the data actually you are getting after retriever so it would be actually augmented that means it will uh add them together okay let's say the query as well as the data then it will pass to the generation that means to the large language model large language model will try to understand the entire data as well as the quid user has asked okay and based on that actually it will provide the answer so the answer is Monday to Friday from 9:30 a.m. to 6:30 p.m. okay so that's how actually rag works that means it will use actually three component one is like retrieval other is like augmentation and this like generation okay that is why it is called retrial augmented generation okay I hope it is clear now so guys this was the introduction of the rag and I think you got it how rag works and all and why rag is important now let's try to see one practical example of rag so guys here you can see I already prepared one code example uh of the rag demo so first of all we'll try to understand this uh Jupiter notebook file then I will also show you how we can create a user application that means app let's say streamlit app how we can create it okay so for this what you have to do guys first of all you have to install these are the requirements and this code would be shared guys in the resources section from there you can download and I already told you how to create virtual environment so to create the virtual environment you have to execute this command so cond create hpen in you have to give the name let's say here I have given open demo you can give any kinds of name let's say I will give test then python is equal to 3.10 okay 3.10 then hypen y so this is the command you have to execute and make sure you using python 3.10 okay so for me I already created I'm not going to create again then after that you have to activate it that means cond activate your environment name okay then you have install this requirements just WR pep install okay henr requirement. txt fine now if I see press enter it will install all the requirements I'm having in the requirements file you can see inside requirements file I'm installing langen langen Community langen openi python. stream lead okay so these are the actually dependency packets you have to install one by one so for me I already installed each and everything you can see then after that just open this notebook rag demo notebook and try to select the environment so let's say I have created this environment open demo I'll select it now see now if I execute the first line see it is working fine there is no error okay that means it is working fine so guys in this experiment I'm going to use uh one website okay that means uh as a private data as a let's say external data we'll be using website so from the website itself we'll be collecting the data on top of that actually uh we'll be implementing this rag application so you can see this is the website URL now let me open this URL so this is the URL of the website so this is the entire website guys you can see so they have given different different information so now I just collected some of the more page let me show you so this is another page this is the index page and this is the contact page okay now let me open them see this is the index page this is the contact page so you can see guys this is the index one and this is the contact one okay so that's how actually you can use any kinds of website I'm using this website for you you can use your let's say uh personal website you can use your let's say private website your official website anything you can use even I will Al show you how we can use any other format let's say how we can use PDF documents okay these are the things I'll also tell you so this is the website data actually I'll be using now to load this website I'll be using something called unistructure URL loader and this is available inside langen okay you can see I'm importing this un unstructured URL loader now this is the URL list so if you're having multiple URL you can create a list and this list you can pass to this uh function and this function will give you one loader object now you can call load loaded. load and it will extract the data let me show you so if I execute this line now see it is extracting all the information from the website itself so extraction is done now if I show you the data now you can see it has extracted all the information now why three documents is coming because here I was using three URL okay three different uh actually pays okay that's why it is coming three documents okay now what I have to do guys I think you remember we have to perform something called chunking operation so for this we can use recursive character text splitter either we can use character text splitter either you can also use token text splitter okay so here I'm using recursive character text splitter so here Chun SI is equal to I have given 1,000 that means 1,000's word would be considered as my one chunks so let me create the chunks and let me show you the uh chunks size okay you can see 11 chunks it has created okay now if you want to see the first one so you can see this is the first chance and this is the URL it is referring now I think you remember after extracting your data that means documents you have to use one embedding model and you have to generate Vector embedding and that Vector embedding will be stored into the vector database okay any kinds of vector database you can use so I have already showed you like multiple Vector database like we can use chroma DB Pine con web okay F you can use any of the vector database so here I'm going to use something called chroma Vector database okay chroma is a so chroma is a local Vector database fine so guys you can see I'm importing chroma from the Lang chain itself because inside Lang chain this chroma DB is available then I'm importing one embedding model so here I'm using open embedding model okay open embedding model you can also use any open source embedding model I'll also tell you okay how we can do it then I'm importing openi that means I'm going to use open large language model so let me import all of the package and now if I want to use openi what I have to do I have to set my environment okay environment variable so open API key you have to pass your API key so just try to create one API key and try to pass here then let's load this API key with help of ladb package then after that I'm going to initialize my chroma DB Vector database okay so you can see I'm going to pass my documents here the documents I'm getting even I'm also passing my embedding model so it will give me the vector restore interre Vector restore that means this is going to be my knowledge base okay see this is my knowledge base right now now here you can perform something called centic SCE operation okay similarity SCE operation so let me show you one example so Vector store as retriever I want to perform similarity sarce operation sarce keywords that means how many let's say result it will return so here I've given three that means after searching it will give me three relevant answer okay let me show you so let me create the retri object now here I'm asking one question what kinds of service they provide okay this website let's say I'm asking one question now if I perform the invok operation see it will give you three results okay three results actually it will give you so let me show you see it has given you three relevant information and from where it is referring it has also given the URL and you can see the three relevant information but what I need I need the actual response okay this question I have asked what what kinds of service they provide I need the actual response I don't need this kinds of response okay for this what I have to do I have to connect my large language model I think remember so here I have to connect my large language model okay then user will ask the query so it will process the query as well as the relevant let's say answer will be getting from the vector database then your LM will give the XEL response okay so now let's try to see how we can perform it now if you want to see the pce content okay the let's say result you are G getting if you want to see the contents what you can do you can call this one pce content okay I want to see the first let's say answer pH content so this is the entire Bas content you can see fine now here I'm initializing my large language model I think you know what is temperature parameter what is Max token parameter now here you can see I have created one chain okay create retable chain so this will give me the chain object that means I can connect my large language model as well as the vector database okay then I'm also going to pass one prompt okay system prompt and for this I'm going to use uh prom template okay I think remember we we can also create the promp template so this is the prompt I have created guys you can see you are an assistant for the question answering task uh use the following piece of uh uh retri constuct to answer the question if you don't know uh the answer say uh that you don't know use three sentence maximum to keep the answer concise you can also change the prompt it's up to you but I will use this prompt okay it will take the context and it will give you the answer now for this I'm going to create a promp template first of all so here I've created The Prompt template this is going to be my system prompt and user will give the input okay whatever input actually user will ask let's say this is the input user will ask okay this input actually it will come here okay and it will create the complete prompt that time now let me initialize the prompt now here I'm going to create the chain so I'm using Create stop document chain so this is the function actually I'm using because I already told you inide Lang chain actually we are having different different chains right now here I'm passing my LM as well as the prompt then again what you have to do you have to call another function create retable CH okay so inside that you have to give your vector database okay the vector database you have created that means your knowledge base and you have to give the this object your question answer CH okay this object actually you have to give now it will give you the entire rag genen now here you can ask any kinds of questions so here I'm calling this ragen invok and this is the input what kinds of service they provide and I'm only extracting the answer now see if I show you the answer right now see this should be the concise answer answer that means the accurate answer actually it will try to provide now see Victoria on move provides uh efficient and careful relocation services for the apartment Village householders okay see blah blah blah that means it is giving me the correct information right now okay so this is called actually rag system now it is referring my private data my external data on top of that actually it is giving me the answer and if you ask this question to the chat GPT CH GPT won't be able to give the answer because CH GPT hasn't trained with this data okay I think getting my point now let's try to see how we can create a user app okay so what I've done I've created another file called app.py and whatever code I have written okay s by sell I just copy pasted and I just created like that in this particular dot file you can see I've imported all the library I'm loading my let's say secret uh keys that means open API Keys then I'm giving the URL I'm extracting the data I'm creating that that means chunks okay then I'm creating the vector store I'm initializing my large language model then I'm using stream L you can see St then I'm initializing my prompt so you can see this is the prompt and now if user is asking any quy this quy actually I'm passing here and it is giving me the response that response actually I'm showing on the stream L application okay now let me execute and let me show you how this app will look like so for this you can execute one command called stream lead run app.py okay now see if I execute the command so it will open up my application now see this is the title I think you saw that st. title we have written uh here um see rag demo and this title will show in the search bar you can see this the search bar because here I'm taking chat input now so you can see this the chat mode here it will show the message now you can change the message as per your requirement now let me ask one query so I'll ask the same query so I'll copy this quy and here I can ask you can go to the website and you can U ask any kinds of query it's up to you so guys as you can see it has given me the response victorion move provides range of services including apartment moving Villa moving okay and so on that means it is working fine right now you can ask any kinds of question guys any kinds of question you can ask uh whatever actually information you are having in this website fine so yes guys this is the rag demo and that's how we can create a rag going forward we'll be also learning some Advanced rag we be let's say creating hybrid drag and all okay going forward we'll be learning these are some Advanced rag application you can also create so in the next video what we'll do we'll just try to create another rag application okay with the help of Google jini pro model okay this is the open source model we'll be using with the help of that we can also create a rag application in this video we'll try to understand what is the difference between rag versus fine tuning because many people has this question when we have to perform the rag when we have to perform the fine tuning operation and what is the difference between them so see both technique actually we used to extend the abilities of the large language model okay see when you have to use the fine tune approach when you have to use the rag approach let's say you are working in a very specific specific domain with some specific data okay and with some specific task that time actually you can use something called fine tune approach because whatever pre large language model you will be using it won be having like these are the information let's say you are working in the field of medical okay medical domain and they actually you are creating one bot okay you are creating one medical let's say information bot so this will give you let's say medical related information and here you are using very specific data okay so this data actually was not used during trading of this large language model so that time what you can do at the very first time you can do the fine tune operation that means you can fine tune one pree model and you can create this uh application so let's say this is the application we created now user has given one question what are the latest treatment for the type two diabetics so whenever you train this model so you provided actually these are the information so the latest treatment for the type two diabetes include meditation like like M forming then Lifestyle Changes such as diet exercise and in some cases actually insulin therapy so these the information actually you have given ring fine tune these are the model now let's say there is a new treatment came now if you are asking the same question again to your let's say uh system it will give you the same answer again and again because it is already trained with your older data yes or no so that new information actually it doesn't have so it won't be able to give the new new actually let's say technique for the let's say treatment of diabetics 2 now in case what you can do you can use this new information and you can create a rag based application so what you have to do you have to to use the same llm model only same llm model only but you will be creating one additional knowledge base I think I showed you how to create the rag so with the help of this data you'll be creating one additional knowledge base and with that knowledge base you'll be connecting your medical bot then your medical bot will be able to give the response okay from the latest let say technique from the latest information yes or no okay now I think you got it when we have to use the rag technique when we have to use the find uning technique now see here we are using rag technique now if you're asking the same question now here you will see that it will give you the recent treatment okay for the type two diabetics okay the recent treatment whatever actually it came in the market okay now I think this is clear when we have to use the fine tuning technique when we have to use the rag Bas technique and again fine tuning is like more costly so for this you have you need huge amount of data you need a good computational machine that means you you should have GPU good configuration GPU good configuration Ram okay if you're not having these kinds of gpus so you can't do the fine tuning operation that means uh in fine tuning you are retraining that model you are updating the weights right which is not involved inside rag so inside rag actually we are not training any kind of model instead of that we are creating an additional knowledge base and with the knowledge base actually we are connecting our large language model okay this is the difference only fine now I think guys you got the clearcut idea what is the difference between rag versus fine tuning and when we have to use it so even I will also show you how we can perform the fine tuning operation okay let's say if I want to create any specific task how we can perform the F tuning operation not of our custom data so guys as of now we have seen the rag demo like uh I already showed you what is Rag and what is the use of rag and why we have to use the rag okay even I also showed you what is the difference between Rag and fine tuning so in this video we'll be implementing one rag based project so the project name is QA system okay we'll be using here jini pro model and langen so if you don't know jini is a large language model by developed by Google okay so we'll be using this model and this model is actually free so we can use actually Google uh API to use this model okay I'll tell you how we can collect the API key and with help of that how we can use this large language model now see this is the entire diagram of our project that means here we'll be creating this rag application so we are having some external documents so in this case actually I'm going to use PDF documents I'm having some PDF documents okay we'll be using this data so we'll be first of all extracting the documents then after that we will be part the chunking operation then we'll be building one santic index okay that means we'll be creating one knowledge base that means whatever let's say data we'll be getting we'll be trying to uh using embedding model to generate the vector embedding then we'll be storing this Vector embedding to the vector database then user will ask some query this query will go to the knowledge Bas knowledge base will return some of the relevant answer and with the help of large language model we'll just try to process the answer as well as the question and it will give give you the correct answer okay so this is what actually we'll be implementing here so let me show you how we can develop this particular application so I already prepared one example so let's open up so guys as you can see this is the demo uh so for this what you have to do again you have to create one virtual environment I already showed you how to create the virtual environment for this you can use this command cond create typen in give the environment name then specify the python version let's say 3.10 then hypen y okay this is the command to create the virtual environment after that just try to activate with help of cond activate command then install the requirement so keep install henr requirement. [Music] txt so for me it is already installed see that's why it is telling requirement is already satisfied so let me show you the requirements so these are the requirement you have to install guys so same requirements only as part your previous project the only thing I have added this langin Google J jni so the help of this package actually we'll be accessing the J model okay so here Vector database wise I'm going to use chroma DB again you can also use f fine cone okay weit any kinds of vector DV you can use here so let me open this first of all notebook and let me explain okay uh what are the things we'll be doing here so guys you can see I'm having one PDF document let me show you this PDF so this is the PDF guys so this is my resarch paper actually so I published this resarch paper so you can see I'm the author here so I'm the author here and the research paper is about development of multiple combined regression method for reain uh rainfall measurement okay you can read the paper like what are the things actually we have proposed here so we'll be asking some question okay from this paper itself that means this is my private data this is my external data on top of this data actually I'll be performing the chat operation so here I'll be asking some questions related uh this particular data okay now let's let me show you how we can do it for this first of all we have to load the PDF for this we can use I PDF loader from the langen now let me load the data so it will you have to give the path of your let's say data so here is my path my pdf.pdf now see it will give you enter extracted documents that means you can see it is having around 15 pages okay 15 pages in the research paper if you open it up then what you have to do you have to perform the chunking guys I think you know what is chunking so your Chun size is equal to have given 1,000 that means 1,000 what would be considered as my one chunks now see if I execute here I will get around 44 chunks okay now if I want to show you so this is my first document chunks now I have to get the Google API key so for this you can open this link so this is available inside uh Google AI studio so just click here Google AI studio now from here you have to collect one API key now see uh it will give you this kinds of interface now you can create API key for me I already created I won't be creating again but for you you can create here see just select the project if you don't have project just try to create a projects and try to create the API Keys now see if I click here create API key in existing project it will create the API key okay now after creating the API key you will get these kinds of API key okay this is your Google API key now just try to give the key Google API key is equal to past your key here make sure you are writing like that otherwise it w be working fine now let me save now if I open up my notebook now guys what I have to do I think remember we have to use one embedding model OKAY embedding model just to convert my data to the vector embedding now for this we'll be using one open source embedding model from the Google so you can see this is the embedding model embedding 001 and this is available inside this Google generate VI embedding okay nowart from that you are having so many embedding model let me show you let me open this link so you can see you are having a ai2 AI Labs then LF Alpha okay so these are the actually provider so it is also having different different embedding model you can use them as well so let me load this embedding for this I'm going to uh import this Library I'm going to load the API key then after that I'm loading this embedding model you can see then after loading the embedding I'm just doing one test operation I'm just writing hello world so it should give me the Vector representation let me show you so this hello word is represented with this vector and I'm only printing five actually Vector you can also print the complete Vector okay now let me create the knowledge base for this I'm going to use chroma I already told you inside that I'm going to pass my documents as well as the embedding model you can see embedding model now it will give me the knowledge base then again I can perform similarity Source operation that mean stic Source operation for this you can execute this line of code so it will give me actually 10 relevant answer and this is the question I'm asking what is the new in development of multiple combined regression methods in rainall measurement paper this is my question now see if I execute it will give me 10 different response now if I want to show you so 10 different relevant response actually it will give me now if you want to see the pce content you can also see that see this is the pce content okay now I will be integrating my large language model so for this let's initialize my jini model you can see so here you can see I'm initializing my jini model for this I'm using chat Google genbi inside that you have to give the model name jini 1.5 Pro this is the model so J having different different model you can search J Min model list you will get different different model list so from there actually I'm using 1.5 pro model and temperature max token parameter I think you already know okay I already explained this part now again I have to create the chain I think you remember the same chain actually we are creating the same we have created our previous project as well after that we are preparing the prompt okay this is the same prompt I'm using this is my prompt template right now so let me execute then here I'm creating the complete chain I'm giving my llm object as well as the promp and this one I'm passing to my create Ral CH okay you can see I'm giving my Vector database as well as my this object now this will give me the complete CH now here I'm asking the question again the same question what is the new development of multiple combined regression methods for the rfor measurement paper now see if I ask the question it should give me the answer from the paper so guys here you can see I got the response the paper of development multiple combined regression methods for rfor measurement introduce a Noel approach to predicting rainall uh quantity the author utiliz 10 supervised regation machine learning models to predict the rful based on the historical data historical weather data their goal is to identify the most accurate regression techniques for the rful uh prediction see uh it is giving me the correct response now if you see the paper now if you read the paper you will see that we have proposed the same thing here that means it is working fine okay that's how also you can use different different data sources uh that means if you're having any private data okay if you're having any custom data you can create the rag based application like that so guys uh this was The Notebook experiment now let me show you how we can create a uh user app so for this I'm going to again use streamlit and whatever code I have written here I just copy pasted inside this app dop you can see all the import operation I'm loading then uh my secret key that means my uh Google API key okay here I'm loading it then I'm loading my documents performing the chunking operation creating the vector store initializing the large language model this is my prompt and this is the uh chat input I'm taking that means I'm creating one chat input box with the help of stream lit so this is my prompt then after that if uh user has given any query so it will uh do the generation and it will show the it will show the on top of my stream L application now let me show you how it will works so for this you can run this command stream lit run f.p so guys you can see this is the title rag application using J Pro you can also change it here okay anything you can give here now here I got the input box now I can ask any question let's say I will ask the same question you can ask any question from my paper just go through the paper and ask any kinds of question so here we're using J model uh through the API request and it is like free API okay you don't need to pay for anything now see guys this is the answer I got now if you see the answer it's pretty good okay that means the correct information it has given me so yes guys this is the project actually the Q project we have developed with the help of J Pro length chain and Vector database uh so far we have learned about like rag Ral augmented generation and there I showed you what is the use of rag and how we can create a rag okay even I already uh I think discussed what is the difference between rag versus fine tuning that means if you want to work in a domain which is like completely new domain and you are working with very specific task that time what you can do instead of implementing the rag you can f tune one LM okay and to find tune the LM what you have to do guys you have to use one Preen model on top of prean model you have to train your custom data so let me open up my Blackboard and let me discuss there what is fine tuning exactly so guys inside fine tuning uh you will be using one pre-tin model OKAY pre-rain large language model okay I think I already showed you there are so many large language models are available as open source for this you can go to the hugging pH so here you can see there are thousands of large language models are available now you can choose any kinds of model as for your requirement let's say you want to use something called llama meta llama you can simply search Llama here so you'll get see all the Llama model OKAY llama 2 llama 3 all kinds of model actually will see that see okay and this is from meta AI now what you can do you can download this model on top of that you can fine tune your custom data but before fine tuning uh what you can do see first of all let's say whatever let's say project you want to implement let's see you want to implement one chat board let's say you want to implement one medical chat board okay medical chat board first of all use one pre-end large language model and try to perform the inference operation okay try to perform the inference operation inference on top of the model if this model is able to give the correct answer okay if it is able to give the correct answer try to select this model okay otherwise what you can do just try to build one rag rable augmented generation okay that means create a external knowledge base exter null knowledge base then try to connect your one pre-end large language model and try to again perform the inference operation okay and try to see the accuracy of the metal try to see like whether your model is giving able to give the correct response or not if it is giving try to select this model okay otherwise if this boat approach is not working that time what you can do you can perform the fine tuning operation okay fine tuning operation so there what you can do you can take one pre-end large language model from hugging pH from any kinds of let's say platform and on top of that you can train your custom data the data set you are using let's say you are using one very specific medical okay medical data that time you can use this data and you can train one custom model on to of it okay this is called actually fine tuning and that should be my suggestion guys I mean directly don't do the fine tuning before that try to check whether pre0 model is working or not if Preen is not working try to build the rag B system if it is not working then try to do the fine tuning okay because fine tuning is a more costly task at the end because here you need like huge amount of data even you need lots of computational power you need you need actually higher configuration machine okay you should have good GPU instance in your system otherwise you can't do the fine tuning operation but if you want to do the fine tuning operation there is some way actually we can do it because all kinds of large language model you can see all kinds of large language model you can see it is having actually huge parameter size you can see Lama 2 7B that means it is having 7 billion parameter it is having 8 billion parameter that's how it is having 70 billion parameter just try to consider okay it's a huge huge size model so we can't use any kinds of low configuration machine here to fine tune these are the model so for this what we can do we can use something called PF Technique we can use something called p e f t okay what is the full form of PFT parameter efficient fine tuning okay this is the full form of PFT so inside this PFT we are having some method we can use uh so the first one you can use something called l or you can use something called Q okay so this L and Q Lo will help you to do to perform this parameter efficient F tuning that means uh it apply something called quantization technique quantization technique okay that means it will load your model in a lower memory instance that means it will load your model in a 4bit Precision 8bit Precision okay that's how actually it will perform the parameter efficient fine tuning process now you can ask me what is quantization then okay let me show you what is quantization see quantization is nothing but quantization it just a way of converting from higher format uh sorry higher memory format to a lower memory format so this is called actually quantization now I think you already know about neural network right let's say this is one neural network I'm having so inside neural network what what we have we have lots of Weights yes or no right we have W 1 W2 okay and W3 and so on so this is this is what actually we are having that means we are having lots of weight weight and biases let's say B1 B2 and so on right now you can represent these at the weight as a matrix because if you if you know about artificial neural network so there I think you know how we can represent these are the weights okay how we can represent our input data and all okay let's say this is one 3 cross 3 Matrix I'm having and inside that we're having having lots of Weights let's say W1 W2 W3 and so on okay this is the weights and this weight is nothing but it's a floating number okay it's a floating number it's a floating value if you see any kinds of weight it would be like that let's say 7.23 like that okay so this is called actually floating value these are the floating value and if you see this floating value stores in a FP 302 bit okay ap32 bits now what is the full form of AP AP means full Precision okay full prec okay full Precision you can also call it as single Precision okay single Precision got it so whenever we are doing the quantization that means what we are doing we are just trying to convert this higher memory representation to lower memory representation that means it is now saving these are the weights in the FP 32 bits now what we'll be doing after doing the ization we'll be converting this 32 bits to let's say 8 Bits okay 8 Bits or let's say four bits four bits that means what will happen let's say you are having one floating number like that let's say 1.70 8 9 0 now if you want to convert it to 8 Bits what you will be doing you will just remove these are the numbers actually these are the numbers actually will remove and you will take this this number only so that's how actually you can reduce the memory size that means you can convert any kinds of higher higher memory higher memory actually format to lower memory format so this is called actually quantization okay I hope you it is cleared and the technique actually we usually use let's say Loa and Q Loa okay Q Lo so this techniques help us to perform this quantization that means it will it will load the original model as a quantized model that means in a lower pre okay let's say I want to load this model in a 4bit Precision 4bit Precision okay so let's say previously this model was in 32 bit Precision but I want to load in 4bit Precision so how it will happen with the help of Q Lo or L you can do it sorry with the help of L and Q L you can perform it we are having already some python libraries okay so we are having one Library called PFT okay this called parameter efficient find training so with the help of that you can perform Lura and QA technique so with the help of that you can load any kinds of actual model so these are the model okay in a 4bit Precision in 8 bit Precision okay that means you can load as a quantized model so that you can perform the fine tuning operation because as I already told you this actual model you can't load because it is having huge amount of size huge amount of let's say weight size okay and it is uh storing those are the weights in a 32-bit precision and to load this at the model we need a good configuration machine good configuration GPU memory and so on but we don't have that much of resources we are having let's say Google collab free Google collab or let's say you are having 30 60 GPU that time what you can do that time you have to load these are the model with the help of this these are the technique actually the technique actually I showed you uh this one quantization that means you will be using L and Q Lo with the help of that you will be loading the model and we'll perform the finding operation now you can ask me sir if I'm doing that one so definitely I will lose some information definitely will lose some information because you are loading the model in a 8bit and 4bit precision from the 32bits that means here you are getting rid of some of the numbers so definitely you are losing some information but again L and K takes care this part actually so they try to optimize your let's say model weights as much uh they can okay so you don't have to worry about if you're using these at the library everything would be happen in a optimized way so we'll be learning as a practical also how we can find un one large language model so in the next video we'll be learning how we can find tune one model called Lama to metal Lama 2 okay we'll be fine tuning this model on top of our custom data and here we'll be using this PFT technique parameter efficient fine tuning technique got it because uh I'll be using free collab here if you want to do any your local machine if you are having let's say any basic zpu you can also do it but I'll try to suggest try to train on google collab if if you're not having any kinds of GPU okay and not having any kinds of conf good configuration machine you can perform on Google collab fine so yes guys this is uh the introduction of fine tuning and I think you got to know how we can perform from the fine tuning operation and what is this PFT okay PFT technique exactly and what is L and K because I know that many people will have this question what is Kora laa and what is PFT and all okay so I think now everything is clear okay how things are working here fine so in the next video we'll see the Practical demo of the fine tuning so we'll be fine tuning one model large language model called metal L 2 so here we'll be fine tuning one large language model called meta Lama 2 I think you know Lama 2 right Lama 2 is a large language model so if you go to the hugging face and if you search for meta if you search for Meta Meta is having different different large language model if I show you let's say if I go to the meta LMC it is having different different large language model like meta Lama 3.1 llama 2 is also there if I expand all all the things see this is the Lama 3 family this is the Lama 2 family so the way actually I'm doing the let's say fine tuning of llama 2 family you can also perform llama 3 as well why I'm taking Lama 2 because it would be a little bit uh I mean small size model that's why I'm taking Lama 2 you can also take Lama 3 as well okay the process will remain same and how to get the permission from the Lama I think I already showed you in my open source large language model session so you have to apply for the permission first of all and they will give the permission then after that you can load it and if you're not getting the permission as of now what you can do I can also show you one alternative approach you can also follow this one fine I think I already showed you one alternative approach like you can use any other repository to load the model it is also fine then what you can do after fine tuning this model you can also push this model to the hugging is Hub let's say if I show you my Hub now so if I go to my profile see I already published one model this fine tune Lama model after fine tuning it I publish this model in my um hugging face Hub now people can use my model so they will be just copying this name and they can use my model you can see it is already downloaded uh 65 times okay 65 times this model got downloaded by the audience right so that's how actually you can also publish your model if you want you can also publish your model to the hugging P sub got it so that people can also use your model got it so now let me show you how we can perform the fine tuning for this I have prepared one beautiful notebook so in this notebook actually I have written each and every step you want to follow so first of all make sure you selected runtime as GPU because you are doing the finding operation and definitely you need a GPU so I'll be selecting T4 GPU because here I'm using free Google collab you can also take the premium subscription of the Google collab if you're taking the premium one so you'll see that your training would be a little bit faster than this free one fine now let me connect this notebook so guys as you can see my notebook is connected now the first thing what you have to do you have to install some of the required package so here I have listed down all the package actually you need like let's say accelerate then PFT PFT is the parameter efficient F tuning that package accelerate you need if you're using Transformer Library uh and if you want to let's say use the GPU that time actually you need to install this accelerate as well fine then you can see bits and bytes is also requirement of the Transformer and if you want to set up everything in your local machine that means if you're having local GPU but if you don't know how to set up the GPU don't need to worry I have created one dedicated video Let Me Show for you so if you search my YouTube channel DS with buy so here you will see that I have created one video in the video section set up Nvidia GPU for the Deep learning so here I showed you how you can install the Cuda and Cuda toolkit so definitely first of all you have to set up your GPU in a proper way then you'll be able to set up everything that mean you will be able to utilize your GPU so make sure if you're doing local setup you can try to watch this video okay otherwise if you're doing on Google cab try to do the same thing the way actually I'm doing here so let me install all the packet so guys as you can see installation is completed now the second thing you have to import all the necessary Library so you can see I have imported all the necessary Library like Auto model for casual LM Auto tokenizer okay I think you already know these are the thing uh the hugging face actually Library okay why we need it then you can see I'm importing something called PFT that means parameter efficient fine tuning so from PFT I'm importing something called L you can also use Q Lo but here I'm using L okay so both Technique we can use it's up to you so let me import as of now so whenever I will be using it I'll tell you okay what are the package actually uh you are using and for which task so see guys execution is completed that means everything is working fine now let me show you the data set first of all see this is the original data so let me open the data see this is the original data so the data set name is open assistant so the data set name is open Assistant goano I think this is the data set name and you can see this is the data that means it is having some conversation between human and assistant you can see so conversation between human and assistant you can see human and assistant so this is the human uh let's say conversation and this is the assistant conversation okay so that's why actually they have collected this data and it is having actually you can see uh how many example in the training you are having 9. 85 K rows F almost 10K example you are having now see it is also using different different language see different different language actually they have collected the data not only English it is also uh they're using see Chinese language also they're using different different language that means it is a multilanguage data and it is a conversation data so we'll be training one uh chat model that means llama to chat model okay I think I already showed you what is the difference between Lama to chat model and find un model let's say if you want to only perform the T generation that time you can use pretin model okay and if you want to perform let's say chat operation chat operation and let's say all kinds of task the way actually perform with the chat GPT that time you can use chat model now if you open the hugging face and if you go to the actually llama llama model you'll see that it is having different different model let me show you so if I search for llama see if I go to the uh llama 2 Series actually Lama 2 family you can see it is having Lama 2 7B model HF model and it is also having something called chat model you can see uh See chat model chat model means you can perform the conversation chat operation the way actually perform with the chat jpt right so we'll be fine tuning one chat model so that is why I'm using this chat data set conversation data set okay instruction so these are the instruction um I think this one see this is the instruction human is giving assistant is replying so this kinds of data set actually we'll be using now you can use any kinds of data you just try to prepare your data okay in that format you can also create a CSV file so inside CSV file uh in First Column you can write the human let's say conversation in second column you can write the assistant conversation that's how also you can collect the data okay it can be any kinds of format so as of now we are using the data from the hugging F you can also use your custom data and how to upload your custom data to the hug f for this you can see hugging F documentation they will also give you the let's say entire process like how I can let's say publish my data to the hugging face up and from there I can load my data it is also possible but most of the data actually will see from the hugging face itself you can use it from there so see this is the Lama to uh supported data that means whenever you will perform the fine uning now so you have to convert this data in that format see this is the format so first of all you have to give the uh s token you can see s token inside that you have to give the inst instruction and what is the instruction instruction is nothing but it's a human conversation whatever conversation human is doing now this is called instruction see if I open this example see this is the human see this is the human conversation okay see till this token actually that means slash NST that means instruction this is the human conversation after that whatever text you can see this is the assistant conversation okay this is the assistant conversation got it so that's actually you have to prep your data and at the last your s token will end again okay that means this is the complete system token right now the complete prompt that means you are creating the prompt here because my large language model supports prompting right so that that means we are creating the prompt here so that my model can understand whenever we are doing the inference whenever we are let's say sending any kinds of prompt to the large language model it can automatically understand we sending the prompt okay so that's why I'm first of teaching my model this is instruction and after instruction whatever actually message you can see this is the is the your output that means your response assistant response okay this is the format now if you open any kinds of data you'll see that it is using the same format only okay same format only so we have to convert our data this format to this format okay now you can ask me how to convert this format to this format for this we can use one notebook see this is The Notebook guys even I already attached this notebook link inside uh This original notebook let me show you see this is The Notebook okay so in this notebook actually I already WR one function transform conversion so this one actually will take the human conversation as well as the assistant conversation and will add the other token okay like that the way actually I showed you here okay I think it is clear now you can use this function as it is and you can convert any kinds of let's say these kinds of conversation data to um uh your uh like llm format that means your Lama to format now there are so many large language model it takes actually different different kinds of format if you go to the documentation of the hugging face you will see that what kinds of format they supports based on that actually you can U actually write the converter also you can get this converter from the hugging face itself hugging face also provide these kinds of converter you can use this converter to convert your data to a specific format okay so most of the large language model will follow this format only okay you'll see that most of the large language model will follow the same format the format actually I'm using here fine so that's why you can use this converter as it is now see here I'm loading the data that means my entire data that means this data this uh open Assistant data you can see I'm giving the name of the open Assistant then see instead of taking all the data all the let's say 10K example I'm only taking 1,000 okay 1K actually example because here I'm using free collab and finding will take time that's why I'm only taking 1,000 example to perform the finding operation and I'm doing the let's say conversion operation then after that I'm just pushing this uh let's a data here so so this is the data now see the same data but here actually this guy is taking actually 1K example and he has already converted this data to the required format okay okay so this is uh so this data is already available you can see this guy has already converted this data to this format so directly you can use this data but if you want to do it so this is The Notebook you can use okay the same notebook you can use got it and if you want to use the entire data guys what you can do so here I already given the complete reform data set link you can open it up so see it is having actually 10K example only see around 9.85 K rows now see it is already uh formated okay it is already formated you can also use this data if you using good configuration PC you can use this data okay for the fing operation but I'm going to use this data actually 1K example data okay only 1K example I'll be taking here so guys I think now you got to know how how we can reformat our data for the Llama 2 model and see here we are using free collab and free collab actually offers 15gb of graphics card if you see here it will give you 15 GB of graphics card see okay and here you will get uh uh dis around 11 12 GB and RAM actually give 12gb okay so this is the configuration of our fre cab now here you can see uh it is having actually limit resources barely enough to store llama to 7B vs that means we can only use 7 7 billion Lama to model OKAY 7 billion Lama to model if you're using 70 B 30 B 13 billion that time actually you will get difficulties okay because it is a free Google collab but if you're using um premium Google collab that time actually you can also use this model okay it's completely fine now here you can see full fine tuning is not possible here we need to perform the parameter efficient fine tuning technique like we be using L and Q because the full model we can't load here we have to use quantization technique that means we'll be using L and Q to perform the parameter efficient fine tuning got it and to drastically reduce the vram we must fine tune the model in 4bit position which is why we'll be using uh sorry we'll be using Lo here not Q loer we'll be using Lo here fine that means we'll be loading our model in a 4bit position I think I already explain here what is 4bit precision right so initially your weight would be in the full Precision okay 32 bit Precision this is called Full precision and we'll be loading the model in the for precision with the help of Lura technique fine I think it is clear now now let's load the model guys now you can load the official L 2 model you can see you can also load the official Lama 2 model so Lama 2 is having also official model so this one so see this is the official Lama to model you can load you can copy and you can just paste it here but if you if you didn't get the permission what you can do you can also load the model from any other repository so see this repository has having this model also this lama lama 27b chat HF model so this repository has already published and here you don't need to take the permission you can directly download the model so if you if you haven't get the permission you can use this model either you can use the official model OKAY official model let me also copy here and let me mention it here let's say I can comment here just for your reference you can copy the name and you can paste it here okay later on now this is the data set guys I'll be using I think you remember so this onek example will be using so copy the name and try to mention it here okay and after fine tuning what is the name you want to assign I want to assign this name Lama 2 7 B CH find you and these are the lower parameter you can see and low parameter wise everything just keep it default because you can see I'm loading everything in a 4bit Precision okay 4bit Precision so no need to change anything keep it everything as default see I won't be changing anything only the change you have to do the epoc size number of epoch you want to train so I think Epoch I have mentioned here somewhere see number of epoch training epoch so as of now I'm showing you one one let's say Epoch training because one Epoch training will take time if you're using free collab and if you're doing the actual training that time just try to increase the EO size now everything keep it default no need to change anything now let me initialize all the parameter so this is my lower parameter guys for the parameter efficient fine tuning fine now we'll be loading the data set I want to use the training data set because I want to do the fine tuning and here I'm loading everything in a 4bit position you can see okay with the help of bits and bytes actually configuration we are loading everything a 4bit position so this is the way actually we can Define our L and how I got this code if you go to the hugging pH documentation you will see that okay they have already given these kinds of codes in a bit so you just copy paste and try to use it as it is no need to change anything fine now see here I'm loading the model in a 4bit position so here you can see I'm loading the base model as well as the tokenizer okay tokenizer I'm also loading so guys here you can see I'm setting all the loader configuration after that here is the training arguments I think you know what is training arguments uh in the hugging pH you have to set your directory the number of epoch your Optimizer everything you can set here then with the help of sft trainer I'm initializing the training process you can see model. train now see if I execute this code it will start the training but see training will take time actually around 30 minutes actually it will take I was training previously I know that it will take around 30 minute okay 30 minute you have to wait because here we are using free Google collab so as you can see it is downloading the model after that you will see that it will start the training see it's downloading the model so see I won't be waiting 30 minutes what I'll show you uh the next process actually you can follow like after training what you can do because see I have written all the code only you just need to execute if you're doing it because uh here I'm recording currently so I can't wait actually 30 minutes um to train the model let me show you what you can perform here so after training the model you have to save the model you can see you have to save the model trainer model save pretend then you have to give the new model name I think new model name I think you remember we have given a new model name here whenever we Define the all the configuration um this is the new model okay so it will save with the help of this model fine so it will save the model in the here in this dis actually you'll see that it will create output folder inside that it will save the model then after that you can also visualize the tensorboard logs see this tensorboard will show you the losses then the accuracy okay of your model everything it actually it will show you that that means the complete metrics it will show you the training losses validation losses everything it will show here then after that what I was doing I'm I was loading the original model you can see I'm loading the original model not the train model I have train I'm loading the original of the Lama model and then I'm testing with a prompt what is large language model I just wanted to see what would be the output from my original large language model because that means I want to compar this result with my train model the model I have trained right now okay that's why I'm loading the base model that means my original model and I'm I'm only want to see the output okay so here I've given a prompt what is the large language model and this is the actually output I got okay from my model then after that what I did actually I deleted all the model Pipeline and everything just to uh empty my vram because in Ram actually it will occupy lots of space so you have to execute this code after executing this line actually so no need to execute this line of code just try to skip as of now first of all execute this line of code this line of code what it will do it will try to load your base model as well as your train model okay that means new model then it will Mars that means if you want to save the model right now if you're using parameter efficient finding first of all you have to load your base model as well as your new model okay both you have to load then after that you have to Marge after marging what you can do you can also load your tokenizer then you can push this model to the hugging pH H for this just execute this line of code and you have to perform the hugging pH C login okay huging face AI login and it will ask for one authentication token see this is the token it will ask now what you have to do go to the hugging face uh go to the settings I think you know how to generate the tokens go to the access tokens now create a new tokens let's say I'll give the token name is equal to test and now you have to give the write access because you want to write something you want to push something to the hugging face up that's say you have to give the right access now create the token let's create the token now copy the token and pass the token inside that inside that you have to pass the token then give uh y then press enter after that it will automatically authenticate with your hugging face then it will be pushing your model to the hugging face itself now here you have to give your user username see this is my my username entb so make sure you are giving your username here okay not my username otherwise it won't be working okay so if you execute this line of code it will uh push your model as as well as the tokenizer as well now after executing this line of code go to the hugging face click on the profile go to the let's say your profile now you'll see that in the model section this model would be published okay and this is the model and this is your tokenizer that means the same model you have to use for the tokenization as well I think I already showed right now after that let's test this model OKAY whether it is working or not so for this I created another notebook let me show you so this is The Notebook I created guys fine tune model test now again just try to install Transformer accelerate that means all the required packet then after that just try to load your model right now the model actually you have trained see this model just try to copy the name and just try to past it here okay then again I'm giving the same from what is the large language model I'm loading the tokenizer first of all so inside this pipeline I'm giving my model then after that you can see I'm creating the complete pipeline then it is predicting and it is giving me the results now see this is the results actually I'm getting see although I have trained only one Epoch but if you see the results it's not actually bad uh somehow actually it has given the good output then again I have given another actually prompt now see this is the results I'm executing my model and this is the result actually I'm getting so the prompt is actually explain to me in a simple U simple to understand way what is the equation of finding the uh an triangle number is is and how it can be provided by using the high school level math please please give each step of the of a proof of using latex see this is the latex actually output I'm getting that means all the let's say mathematical equation and everything it has given me as a latex now you can convert this latex to the mathematical format and you can see that particular output okay so that's how actually we can also test our model and this is the entire process of fine tuning guys entire process of fine tuning and see still training is going on you can see still training is going on and it has created the result folder and inside result inside runs it will save the weights okay it will save the weights that means the artifacts fine so yes guys that's how actually you can perform the F tuning operation with the help of parameter efficient fine tuning you can use either L either you can use Q L fine so now what you have to do guys just try to perform this fine tuning and if you're having any error if you having any issue you can let me know in the comment I'll try to help you with that okay to fix that particular eror now apart from that just go to the hugging face try to pick any other model guys go to the hugging face and pick any other model not this Lama 2 model you can also take Lama 3 Model you can also take let's say mral model Falcone model any kinds of model you can take just go to the model section just find a model and try to perform the fine tuning process okay you can use the same Tech technique to perform the fine tuning process fine so in future I'll create some more video there actually I'll show you how we can f tune any other model as well let's see you want to F tune Jimma model how we can do it and all okay we'll be creating some more video but before that first of all try to uh I mean explore by yourself the way actually I showed you the entire notebook I shared with you try to pick up any kinds of model and try to follow the same okay technique to perform the fine tuning operation so L index is nothing but it's an alternative framework of Lang chin so Lama index gives you the ability uh to build a very powerful generative application with the help of large language model so whatever things actually we have learned with the Lang chain like we saw like how we can use Lang chain framework to build generative application the same things can be performed with the help of Lama index as well so this Lama index and Lang chain is like very popular in the market nowadays so people are using Lama index and Lang chain uh very broadly in their gener application now it's up to you like which framework actually you'll be choosing whenever you are developing any kinds of generative a application right so we have learned like Lang chain like how we can develop generative application with the help of Lang chain now it's time to also explore like this lend x one so in this video actually I will give you like how we can build genbi application with the help of lam andex so this is going to be uh one amazing video alog together just try to watch this video till the end and don't skip any part of this video otherwise you might get some issue and if you have some query you can let me know in the comment I will happy to help you so guys let's start with our video so first of all I will take you through the Lama index documentation then I will start with our project implementation so guys this is the Lama index documentation and uh Lama index is nothing but it's a simple flexible data framework for connecting custom data sources to the large language model so basically Lama index is nothing but it helps you to build these kinds of generative application with your custom data as well as it will also give you the ability to connect with these kinds of large language model we have seen right so it is the similar kinds of framework of your langen so whatever functionality langen provides your Lama index will also provide that one but some of the syntax would be a little bit different okay so I will discuss this thing whenever I will take you through the project demo okay whenever I will be building uh projects with the help of lendx at that time I will show you like where uh what is the syntax change actually you need to consider now guys uh you can go through the documentation they have written everything okay so here it is telling we can easily build like lots of generative by application with the help of this lendex uh even you can connect uh with these kinds of unstructured data structured data and semi structured data so unstructured data means uh text Data PDF data video data and it can be also image data uh structured data means you can also connect with Excel data SQL data and so on and semi structure data means like you can also connect with the API then you can also with this slack then Salesforce notion so these kinds of I mean platform you can also integrate to collect the data with the help of this lamb andex okay so this is one of the very uh popular framework in the market and it is like very powerful so you can uh use this one also to build your gener application so it's fine uh you if you know like both framework like Lang chain and Lama index so it will help you to build like very powerful gener application right so um I personally like this Lama index a lot okay U I usually use langin to build my gener application but I also like this Lama index sometimes I also use Lama index to create my genbi application and guys uh this is the documentation of this Lama index so there actually they have given then how to set up this lamb index and what are the things actually it provides see it has also this agents uh then chatbot structured data extraction then uh indexing everything like whatever you have seen inside your Lang and everything it has uh if you see here all the things actually they are providing so you can go with the documentation so they have uh given each and everything now I'll uh quickly show you uh like how we can set up this lamb index on our Google collab and how we can build like one Basics gener projects with the help of this lb index okay then it would be very much clear for you so first of all what I will do uh I will open my Google collab so let me open my Google collab so here I will create a new notebook here you can give the name so I'll just give uh Lama index demo and here make sure you have selected runtime at GPU so let me select runtime as GPU and uh let me The Notebook so uh in between what I can give you I will give you the project architecture like uh actually what I'm going to do exactly with the help of this L index so for this actually I'll open my um Blackboard and here I already kept this project uh architecture as you can see so basically here we'll be building one uh projects uh basically here we'll have lots of like documents so basically we'll be chatting with the documents okay okay so chat with multiple multiple documents okay so this is the project name so it can be any kinds of documents so it can be PDF it can be let's say Doc it can be txt okay it can be image anything you can give so we'll be extracting the data all together okay then we'll be chatting with these kinds of documents so this is nothing but our custom source okay so this is nothing but our Custom Custom data okay our custom data source you can talk about okay and here first of all what I need to do uh so user will give me these kinds of like data custom data so I need to extract the data and U after extracting I also need to convert them to chunks because I already told you what is this chunks and why we need it because here I'm going to use large language model okay llm I I'm going to use large language model so LM wise I'll be using something called Google Pam uh Google Pam 2 I already discussed like Google Pam 2 and if you already know Google Pam 2 has one specific input size which is nothing but 8,90 8,096 tokens okay so uh if you're extracting the data alog together so it might be more than 8,96 token so that is why it's better to create a chunks so instead of giving all the Corpus together I will provide as a chunks to chunks so that my input size uh it can handle very easily right so that why chunks is important so after creating the chunks from my entire Corpus I also need to convert this text to text to Vector okay I'll be converting text to Vector so for this actually I'll be using some embedding model so in this case actually I'm going to use hugging face embedding model hugging face uh hugging face embedding model you can also use Pam to embedding model it's completely fine I already showed you how to use Pam to embedding model you can also use hang embedding model then uh after creating this uh Vector store I also need to store these are the vector okay in a knowledge base so by default actually uh this lamb index has one functionality so it will create a knowledge base in your local I will show you like how to created then after that U we'll be handling the user so user will raise some query so we'll first of all convert that query to querium buding then we'll be performing something called CTIC search so it will give me some rank results and we'll be applying generative U model that means large language model to get our actual response okay so this is the complete idea of our project uh architecture right so now let's Implement with the help of this uh lendex as of now we have seen like how to implement with the Lang chain we have seen like how we can uh develop end to end uh Genera bi projects with the help of Lang chain and Vector database and so on right so same thing you can do with the help of lamb index you can also add your vector DB here you can use pine cone you can use uh webat you can also use chroma DB anything you can use use but here I'm not going to use any kinds of vector DB I'm going to use default knowledge base providing your uh lamb index okay so it will store your vector in a local I'll show you like how to do it okay you can also connect with the vector DV so that can be also done I already taken lots of session on it so you can go ahead and watch it so guys now let's uh see like how we can set up this one so to set up Lama index uh there is a python package actually will get uh called L index okay so just write P install P install ipen Q Lama index okay Lama hypen index so this is the package name you need to install if you visit their documentation and if you visit their installation guideline okay if you visit their installation guideline see this is the L index package they are using okay now I also need to install something called uh Pi PDF because here I I'm going to use PDF data so let me install install Pi PDF Pi Pi PDF then I'm also going to install something called uh doc to text because I'm going to use also doc type data so I'll just write P install uh doc docs to text dxt okay this package I need then uh I already told you I'll will be using uh Google Pam to as my large language model so for this actually I need to install something called Google generated VII so P install uh Google generative AI package okay now I will be using something called hiding face embedding so for this I need trans uh Transformer so I'll install Transformer so pep install Transformers okay now let me install them together e uh so guys installation is done now uh I'll import some of the libraries so let me import so first of all I will import something called uh uh simple directory reader and my Vector restore from my Lama index I'll tell you like whenever uh I'll be using it so this two uh function I need so this two function actually I need called Simple directory reader and my Vector store index I'll tell you like whenever I'll be using so what is the the use of it then I also need something called uh pal model so it is already available inside lamb andex so as you can see L index. llm spam and I'm importing this pum and uh this is the similar things actually with the Lang chain as well so I think you remember we are also importing pal 2 model from Lang chain so from Lang chain. llms then I was also importing this p p model right so if you have already used Lang chain so uh using this L index would be very much easy for you because lots of functionality will remain same uh will look like similar to you so some of the functionality and syntax might different but rest of the things are I think similar okay what I feel like then I also need something called uh service context from lendex I'll tell you like what is service context then I also need something called storage context and this load index from Storage okay these are the thing then I also need something called operating system package now let me import them okay done now uh I will load my data so here let me comment out load data so to load the data first of all here what I will do I will create One Directory so here I'll just write one command mkd and I will name this directory as data now if I refresh I think huh directory has created now here I will upload some of the uh data that means documents so I can upload see I here I have PDF as well and this docs data as well so let's upload uh these docs first of all so this is the like L index documentation as you can see so it is present inside my docs file now here I will also upload this uh this one yellow okay yellow um PDF so with the help of this simple directory reader we can load everything any kinds of file format you can load okay so that is the power of this Lama index but if you used I think Lang CH you remember we used to use something called PDF uh loader then txt loader separate separate file but if you're using L index so you can directly load them together okay so these kinds of some functionality with will might vary and will uh look new to you so it's completely fine but functionality are same so guys let me show you like uh my data once like what are the things I have so in this L index docs I have some content related Lama index like what is Lama index and all okay so here is the content I prepared and it is present inside this documents then uh in the PDF actually you can see this is yellow related PDF so what is yolow and yolow architecture so these are the content are available so you can ask any kinds of query any kinds of question from this documents okay you have submitted so we'll be uh doing that with the help of this uh uh large language model and with the help of this uh lamb index okay uh so guys as you can see uh my data has been uploaded now what I can do I'll first of all load the data so I'll extract the content uh from these documents and PDF so for this I'll be using something called uh this simple directory reader so I'll call it and inside that you just need to provide the directory so this is the data directory inside that I have this data and here is one function called uh load uncore data you need to call and I will store it inside a variable called documents okay now let me load them yeah now if you want to see the data so this is the data it has extracted okay and this is in document format as you can see okay and it will also give you the reference ID and if you're using any embedding or not so it's none by default because we haven't used any embedding and this is the content it has extracted okay now what I need to do guys U we have successfully extracted the data now I need to perform something called chunking operation on top of it because this is my entire carpus and I also need to convert them to chunks so for this let me just first of all comment so we'll be performing split text into small chunks so uh before that first of all I need to set my uh Google API key Okay Google AP API key I need to set so the uh using this Google API key we'll be able to access our P palom model OKAY from this uh Google palom API so if you open this uh Google palom website so here they're telling just try to create one API I already showed you how to create the API just click on this pal API and here you just need to get your API key and here you can generate a new key okay so for me I already created one key so this is my key I already created so if you don't have any key you can create from here so guys I already created the key so this is my key and don't share this key with anyone I will remove it after the recording so that is why I'm showing now let me set this key as my environment variable done then I need to initialize my llm so llm wise I am using something called this PM model so it will automatically uh authenticate using this uh API key okay so pal is not initialized please Google generi uh I think we have already installed this package why it is giving okay let me install it okay I need to restart the run time so that is why why I think it was not working so guys we have restarted the run time now let me import them again H now I think my documents is already there uh okay so I need to again load the documents now this is my data now I'll set this IPI key now I load my pom model okay it's loaded now uh see guys uh initially whenever I was using uh Lang chain so we used to create this chunks in a different way we used to use something called text uh uh character splitter uh function to create this chunks but here uh this uh things is little bit different so here you need to use something called this service context okay so here is a service context uh function you need to use this function so here you just need to initialize it so it h it has one method called U prom uh from documents so from no sorry from default so from default from defaults and here you just need to pass uh the llm at the very first so llm wise so Palm is my llm then uh I also need to give the Chang size chunk _ size I think you already know what is chunk size so it will uh like uh split your data with respect to that and I also need to define something called chunk uh overlap overlap okay so overlap so let's give 20 so chunks overlap helps us to understand the context of my entire Corpus because it will convert to chunks and to get your previous context I need the chunks overlap I already explained this thing in my Vector database session now here you can also give like embedding which embedding you want to use and if you're not giving anything so by default it will use that hugging face embedding I'll show you so Service uh context uh this is my service context I got now if I execute this code you will see uh it will first of all uh okay it's giving one error no API key found for open uh okay it's giving the error because I need to again install this uh Transformer I think so let me let me install the Transformers uh so guys as you can see it's giving one error it's telling uh no API key found for open a so here by default if you're not giving any embeding model so it will try to take the open a embedding model but here in this case we haven't provided any op open a API key so that's why it's throwing error so if you visit this URL so they're telling if you want to use some other embedding so you need to first of all import it so let me import this hanging embedding so I told you I'll be using hang EMB bding so first of all let me import this hang EMB Bing here you can also use Google Pam embedding the way I showed you in my previous project you can do it but let's use the sface embedding now I need to create one object called embed model so here I can create now here I'll be using this model uh this is the model available in the Hing face this is the embedding model so I need to install something called s sentence transformer for this so this is the command let me install it here done now let me import it now guys see first of all it will download that embedding model from Hing fist this then it will load that so done now I need to give one parameter here called embed model is equal to embed model now let me execute it h so my service context is prepared right now now what I will do now what I need to do I need to convert my documents to chunks and that chunks I need to convert to something called Vector embedding okay so for this uh you need to use something called uh uh vectory store okay so vectory store I think we have already imported this thing above so this is the vector store index so this uh class will help me to do that so let me import it here and it has one function called from documents okay so here you just need to give you a document so in this case I have my documents here I think you remember so this is my documents this is my entire Corpus then I also need to give my service context so service context equal to my service context this is the service context so it will take the model and everything from here and all the configure I have set here Str SI chks overl everything I have given here now I will get my something called index here so in Lama index uh the vector you get we call them index okay so this is my index now let me uh convert them so it is taking some time because it is taking all the documents and converting to chunks and converting to vectors okay now we have successfully converted them now I need to store them in my local so let me comment it here so to store it first of all call this object called index and there is a uh method called storage Storage storage uh storage uh context dot persist persist okay now if I execute this one you will see it will save everything as your local okay so there is a uh folder it will create called stor is inside that see all the vector it has saved okay now we can open it anything you can see that okay see this is the uh data it has saved so it it follows one particular format to save your documents so it might not understandable to you but this is my see this is my Vector okay this is my final Vector of my entire data now guys we have successfully stored our indexes now let's see if you have some existing stories or existing index already so instead of creating them you can directly load it so this is the code so this is the code load the index so here you need to call Storage context I think you remember we imported this thing storage context so using storage context there is a method called from default and here you just need to give the purchase directory which is nothing by storage and it will load that and to load it you need to use load index from Storage okay we imported I think I you remember load index from stories then it will load that index for you okay it will load that index for you so you can execute this code okay I already created my index object that's why I will comment it out okay I'll comment it out you can uh if you have already so you can load it out and here you can also use uh like vector DB to store these other data to your uh Vector DB as well okay this is also possible but LX provide this functionality so that's why I I'm showing this functionality to you okay how to store them in a uh local machine now we can perform our keyway operation keyn operation so let's do q q operation so here uh first of all you need to Define one quy engine so this is my index so it has one uh parameter as quy asore quy engine and this is my query engine now uh I'll call my query engine and here I will ask the query so this is my query so here first of all I will ask like what is lamb andex because I have one lendex related documentation here right so that why I'll ask what is LAM andex and it will give you the response and as response I will print it here uh so guys this is my response uh again it's not understandable so if you want to extract the actual uh response if you want to see the actual text so for this uh you can use this uh package because we are using Google collapse so there is a package called I IPython display markdown and display so these two package I'll will be uh importing then I'll be using something called display. markdown and here I will give my response okay the response I'm getting now if I execute it so it should me uh so it should give me the response Lama index is a data framework for building application it provides a comprehensive toolkit for integration management and query of your external data so that you can use with your llm app great now you can ask any other query so let's say I have one YOLO documentation so I can ask anything about yolow so what is yolow now if I execute again see Yow is a regression algorithm uh it takes image input and output building bounding boxes and level uh images okay great now uh let's see if I'm asking anything uh out of this context out of this data so let's see what happens so I'll ask uh uh who is uh B let's say I will ask this question see it's telling B is a random name and it's not mentioned in the context so basically uh we have created this projects and basically it is only relying Upon Our Uh custom data we have given okay apart from that if you asking anything so it w be giving the answer so you can ask anything uh like related your documents so in this case you can use this question anything you can ask like whatever question actually you have so it will give you the answer with respect to that yeah and uh this project actually you can uh convert to uh stream lit app I already showed you how to convert them to streamlit app and all so you can try this thing from your site okay I think you can do it so yes guys this was all about lendex I hope you get get it like uh how we can use this lendex as our alternative framework of our Lang chin and this is one of like good framework I can say so uh you can visit the documentation and you can learn so many things about lendex okay now try to explore from your site so you'll be getting each and everything I think you already know about Lama index I already explained what is the Lama index Lama index is nothing but it's a alternative framework of langen that means whatever let's say things you can perform with the langin the same thing you can also perform with the Lama index so both are actually Genera VI framework with the help of that you can create Genera VI based application so in our PR video we saw like the entire introduction of the Lama index so there actually we already performed one practical example so in this video I'll show you how we can use open source large language model with the help of L index so as an open source model wise I'll be using something called Mistral okay so if you don't know Mistral is an open source actually large language model and it is available inside hugging face now if you search here let's say mral if I search here see mral is having actually different different model let me show you so let me go to the mral AI see it is having actually 17 different model so expand all the 17 different models see Mr is having 7B model that means this is the 7 billion model 22 billion model okay that's actually it is having different different model so from this model guys I'm going to use one model called Mr sa me instruct V 01 so this model actually will'll be using with the Lama index so this model we be downloading from the hugging face Hub and we'll be using with the help of Lama index okay so here I'm going to create a simple system so let me show you the diagram what I'm going to perform here see here uh I will upload one actually PDF document then I will extract the data extract the documents extract docs after that I'll perform chunking operation I think you know what is chunking okay and why it is required then I'll be using my embedding model here I'll be using one open source embedding model fine embedding model to generate the vector embedding so it will give me something called Vector embedding and this Vector embedding I'll be saving to a knowledge base that means Vector database and if you're using Lama index guys I think you already know Lama index has one vector database service so we can call it as Vector store okay Vector store so inside Vector restore we can uh save our uh embedding so whatever M actually we'll be generating and we'll be using llama index okay llama index vectory store okay L mind is vectory store and this is going to be my knowledge base then after that uh user will ask one query let's this is the user user will uh send one query to the knowledge base and knowledge base will return return some relevant answer okay it will give give you some rank results rank results then what I have to do I have to use one large language model llm so here we'll be using something called Mistral okay Mistral so we'll pass this rank results to this large language model as well as this quy as well so this quy and this rank results will process your large language model and it will give you the actual response okay it will give you the response so this is the system actually will be implementing fine with help of Lama index as well as the open source large language model because this system we already saw how we can Implement with the help of langin now let's try to see how we can use the Lama index as well so let's get back so here I already created one notebook guys you can see mral with Lama index so first of all let's connect this notebook so resources would be shared in the description section so from there you can download and you can um execute all the code so it is connected now let me check the GPU which GPU actually I got here so I'm using collab Pro guys so that's why I'm using a 100 GPU so if I go to the run time change run time type c I'm having a 100 GPU so if you're using cab Pro so you can access this GPU otherwise you can select T4 GPU okay it's completely fine now let's install the pi PDF because I already told you I'm going to use PDF data here and I have to upload one PDF documents here okay but before that let me complete the installation then I'm going to install the Transformer then I'm also going to install some required uh package for for the Transformer okay so let me install everything why Transformer because I want to access this Mr model and this model is available in the hugging ph up and then I need to install something called sentence Transformer why because I already told you we'll be using open source embedding model and for this I need this sentence Transformer so let me install this as well now I'm going to install the Llama index so I'm installing one specific version uh why specific version because I already told you if you're installing any specific version uh that will help you a lot in future because uh let's say today you have created one projects with uh the latest llama index what will happen after some days actually they will upgrate their package and again you will get issue right so that's why it's always better practice to use when specific version fine now let me import all the required Library so you can see I'm importing from Lama index Vector store index simple directory Reader Service context okay then hugging face llm then simple input from so this is the vector restore guys that means this is the vector database Service uh Lama index provides so uh here actually we can create a knowledge base and we can instore our embedding and this is the local uh local DB okay it will save everything in local then simple directory reader will help you to read your content that means whatever data actually will be reading right then hugging face LM will help you to load that mral model then with the help of simple prompt you can create a prompt template fine so now let me import all of them later on I'll tell you whenever I'll be using them now here I'm going to create a directory called Data okay because inside data directory I'm going to upload my data now see if I refresh here data is created now let me upload one PDF here so guys I'm having one statistics PDF so I'm going to upload it here so let me show you the PDF so this is the PDF document guys importance and use of code relation in statistics so this PDF actually I'm going to upload in my Google collab and on top of that actually we'll be performing this operation now here you can use any kinds of PDF any kinds of documents okay whatever you have now see uh it is uploaded now let me read the content so inside simple directory reader you have to give the data location so you can see I've given the data folder it will automatically load the PDF and it will extract the information let me show you see if I show you the documents right now see all the document is has extracted fine now here first of all let's create a so here you can see I have created a uh system prompt you are an QA assistant your goal is to answer the question accurately as as possible based on the instruction and the context provided now this system prompt actually I want to use as a default prompt inside my large language model for this you have to create one query rapper prompt for this you can use Simple input prompt okay and inside that you can pass these are the keyword fine now let me execute now you have to do the hugging face C login because this model is available inside hugging face and to authenticate with hugging face you have to give the token now here you have to pass the token and how to get the token guys I think you remember go to the hugging face click on the profile go to the settings and left hand side you will see access token uh you can create a new token here so let me give the token name let's say test I want to give the read permission as of now let's create the token I'll copy and let's mention it here if I paste it and hit enter it will automat atically authenticate now here it is asking uh token as great credential I'll give yes now see login successful okay now you can see this is the model link I have already given so this model actually will be using now let's load the model and to load the model I'm going to use hugging fist llm inside that you can pass context with the max token I think you already know what is Max token so what is context window context window means this is the input size of this llm that means it can take 4 496 token U as input okay as the input that means this is the input size of your large language model M can take four 496 token okay now you can give this temperature parameter and all and inside that just pass your system prompt whatever prompt actually you have defined here I think remember and you have to also pass the query rapper prompt that means the default prompt you want to set and here you have to give the model name like which tokenizer you want to use I want to use the same tokenizer as per my model see this is the model okay I'm giving the model ID here now you you need to also give the model name that means the same name then after that Auto map is equal to that means I want to use my GPU here I want to load this model in my GPU because it's a large language model it is it is having actually lots of parameter right so we can't U let's say run this model on our CPU machine it's not possible if you're running U actually it will take lots of time even your memory will also get crash so that's why we have to load everything in the GPU based machine now let's load this model see first of all it will download the model from the internet and it will create one llm raer see it's around 9.9 94 GB just try to consider guys how much big this model is so that's why actually uh whenever you are using any kinds of Open Source large language model uh to create any kinds of llm powered application so this is the issue actually will be getting that means you should have good configuration machine otherwise you won't be able to use that model so we'll be learning something called llm ops so inside L LM Ops actually I will show you how we can uh create a efficient llm powered application how we can deploy it also on the cloud platform we'll be discussing each and everything because of that only LM Ops SC in the market there are so many PL platform actually we can use like Cloud generative we can use let's say Bedrock is there vertex a is there asure open is there we can use these are the service okay to overcome this issue so this model has downloaded successfully now what I have to do I have to download the embedding model as well so to download this embedding model I'm importing hug face embedding from langin so because langin is having one embedding functionality so from there we can easily download the embedding model so let's try to download this embedding model so we have to install R Lang chain Community for this so let me install Len Community now let me execute this code so see it has downloaded successfully now let's create the now let's create the service context that means my vectory store that means I will be creating the knowledge base for this we'll be using service context from default inside that you have to provide the Chun size that means first of all it will perform the chunking then it will create the let's say Vector embedding and it will store that Vector embedding to the knowledge base okay now inside that you have to pass the LM as well as the embedding model now let's create the service context so here actually some of the syntax are different okay with respect to this langin uh if you use the langin I think Lin synex is little bit different Lama index synex would be little bit different but uh I mean framework wise both are same okay both can perform the same thing now let me create the knowledge base so here you are so here I'm using Vector store index from documents here I'm giving the documents as well as the service context whatever service context we have provided okay now it will create the entire knowledge base now I can perform the qu operation okay that means this operation okay this operation so it will go to the vector restore that means knowledge base and it will return the rank results and your llm will process and it will give you the correct response okay so here I'm given one question what is the correlation now let's see what is the response I get here so inside Lama index you need to write Le less than have code but whenever you saw the Lang chain actually we have to write uh actually our Vector store actually manually that means we have to write some more additional code right but here everything is automated everything it will handle that means we don't need to perform the chunking separately chunking will automatically perform here okay with the help of the service context see although I'm using using GPU based machine but still the inference timing is high here now see it's done now if I show you the response now see this is the response I got corelation is is a statistical measures that Express the extent uh to which the two variables are linearly related that means it has given me the correct response okay so yes that's how actually we can use any kinds of Open Source large language model with the help of L index now you can go to the hugging pH and you can use any of the let's say um large language model and you can use it with the help of Lama index fine so uh I'm not going to implement this projects from scratch because I have already discussed the like process how we develop like one in 10 projects okay so that is why I already implemented one particular projects as you can see here so this is like a Financial stock analysis project I have developed with the help of this lendex so first of all I will show you the demo of this projects okay like like what is the projects and all about so those who are interested in the field of financial or let's say in the domain of financial so uh they will be loving this project because here you can do like a stock analysis okay so we have some stock data we have some articles actually as you can see so these are the articles I have uh downloaded from the internet and this is in the HML format so we'll be processing these are the data we'll be collecting the content okay if you see this is the completely HTML data so here we have lots of like Financial stock data like we have Google data then we have Nvidia we have meta okay then we have u ms uh uh here you see msft okay as you can see so we have different different like you can say companies uh stock data here so I already uh given the link of the data in my GitHub so you can download from here I will show you like how to download the data so that is script I have already written so first of all let me execute the projects so I will first of all execute this projects and show you like how it will work so see guys this is the stream late app I have developed and uh here you can do two kinds of analysis one is like you can do a single stock analysis another is a competitive uh analysis okay like competitor analysis I'll show you both of you okay so here first of all let's do the single uh stock analysis so I'll just ask what is the stock of here if you see so they have given the short name for each and every company if you come here so I've already listed down so let's ask uh for the Nvidia so I'll copy the Nvidia and here I will ask so guys as you can see I have asked like what is the stock of Nvidia so it is giving me the answer okay you can see it is giving it is giving like 2023 to 2027 okay it's giving the stock as you can see now and you can ask for any kinds of stock let's ask for the Google so I'll copy Google and here if I paste and enter so now it will give me made the stock of the Google so that's how actually you can ask different different stock related question okay um if you're uh interested in uh these kinds of stock and all so you can ask lots of question and you can get the response with respect to that okay as you can see this is the Google stock uh answer it is giving now you can also perform like competitive uh stock analysis so just select the competitive one now it will give you the interface of the competitive analysis so guys as you can see this is the competitive analysis one so now here you need to provide stock one uh symbol and stock two symbol so let's do like uh msft and I will also do for my Nvidia let's see the competitive analysis between them uh so see guys uh this is the competitive analysis between them as you can see you can read it out okay so not only that you can uh like see like competitive analysis between all the company here is the listed okay and this is the symbol of the stock like uh you can't directly pass the company name so you need to give the symbol okay because this is your custom data you have given like that so yes guys this is the projects actually uh I have developed with the help of this Lama index and this is very much uh interesting projects like in the field of financial domain and you can see Implement lots of thing with the help of this lamb index I think I already showed you like lots of like functionality and all and I already showed you lots of things okay uh with the help of Open Source model and now you can Implement anything okay whatever you can think in your mind you can Implement anything just you need to try from your site okay now guys U let me show you like how I have developed this projects okay so this is the projects guys I have already developed and uh let me show you uh this is the code for the projects okay so I'll explain each and everything like whatever things actually doing and I have already given the idea about Lama index and this stream lit and all so I think you are already familiar with these are the thing okay I'm expecting so that's why I'll be explaining the projects okay instead of writing all the line from scratch so first of all let me stop the execution then uh I will remove this article folder because this is my generated folder then I will also remove this stories okay stories I think you remember stories is nothing but it's a vector store we created with the help of lam Index right so both I have deleted now here is the rme file I have already shared like what are the steps you need to perform so here first of all you need to clone the repository so this repository will find from the description section so from there actually you can download the projects then you need to create one environment okay python environment uh using python 3.8 then you need to activate the environment then you need to install the requirements so requirement wise I'm using these are the requirements as you can see so you are using L index then stream lead python. EnV okay and apart from that I'm also using openi and some U you can say dependency package I'm also installing here so this thing you need to install I already showed you how to install them and all how to create the environment in my previous project implementation then after that uh you need to uh execute this app.py okay but before running the app.py you should have your data and you should have your vector store presence okay otherwise it won't be working so for this actually in the SRC folder I have written some of the script as you can see first of all we need to fetch the data so this is the link guys so in this link actually this articles is available I have already given this link and this is uh this is hosted on my GitHub so from here you can download those data set okay download those articles and after that see I have written one function with the help of this function I'm downloading so basically it will take this URL data URL and it will download that uh Z file okay from my GitHub and it will and it will unzip it okay it will unzip it here and that zip file it will remove okay so this is the code I have written now let me show you how it is working so I already created the environment so now I'll execute this particular file so I'll just write python uh inside SRC inside SRC I have one file called 01 fetch data okay I will execute this file now see guys it will download that uh data from my URL so see guys it has downloaded all the HTML file and now see if I open my articles all the data are presents now what I need to do I need to create one vector I think you already know like what is Vector I I already explained these are the thing in my notebook experience ment okay what are the steps I perform same thing I'm doing here also okay so to create the vory store I created another file called index news. Pi so here I'm using this GPT Vector restore to create my Vector embedding so here you can also use Google p embedding you can also use hugging face embedding anything you can use just try to use open source embedding U because if you if you don't want to use like open AI so if you don't want to spend money so you can go go with like open source model otherwise uh if you have like open a account you can also use open AP key so here if you see I have already set my open IPA key so by default if you're not giving any embedding models it will take that open a embedding model okay so this GPT uh Vector store index already has like GPT based embedding model it will take that model and it will convert your data to Vector embedding okay so guys this should be your task just try to replace this code with your open source model I think I showed you how we can use hugging face embedding model in this notebook uh see guys here huging Quest embedding model I was using so you also need to use Hing Quest embedding model here okay in this case I'm using open so you need to replace with the H embeding model okay I think I already showed each and everything so you can do it now let me first of all generate these are the embeddings so I'll clear then I will run this uh second file so it's 02 so it will take time because it will take all the Articles it will it will convert to chunks then it will uh like convert them to Vector embedding okay then it it will create the stories here so here you can also integrate like vector database so you can use pine con we yet and you can also use chroma DB but I'm using this default like vector store index so L index provide this thing so it will store your embedding local okay it will create one storage folder and it will store here so you can also use Vector database and you can store them in the cloud as well okay I already showed you just try to integrate here uh so guys as you can see my stor has been created now now this is my Vector uh so see these are my embedding so these are my Vector okay so now we are successfully uh able to store our Vector embedding now see uh now this is the third uh script I have written so if you want to test on top of your uh like stories so I here I'm loading the stories and I'm just asking one query like what is uh tell me about Google's new super computer okay so this is the query I'm asking so it will give you the response so you can try out okay so let me execute and show you how it is work working so I'll just write python then inside SRC I have this 03 yeah so see guys uh this is the um response I got okay so yeah that means my U Storage has been created successfully and we are also able to ask the query on top of it now we'll be converting these are the thing okay uh as our app so basically I will uh give some of the input okay uh user will ask the query and they will also select like they they want to perform like single stock analysis or let's say multiple stock analysis so this kind of functionality I also add so for this I I have already created one app.py as you can see this is the app. pi here if you see my index is already created so that's why I'm importing the storage context and load index from the storage because I want to load it then I'm also importing like wise openi because I told you I'll will be using openi like model here instead of using open source so here you just need to replace this uh openi model with your open source model you can also use Palm 2 then you can also use lamb 2 anything you can use I already showed you this thing in my this notbook experiment okay in my L index session just try to replace that these are the model here then model wise see I have initialized zpt 3.5 TBO then here I'm just defining my llm predictor and I think you remember we had we had created one service context okay uh so in lendex we create something called service context and this will take your llm so once it's done I'm also loading my Storage storage that means this uh Vector embedding okay as you can see I'm loading I'm giving the path once it is done I'm creating this quy engine okay so once quy engine is ready now we'll be creating the front end part so here basically if you see here we are uh creating this uh title and all like this is the title Financial stock analysis so let me execute and show you how this thing will look like so see guys uh this is the title and this is the report subtitle so these two I have created now here I'm creating one select box so what type of uh like report you want to you want so this is the select box guys let me show you this is the select box so if you want to create any kind of Select box you need to select uh select box from stream L and here is the message I've given so what type of uh report you want to do and single and competitive so here if you see this two thing I'm giving here so single and competitive then if user is selecting single one okay so first of all we'll be handling the single so here is the uh prompt I have written let me show you so I'm just using my engine query query engine so as you can see query engine we have already created and this is the like prompt I'm just giving so write a report on uh like on the outlook for symbols okay symbol user will give me that okay user will give me that symbol because as you can see we are uh receiving the symbol so uh as a text input text basically here is the symbol AS input text we're receiving and that thing we're passing here okay as a F string then once it is done this is my prompt stock from I'm just uh mentioning the year I need this stock from this year and uh I'm also telling like be sure include the potential risk and the uh head winth okay so this is my prompt I have given to my llm so my llm will give me some response and that that response actually I need to show I need to Showcase okay so I'm just using s. write and I'm just passing my like uh this response and it it will show here so once it is uh done so I'm also handling the competitive analysis so if user is selecting competitive analysis so first of all I'm taking like two competitive as you can see if I select the competitive one so here if you see I'm receiving the stock one and stock two and this thing actually I'm storing symbol one symbol two and this is the my second prompt okay so I'm just uh writing write a report on the competitive between my symbol one and symbol two uh stock okay then it will give me the response and that the response I'm showing in my front end so this is the simple logic actually I have written uh behind this projects okay and this is like very easy now you just need to uh like convert them to open source model and if you have any idea on top of it you can also create it okay I think you got the overall idea and all the resources actually will get from the description section so I think you already know what is medical chatbot let's say if you have any medical related query let's say you got one disease so you are asking for the diagnosis you are asking for the medicine so this bot will able to give the response with respect to that that means it will give you the suggestion it will give you the medicine suggestion it will give you the diagnosis suggestion so these kinds of information this bot will provide so we'll be creating the complete system here that means here first of all we'll be using our custom data the entire let's say medical information custom data we'll be using first of all we'll be teaching our model we'll be creating the entire knowledge base then I'm going to connect my large language model there that means whatever information you'll be asking related the medical let's say any kinds of disease any kinds of medicine any kinds of let's say diagnosis so everything your chatbot will be able to give you the response okay so this is the system we'll be implementing and this is not going to be guys uh like notebook implementation so here we'll be creating the complete pipeline that means we'll be creating the front end part of our application that means we'll be creating the beautiful user interface so that user can put the quy and they can get the response from the chat B fine and here we'll be using something called modular coding in Python so it's not like scripting programming we'll be writing we'll be using modular concept here to implement the entire project fine and also we'll be uh using the git and GitHub to let's say do the version controlling so uh that means we'll be following the entire development pipeline here what are the things you need even I will also show you how we can deploy this project okay in a cloud platform so everything guys we'll be implementing in this project so make sure we watching this video till the end and if you have any question you can feel free to ask me okay in the comment section so first of all what I will show you guys I will show you the entire project architecture like what are the things we are going to LEL up then I will also show you the tools and Technology we'll be using here then we'll start the implementation fine so let's open up our Blackboard and try to understand the project architecture so guys as I already told you we'll be using our custom data here okay we'll be using custom data custom Medical Data I can write medical data so let me show you I'm having one entire actually medical book so guys you can see this is the book the book name is the Gil Encyclopedia of medicine okay second edition so this is the book you can also search on Google you will get this book and it is having uh around 637 Pages it's like very big book and it is having all kinds of information regarding the medical so see if you open this book actually you will see all kinds of content let's say all kinds of disease even with respect to that disease what kinds of medicine actually you need what kinds of diagnosis technique you need everything this book has uh covered okay so it is having different different um different different treatment different different uh actually medicine different different disease even the disease image is also visible here all kinds of disease actually it is having all kinds of disease actually it is having even with respect to that they have also given the diagnosis even the treatment okay how let's say you can do the diagnosis how you can do the treatment what kinds of medicine you have to let's say take everything this book has uh given the information so here we'll be using this book actually the entire medical information and we'll be creating the knowledge base that means here we'll be using pine cone Vector database okay I think you know Pine con is a cloud-based Vector database that means there we can store the embedding Vector embedding that means first of all we'll be extracting all the information from this book then we'll be creating the chunks and that chunks actually with the help of embedding model we'll be creating the vector embedding and that Vector embedding will be storing to the Pine con Vector DB and that Pine con Vector DB is going to be my knowledge base that means the entire knowledge base H why I'm not using the local Vector database here because my data size is huge if you see 637 Pages information I'm having so if you just create the chunks just try to consider how many chunks you will get and if you're storing in the local DV it won't be efficient so that's why we'll be using cloud-based Vector DV here fine and I'll show you how we can use the pine cone properly it's one of the amazing Vector DB I personally prefer so there actually you can also see your vector visualization okay everything you can see see this is another actually disease see this is the disease actually even with respect to that they have Al given the diagnosis as well as the medicine now I'll share this PDF with you guys you can uh see The Complete Book if you want to see different different medicine and different different let's say diagnosis okay you can check it out so here what we'll be doing guys we'll be using this medical book so let's say this is one PDF documents actually I'm having or here I can write medical okay medical book so from the medical book what we'll do we'll just extract all the information extract all docks okay then after that we'll be creating different different chunks and I think you know what is chunking is required right because here we'll be using large language model and large language model is having input uh actually size one specific input size and we have to follow that input size I think previously we learned about about Lama llama is having 4,096 okay this is the input length uh that means this is the maximum input length it can take the data if you're using open model Also let's say GPT okay GPT is also having one specific input lend if you want to see that just open the open.com and go to the model section you will see that GPT input length so whatever actually large language model you using first of all try to see the input length Okay of that model like what would be the maximum token size based on that try try to perform the chunking operation okay that should be my suu now it will give me different different chunks so let's say I will get chunk one a chunk one we'll be getting Chun two we'll be getting Chun three and so on then after getting the chunks what I have to do guys I'll be using one embedding model embedding model okay with this embedding model will generate the vector embedding okay it will give me different different Vector embedding you'll be getting Vector embedding I can copy and I can paste it here so we'll be getting different different Vector embedding and with this Vector embedding guys what we'll do we'll just try to build one centic index that means the knowledge base right build centic index so this is going to be my knowledge base that means we'll be storing this Vector to the vector database so I can write knowledge base okay knowledge base and here we'll be using something called Pine con Vector store okay so let me just write Vector DB okay DB Vector DB and guys uh this is going to be my complete backend component component okay so here I can write this is going to be my backend component okay component now I have to work on the front end component that means user will uh give some query and with respect to the query actually uh I have to uh give the proper response okay let's say this is the user this is the user so user will send one query let's say this is the query user has asked so first of all it will convert to the query EMB bding okay querium bding that means this is going to be a English text right and that should also converted to the Vector embedding this Vector embedding will go to the knowledge base okay it will go to the knowledge base and knowledge base will return return some rank results okay rank result or similarity let's say result it will return return okay rank results then I'll be using one large language model so here we'll be using one large language model llm so here I'm going to use openi large language model you can use any kinds of large language model you can use open source large language model okay you can also use the gini you can also use uh let's say mistal anything you can use here so here I'm going to use open large language model because here I'm going to create a production ready application so this application will be also deploying in the cloud platform okay that's why uh I'll be using openi model okay why openi model because openi model is already hosted in the openi server we can access this model through API request but if I'm using any open source L language model we have to download this model in our local machine and local machine doesn't have like uh good configuration let's say instance let's say you don't have good configuration GPU you don't have good configuration actually Ram CP that time actually you can't execute this model in your system okay it it will be very much difficult for you and you will see that inference time would be also very high that means uh this model will uh keep processing the input it will take lots of time to give you the response so that's why we'll be using openi model and going forward I'll be discussing about llm Ops and there I'll tell you how we can also use like different different open source large language model let's say if I want to use llama okay llama if I want to let's say use mistal Falcon okay cloudy any kinds of model if I want to use how I can use it even how we can use it use it as a efficient way even how we can deploy these are the model in the cloud platform so for this we'll be using something called llm ops okay llm Ops we'll be using that means we'll be using different different platform we'll be running about Bedrock okay AWS bedrock we'll be learning about let's say gcp vertex AI verx so these are the llm Ops platform okay so we'll be uh using this lmos platform to access these are the model and on top of that we'll be creating the application fine so this is what actually we'll be explaining later on guys so first of all try to see how we can implement this production ready project with the help of openi model and there is another reason actually we are using open model because if I uh let's say if I'm using open source large language model you will see that open source large language model size would be very huge let's say around 10 GB 20 GB and this model you can't execute in your local uh machine that means your loow configuration machine and if you're deploying this project to the cloud platform there you have to take good instance that means you have to take GPU based instance with higher Ram higher CPU higher GPU and just try to consider about the cost like how much how much cost actually it will take that cloud platform you can go to any kinds of cloud platform you can see their instance actually type if you're taking GPU based instance type with higher Ram higher let say CPU you'll see that per hour it will cost you like more amount of money okay so again you are increasing the cost here whenever you are using open source large language model okay without any kinds of LM Ops tool llm Ops platform you will get the difficulty for sh right so that's why we'll be using here openi model although it will charge you but it will charge you less than uh the open source model actually you'll be hosting in future okay this is the idea here so now what will happen this uh rank results will go to the llm even this quy also will go to the llm and llm will process L will try to understand the query as well as the rank results whatever results actually your knowledge Bas is returning based on that it will give you the correct response okay correct response or you can talk about answer correct answer let's say you are asking one question let's say I got fber what can I do so it will first of all refer the knowledge base it will try to find out the let's say fever diagnosis fever medicine then with respect to that it will give you the um response got it so this is the entire system actually will be implementing and this is what actually our front end so this is what actually our front end many people also ask me like sir uh just try to create some application with the help of good front end development as well so that's why I also kept this front end development here we'll be creating one beautiful user interface so that user can give the quid here I think you use the chat GPT chat GPT is having one beautiful user interface okay so we'll be also creating this kinds of chatbot kinds of interface so that user can give any kinds of query and they can get the response fine so this is the entire architecture of our project guys okay I hope it is clear now now technology wise I already told you here we'll be using uh large language model openi okay open LM we'll be using then here we'll be using Lang chin as a Genera VI framework to develop the entire project then here we'll be using Vector database why is Pine con okay Pine con is a cloud uh cloud-based Vector database okay so there actually you can create a um instance and you can store your vector and here to create the user interface we'll be using something called flask okay flask is a python framework you can create web application okay with that got it uh yeah so I hope these are the actually technology we'll be using as of now and if I need it anything I'll tell you okay later on now guys what I have to do guys uh first of all let's create one uh yeah so let me also write we'll be also using GitHub okay GitHub to do the version controlling of our entire application fine and later on we'll be also deploying this project to the AWS Cloud okay AWS Cloud so we'll be learning about the simple deployment as well as the cicd deployment okay both will be learning so guys this is the entire agenda so now let's open up our GitHub and try to create one GitHub repository first of all with our project then we'll be starting with the implementation fine so I'll go to my GitHub guys so this is my GitHub you can also follow me here I have created lots of repository that might help you a lot so just go to the repository and here uh create one new repository and give the name let's to create a med I'll just write end to end okay medical chatbot generate so this is myo name you can give any repo name as for your requirement now I'll be keeping as a public repository because I want to uh share this code with you so everyone can see that I'll add the readme file as well as I will add the dog ignore file so here I'll be using Python Programming I'll be selecting the python let's take the license you can take any license I'll be taking Amit license now everything is fine now let's create the repository okay now let's SC the repository I'll copy the link address make sure you selected HTTP 1 Now open up your local folder so let me open up my local folder and here I'll open up my terminal you can open up your let's say G bash you can open up your anacon anything and just write the command G clog and press the link here so it will clone that repository in your local machine now see it has clone now let me go inside this folder you can see currently I'm inside Lang chain project okay now I want to go inside this folder so I'll just write CD CD means change directory I want to go inside end to end medical chatboard gen this folder okay now if I now if I hit enter you will see that I'm inside this particular folder right now now I'm inside this folder now inside this folder I'm going to open up my vs code so let's open up my vs code so this is my vs code guys okay now let me Zoom now the first thing guys what I have to do I have to create uh one virtual environment here because I already told you if you are creating any kinds of end to end project first of all create a virtual environment then you have to set up all the requirements you need here so here let me add all the step you need to perform M so here I have added all the stem in the readme file uh first of all you have to clone the repository if you're using my repository first of all clone it then try to create the environment with this command so make sure you using python 3.10 okay so I'll copy the command you can give any name I have given LM app you can give any name here fine so what I can do I can I think use medical medibot okay I can use medbot you can use any name now let's create the environment so guys as you can see my environment is created now let's activate for this you have to execute this command all the command I have shared in the RM file just try to copy paste and I will also push this code in my GitHub so that you can see the changes now see medical Bo has been activated fine now the next thing we'll be creating one file called requirement. txt file and inside that I'll be mentioning all the requirements I need and we'll be installing all the requirements here so guys here are the requirement list so these are the requirements actually I need to implement this uh project we'll be using sentence Transformer because here we'll be using open source embedding model to generate the vector embedding so that's why we'll be using sentence Transformer and sentence Transformer uses actually Transformer library that means it will use hugging F platform hugging fist H to download that model open source model and with the help of that model actually we can generate the vector embedding and here I'm installing one specific version you can also install the latest version but this is the stable version I'm installing so far then Lang I you know Lang chain then flask we need for the user interface then P PDF here we'll be using PDF document that's why then python. ENB why because here we'll be managing one EnV file okay EnV file so inside EnV file we'll be mentioning our openi credential as well as the we'll be also mentioning our Pine con credential because Pine con you also need to use one API key to authenticate with your account fine then you can see I'm installing Pine con and if you want to install Pine con you need to install this to library Pine con gr PC okay then you you need to also install Lenore Pine con then langen community langen openi and langen experimental okay so these are the dependency packet you also need to install so let me install all of them I'll just try to save I'll open up my uh readme file I'll copy the command and here I can execute now see it will install all the package one by one so it may take some time guys let's wait once installation is completed I will come back so guys as you can see my installation is completed there is no error that means congratulation you have installed successfully everything now let me minimize the screen and now let me save everything yeah now see whenever you are implementing any kinds of end to end projects the first thing you have to create the project okay project folder structure struct structure okay this is very much important guys that means you have to create the entire project folder structure like in which folder in which file you have to write which function okay that's how you have to create the entire project folders structure and again this is your uh actually let's say design pipeline okay it's not like that you have to follow my pipeline always you have to follow my project folder structure always if you feel like okay this folder structure is good for you you can use it just try to design with respect to your project requirement with respect to your let's say uh I mean Choice okay no need to follow my one but if you want to follow my one you can also follow I usually prefer one project folder structure okay so I'll be showing you how we can implement this particular project folder structure that means automatically we be creating the project fold structure here so here we'll be uh creating one file so the file name is template template. Pi okay this is going to be a python file so this will create the entire project template for me so here only I need to give my one time effort that means I'll be writing the entire logic to create the structure going forward whenever you want to create any kinds of product for the structure you can execute this file it will automatically create otherwise what will happen you have to manually create it let's say you want to create a folder you'll be clicking here you will give the folder name let's say test okay then I want to create another file inside folder again you'll be opening this folder inside that you'll be creating another file let's say test. Pi okay so this is like very time-taking task let's say you want to create 100 of folders 100 of files just try to consider how much time it will take even you have to manually check everything whether this file is present inside this folder or not so it's not a efficient way to create the folder structure okay you can create it but I won't be suggesting you because it will take lots of time so what you can do you can create one template file and a template file you can write one very basic code and this code will automatically create the project folder structure for me let me show you how we can create it so for this I'm going to use some package I'll using operating system package then I also need something called path Li okay so let me UT so from it is available path Li input okay path I need the path why I need the path I'll tell you later on as of now let me import all of them then I also need something called login okay so login is inbuilt package inside python so here I'll will also log the information in my terminal fine so first of first of all you have to create an logging stream okay so basic loging configuration you have to create so that's how you can create a basic loging configuration see okay this is the basic login configuration so here you have to write login. basic config inside that you have to mention the log level first of all so here I to create a information label log and this is the format of my log that means first of all it will save the uh asky time that means the current in uh time stamp like let's say whenever you are executing your code it will save that time stamp that means the time date so it will save everything then after that it will also save the log message like like which message you want to show okay it will also save that so whenever I'll execute the code you will get it okay what I have written here as of now just try to consider you have to mention this loging string here fine okay now you have to give a list of the file you want to create so let's say left hand side I want to create some list of the folders and file so for this I have created a python list you can see so the name of the list is list of the files inside that I mentioned I want to create a folder you can see folder name is SRC okay so it will create a folder here called SRC inside SRC I want to create a file called init.py that means underscore init.py and this is nothing but my Constructor file if you already familiar with OP concept I think you know what is Constructor so Constructor is nothing but it's a special method it's a let's say the magic function it can execute automatically inside op but you can also create this is uh this actually Constructor as a python file okay so if you open up any kinds of n2n project now let me show you so if you go to any kinds of end repository let's say if I open tensorflow tensorflow uh GitHub it's a open source project so I can also see the their code implementation see they have also uh follow the modular approach see if I open any kinds of folder let's say if I open Java folder or let's say python folder now if you just go below you'll see this Constructor file is present here okay why because they have created so many folders you can see so many folders so many folders and inside that they have created different different python file so this folder would be considered as the local package that means they can also import some functionality from this folder let's say I want to UT uh let's say this one this particular function let's say this function input graph dep what I need to do I need to write so what I have to write I have to write from tensor FL dot python okay then dot this file and import I want to this I want to import this function okay that's how I need to import this file that means instead of writing like all the function in just one file what I'm doing I'm creating a different different folder okay different different let's say component inside that I'm keeping those functionality okay and whenever I need it I'll be using it later on inside my endpoint okay this is called actually modular approach and to uh whenever you are uh like following this modular approach whenever you are creating this kinds of folder to keep your function in a file make sure you are creating this Constructor file because this folder would be considered as your local package okay because later on you have to import it let's say from tensorflow do python import this function so whenever you will will be importing uh make sure your python interpreter will consider this is my local environment okay that's that means I can import something from that folder this is the IDE okay so that's why we are creating this Constructor file because SRC is my Lo folder inside that I'll be creating one file called helper. Pi okay and helper. Pi inside helper. Pi I'll be writing all the functionality let's say I want to inest the data I want to let's say extract the information I want to download the hugging face model all the functionality I'll be writing inside helper. Pi okay this is the idea now apart from helper. PI I need another file so inside SRC I'll be creating another file called prompt okay prompt. Pi inside that I'm I'm going to write the prompt okay prompt whatever prompt actually I need the prompt let let's say whatever system prompt I will be using inside that I can write it here now I want to create a EnV file then I want to create a requirement. txt file oh sorry requirement is already created I can remove it as of now I don't need it I want to get up setup.py file why setup. P file because I want to install these are the uh folder as my local package for this I need setup. Pi okay previously I think I already explained this part then app.py then I want to create a folder called research inside that I want to create a jupyter notebook file that means trials. i1b so inside that first of all we'll be doing the jupyter notebook experiment that means the entire project will be implementing through jupit notebook then we'll try to convert everything as our modular coding okay this is the idea so this is my list of the files and folder I need now I have written a simple python logic let me show you guys it's not a very fancy code code it's a simple python code I have written so this code it will Loop through this list one by one that means it will Loop through this list one by one see I'm looking through the list it will give you the file path the entire file path then you are giving this path to the path function why you are giving to the path function because see here we're using Windows machine and windows by default use backwards slash I think you know see if I if I click here see windows by default use backward slash but which slash actually we're using here we are using forward slash okay but in Linux Mac actually uh they will be using uh this forward slash but in Windows you have to use backward slash so that's why to uh I overcome this issue we we are using path uh actually path library from path leap see how it will work so let me show you one example so first of all I will open up my python okay now here let me first of all import so from path Le okay import PA okay then let's define a path here so I'll just write p is equal to test let's say slash uh T do PI okay let's say this is my uh folder inside that I'm having one file now what I will do okay it has given me one error let me see the okay so test is not defined that means I need to give inside double quotation because it's a path now so this should be a string type data H now fine okay now if I give this P to my path uh function now see what will happen it will automatically detect my operating system based on that it will convert that part see it has given me Windows path it has automatically detected my operating system based on that it will convert this part to the windows path let's say you are using Linux you are using Mac automatically this path would be converted to that operating system okay so that's why instead of manually giving that path as a backward SL what I can do I can give to the path function path will automatically take care that means we can execute this project in any kinds of op system okay otherwise uh in some of the operating system you will might get some issue okay that's why we have to always handle these kinds of scenario got it so whenever you are designing your software make sure you are handling the these kinds of scenario and you are making your application more robust that means in production it won't be failing whenever it is failing in the production this is not a robust application always you need to take care then after that what I'm doing I'm just splitting my folder name as well as the file name with the help of this actually function so inside oper system path. spit so what path. spit will do it will split your folder name and your file name that means inside this file directory it will uh give the folder name inside the file name it will give the file name only okay so you can also execute and test so let me show you so let's say this is my path now so this is my folder and this is my file now if I use first of all let me import operating system so if I give WS do path doit okay inside that I'll give the P now see if I hit enter it will give me one couple see so in the first item it should be my folder and the second item it should be my file okay and this is what actually I'm storing inside two variable okay two variable I'm doing the tole unpacking here okay I have C then first of all I have to create the folder okay I have to create the folder and to create the folder I'm using w. make directories so first of all I'm checking whether this file directory it is empty or not if it is not empty that means definitely I have some file folder name here so I'm Crea the folder you can see then I'm performing the login operation I'm just doing the login in my terminal I'm telling creating a directory file directory from the for the file of file name okay this is the log message actually I'm printing in my terminal then after that I'm also creating the file that means folder creation is done then inside the folder I also need to create the file for this I have written this code actually first of all I have to check whether this file path is exist or not if it is not exist that means if it is not created I have to create it otherwise it is already created no I don't need to create it and I also check the size of the file PA that means the it is zero or not let's see if it is not zero that means inside that file I have written some code so I don't need to delete that file again let's say you want to create again it only be replacing that file instead of that it will skip that file so that's why I also checking the size if size is empty I'm creating this file you can see and I'm doing the long information otherwise I'm telling this file is already exist okay so this is the simple python code I have written now see the power of this script okay see the magic now left hand side see there is nothing there is no folder structure no file now if I execute this script now see what will happen I'll clear I'll simply execute this template. Pi file see template. Pi uh see automatically it will create the folder structure for me got it so it's just a one time effort guys you have to like write this code only one time and later on you can use it uh every time let's say you want to create another project copy this file write to execute it will automatically create a folder structure for you let's say in future I need some more more actually let's say uh folder or let a file let I need another file called test.py I'll just add it here make sure you are giving inside a string okay and you are giving a comma here because it's a list okay now see I'll execute it again it will automatically create that for me see test. Pi is also created that's how you can add as much as file and folder you need okay it will automatically create you don't need to manually create it here okay this is the Advan to use this template. P file guys okay I hope it is clear now you can check it out since resource this trial. i1b file is created now inside SRC init created helper created promp Created okay you can see init created helper created promp createdb also created app created setup dop is created okay everything has created so now let's set up our project as my local package okay so for this I'll be writing the setup.py code and this is a simple code guys I think previously I also shared so this is the setup.py code first of all give the project name that means uh the package name you want to give let's say gener project because if I show you currently in my terminal uh inside my environment this uh package is not present so I'll just write P list see genv project is not there okay so I have to install as a gener project okay for this we'll be using the setup.py now give the version author name email okay and find package we'll try to find this underscore init.py and whenever this init.py is present it will consider this folder as my local package okay let me show you now to install this one you need to give one command inside requirement. file called hypen e space do okay HP in is space this is the command now let me save now let me again install the requirements now see automatically it will install as my local package now see one EG info file would be created here and whenever this EG info file is created that means this uh project has been set up as my local package let me show you now if I again do the P list operation now see Genera VI should be there see gener VI POS is there now it is my local package okay that means now I can import anything from this SRC itself got it so this is the entire idea now let's commit the code in my GitHub guys so for this I'm going to open up my G bash and here I'm going to write one commment called G ad then G commit Ty a m now let's give one commit message let's say folder stuct are added then let's do the push operation so get push origin main okay now it has pushed now if I want to check let's go back our GitHub now let's refresh now see it is pushed in my GitHub and readme is also updated now you can copy all the command and you can execute in your system okay I hope it is clear great now the first thing we'll be doing the notebook experiment okay first of all we'll be implementing the entire project in our jup notebook then we'll be converting as our modular coding and after implementing jupyter notebook only you just need to copy paste operation okay that's it now first of all let me select the Kel so I already created one environment called medbot okay so let's select it now let's test whether this working or not so I'll give one print statement let's say print okay so this notebook should work now it is telling just try to install some IP 1B cardal package so let me install because I'm using jupyter notebook inside my vs code for this you need some additional package and it will automatically install for you so it will take some time after that you will see that execution would be completed so let's wait okay guys so as you can see execution is completed and it is giving me okay message okay it's fine now one thing I just wanted to show you let's say if I show you my project working directory right now let's say PWD so I'm inside this resarch folder okay inside resarch folder but I want to load my data and that my data would be present inside my data folder let's say I'll create a folder called Data okay inside that I'm going to move the PDF I'm having let me move quick quickly so guys as you can see inside data folder I'm having the PDF okay PDF document now see whenever you are implementing any project make sure you are working in the project directory okay that means your root project directory so this is my root project directory but currently I'm inside this resarch folder but if I want to go get back okay inside my project working directory so what I have to do I have to execute one more command so let me import operating system package inside operting system you are having something called change directory okay let me show you so OS do CHD that mean change directory to hire one folder back so for this you can write do slash okay dot do slash means so do do slash means it will get back one folder back okay let me show you now if I execute now if I again show you the PWD project working directory now see I'm inside my root project folder itself okay so that's how actually you can check the folder location first of all okay otherwise what will happen you will get like path issue sometimes you'll get let's a data not found and so on okay so that to prevent this issue actually make sure you are working in the project folder folder directory always okay this is the Su I want to give you so first of all let's import some of the library here so here I'm importing uh Lang Chen from Len actually I'm importing P PDF loader and directory loader because I told you I will be using PDF documents and to load the PDF documents I need this P PDF loader it is present inside a directory okay that's why I've given directory loader then I also need to perform chunking operation and to perform the sing operation I can use recursive character text splitter okay I think you already familiar with these other thing now let me import all of them now here to load the PDF here I have written a function let me show you so this is the function I have written guys okay extract the data from the PDF itself so the function name is load PDF it will take the actually data directory okay data directory and it will only load the PDF documents okay it will only load the PDF document let's say you want to load the docs document txt document at that time you can give the extension here fine so with help of P PDF loader it will extract the information from the PDF itself okay and whatever uh let's information it will extract it will give give me as a documents okay you can see now let me show you the let me execute so it will return me extracted data so here I've given the path okay so it should be data okay data directory now let me show you so if I execute now see it is extracting all the information from the PDF itself and it is having almost 700 actually pages so it will take some time so let's wait so guys as you can see my extraction is done now if I show you the extracted data see this is the entire extracted data actually you got okay from all the pages it will show you the data now let me comment it as of now H now what I have to do I have to uh perform the chunking operation because you remember see the architecture I have extracted the documents now I have to perform the chunking operation okay and to perform the chunking operation I will be using recursive text splitter so with that I have created another function here so split the data into text chunks so it will take the extracted data and it will perform the chunking operation you can see so here is the code so chunk size is 5 500 and chunk over live is 20 I have given and it will perform the chunking operation and it will give you the chunk RS okay now let me show you so now if I execute the function and if I show you the length of the text chunks now see you got 7,20 chunks here guys 7,20 chunks you got just try to see how much data actually you have in the PDF okay and this is enough information to create one medical chat B I believe that fine that's why I have taken this big data guys now see this is the inter CH actually I got now what I have to do I have to use one embedding model to like perform the vector embedding and this embedding I'll be storing to the knowledge base that means inside my Pine con Vector database okay so now let's download one embedding model from the hugging pH okay so here is the function I have written guys download H hugging face embedding model now for this I need to import this package first of all let me import so this is the package guys hugging face embedding I'm importing from the Lang chain embedding okay now let me execute H now this function will automatically download one embedding model see this is the embedding model I want to use let me show you this embedding model so this is present inside hugging phas so the name of the model is all mini LM L6 V2 so this is one actually embedding model and it will give you Vector dimensional 384 Dimension four dimensional Vector actually it will return you and this Dimension you need because whenever you are using pine con Vector database you need to also mention the dimension of the vector like like what is your vector dimension whenever you are creating the class turn now whenever you are creating the index that time you have to mention this Dimension so that's why always try to remember whenever you are using pine con Vector database try to see what kinds of let's say embedding model you are using and that embedding model uh Returns what kinds of dimensional Vector just try to see the documentation you will al already get it fine now let me download the embedding model so let me execute this function I'll download the embedding model see it is downloading from the hugging phase Hub so it will take some time let's wait so guys you can see my has downloaded okay now let's test the model whether it is able to convert my sentence to Vector embedding or not so for this I have given one sentence here hello world and there is a function called embed query so it will automatically give you the vector embedding and I'm also checking the length whether it is giving me 384 dimensional vector or not now see if I execute the program now see length is 384 and if you want to see the vector see this is the complete Vector actually you got okay I hope it is clear now let me comment this line as of now got it now what I have to do guys I have to initialize my pine cone uh inside Pine con actually I have to store these are the vector okay the complete Vector actually I'll be generating from my TCH CHS so for this let's open up my Pine con so if you want to open up the pine con just write Pine con. so this is the website and make sure you created One account guys just do the sign up operation with your email address you can create our account so for me I already have one account let me login so guys as you can see this is my Pine con uh website okay this is the interface of the pine con and this is one of the amazing Vector database provider guys you will be loving a lot even I personally like it so here what I have to do guys I have to create a index that means I have to create a cluster in that cluster actually I'll be saving all of my Vector they have also given the quick uh start like how we can set up the pine cone how we can let's say stored the data see all the code example they have also given okay so we'll be following the same approach to store our embeddings to the Pine con but before that you have to collect one API key so how to collect the API key left hand side you can see one API key option is there just try to click here for me I already created one API key if you don't have just try to create API key just give the name let's say I'll give test or you can give any name let's create the API key okay so this is the API key now just try to copy the API key guys and try to mention inside this.v file so I'll open the EnV file so let me paste it here and make sure you are giving one key name here that means this is your Pine con API key okay that's it and make sure you are writing this thing in a string got it h now let me open up my trials. IP andv now what I will do I'll just create a cluster here so let me go back to the database and don't share this key with anyone guys otherwise they will be also able to access your account okay I'll be removing it after this recording so for you don't need to share with anyone now inside pine cone either you can manually create the index let's say you can click here create index let's create one index let's say I want to create uh let's say anything you can give test now Dimension let's say 38 4 the same Dimension I will give here the dimension actually I'm getting cosine Matrix just keep it you can also select different different Matrix like what kinds of let's say similarity Matrix it will apply whenever it will do the semantic SCE operation I want to use cosign score now now just keep it everything as default you don't need to change the provider see AWS is the free one if you let's say sign up for the first time you can create one to two cluster here with the help of AWS cloud provider but if you want to take this premium subscription that means you want to create a multiple class if you want to take some more space you can see see if you're using free plan you will get 2 GB storage here but if you have more than 2 GB data that time you have to take the premium subscription okay that time actually what you have to do you have to take their plan subscription plan let's see if I take this one uh Google Cloud now see see the price plan see this is the price plan actually they have so with respect to that you can also purchase their uh let's say machine okay but as of now I'll be using the free free services only I don't need the let's say premium subscription of the pine gon but if you are creating the actual project if you need more spaces that time you can do it so I'll be selecting the AWS cloud provider and Reon just keep it everything as default only just need to give the name okay name and a dimension that's it 384 okay now let's create the index so this is the manual approach to create the index guys okay this is the manual approach see this index is getting created it is getting initialized and once it is initialized see it would be connected okay see it is now connected okay now if you want to connect it you can execute this python code and you can insert your data all the conf code they have already given okay but I don't want to create this index manually I want to create through the python code so let me delete it so if you want to delete just click here and try to delete the index so you have to give the name okay I'll be deleting because I will be creating through the python code and how to like create through the python code guys I think they have already given one starter code remember so here you can give the uh index name like which index you want to create and create index Dimension you can give here serverless AWS region okay everything you can pass here so now let's use this approach to create the index so what I'll do I'll go back to my vs code and I already prepared this code for you so let me show you so this is the code only you just need to change the API key so let me change the API key the API key I have collected here let me copy and let me change it here or I think I can read it from the environment only so what I can do I can import the environment just a minute so let's import so from EnV import load EnV okay then I will load the EnV now simply I'll get this Pine con API key from my environment and here it will save inside this variable now this variable actually I'll pass here okay so nobody won't be able to see my API key that time so this is the best approach guys you can also follow now you can give the index name let's say I give medical bot medical bot let's say this is my index name and here you have to give the dimension so make sure which uh actually U embedding model you are using and what is the dimension size 384 that means it's fine 384 keep everything as default cosine s a US one okay no need to change anything because we are using free uh cluster here fine now once you will execute this code okay once you will execute this code you will see that uh your U index would be automatically created in the pine let me show you so if I see if I execute discode now see what will happen so guys execution is done now if I get back to my pine cone and if I refresh it here see medical chatboard should be created here let me show you see medical chatbot is created automatically it has created and now it is active and running okay now what I can do I can uh convert our uh let's say chunks to the vector embedding and I can store inside the pine con Vector database so for this uh what I can do so for this first of all set this fine cone uh API key as an as your environment variable because uh whenever we'll be storing the let's say data to the Pine con so Pine cor internally looks for this API key inside the environment variable okay so for this we are using operating system Environ okay Environ and this is the key name guys I've giving and I'm setting my Pine con API key okay whatever API key I'm loading from myv file so it will set inside my environment variable right now okay so whenever I'll execute my Pine con code I don't need to like again and again pass it okay again and again I don't need to pass it here this this is the advantage now see to store the vector embedding this is the Cod snippit you have to execute guys so you can see this is the code snipp it let me comment here now I'm importing langen Pine con import Pine con Vector store okay now inside Pine con vectory store you have one function called from documents so first of all you have to give the documents that means the T chance the Tex CHS I have created remember so this is the text chunks I have created okay so this text chunks you have to give then you have to give the index name so what is the index name I've given guys I think remember this is the index name that means this index name we it is already created that means inside this index it will store the data got it so make sure you check this other the variable now I need to give the embedding model so I think remember we downloaded one embedding model OKAY from the hugging face out got it so this three parameter you have to pass here now see if I execute this line if I execute this line it will convert all of my data to the vector embedding and will restore to the uh Pine con vector database and how many chunks I got guys I think remember I got 7,20 chunks that means 7,20 chunks Vector will be P stored inside my Pine con so it will take some time guys let's wait after execution after executing this code I'll pause the video and once this Vector will get stored in my Pine con I will come back again see let me show you if I go to my Pine con right now and if you refresh the page here see all of the vector would be stored here even you can also see the count let me show you see as of now 864 let's say chunks has been added now see th now see you can also see the visualization of the vector it's amazing right so whenever you used to use local Vector DV it was not possible to visualize our Vector but here it is possible you can see you can also see the score that means um centic score like what is the score between this Vector this vector and this Vector got it this is one amazing visualization guys you will get in the pine cone and see this is the entire Vector representation of this entire sentence okay entire text okay and even it is also showing the page page number with in which page it is extracting the data and what is the PDF name as well okay every information you can see here even you can also perform the qud operation that means the way you perform the SQL qu you can also perform the quy operation here manually everything is possible but everything we'll be doing through the python code I'm not going to use the manual approach here now see the vector count guys so 4, 120 Vector has been stored now let's wait uh once it has saved all my all of my Vector dor I'll come back and I'll show you so guys as you can see my execution is completed now if I get back to my pine cone and if I refresh see all of the vector it has stored here like more than 7,000 Vector it has stored inside my Pine con index okay now what I can do I can use this uh index as my knowledge base that means we'll be connecting my large language model with this knowledge base and will be asking the query and it will do the centic search operation here okay this is the idea now let's get back to my code editor now see I already created the index and I already stored my Vector there now I want to load my existing okay existing index if you want to load the IND existing index what you can do you can use this code cipit okay see again I'm importing Pine con Vector from Lang and pine con and there is another function called from existing index okay from existing index you have to give the index name so the index name I've given the same index name and you have to pass the embedding model the embedding model you have downloaded now see if you execute this line of code it will load the index that means whatever index you have created and all the vector actually it will load and will give you the doc Source doc Source object okay this is on object doc Source object now you can also perform the retrieve operation here that me you can perform the similarity Source operation here let me show you one example there's a do as reter search type similarity search keyword three that means it will give you three relevant answer let me show you so if I initialize my ret object and now I will ask one question here so this is my medical data I will ask let's say what is acne okay acne so I think you know inside this PDF I'm having acne related dis dis also let me show you so if I press contrl F acne so guys as you can see this is the acne disease what is acne and all so you can see acne and AC related actually treatment okay medicine they have suggested each and everything so I asking one question here so what is acne it should give me the relevant uh answer okay for the acne from my knowledge base now let me execute and let me show you now see if I show you this Rel uh retried docs it will give you three results actually three results even it is also showing the source okay from where it is it has referred now see different different actually uh acne related response it has given me okay because I have set SAR keyword is equal to three it will only give me three response okay but I don't need these kinds of output I need a complete let's say definition okay what is acne got it so for this what I have to do guys I I think you remember I have to integrate my large language model that means here we'll be working on user will give the query this query will go to B knowledge will give the rank results I'll be using the large language model so LM will process this rank results as well as the qu and it will give me the correct response okay so for this let's initialize my model so I already told you we'll be using openi model so openi so let's initialize my open model and I think you already know what is temperature and Max token so it is giving me one error okay it is giving me error because I haven't set my open API key so let's set the open API key I'll open up my environment so here is my API key guys so make sure you create one API key and just try to paste here and similar wise I also need to set this API ke as in my environment variable okay so let me execute this code so here what I can do I can duplicate this line and here I can write open API key so it will also give me my open API key then here whenever I'm setting as an environment here I can also change open a key open I key okay now let's set this one string expected non time my okay so I think I have to load it every uh again then I have to execute now it should work now it is working fine now if I get back here now if I initialize it it should work see successfully have initialized my large language model now I have to create the complete chain for this let's import some Library previously I showed you now how to create the rag application there I think you remember we were importing this uh Library create T chain create stop document chain okay create promp chat promp template okay everything I already showed you there so we are importing the same code here now this is going to be my system prompt so here I want to give this prompt in my language model OKAY large language model now I'm going to create the complete prompt promp template you can see this is the system prompt and whatever input user will give that means the input actually have given it will come here and it will give you the complete output now let me initialize now let's create my chain so create aop chain inside that you have to give the llm as well as the prompt and whatever object you will get in inside create Ral chain you have to pass it as well as the r that means your vector restore the vector restore you created okay ret object now let's initialize my chain now let's ask the question so here I will give what is acne okay what is acne sorry acne now see see the response guys see acne is a common skin disease characterized by pulse on the face chest and back it is caused by uh clogged force and become inflamed due to the oil dead skin cells okay and bacteria treatment and so on see that means it has given me the correct response if you open the PDF now this book right now and if you read it here you'll see that it it has given me the correct response now see if I giving any other question which is not relevant about the PDF what will happen see now see if I give any other let's say question let's say I have given what is stats that means what is statistics it is telling me I don't know because here I have given the prompt now so if you if you're not getting the context that means here this question I'm asking this is out of context that means the data I have given to my model OKAY the knowledge B I have given uh to my model so this information is not available here so that's why it is telling I don't know okay so this is the complete custom uh actually system we have created like custom chatbot we have created which is only referring our custom data okay I hope it is clear so guys this is actually entire demo like that's actually be implementing the entire application now you can ask any kinds of question let me show you so you can take any other disas let me show you or let's take any other disas okay let's take these dis actually this one I'll copy and I'll come back here then I'll ask here now let's see see uh it is giving you the response growth hormones resulting the abnormal growth okay see that means this is the correct response actually I'm getting now if you see the image so the same thing okay so you can see um this disease is a abnormal releases particular chemical from the blah blah blah okay so you can read it so that means we are getting the correct response fine now let's try to convert this project as our end to end uh implementation right now that means we'll be also implementing the UI but before that I have to first of all create the modular coding okay so what I'll do guys I will first of all open up my helper dopy inside H.P whatever let's say uh utility related code I have written let's say loading the data then U creating the chunks then loading the embedding model all the function I'll move inside this ala. Pi so let me open so inside that I'm going to import all of the library see I just copy pasted the code from my notebook only if you open the notebook the the same code actually I'm composting and why is giving the error because below you can see I have to select my environment the correct environment let's say medical B now this error will be disappeared now see all the function I'll just copy paste here all the three function I have written now my load PDF then uh this one text split and this one my load embedding model so here I kept all the function you can see because I want to import from here so these are the function I don't want to create inside my endpoint otherwise my code base would be like messy right that's why I am creating inside this particular file now let me save and inside prompt actually what I will do I'll give the system prompt whatever prompt actually have written so here is the prompt guys I think you remember I'll copy The Prompt and inside prompt. Pi I'm going to mention it here okay so from here I'm going to open the prompt let's see in future use uh you want to change the prompt you want to give any other prompt you can open this prom. P you can change here it will reflect in your code okay no need to open your actual code implementation that time F so let me close this at the tab as of now it's not required now yeah so helper is fine now what I will do I will create another file here and I will name it as store underscore index uh do file okay file why because let's say you want to update this book let's say you want to add some more information that time again you have to store all the embeddings to the knowledge base that means inside your Pine con yes or no right and to store it I again need to execute one like end point that means store index. Pi whenever you will execute it it will load the new information and it will store to the vector database again fine so for this what I will do uh I'll prepare this one so see whatever code I have written now here that means I extracted my U let's say documents I created the chunks downloaded theing model after that I pushed everything to my Vector database okay see all the let's say Vector database code I have written everything I need to write inside dat month so let me import all of the library so you can see I'm importing from SRC helper that means from SRC helper so inside helper I'm having three function load PDF then text split and download Face embeddings okay see I'm importing all of them Hing face embedding okay then I'm also importing Pine con then Pine con Vector store then ladb and operating system first of all I to set my environment variable that means my credential okay openi sorry Pine con API credential then I will be loading my data extracting the data creating the chunks then I'll be loading the embedding model see load file that means I'm loading the data so I have to give the data location so this is my data location then Tex spitter will run then download the embeding mod okay then after that I will initialize my Pine con code base the same code guys if you open the the Jupiter notebook file the same code see Pine con initialization it will create the medical chat board okay Medical Board that means this bot it will create okay then uh it will actually create the index then it will store the embeddings okay so at the very first time you have to execute this line guys okay very first time you have to execute this file then uh whatever actually let's say data you are having it will uh do the vector conversion that means aing conversion then it will store to the vector database okay now what I'll do I'll just delete my previous embeddings whatever I created uh this uh cluster I want to delete it because I now I'm doing the modular coding now so I'll be executing everything from my modular coding itself now let me remove it now see it will delete it after sometimes you'll see that it won't be visible here now see make sure guys before launching your application first of all you need to execute this store index. Pi make sure this index should be created other you won't be able to do the query operation right so at the very first time you have to execute this store index. Pi okay then you will be launching your application that means app.py and this this one you have to only execute one time not multiple time multiple time when you will be executing whenever you will update the data let's you want to add any other data one more PDF that time you'll be executing this file okay otherwise just keep it as default that's it now let me save now I think this is deleted now see there is nothing now what I'll do uh let me show you how it will create everything so I'll open up my terminal let me clear now let's execute this store index. Pi python store index. Pi now let's execute see again it will perform all the operation whatever things we have done in the jupyter notebook so let's wait after uh sometimes you'll see that your uh index would be created and inside index all the vector would be stored so guys as you can see my uh index is created now if I open it up inside that uh now it will store the embeddings one by one all the embeddings it will save so guys as you can see my execution is completed and it's it has stored all of my Vector now that means my um this store index is working fine I'm successfully able to store my Vector now let's create the Endo okay that means my um I mean main application so user will uh start this application right now so here I already told you we'll be using flask okay so here I already told you we'll be using flask here and if I'm using flask I need a HTML and CSS code to create the um one beautiful user interface so I already created one HTML and CSS code for you guys if you don't it's completely fine again I'm telling you there are so many template you will get over the Internet there is a website called bootstrap previously I also told you I think bootstrap okay bootstrap website so from here you will get different different example even you can also see different different template it is having even if you search like chatbot HTML CSS free template free template you will get different different actually template see different different template you can also download the source code you see code is also visible you can also download even you will get some weite see different different chat template okay different different chat template you can use it okay it's up to you now what I will do I'll uh quickly just show you the HTML CSS code I have prepared for this I think you know if you're using flask you need to create one folder here called template okay templates so inside that you have to create a file called index. HTML okay now let me show you my HTML code I have prepared or it's a chatbot what I can do I can name it as chat. HTML okay chat. HTML now this is the entire HTML code guys I prepared okay save it now I need to create another folder folder CSS called startic so these are the requirement folder folder um flask if you're using flask inside python you need to create this the folder inside startic I'll be creating a file called style do CSS okay now let me also paste the CSS code I copyed from the internet okay so this is one basic template I created now whenever I will uh show you my application you will see the user interface whatever the user interface I created now let me create my endpoint app. Pi now inside app. Pi I'll be integrating all of the functionality I have prepared so far so first of all let me all the requirement package all the required package actually one by one so here I'm using flask I have imported flask from the flask I imported all the required functionality you can see then imported uh download hugging face embedding model okay because I need the embedding object to load my Vector restore I think you know that I need to load this not this actually Pine Con in now so where is the pine Cod index so here is the pine code index so I need to load this index and to load this index what I need I need the let's say this one embedding object I think remember at the last I showed you loading existing index okay I think you need it okay I think you remember fine so that is why I have to U import it then I'm importing you can see Pine code is store openi rable keyway that means whatever let's say I was loading here here these are the thing I'm loading everything fine then I also need to load my prompt so prompt is available inside my prompt. Pi here so I I can UT it so simply I can UT just write prompt SRC do prompt importar that means I want to St everything inside that file okay that's it then I also need something called operating system so import voice that's it now let me initialize my flask to initialize the flask you have to use this code go to the flask documentation you will get it now now let's set all of my open and pine con environment okay for this I need to use the clo in environment package that's it then I will be downloading the embedding model then I will uh first of all initialize my embedding object then I will load my existing uh index from my Pine phone so let me show you see the same code from The Notebook I copied see so I'm loading the existing index I'm made B make sure name is correct medical B yeah it's correct then it will give me the retriever object then I'm loading the open a model then creating the promp template then after that I'm creating the chain okay now I have to create two route exactly first route would be my default route that means user will get the interface of my application chat. HTML would be rendered got it now second route I'll be doing for the chat operation that means user is giving any query to the chatbot so that message actually will be accepting and this message I will give to my llm okay that means you can see I'm doing the inbo operation okay so same inbo operation I'm performing let me show you so here is the invoc operation remember okay invok and whatever response I'm getting I'm printing it as well as I'm showing in in my uh that user interface okay that's it now let me execute my application so I'm running on my Local Host port number 80 de is equal to r that means if you change anything it will automatically update everything so now let me show you my application so let's open up my terminal so I'll just execute python app.py sorry it should be python spelling is not cor python okay now it should be running now see just give the allow permission now see your application is running now let's open up our Google uh Google Chrome search for local host port number 8080 see guys this is the interface we have created and this is one amazing uh interface guys you can see amazing um chat template we have created uh because many people have requested me just try to create one front end part of our application as well beautiful front end part and that's how we can create a beautiful front end part now here you can ask any kinds of question let's say I will ask the same question I'll ask what is acting the acne is a common uh skin disease by characteristic by pimples on the face fine then I will ask another question let's say I got fever what should I do see now this is the response if you are experiencing high fever it is important to seek the medical attention Okay so tell me some medicine now see it is also suggesting some medicine okay related fever now you can ask any kinds of question from the let's say PDF itself any kinds of disease you can ask let's say this is the disease I want to ask I'll just copy and here I'll just write what is this dision all about see it has uh given me the response okay now you can read this uh I mean PDF and you can see that you can ask the medicine uh you can ask for the treatment anything you can ask so this is our chatbot guys this is our medical chatboard we have created and see it is also giving you the one beautiful user interface okay it is also returning now what we'll do we just try to also deploy this application guys but before that we'll be implementing some more end projects then after that I'll uh keep one uh dedicated end to end let's say deployment session there I'll show you how we can deploy these are the project on the cloud platform okay so yes guys I hope you liked it but before that what I will do guys I will comment these are the code in my GitHub so you can also comit from the vs code let's comit from here light um updated let's comit and VMV file would be automatically ignored by the git ignore okay because inside git ignore you have already mentioned it do git ignore would be ignored see would be ignored okay so it w be published inside my GitHub now if I open up my GitHub now if I refresh see all the code has been updated now I can write the further uh let's step as well in the read me file okay so I have added all the step like after that what you have to do uh after that you can uh set your uh uh environment key then run store index then app.py then you just need to local up open up your local list okay now let me comment the changes as well so read me updated and make sure guys you start this uh repository all of you start this repository you can also for so that you will have the reference okay now if I refresh now see readme is updated and you can see all the step I have also added that's how you can also prepare your read me file so that so that if other people is referring your let's say GitHub they will be also able to set up this code okay in their system as well fine so yes guys this is the complete implementation I hope you liked it so that's how we can create any kinds of end to end gener VI B project fine and don't need to worry I'll also show you the deployment even we'll be also discussing about LM Ops uh with the help of LMS also we'll be learning how we can access any kind of Open Source large language model okay as a hosted open source large language model we can use it so yes guys this is all about from this video if you liked it so please uh try to subscribe to the Channel Try to like it and try to share it video will be implementing another end to end projects called source code analysis so here we'll be using Lang chain Vector database large language model even I will also show you how we can create a Content application of the entire projects so uh this is going to be completely end to end implementation guys so I think in our previous video I already showed you one NN implementation we implemented one medical chatbot so here we'll be following the same uh actually process to implement this project as well fine and what is source code analysis I'll tell you I'll show you the entire architecture diagram of this project then I will start the implementation so first of all what I will show you guys uh I will show you the GitHub repository uh creation after uh creating the GitHub repository we'll be making all the setups then we'll start the implementation so let's open up our GitHub and let's create one GitHub repository for this so guys as you can see I'm inside my GitHub so here I'm going to create a new repository and I'm going to name it as n to end source code analysis gener API fine so let's keep it as public repository I'll select the rme file and I'll will also take the G ignore wise python then let's take the license I'll take MIT license now let's create the repository so after that I have to clone it so I'll copy the link address I will open up my local folder and here I'm going to open up my git bash now let's write the command git clone and press the link that's it see it has cloned the repository okay now I want to go inside this repository I'll just write CD that means change directory to my end to end okay uh source code analysis now I'm inside this folder now inside this folder let's open up our uh vs code so let me open up my vs code so here is my V code so guys I think you remember uh the first thing we create a virtual environment okay for a new project so let's create a virtual environment for this you need to follow some of the commands so let me mention in the readme file so you can see these are the step we have to follow so first of all if you're using my repository first of all clone it then try to create an environment with the help of python 3.10 so that environment name is llm m so for me uh what I have done guys I already created the environment in my system so I'll just activate the environment but for you if you don't have the environment just try to create it so let me show you my environment I'll just write cond activate LM see it is already there for me okay now the next thing what I have to do I have to set up the requirements of the projects okay so for this I'm I'm going to create a file called requirement. txt inside that I'm going to mention all the requirements actually I need so you can see guys these are the requirement I need I need open Tik Tok and chroma DB so Vector DB wise I'll be using chroma DB previously I used Pine con you can use any any of the vector DB it's up to you then Lang chain flask so the front end implementation wise I'll be using flask framework then G python why G python I'll tell you whenever I'll show you the architecture diagram this part would be clear then uh python. ENB just to manage my credential okay and I'll be using open large language model you can also use JY you can also use open source large language model but I told you if you're using open source large language model uh you should have good configuration machine okay otherwise you won't be able to execute and that part we will be learning in the LM Ops right now let me save everything and let me install all the requirements so for this you can execute this command so let's copy the command and here I'm going to execute see for me I already installed all the package that's why it's telling requirement satisfied but for you it will take some time now the next thing what I do guys usually I create a template file I think remember project template file so templates do p okay and previously I shared one template code with you I think remember so I'll just copy paste the same code so if you missed out my previous implementation guys please try to check the ENT and medical chatbot implementation so there I already explained this code okay this code how we we have written and all everything I explain in detail okay see I'm using the same code same actually template code now what will happen this code will automatically create the template for me so I already created requirement file I don't need it I'll remove it as of now okay now everything is fine so now if I execute this template. Pi file see uh it will create my folder St so let's see see it has created the fold structure and whatever log actually you have written it is showing in the terminal you can see okay so my folder structure is created now what I will do uh I think remember first of all we perform the notebook experiment that means we'll be implementing the entire projects you our jupyter notebook then we'll try to convert as our model coding okay so for this I'm going to open the resource folder inside that I'm have so inside resource folder I'm having one jupyter notebook file called trials. iyb so here first of all let's select my Kel so this is my environment okay now let's test whether it's working or not so give okay message here yeah so everything is working fine now first of all let me show you the project architecture diagram like what we are going to perform here so guys as you can see this is the entire uh project architecture so here we'll be basically performing question answer over the code base to understand how it works see what happens actually whenever let's say we Implement any kinds of project okay let's say previous L I think you remember uh we implemented one project called n2n medical chatbot and this is the code base we have created right this is the entire repository of our project now let's say if anyone new to this field if actually he's not able to understand this project project like how I have written let's say uh this person will open uh this project let's say he will open this helper. by and now he's not able to understand uh what is this function actually download hugging face embedding or let's say what is this function load uh PDF file and all okay let's say anything anything actually he's not able to understand about the project the project we have implemented he's not able to understand the code we have created right so what actually uh this uh application can do so if you give this uh GitHub repository link uh to our software uh my software what it will do it will try to first of all extract all the code from the repository then it will create a knowledge base okay and with the help of large langas model it will try to understand what you have written let's see now if you're asking any kinds of question let's say what is SRC inside SRC let's say you are having helper. Pi now let's say you are asking let's say what is Tex split function what it does so this model will try to read this code and it will able to give the uh like answer this function does this thing and that is how actually it is working okay that means it will give you the entire explanation of the code you have created okay so this is called actually source code analysis okay now I think You' got it what is the project actually we are implementing so project name is source code analysis so basically here we'll be performing question answer operation question answer operation over the codee base okay to understand how this code works okay and this is the entire diagram you can see guys let's say you are having a source code that means a complete GitHub repository okay that means the complete let's say I mean end to end implementation so first of all what you have to do uh you have to first of all uh let's say extract all of the source code okay then you will be creating um actually chunk okay different different chunks for this actually we'll be using something called context a splitting okay now I think you can see here uh we'll be using something called context a splitting so here is the context a splitting and how context a splitting works so let's say this is your entire source code and I think you know inside Python Programming we use functional programming op programming concept right so let's say you have created different different function I think I told you I had created different different function let's say this is one function let's say this is one example def4 let's say this is the function inside that you are having some code now after doing this context splitting what it will do it will first of all extract all of the source code then it will create different different CHS let's see inside this function you are having let's say 200 200 line of code okay 200 line of code now let's see your Chang size okay CH size let's say You have given uh or let's say I can write 20,000 lines of code okay now let's see your Chun size you have defined 500 okay 500 that means what it will happen 500 okay 500 let's say what that means 500 these kinds of actually tokens would be considered as your one chunks now just try to consider how many chunks it will create it will create different different chunks obviously let's say this is the first chunks this is the second chunks this is the third chunks let's say it has created three chunks okay three chunks it has created now how your model will try to understand whether this chunks the entire chunks so it is related to this particular function let's say there would be so many function there would be let's say thousands of function but how your model will understand this three chunks I got this chance is related this function de F function so what context splitting will do it will automatically tag so see it is automatically tagging so this is the chunks of Def F function okay let's you are having another function let's say def test okay this is that this is the function inside that you have subcode first of all it will perform this splitting that mean chunking operation you will get different different chunk okay then it will also perform the tagging operation let's say this is the tag of test function that means your model will try to automatically understand now now your model will try to understand okay this chunks actually I'm getting this is related to this particular function okay so that's how it will understand the context it will remember the context okay this is called actually context splitting and this context splitting we only perform whenever we are working with uh let's say code okay code data because previously we work with text Data okay text data is a different thing and code data is a different thing that's why you have to follow this thing okay now let me clear my uh huh screen now see what will happen you have to create a vector store yes or no you can see after uh actually getting uh all the text okay all the chunks you using embedding model with embedding model you'll be creating vector and here we'll be using something called chroma DB okay chroma DB we'll be using okay then this this would be your knowledge base okay and you'll be connecting your large language model after that whatever uh question actually user will ask okay let's say this is the user whatever question user will ask it will take uh this uh this actually relevant answer as well as the question it will try to understand based on that actually it will give you the actual response okay so this is the entire application we'll be creating and again you can see here we are implementing some called M rag application rable augmented generation okay because here we are feeding our custom data custom data wise we are using Code data okay our uh let's say source code we are using here so I hope now it is clear now let's start the implementation guys so first of all let's Implement everything in our jupyter notebook then we'll try to convert everything as our modular coding now let me clear my screen okay so first of all let's import all of the library I need so here you can see I have imported all of the library actually I need in this implementation now the first Library I'm importing called uh from git import repo so I think you remember we installed one package called git python okay so what is git python git python is nothing but this is the package like git uh GitHub okay this is the GitHub actually package inside python that means with the help of this package you can uh clone any kind of repository from the GitHub let's say the way actually cloned I think remember we open up our terminal we just WR one command get clone then we pasted that link right we pasted our repository link I think remember okay and it was was able to clone this repository in my system so now if I want to do with the help of Python Programming how we can do it for this we'll be using this package actually G python okay so the help of that we'll be easily cloning any kinds of repository from our GitHub because I told you now user will upload one URL okay that means GitHub URL project URL and from the URL actually it will automatically let's say clone the repository then it will extract the information that means your code base then it will perform the chunking operation embedding model uh stor the embedding in knowledge base then it will connect LM okay that's will be performing the entire operation got it and here I'm also importing another package called language because here we'll be using programming language so I'm going to use Python Programming so with the help of language actually I'll set I'll try to use Python programming language here then generic loader language sper recursive character text beter okay so these are the actually additional package I'm also importing and I'll tell you whenever I will be using them I'll tell you each and everything okay why I'm using it and what is the use of it now you can see I'm importing open AI embedding because I'm going to use open embedding model then chroma Vector database I already told you then we'll be creating our chain okay the complete chain and here we'll be using actually memory conversation summary memory because I think you remember in our Lang chain uh series actually we learned how to create the memory okay like it will remember your previous context so with the help of this conversation summary memory we can also create a memory buffer okay so this thing actually have imported so far now let me execute now see it should work fine because we have installed everything now the next thing what I will do guys I'll just create a folder here so mkd i r so this is the command to create a folder I'll name it as test repo okay test repo now see if I show you my project working directory right now so PWD project working directory I'm inside research folder so inside research folder it will create a folder called okay mkd is not recognized okay so it should be MK okay not Mac now it should work see now in the test folder it has created one folder called test repo inside test repo I'm going to clone the repository and to clone the repository guys you can use this code snippit so here I'm using using this one actually I think remember repo so the repo actually I have imported from git so inside that you have one function called clone form now you have to mention the URL like which repository you want to clone let's say I want to clone this medical chatbot repository I've given the entire link so this is the link I have given just copy the link and try to mention here you can give any kinds of URL any kinds of GitHub URL you can mention here that repository would be clone then after that you have to define the path in which path you want to clone I want to clone inside this particular path okay this folder now if I execute it will automatically clone this repository inside the test repo folder let me show you execution done now inside resarch test repo see it has cloned all the source code see all the source code you can see it has already grown okay amazing now the next thing we'll be loading all the codes okay all the let's say codes all the data from this repository itself okay all the python file will be loading that means we'll be extracting all the source code for this I'm going to use this code snippit so here is the Cod s guys so here I'm using generic loader from file system so I think remember we imported the generic loader from langen okay generic now here I'm giving the repo path that means where my repo is present then I'm giving the globe that means it will open that means it will extract all the python file okay Pi file then parer you have to mention the language so here it is the Python language okay that's why you have to give the Python language and Par threshold you just keep it this particular number 500 okay this is the default number you can keep it now it will give me the loader object okay now from the loader object I will load the documents now see it will give me the entire documents right now if I show you see all the uh content is has extracted okay now if you want to see them now how many documents you got you can take the length length of documents you'll see that seven documents actually I got now if you want to see any kinds of specific let's say documents you can print it now you can see this is the entire source code you can see it has uh extracted okay from my repository itself now the next thing is we'll be performing this uh context uh ER splitting okay context ER splitting I already told you we'll be creating the chunks and this particular chunks will tag with the function name for this we'll be using this fun uh this particular Cod cipit let me show you this is the Cod cipit guys recursive character test spitter you can use and inside that you only need to mention one parameter called language is equal to language. python so it will automatically perform the context D splitting that means it will tag it will tag the chunks with respect to the function got it and Chun SI and chunks lab I have given now let me execute now I'll apply on top of my entire documents okay documents splitter split documents I'm passing my documents now it will give you the entire chunks so let's me show you so this is the chunks I got if you want to see the length you can also see the length Okay see this is the length of my CHS got it then next thing what I have to do guys I have to uh actually use the embedding model okay uh to convert all my source code to the embedding representation and I will be storing to my knowledge base that means chrom ad for this I'll be using openi embedding model I think remember so let's set our openi environment uh API key here so this is my openi API key so I already created and I already set here now let me sa I'll go back to my notebook now first of all let's load this API key with the help ofb package so here you can see I'm loading it then I will set this API as an environment variable then I'm going to initialize my embedding model okay open embedding model that's it now let's initialize my chroma DB so I think you remember we imported already chroma from langin here so chroma we already imported you can see Vector chroma we imported now inside chroma DB uh we are passing our text that means the chunks actually I created and the embedding model as well as the pares directory that means it will create a directory that means database okay so instead of data you can give database okay DB okay DB so it will create a data database like local database inside that it will save all of your uh Bings and chroma DB session I have already taken in the YouTube channel you can check it out how chroma DB works okay now let me create the vector store now see DB has created okay inside resource and it is converting all the code to the embedding representation and it is saving inside DB now see it has created the local database okay see okay now what I'll do uh I'll just make it as now to activate this Vector DV you have to execute this line Vector db. parist okay now I'll be initializing my large language mod model so here you can use any kinds of large language model you can also use gbt 4 I'll be using the default model like gbt 3.5 turbo so let's initialize my llm then I'll be creating the memory that means uh that sum uh history memory conversation summary memory you can see I'm importing this library inside that I'm passing my large language model then memory key is equal to chat history this that means it will remember my previous context okay then return message is equal to true so this is going to be my memory object right now then I'll be creating my final chain so for this you'll be using a conversation retrieval chain okay now inside that give the LM retriever Vector database okay and as retriever so search type I'm giving M MMR keyword it will give me eight relevant answer and here I've given the memory okay now this is going to be my key object right now now let's ask one question so I'll prepare one question here question is equal to let's say I'll go to the test repo inside that I'm having SRC folder inside help part I'm having one function let's say download face embedding I'll copy this function name and here I will ask what is hugging download hugging face embedding function okay let's see whether my model is able to explain or not so this is my question so this question I'm going to pass inside my uh QA that means my chain okay and it will give me and it will give me results and I'm going to only extract the answer okay from the result itself now let's see so guys you can see I got the answer uh the download hugging face embedding function downloads the embedding from the hugging face model uh so this is the model actually okay now see if I open it up uh see it is correctly identified this model actually we are trying to download and which returns embedding of 304 Dimensions uh these embeddings are used for the pro processing and analyze text Data into context of the application that means correct information okay amazingly it has explained this function now you can give any other question so what I will do I'll call copy this question and let's ask about this function right now let's say I'll ask about load PDF file okay this function right now let's see what it will give me so I'll copy the same code and here I can mention I think now let's see so ignore this line okay this line is not required so this is your ACC response the load PDF function loads the PDF file from a specified directory using directory loader class uh which is a filter uh filter of PDF files and then it extract the documents and return the items amazing guys so that's how you can uh perform the keyway operation with your code base right now if you don't understand any kinds of code if you don't understand any kinds of function just try to I mean give it here and try to ask it so it will give you the entire explanation of your code base okay this is called actually source code analysis and this is one of the Amazing Project guys Amazing Project got it now this is the actually notebook experiment now let's try to convert this project as our end to end implementation okay so I'll just do the copy paste operation from my notebook only because I think I showed you in my previous implementation I did the same thing so now what I will do guys I'll open up my SRC folder inside help part so whatever let's say code I have written okay then let's individually I was loading the uh I was cloning the GitHub I was extracting the data I was performing the uh embedding model operation okay so everything I'll just write as a function inside helper. F okay so now let's do it this is how actually I implemented guys so I'm importing all of the library then first of all I created one function called repo injection it will take the repo URL and it will do the inje operation that means clone operation the same thing we are doing in our notebook only got it then second function I have written called load repo the same code guys that loader generic loader I'm using here see it will take the repo path and it will load the let's say I mean code and it will give you the documents after extracting then the third function I written called text splitter that means it will perform the context splitting okay the same thing then it it will will give you the uh embedding model okay it will first of all get the embedding model from the open air it will return you so instead of actually writing the scripting I've just written as a function that's it now the next thing what I will do I'll uh add everything inside my endpoint which is nothing but my app.py because app. Pi user will execute and uh they will get one user interface and from there actually will they will upload uh let's say they will give the URL they will uh to the keyway operation okay so for this actually I already told you we'll be using flask and for the flask actually you need one time template and static file I think you remember so let me show you I already prepared one HTML and CSS code for you so guys as you can see this is the template file and inside that I'm having my index.html and this is the HTML code and again I refer the internet bootstrap website to implement this uh actually HTML and CSS code if you're not aware about it's completely fine you can use my template as it is okay now inside static folder I'm having the uh CSS that mean CSS code okay that mean style uh of our uh web interface and all and to execute this style. CSS I am using some JavaScript actually code you can see this is the JavaScript code again I got it from the bootstrap now see how your application will look like I'll tell you before that let me uh write this app.py code so inside app.py I'm going to import all of the library I need so you can see I'm imported all of the library like chroma DB load embeddings okay from the SRC hire because I need the embedding model right then uh repo in I'm also importing from the SRC then my chat openi okay function then conversation summary okay conversation r chain so everything you can see in the notebook I'm importing all of them here now first of all what I have to do I have to initialize my flask and I will set the open environment key as my environment variable here that's it okay see now first of all I will load my embeddings okay from my Vector database you can see I'm loading the embedding from my Vector database so for this before that see before that what I have to do I have to first of all generate the vector embedding let's say if user has given the URL so it will generate the embedding right it will uh create the embeddings and it will save inside my Vector database yes or no so for this I'm going to create another file called uh store _ index do file so previously in the medical chatboard implementation I return the same file I think remember inside that I was doing the um actually embedding storing operation see so you can see repo in load URL so I'm importing everything I'm setting my open API key then load repo that means see user will give the URL so this URL actually rep injection will load and it will load the let's say documents it will perform the text splitter embedding then this embedding will store inside my uh like chrom ADB chrom ADB will create like local database inside that it will save everything okay I think remember now here I have commented this two line because I will be doing this thing with the help of user interface that means UI okay not manually actually so that means from the app. pi user will give the URL okay from the user interface web application user will give the URL this URL I will receive here okay I'll receive here then I will execute this line of code okay so that's why I've commented this line but if you want if you want to test what you can do you can uncomment it and you can execute this line you will see that it will work fine okay so as of now I've just commented out now let me save it now I'll go back to my app.py now let's create the llm chain so this is the chain the same code I have copy pasted from my notebook guys I'm creating the llm creating the memory after that I'm creating the qm that's it then I'll be creating two route then I'm going to Creator route actually from my flask so this is the default route first of all it will render the index.html whenever user will open the application okay then the second route I'll be creating um for the repo injection so whenever user will uh pass the URL pass the URL of the GitHub and they will submit so what will happen it will execute this store index. Pi you can see I'm executing this command python store index. piy and if you want to execute any python find that means if you want to execute any command you have to use system voice. system you can see I have imported operating system so voice. system and inside that just give the command it will execute this file that means what will happen whatever URL user will give okay so first of all it will perform the repo injection I think you remember we created the repo injection function repo would be ined in the repo folder and um if I go it back now see now it will execute this store index. Pi file that means this file now this code will be executed that means it will load the repo extract the documents create the chunks uh load them model then store all the embeddings to the knowledge base that means inside my chroma Vector database okay now I think you got it now see this is my second route now I'll be creating another last route this is for the chat operation that means after ingesting the data creating the knowledge base it will perform the chat operation user will give the masses okay and if message is equal to clear it will remove your let's say enre repository that let's say you want to clone another repository so your previous repository should be deleted okay otherwise what will happen it will take all I I'm in this space okay in my system that's why I'm removing it I'm doing the you can say rm. RF operation that means it will remove it so this is a Linux command that's why I'm executing inside w. system okay then after that whatever input user is giving I'm getting the results I'm rendering the answer okay that's it now let's open up my application and let me show you now I think this part would be clear so I'll open up my terminal now let's uh execute my app.py so app.py will open it's running now let's go back now just search for local host port number 8080 now see this is the interface of your application okay now here you have to give the URL so let's say I will give this URL I'll just give it here now see I'll just send it now see in the back end what will happen it will inest that means it will clone this repository first of all after that it will create the embeddings and it will save this embedding in the vector database now see internally everything is executing if you go here now see repo it is cloning as well as DB would be also created now let's wait and let's try to see so guys as you can see my execution is done so if execution is done you will see this message actually response okay response so now if I open it up now see my repo has invested and also my DB object is created that means my embeddings has already stored here now I can perform the keyway operation for this I'll be using this template right now and this is the same actually chatboard template I'm using from my medical chatboard okay now here you can give any kinds of question let's say I'll give what is I'll ask the same question again so I'll open the repo SRC helper let's say will ask this one download Hanging face like what is this function and all about function let's see see this is the answer I got the download uh hugging face embedding function responsible for downloading the embedding model from the hugging face called sentence this model and specifi the 384 dimensional Vector great now I'll ask another question what is this function let's say text is spit see text spit function see text split function purposes to split the extracted uh data into smaller text juns this text chunks are useful for the processing analyzing the text in a smaller Moree manageable section great that means it is giving you the correct response now you can ask any kinds of question regarding your source code okay so this is the entire implementation guys of our project uh yeah so I think you like it guys and in the next video we'll see the deployment like how we can deploy these kinds of projects okay to the uh like Cloud platform so for this SE we'll be using AWS so in AWS I'll show you the deployment part so before ending the session first of all let me comit the changes in my GitHub so I don't want to push the repo H let's say this repo I don't want to push so what I can do see let me show you another thing let's say if I give clear message here it will remove the repo folder automatically see see repo folder would be deleted because you have written the code here I think remember uh inside helper not helper I think inside app. Pi see here if you give the clear it will remove the repo folder okay now if I click here now see then I also don't want to push P this uh DB objects what I can do in the G ignore I can mention this DB let's say DB would be IGN inside everything just try to ignore now let's try to see ah D is also okay another actually repo I'm having inside resource so let me also mention resarch also inside resarch I'm having test repo so everything I want to ignore as well as I want to ignore the DB as well now I think okay research spelling is not correct so it should be like that okay research now let me save now see it is ignoring everything okay now let me push the changes so I'll just write updated commit and seeing the changes now if I get back and refresh here see all the source code has been updated now let me write the further step you can perform so here I have added the next step like you have to create the environment file inside that just say open a API key and just run app.py and uh you can execute your project okay that's it now let me also update this readme file readme updated now let's refresh here now see everything is mentioned okay all of the command I have shared with you so before starting with our chain L discussion first of all I just wanted to tell you something uh like why we should use this chain lit and uh as a data scientist actually what are the difficulties actually we Face uh whenever we try to develop any kinds of application right so uh I think uh you have used something called stream lead to create your uh this kind of web application even uh I have already showed you how we can create end to end like these kinds of Genera VI projects with the help of stream lit and all uh so uh see whenever we are uh using streamlit it's a a initial interface right initial uh like uh demo of your application uh but nowadays actually this llm cames and people are creating lots of application on top of these kinds of llms and uh also like there are lots of application there are lots of product in the market right now like chat GPT is there Google B is there right then Microsoft Bing chat is also there so if you have seen these kinds of product this kinds of application so you will see like this application has like very beautiful user interface right so whenever let's say I'm creating any kinds of conversational agents okay let's say I'm creating any kind of chatbot so we should have one like very beautiful uh user interface otherwise user might not get interest okay uh with your uh application so that is the main thing actually and gener it provides actually these kinds of beautiful user interface whenever you are trying to create any kinds of conversational agents and all so we can use this chain Le to build uh these kinds of llm app super fast okay I'll tell you like why it is super fast because you will see uh using very short line of code will be uh creating these kinds of application very easily right but if you're using streamlit I think you saw we need to write some more code there okay but if you're using chain lead so like more code doesn't required here so only using some line of code actually will be able to complete our entire projects okay so this is like very amazing package I was exploring and I thought let's uh also show you this one so that actually whenever you are learning these kinds of large language model generative AI so at the end you need to build some application right so you can use this kinds of chain lit package uh with your application and uh there is another reason actually you should use uh this chain lit you should explore this chain lit let's say you are building some projects for your client so you need to submit that projects to your client so uh you need to sub some good uh uh you can say output from your side otherwise your client might not get interest so at that time if you're using this kinds of chain lad interface okay chain lad package to create your apps and all so it would be very much realistic and it would be very much amazing uh to your client whenever they will look into your application so uh that is why actually whenever you are trying to build something you have implemented any kinds of PC and all so at a time just try to use these kinds of chain lead package to create your apps so that actually you can submit some good application to your client okay and they will be very much happy with you right with your work so guys uh this is the video agenda so first of all I will uh take you through the chain lad documentation then I will show you like how we can use this chain lad and we'll be building one basic chatboard here so I'm going to implement one food delivery chatboard so basically it will uh asks for the order okay it will suggest you the food then uh it will ask for the location and it will like take your order and all so this kind of of chatbot actually will be implementing I think you have seen like zatu right so we'll be building some uh something like zatu uh you can build anything but this is the projects actually I prepared for you so that actually you can learn something right uh so I just wanted to like make you this thing as realistic so that uh whenever you are building your own projects okay will get interest so yes guys this is all about now let's start with our CH discussion so guys as you can see this is the chain lit documentation and uh chain lit is nothing but uh chain lit is an open Source python package that makes uh incredibly first to build chat GPT like uh application uh with your own business logic and data as you can see if I open chat GPT so here you will see uh it has one beautiful user interface okay that's why user more interested to uh use this kinds of chat GPT kinds of application now let's see if you give any kinds of message so it will take your message even it will reply like that okay so we'll be building something like that so it would be like chat GPT like interface right then if you see here it has also official tutorial so you can also visit the tutorial they have given so from there actually you can also learn but I will uh make this video very simple so that actually you can understand each and everything like uh uh you don't need to go through even the documentation I will uh discuss everything whatever things actually you need to explore okay and apart from that anything is left and anything you want to explore from your side you can visit the documentation and learn okay uh yes guys this is the documentation as you can see and it has also integration with these kinds of Lang Chen then autogen lamb index okay you can either uh use open either use Lang chain either use lamb index anything you can use okay all the things has been integrated with that so in this video actually I'm going to use open AI API that means I'm going to use U GPT 3.5 turbo model to create this application because I just want to uh show you quickly that's why I will be using this open AI model because there actually I will get one API key and everything would be done for me right but you can also use open source large language model I I think I already taken some of the session like how we can use Google Pam to Lama then we have Lama 2 then we have Falcon we have Mr 7B anything you can use here you can also integrate Lang chain with that I have already showed you like lots of things with the help of Lang chain and all so you can explore this thing right so yes guys this is the documentation now here they have already given some starter code like how we can start with this uh chain L and all so I'll show you like how we can launch this chain lead app and all okay but before that what I need to do I'll be creating one GitHub repository so here is my GitHub so let me create one GitHub repository I'll name it as uh llm app with chain lad you can give any kinds of name so let's keep it as public I'll add rme file then G ignore wise I'll be using Python and license you can take any kinds of license so let's take MIT license then I will be creating my Repository now uh let's clone this uh repository in my local machine so I'll copy this link address and I will open my uh local machine and here uh I'll open my terminal and just write get clone and paste this link and clone it okay now I'll redirect to this folder llm apps with chain lit now I am inside this uh folder now here I will launch my vs code so you can use any kinds of code editor it's completely fine so I already opened my vs code now here I'll be creating some of the um like folders and file then we'll be doing the environment setup because I need to install some of the libraries like let's say chain lit I need to install then I need to also install open and all okay so let's do it and uh see like how we can use this kinds of chain lit so here uh I'm going to create one for folder called SRC then inside SRC I'm going to create one file called underscore uncore init _ dop uh I think you already know why this Constructor is needed because I'm going to consider this SRC as my local package because here I'm going to writing some of the Python file and from that file I'll be importing some of the function and all okay that's why I need to create it I think I showed you in my Bend projects okay what is the use of this then uh inside that actually I'm going to create uh two file uh one file I will keep my llm model and another file I will keep my uh system related configuration or you can also talk about this prompt okay you can uh also tell it as prompt so prompt dop yeah now uh outside I will create another uh file called app.py app.py then I also need something called requirement. txt so [Music] requirements.txt then I also need something called setup.py because of this local package installation yeah so this thing is required now let me just write down all the requirements actually I'm going to use so the first requirement actually I need something called uh chain lit so CH lit so this is the package you need to install then I need something called open ni uh then I need something called python Dov I think you know why we need this EnV because I'll be keeping my uh like open credential inside this EnV file and using this python. EnV I will read that uh yeah then I also need something called hypen space dot because of this setup.py now let me create that file also EnV EnV so here uh I'm going to paste my open my API key so I already created this API key so you can also create your own API key okay don't use my one I will just remove it after this recording uh then uh I need to install these are the requirements so for this I need to create one virtual environment so I'll open my terminal and here I'll just write cond create typen in uh let's name it as uh chain or I can give uh yeah chain lit chain lead demo this is the environment name and python version wise I'll be using python 3.9 and H and Y now let's activate my invironment H now I'll installing the requirement so just WR P install henard requirement. txt okay it's giving error because because we haven't added uh like setup.py code here that is why it's throwing error so I think you remember so this code actually we usually add inside our setup. PI so this code is a responsible uh to find this uh Constructor file and it will set up that folder as my local package okay and you here you can check the uh check the project name version author name email address and anything right now let me install them so now I'll again execute my requirement. txt so it may take some time let's wait I'll come back when it is done so guys as you can see my installation is done now yeah so everything is done now let me select the environment I created here so it was uh chain L demo yeah that's it now first of all Let's test it whether everything is fine or not so uh I'll close these are the file first of all yeah so I'll visit this documentation again uh this chain L documentation and if you click on in pure python so they have given one um like code here so let me just copy so this code actually this is the Eco like if you send anything so it will response the same message okay as Eco so it's just for the testing purpose like uh whether we are able to launch our chain Le tap or not and it is working fine or not okay so first of all let me uh check it everything is fine or not then I'll uh add my logic I'll add my chatbot logic here and here if you see this code will remain same and here you just need to write your logic okay uh here we'll be writing our custom logic and this code will remain same okay and this is the eobot currently now here uh what I need to do uh I'll open my terminal and if you visit the documentation so there telling first of all you need to write one command called chain lit chain lit init okay first of all you need to initialize the chain lit here so it will create one folder here called do chain lit and inside that it will contain all the configuration see it has created this chain lead inside that it has created another toml file this is the configuration file and it has all the configuration okay so here is the configuration so you can change this uh GitHub URL and all okay you can also change the project name here so here is the project name you can also change it so these kinds of configuration you can change so I'll just keep it as default no issue with that then um I'll again open my terminal again I will run one command called chain lit run app.py okay now if I execute this command so you will see it will launch one uh server for me and this it is running on Local Host port number 8,000 so I'll give allow access and this is the default user interface okay so why this message is coming here welcome to chain lit and all so if you see here it has created one uh MD file here automatically it has created one. MD file like markdown file and these are the content actually it has automatically generated okay now let's see if I change anything here so let's say I will change welcome to uh my bot okay if I change anything here now if I go to my app and refresh see it has changed that means if you want to let's say print any kinds of massage okay whenever user will launch your uh application okay so you can customize here so I already created this uh MD file I already made some customization there because I told you I'm going to implement something called uh uh this one jatu bot okay so for this actually I created some of the content related jatu and again I generated these are the content with the help of chat GPT okay so let me show you like what are things I have done so here I'll just copy paste see this is the content I prepared hello welcome to zato bot and here I'm just uh showing some of the item like P we have pizzas then pasta noodles then Asian Cuisines okay so these are the thing actually I have gener generated with the help of chat gbt so here you can give anything any message whatever you feel good you can give it here and whatever application you are building with respect to that just add the content here now if I go back to my application and refresh it see guys now it has changed to this content okay now let's see if I give any kind of message here hi so it will give me the same response like hi okay now if I open my chat GPT and if you just compare with the chat GPT okay now see it's looking like chat GPT only right so that's why they're telling ch is nothing but it's a like open source python package and with the help of that you can create chat gbt like interface okay chat chat gbt like application so I love this chit a lot because see only using this line of code okay only using this line of code like uh this only using just one function we are able to launch this kinds of user interface now let's see if you're building any kinds of product for your client so if you submit like that so they will be pretty much impressed by your work okay so that is why actually we should always use some good user interface whenever we are delivering our application right now here you can give any message like I am buy so it will give you the sa response okay because we have created the eobot how it is working so let me show you so they have created one function and this is The Decorator they're using this chain L decorator so this decorator is handling everything and again they're using asence and AIT because asence and AET is helping us to read this message okay real time so it is always sensing our uh input and when whenever we are giving something it is receiving and it is also sending the message to the front end right so this is the like code simple code now here we'll be writing our custom logic so basically we'll be building one uh Jato bot with the help of this um large language model I'll be using uh like open a GPT uh 3.5 turbo and uh here we'll be like chatting with our bot okay with the help of this Chann Le and here if you see your app name is chatbot currently so you can also change this name so I told you there is a configuration it has generated now if you go below so here is the option to change the name so by default it is chatbot so we can also give something called U uh chatbot for zato zato okay now if I refresh and again refresh here um I need to I think stop the execution so I'll open my code now guys see this name has been changed uh chatbot for zato okay now I can uh close the previous one and again it's the eobot now guys let's uh add our custom logic so so for this first of all I will prepare my llm that means large language model so this is the file so here first of all I'm going to import open AI so I think you know open has been updated uh now it is like a latest version so they have upgraded lots of thing and if you visit that documentation currently so if I go to this open open.com and if I log in so this is the documentation now let's uh go to any kinds of task and let's see how we need to import see this is the UT and we need to uh like initialize this client object okay but initially we just uh need to install uh like import open a okay that's how we we can do it but now now actually you need to import like that from open import open a okay so this is the updated version of openi and if you see here we need to upgrade it also okay if you are using previous one so you need to upgrade also okay so this is the like uh requirement you always need to follow U you always need to upgrade with the documentation otherwise you might get some issue okay so let's import open a so from open import open AI okay so I need to make one client object here client open AI then here I will be initializing one function I'll create one function so I'll name this function as ask uh order okay ask order so uh this function will uh like uh this is going to be like main function so basically this function will uh give me the response what whatever question actually user will ask so it will take the masses first of all it will take the masses then uh it will also take the model so model wise model wise I'll be using something called GPT um 3.5 turbo 3.5 uh 3.5 turbo so this is the model I'm going to use you can use any kinds of model you can use dpt4 U anything you can use here I'll be using this model because this model charge would be a little bit less for me so that's why then I will also take uh this temperature value uh what is temperature I think you know in llm temperature is like uh uh like how much Randomness you want from your model okay if you're giving it to zero so that means it won't be giving any Randomness it won't be like more creative it will give be give you Auto like always stick output but if your setting is too close to one that means uh you're telling your model to take risk and it will also generat some random output okay so that's why this temperature parameter is important also now this is my function now here U they have already given like how to initialize this uh one if you see here so we need to use something called cent. chat completion. create so let me copy this line I'll copy this line then I will uh open my code and here I will add it now inside that I think you saw first of all it will take the model model model is equal to model then uh it will also take something called masses okay masses so what is masses here so let me show you see message is nothing but uh it's kinds of prompt actually you are giving uh basically you are giving some U like zero short or few short prompt here like you are telling this is the role okay role means system system means like you are the role okay like you as a uh chatbot this is your RO system and this is the content so you are a helpful assistant okay basically it is uh I'm telling to my bot you are help assistant and whenever user okay user is giving some content okay let's say this is the content user has given so you also need to uh reply as a assistant okay as you can see this is this is this should be your answer so that means we are giving some prompt here okay we are just uh giving some zero shot or free shot prompt here to my llm so that my llm can understand what kinds of job actually I want to perform okay so I think you already learned this prompt engineering and all okay so this is very much important here so let's also Define this one so I already prepared one prompt here so let me show you so you can also create your custom prompt there is no issue with that so in this prom. Pi I'll paste it out so this is going to be like uh very creative uh the more good prompt you actually will uh give to your llm the more good results actually you will get okay so this is the prompt actually I developed so system instruction as you can see you to bought an automated service to collect other orders from online restaurant okay if you see here so many like content I have written here like so here I'm just trying to making my B understand like what uh it is going to do exactly and these are the actually item I also like pasted here so if anyone is asking like for the menu so uh it should return something right so these are the actually prompt I have developed from my site okay so this prompt actually I'm going to use now I think you remember you need to create one uh format as you can see roll as system assistant so that's kinds of format actually you need so for this actually I already prepared so this is going to be the format as you can see massage roll system content and system instruction I need to import from my prompt so here I'll just write from uh SRC SRC do uh hiab llm no sorry SRC do prompt then I need to import something called system instruction okay so here you here is my system instruction I'm importing this one now here I'm just telling RO system and content okay so here I'm giving the prompt to my llm as you can see now this message actually I'll will give it here okay yes now I also need to set the temperature so temperature is equal to temperature okay now uh this will also return something as you can see if you go below so this is the response format it will give you this kinds of format as a response it's a Json format response so from here actually I will um need to collect this content okay if you see here I need to uh collect this content okay content is the response okay actual response and these are some parameter it will also give you so if you want to like extract the content so you can copy this either you can also copy this one uh you can also copy this one okay this one also you can copy so let me copy this one and I'll open my part again and here I'll just write return uh response. Choice message. content I only need the content okay so this is my function I have developed so it should be messages instead of masses yeah now it's fine so now uh I will write my final logic so I'll open my app. Pi so here first of all I need to import my uh this function ask order so let me import so from SRC llm import uh ask order then I also need to import something called messages okay because here if you see we have also created this messages I also need this one here let me save it h then if I show you now here if you see here whenever I was discussing this thing so you need to prepare this message okay uh we have created for the system okay system that means we have given The Prompt now I also need to create for the user okay like whatever uh input user will give okay so for this in this uh like a list actually if I show you uh we have a message okay this is the list actually and inside that we have a dictionary so I need to add some more like you can say u u i mean masses as you can see one by one so this is for the system then I also need to add for the user as well okay so I need to just append it so for this um what I need to do so I'll open my app.py and here um you can appen like that so I'll just write message. appen and here I'm just initializing my user right now R this is user and this is the content what is the content user will give the message okay the message actually will send okay the message actually will send from here so this is going to be the content so it will uh store here okay it will store it here that means in this list because we are doing the append operation right so once it is done I also need to uh give this message okay I also need to give this message uh to my uh bot so I'll just write ask order inside that it will take the messages okay then it will also give me something called response it will give some some uh it will give me something called response okay now uh if you see here I also need to uh provide the response here if I show you I also need to give the assistant response as well okay as you can see assistant response as well so again I will append so I whenever I will receive the response okay I will extract the content so uh as a assistant actually it will uh give me some response so this response actually I'm appending because if you if I show you here this response should be my content okay as you can see it is returning the content and that content actually I'm storing now once it is done uh now I also need to send the response to my uh this uh chain lad user interface right so to do it actually if you see by default it is sending the uh like Eco command only the message user is giving the same message actually it is uh sending so instead of that actually I just need to send my uh response okay this is the response actually I need to send to my uh front end done uh yes so this is the logic only so this is a uh like very easy code we have written now here you can also integrate your open source llm you can use Pam 2 you can use Lama okay you can also use Falcon anything you can use I think I already showed you how to use them and you can also integrate Lang CH with that okay so if you're using open source llm so you can also use uh Lang chain okay with the help of Lang chain you can also do it and the same thing you can uh do the uh return here okay as a response now let's test it whether it's working or not so I'll go back to my so I'll go back to my uh chain lit then I will refresh yeah now let's say if I give any message let's say hi so it is received High because I need to I think uh uh restart it so I'll open my uh open my terminal and I will close the execution if you press uh contr C it will close now now let's restart again so I have restarted now here is my new one now let's see if I give any message hi see it's giving hello uh welcome to zomato how I can assist you so here uh I can give uh my name is buy uh and I am looking for some I'm looking for something I'm looking something for dinner I can I'm looking something for dinner okay now it is telling hi buppy I'm here to help you find something delicious for dinner what type of kins you uh you are in mood for we have options like pizza pasta then Asian cins then uh Beverages and Indian cins let me know you're preferred so I'll uh tell I'll will go for I will go for Indian food okay now see it is giving great choice buppy Indian kins is always uh treat and here is some option for the Indian menu now it is telling butter chicken we have with none and even it is also giving the cost because we have added the promt here I think you remember then chicken T Tika Masala rice then palak pan then uh chana masala vegetable Biryani Samosa Lai so I'll give I need this one chicken tikka masala with rice okay so I'll just write um add chicken tikka masala rice in the cart yeah so I have added chicken TI masal the cut uh is there anything else would you like to order or this is all for you uh no it's fine okay all right here is the summary of your order so you Tak Masala now if you see this is the price now it is telling uh is that correct and would you like to pick up your order or have it delivered so I'll tell have it delivered delivered great we have uh Del uh we'll deliver your order to you could you please provide me your delivery address so I'll give some address here so I'll tell uh I'll tell my address my address is uh this is my address let's give this address okay so thanks for providing your address buy your order will be delivered uh to 17th floor uh Brigade signature Tower the total amount for your order $10.99 how would you like to make the payment uh we accept cash on delivery or online payment I'll go for cash on delivery cash on cash on delivery perfect you can uh pay in Cash When the delivery thank for uh the placing your order your chicken Tika Masala with rice will be delivered shortly if you have any other questions or need further assistant feel free to ask enjoy your mail uh great thank you okay see guys uh we have implemented one amazing food delivery B uh with the help of this chain lead and now see the interface guys it's like very professional very amazing right very amazing now if you deliver this project to someone else they will be going mad right like whatever things actually you have developed right now now uh what I will do quickly I'll just uh now uh what I will do I will just quickly commit the changes to my GitHub so that I see you can get the code so I'll just write uh completed comment done now if I go back to my gethub and refresh yeah so you have committed so yes guys uh this was was the demo of the CH lit I think uh you enjoyed this package a lot and even I'm also enjoying this package a lot okay I'm just trying to use this uh Trend L package to build my llm apps and all and see guys like by using some uh like very less line of code actually we are able to build this kinds of awesome application and it's like very fast right uh now we'll try to uh see the deployment part like how we can deploy these kinds of projects on the cloud platform so I think you already know we implemented so many NN project right so implemented medical chatboard then source SC analysis they then we also implemented something called J to chatbot right so different different application we imp implemented so far now in this video I'll will show you how we can deploy these kinds of application on the cloud platform that means here we'll be deploying our application on the AWS Cloud if you want to learn any other Cloud deployment it is also fine see the process will remain same only the cloud functionality would be different so uh I'll try to create some more video on the deployment like I'll also show you how we can deploy these kinds of project on the gcp cloud on the let's say the aure Cloud but first of all let's try to see how we can deploy this project on the AWS cloud and see this is not going to be a simple deployment so here we'll be doing continuous integration and continuous delivery or deployment that means cicd so I think you have heard of this uh particular term called cicd right so we'll be learning how we can deploy uh this project as a cicd I think you already know how to deploy any machine learning project de learning project as cicd but we haven't seen how we can deploy any kinds of genv based project as a cicd right so that's why make sure you are uh watching this video till the end so here I'm going to show you each and every step you have to follow and trust me if you follow this step guys you can use this step to deploy any kinds of let's say gen VI project okay and this is going to be production grade deployment okay so here I'm going to use different different kinds of service from the AWS even I I I'll be also using Docker that means first of all we'll be dockerizing the entire source code then we'll be deploying this application on the cloud platform okay so make sure you are watching this video till the end so before starting the deployment guys first of all let me show you what exactly we're going to perform here what is cicd exactly then I will also discuss let's say what are the tools and Technology will be using here what are the services we'll be using here then I will start with the deployment and make sure you have the AWS account if you don't have the awx account guys so you won't be able to deploy this project so first of all try to create one account if you're creating for the first time you will get $300 free credit okay and this is enough for you so try to create an account guys then you can start with the deployment with me so let's open up our Blackboard and try to to see the architecture overview so guys as I already told you here we'll be doing something called cicd deployment right and I already told you what is uh cicd full form it's continuous integration continuous delivery or deployment right so inside continuous integration continuous delivery what happens let's say you are the developer okay let's say you are the developer so what is your task your task is to develop a project in the development let's say environment so development environment means like your local system let's say you are using your laptop or computer let's say local computer okay local computer fine then what we are doing I think you remember we are committing this code to the GitHub right we are doing the code management I think you remember that means that means whenever I was adding some new feature I was pushing this code to the GitHub yes or no okay with the help of git client we are pushing the code in the GitHub GitHub server now what happens actually let's say after deployment so this is called actually development server or I can write uh this is actually development environment okay development environment so after implementing this project what we have to do we have to deploy this project yes or no let's say um somehow you have deployed this project on the AWS Cloud let's say this is your AWS Cloud fine so let's say you have deployed this project to the a cloud manually manually you you just created a let's say instance there you create you just took a machine there K2 machine and you manually deployed this project now it will give you some endpoint okay endpoint so with the help of this endpoint any of the user okay user can access your application now let's say after 4 month or let's say 6 month you want to add some more features in this let's say uh application let's say you are deploying medical chatboard the medic chat but we implemented I think you remember right let's say you want to add some more data you want to add some more knowledge base and you want to add some more features in this application then what you have to do you have to again develop this let's say features in your code then what you will be doing again you'll be deploying this application to the cloud now just try to see whenever you are deploying the project for the second time let's say this is the first time you have deployed then you are trying to reply for the second time then what you have to do first of all you have to stop this application in thews okay stop this application then you will be uploading your updated code then this code will reflect to the endpoint then user will able to access that now let's say in between whenever you stop this AWS server let's say your uh application let's say it took 3 hours it took 3 hours to change the entire source code that means uh change the entire features okay of your application so what will happen 3 hours user won't be able to access your application so they will come your website and they will see server error okay server error actually they will get so if user is getting these kinds of experience so definitely it would be a negative let's say effect okay on your application so next time actually they are not going to use your application yes or no let's say if CH GPT is down for the uh let's say 3 hours definitely people will move to the Google b or any other let's say software whatever we are having okay so now see chat chat GPT is also updating their let's say application day by day but did you ever observe this server is down no you are not seeing the servers is down but still they're able to make the changes in their application how because they are following something called cicd approach continuous integration continuous delivery that means this application is keep on running but in the back end they're pushing their source code they're pushing their let's say new features and this feature is automatically getting updated okay so this is collect cicd that means you are not going to deploy this application manual instead of that what you have to do you have to follow the cicd that means what will happen let's say you have changed something in your code you will push the code to the GitHub okay GitHub will automatically uh let's say deploy your code to the AWS Cloud it will automatically push your code to the AWS cloud and your endpoint would be automatically updated okay automatically updated so that if user is using your application okay they won't be filling any kinds of let's say server down issue okay server down issue actually they won't be failing got it so this is what actually uh we have to do that means we'll be creating the entire pipeline entire let's say cicd pipeline so we'll be just pushing the code in our GTH iub and GitHub will automatically trigger uh this uh action and my code will updated to the AWS cloud and AWS will update the end point okay now see the automated process we'll be doing now whenever we we'll let's say push our code to the GitHub GitHub will automatically trigger how it will trigger for this you have to use some cicd tool okay cicd tool cicd automation tool so here there are different kinds of cicd tool so the first to you can use something called GitHub action okay GitHub action you can use then you can use something called Jenkins okay genkins then you can use something called Circle C Circle CI so these actually three famous tool actually we are having in the market right now so people are using more this GitHub action because GitHub action you don't need to set up anything it is already set up everything in the GitHub but if you're using genkins and circle CI you have to set up this server manually okay so here we'll be using GitHub action because it is already inbuilt with the GitHub we don't need to set up anything going forward I will also show you how we can uh let's say use genin Circle CI these are the services as well fine so yes guys this is the complete uh high level architecture of our deployment now now let's discuss what the services actually will be using for the deployment see here the first Services actually I'm going to use uh called Docker so I think you already know Docker so Docker is a containerization service so with the help of that you can containerize your code that means let's say you are having a source code you can perform the containerization that means it will create a Docker image for you okay so this image you can let's say keep anywh let you can keep in the docker Hub you can keep let's say in the ECR that mean elastic container regist from there you can pull the image and you can execute this image okay so if you using Docker so you won't be getting any kinds of setup issue this is the main advantage here then we'll be using something called ECR here ECR ECR means elastic container resist so this is the service from the AWS okay AWS giving the service so here you can store any kinds of Docker image it is the same like your Docker Hub okay but it is the uh it is the service from the AWS you can store the private image there but in dockerhub actually the all the image be public this is the difference only now we'll be using another service called ec2 okay ec2 is a virtual machine service from the AWS again it is from the AWS okay so this will give you virtual machine there you can buy let's say CPU based machine GPU based machine okay so all kinds of configuration would be there so here we're using a local computer so there we'll be getting a cloud computer okay this is the difference only then as a cicd tool I'll be using something GitHub action as I already told you okay we'll be using GitHub action for the cicd cicd management fine so yes Guys these are the services as of now I'm going to use so let me show you the deployment step will be following for this what I have done guys I think remember we implemented one medical chatbot this is the code and this code would be also available uh in your resources section even you will also get this code in my GitHub so guys this is my GitHub profile just search entb in the Google you will see my GitHub and here I have created one repository called uh Inn medical chatbot so I'm going to commit this code here so you will get all the source code from this repository itself okay and even I will also add the deployment step in the readme file so that is what actually I have written you can see the entire deployment step I have written here now this is the cicd deployment will be following so first of all what I have to do we have to uh let's say create a im user uh then we'll be uh creating the2 machine easier okay then we'll be see this is the deployment step as of now just try to follow the step I'm going to show you first of all we'll be building our uh so here first of all we'll be building the docker image of our source code that means Docker image we'll be implementing then we'll be pushing this Docker image to the e that means elastic container to store my Docker image then we'll be pulling this image from uh from ECR in the ec2 that means we'll be pulling that image in the ec2 machine in our virtual computer then we'll be launching this Docker image in my E2 machine and from there we'll be creating an endpoint and that endpoint user will be able to access okay and these are the policy I have to give whenever I will be creating the IM am user fine so this is the entire step guys I have uh written even I have also given all the command you need to execute here now let's start the deployment guys but before that you just need to prepare some of the files the first file you have to prepare the docker file so this file will help you to containerize entire your application that means it will perform the dockerization and these are the docker command you have to write so I think remember we are using python 3.10 okay this python version that's why I've taken python 3.10 slim Buster image then working directory it will create a working directory called app inside that it will copy all the source code then it will install the requirements okay whatever requirements actually we are having here it then it will execute this Python 3 app.py command so that means my endpoint would be executed okay okay my application would be running and make sure uh before actually deployment you just store your index okay in the pine cone so this is the pine con guys it is running and all the vector is already stored here you can see 7,20 uh uh actually record is already stored here so I already executed this file I think remember store index so it will create all the let's say Vector embedding and it will store in the pine con okay Pine con Vector database so in this project I was using pine con I think remember okay so this should be available here got it so once it is available now what have to do guys then you can create another file called Docker ignore inside Docker ignore you can mention like some of the file which is not required let's say here this file is not required let's say uh I think this file is not required genv project do. EG info okay so whenever it will perform the let's say containerization that means uh dockerization so I don't need this uh folder that time what you can do you can mention this folder name in the doer Docker ignore file it is the same thing as your git ignore so it is already mentioned inside inside my git ignore that's why I haven't mention inside my Docker ignore Docker ignot is completely empty as of now I need all the file that's why I haven't keep anything here now let's say if you want to ignore any kind of file which is not required that time you can store this other file inside Docker ignore okay that's the thing now the next things you have to create you have to create one folder called do GitHub okay inside that you have to create one folder called workflows inside that you have to create one yl file you can give any name here I have given C.L okay now see this is the complete EML file so this EML file will help me to do the cic deployment okay that means uh here it will be using something called GitHub action okay and GitHub action need this yl file so here all the command is already written so first of all you will see that it will perform continuous integration inside continuous integration it will authenticate with my AWS account okay then it will log with my ECR then whatever let's say Docker image actually you will be building you will push that image to the ECR okay that means elastic container then your continuous deployment will start again it will authenticate with AWS account then it will pull that let's say uh image from your ECR to ec2 machine then it will execute it here and here all the environment variable I have set you can see hypen means this is the environment variable see AWS access key aw secret key I'll tell you how to generate these are the key then Pine con API key open API key everything I have set here okay so these are the thing we'll be reading from the secret okay GitHub secret I'll tell you how to create the GitHub secret as well so as of now just try to remember this is the ml file you have to use for the cicd and this EML file you can use as it is no need to change anything in your other other project as well okay that's the thing now let's open up our AWS account so guys this is my AWS account I already logged in with my AWS account so here so first of all what you have to do you have to create a im am user so let's create IM am user so I am so the first thing we'll be creating one user here so let's create one user I'll create a user so let's say usern name is I'll give uh medical medical B you can give any name it's up to you so let's click on next now you have to give policies okay like what are the policy you want to give in this user I don't want to give my entire policy that means all the services I I don't want to give the access so I'll be giving some specific access so Access wise I already WR in the readme file let me show you so these are the access I'll be providing my ec2 uh container regist full access and ec2 full access okay these are the thing we'll be giving so here just search it so this is the ECR okay ECR elastic Container regist full service here I'm giving so let's select and after that again I can delete it then I'll try to copy the next service this is the service okay this is the E2 machine service so again starts here and select the E2 machine and click on the next now see that I have given this two service okay next thing just create the user so right hand side you can see one button is there create user just click on create user so guys as you can see my user has created now I'll click on the user then here you will get one option security credential just click here then you have to create a access key so uh click on create access key select command interface and I understand this above recommendation and click on the next so there is a next button just click on the next now create the access key here now see guys this is your access key and secret access key try to download as a CSV file so let's download so and just keep it with you okay this thing I need later on okay and no need to share this key with anyone otherwise they will also access your uh AWS account okay so here I'm showing because after the recording I'll delete everything got it so my IM am creation is done now I'll go back to the home page now the next thing what I have to do guys I have to create a ECR repository to store my Docker image so let's search for ECR so just search for ECR that means elastic contain register just open it up and make sure you check your region in which region you are working see I'm working uh in Mumbai AP South one if you're in other region just try to note it down okay you have to note it down this this syntax actually AP South one then CA Central one if you let's say in North Virginia you have to give us East one so just try to remember these are the tag okay so I'm inside Mumbai that means AP sou one now I'll be creating a elastic container regist so let's create uh so let's click there now you have to give the name let's say I'll give medical chatbot you can give any name it's up to you everything keep it as default now click on next now see my repo is created now what you have to do just copy the URI and uh just try to paste it as of now here because this thing I need later on just for reference I'm saving it here okay H that's it now what I will do I will go back again now the next thing I have to do I have to create my ec2 machine then I have to set up uh these are the requirements okay that means I have to set up the docker there then I will be also updating that machine so let's create my ec2 machine right now so search for ec2 here ec2 instance so this is the E2 service Now launch the instance now select the UB to machine and what you have to do give the name name of the machine let's say medical bot machine you can give anything then um see instance type you have to take at least 8 GB Ram 8 GB Ram just take 8 GB Ram I'll be taking T2 large okay this machine and then select the key value here if you don't have the key value here you can also create it so let's say I'll give medical so it will create one rsf file so guys you can see after creating and download you will it will give you one Pam file so this Pam file you can use let let's say if you're using any third party tool to connect with your uh ec2 machine let's say py or mobile ex stream that time you can use this Pam file but I'm going to launch my let's say machine in my uh second tab with the help of AWS only I don't need this P file okay so now I'll select this two option https and HTTP keep it everything as default configuration storage at least take let's say 30gb and launch the instance right now so here you can see click on view all instance then see my machine is running so if Stratus is running now click on the machine ID now here you have to connect this machine so click on the connect button now I'll be selecting the E2 connector and let's connect the machine so it will create a new tab for me so here I will get one terminal block terminal so we we have to use this terminal to set up everything here and this is the production server guys okay that's how your production server looks like see this is the production server let me Zoom now let me clear see here you won't be getting any kinds of UI interf okay that means the way we are using our computer it is having UI but in the production server you won't be getting any of UI you have to work with the terminal always and this is the Linux terminal I got this is the Linux machine guys so that's why if you know any kinds of Linux command it will help you a lot got it so here first of all I have to update this machine for this you have to execute this are the command one by one so let's copy all the command one by one okay so this is done now I'll copy the next command and just try to past here now give yes permission and press enter okay so execution is completed now I have to set up the dogger in the E2 machine so this is the command you have to run copy the next one and execute then I will execute this one then the last command so we have to add the docker in the sudo group okay now if it is running on not so what you can do you can execute one command Docker ipen ipen version so if it is showing the version that means Docker is installed successfully now uh we have to set up our self hosted Runner ec2 as our self hosted Runner that means we have to connect our GitHub okay you can see this is the GitHub now this is our project GitHub so this GitHub I have to connect with my uh AWS that means whenever user will uh sorry whenever let's say developer will push the code in the GitHub it will automatically get updated to the AWS okay AWS Cloud so for this what I have to do I have to go to my uh project make sure you are you committed your repository in your GitHub and go to the settings okay go to the settings now here left hand side you will see one option call Action just click on the action click on the runners now create a new self hosted Runner now select the Linux machine and you have to execute these are the commands so let's copy this command one by one and let me execute here so it will automatically make the connection with your uh GitHub let me show you then the third command then fourth command now you have to go to the configuration section and copy this command and execute it here now see GitHub action it will automatically connect now it will uh see it has connected to the GitHub now it is asking for enter the name of the runner group I don't want to give anything press enter now it is asking enter the name of the runner so here you have to give self hypen hosted okay self hen hosted this is the thing you have to give if you're giving another thing it won't be working okay make sure you're giving self hen noer now let's press enter now keep it everything in default just press enter again then again press enter now see it is done now the last command we have to execute this one and you can ignore this one it is not required now see it would be connected with my GitHub see connected to the GitHub listening for the jobs okay now if I show you if I come back and now if I go to the Runners let's say I'll go to the runners now see status should be ideal you can see it is connected okay now the next thing what I have to do I have to set up all the GitHub Secrets okay now let's go back to the secret so secret variable click on the Action Now new repository secret now give the secret uh ID okay so the first ID I have to give AWS access key ID just copy and give the key name here and why you will get the value I think remember we downloaded one CSV file so let me open this CSV file I will open in a notepad++ and this is my a access keyl copy and here let me paste it then the next one I have to give secret access key ID copy and create another new repository secret and give it here and in the CSV file you will get the next one see it is comma separated so before the comma this is the AWS kid uh access kid and after the command is the secret access K so let me copy the secret ACC and I will past it here okay now the next thing you have to give AWS default region so region I already told you I'm inside uh Mumbai that means AP South one so I think remember I inside AP South one see AP South one you have to write it so let's write AP ien South okay ien one AP South one let's try to check AP South one a South one okay fine now let me add it now the next thing I have to add my ECR repo so e rep wise I think you remember we copied one URL so just try to get this name only okay after.com just try to get the name and try to mention here then the next thing I have to set my um Pine con API key so let's copy and add it here and I think remember in my DOT EnV file I had my Pine API let's copy and this is not available inside my GitHub that's why I'm reading from the GitHub secret okay this is the idea now I also need to add my openi secret okay that means open IP key the last one you can see open IP key let's add it so let's copy the open API and I'm going to paste it now let's add the secret okay now see everything is added now let me see anything is left no everything I have added now what I have to do I have to push the changes okay but before that let me get back to my project now I'll push the changes so just try to comit to comit just open up your uh G bash and try to write this command get add space dot then get comment typen in let's say CI CD edit then get push origin main now if I go back to my GitHub now see if I refresh here so it will start running my action now just go to the action now see my uh action is running see first of all it is running the uh continuous integration so inside continuous integration first of all it will authenticate with my WS ECR build the docker image push it to the ECR okay everything will happen see automatically it's just a one time setup guys next time you don't need to set up it you just need to write the code and push it to the GitHub automatically it will uh push to the uh let's say server okay now see so let's wait uh once this execution is completed I will come back so guys as you can see my continuous integration is completed now it is running the continuous deployment now what it will do it will again authenticate with myws cloud and it will pull that image from the e to E2 machine and if you go to the El lasting container right now and if you refresh here you will see the image okay see doer image has been uploaded here now see it is running the uh deployment now see it is pulling the image so once it is pull then uh we're doing the port mapping uh we'll create the endpoint and uh we can access our application let me show you so guys as you can see my execution is completed that means both uh integration and deployment is executed if you're not getting added that means congratulation it's done now I will go back to my ec2 machine okay now here in the2 machine uh you will get one public IP address just let me show you so this is the public IP address just try to copy and just try to open it okay now see if I open it up so it won't be opening because uh see my application is running on port number 8080 I think remember okay so by default port number 8080 is not set so I have to do the port mapping so what I have to do I'll go back go to the instance uh this is my instance then I'll go to the security okay now here you will see one option called uh Security Group just click here now on top you'll see edit and bound rules okay just try to click click here now I'll just add the rules custom TCP port number just give 8080 uh just sck 00 0 okay and here you will see save rules okay just click on the save rules that's it okay so rules has been added now I'll go to the instance again I'll open it up now I'll copy the public IP address again and here let me paste now you have to give clone port number 8080 now see if I hit enter my application should be running see guys this is my chatbot is running now if I give any message let's say uh what is acne see guys it is giving me the response now see my application is live right now so it is already deployed now user can use my applications now what you can do can buy a domain okay your custom domain and you can publish this application to the audience okay now for the second time let's say you changed anything in the code let's say you added some more function what you have to do only just need to commit the changes it will automatically get updated here fine so no need to set up anything from scratch it just a one time setup once setup is completed just try to commit the changes it will automatically running okay now you can ask me if I close this terminal will it work yes definitely you can close it let's say I will close this terminal now if I again go to the chat bot if I refresh see still my bot is running okay so that's how guys we can do the cicd deployment now let me show you how we can terminate all the instance like whatever instance we created if you don't want to keep it running otherwise it will charge you right so what I can do uh first of all I will stop the easy to machine I've created so select the machine click on the instance State and terminate so terminate will delete it okay so it will terminate and delete the instance then after that I also need to uh delete my EC ECR so let's go to the ECR so first of all delete the image inside that just write the delete command now try to select and delete okay then uh what I have to do I have to delete the uh then I will also delete my IM I'm user okay I'm user I created user let's select and try to delete it medical chatbot I have to write here so let me copy let me delete it see everything is deleted now nothing will charge you okay so guys that's how we can perform the deployment and this is the code you can use uh this code as it is okay the code actually have shared so yes guys this is all about uh and I hope you liked it so thanks for watching guys and what you need to do guys uh the next project I showed you now that uh this one source code analysis you can deploy this project with the same process okay whatever project we have created so far you can deploy with the S uh same process so guys we'll be starting with another very important concept inside genbi called llm ops so I think you already heard of this name okay called llm ops so the full form is large language model operation so those who are from machine learning and deep learning background I think you know there is another uh actually concept called mlops so with the help of mlops we can perform machine learning operations that means let's say if you want to build any kinds of end to end mldl application you can follow some certain step okay some certain pipeline you can follow that means you can follow some certain pipeline to implement that particular application and here mlops usually help help you to implement that particular pipeline right so similar uh things actually we can also apply in the geni so I think we saw inside gen we can use different different kinds of let's say uh tools and Technology like we can use different different kinds of framework we can use commercial large language model we can use open source large language model yes or no so commercial wise I already told you we can use open AI platform because openi gives you the model with the help of API access that means you can create a API with the help of that you can access this model in the openi platform so for this you don't need to download the model in your system okay so download you don't need to do if say if you're using any low configuration system still you can use that model but whenever it comes to open source large language model and it can of foundation model I think I showed you the entire hugging F platform there we are having so many open source large langage model right let's see if you want to use these kinds of foundation model because apart from openi these are the model are also good now this is also better some of the model you will see it is better than openi model okay now if I want to use these are the model efficiently if I want to create a efficient application if even if I want to deploy this particular application on the cloud platform how we can do it because we saw that if I'm using this kinds of model like open source model I have to first of all download the model in our system and whenever I'm downloading you should have good configuration machine yes or no that means you should have good GPU good memory good CPU then you will be able to execute this model and let's say you want to fine tune these are the model definitely you need a very good configuration GPU otherwise you won't be a able to fine tune that I think we already saw one fine tuning example of Lama to model there I was fine tuning this model onto our custom data and I was using Google collab so there actually it was taking lots of time uh let's say to train only oneop just try to consider got it so that's why llm Ops comes into pictures so llm Ops will gives you the flexibility to work with uh different kinds of foundation model OKAY like uh what kinds of foundation model I think we you saw like Lama is there mral is there okay jini is there different different large language models are available so different different foundations model are available uh I already showed you in the hugging P platform okay so if you want to use these kinds of foundation model Foundation large language model with all the flexibility you have to use something called llm ops there are some llm Ops platform are available uh this will give you all kinds of flexibility you can work with these kinds of foundation model even it will give you all kinds of functionality okay all kinds of functionality it will provide you all you just need to use this platform to implement your LM power application I'll teach you all the platform whatever platform actually we are having which is like famous in the market I'll discuss all of them one by one okay no need to worry so first of all let's try to see uh why llm Ops is required because we saw that like what is llm OPS exactly now we'll try to see why llm Ops is required uh why we need it exactly for this I'm going to open up my Blackboard and there I'm going to explain this concept so guys I think so far you have learned about Lang chain okay Lang chain then you learn learn about llama index okay then you also learn about open source large language model okay open source llm even I also taught you the open AI okay openi and open a provides actually commercial model because all the models are paid here if you want to use them you have to pay for that right and how it will charge you based on the token token limit and this will give you the API key okay API key with the help of API key you can access this this model but apart from that there are so many actually Foundation model I think I already discussed inside hugging fish okay hugging fish platform like Lama was there okay then mral was there then Falcon was there okay then then jini Jimma okay and so on there are so many model so many model if you open the hugging face platform you'll see that there are so many models are available and these are the foundation model and this model is pretty good guys if you see this model this model is like very powerful model it's very powerful model even I already showed you some of the demo now we created some of the application with the help of Open Source L language model there I think you saw the power of the model yes or no right but I think one issue you saw whenever I was using this open source large language model the issue was this model size is very big let's say if I'm considering llama 2 just try to consider about Lama 2 so now tell me llama 2 having a how many variant I think you know Lama 2 is having three variant like 7 billion parameter model then it is also having 13 billion parameter variant model it is also having 70 billion uh parameter model even uh even recently there is another model you will see called llama 3 okay llama 3 and llama 3 is very huge than your llama 2 so you can open up the hugging pH Hub and there you can search for Lama 3 you will see the model so here I already told you if I want to use this model actually I have to use use GPU based machine GPU based machine GPU based system yes or no and if I'm not using GPU based machine so what will happen I won't be able execute deser the model but if you see there are so many developer there there would be so many Enthusiast uh they will prefer to use these are the open source large language model but most of them will not have the GPU based machine okay because it's obvious now because if you see nowadays actually uh whatever laptop whatever let's say uh system we usually buy uh people usually take this um actually GPU let's say 30 60 okay ti so I can consider RTX RTX okay RT RTX 30 60 TI if you if you do if you have actually less budget then you can buy this uh GPU if you have more budget you can also buy higher configuration GPU but there are very less people they will buy the higher configuration GPU let's say who have the huge amount of earning they will buy buy it okay but if you but if you have actually less budget because see most majority of the person will have the less budget whenever they buy any kinds of system so they will have let's say this GPU 30 60 Ty TI okay so this GPU having actually I think around 4 GB 4 to 8 GB I think uh vram okay vram it is having okay now just try to consider let's say I'm loading this Lama to 7 billion parameter okay this model in this GPU so what would be the inference time as of now let's try to consider let's say it will take 5 minutes okay 5 minutes to give you the response now just try to consider if your application is taking 5 minutes to execute only one prompt will people will use your application tell me if let's say I'm using chat GPT and if I'm giving any prompt to the chat GPT and chat GPT is taking let's say 5 minutes to give me that response so we I use the chat GPT again no definitely I will not use because nowadays you'll see see that people will have very less time they they want actually quick response from any kinds of application so what you have to do the system you have developing this should be very fast okay the inference time would be very fast here otherwise people won't be using your application right then let's see we are loading this 13 billion parameter model OKAY in the RTX 3060 TI GPU let's say now it is taking 10 minutes to execute okay 10 minutes to execute and after that let's see you are taking 70 billion parameter model in the TX 3060 TI and you will see that sometimes it will give you memory okay memory out of space okay out of space error okay because this uh GPU doesn't have the capacity to load this 7 billion parameter model because I told you it is having four 4GB and 8GB vram okay so that time actually we are not able to use this kinds of foundation model but let's say some somehow we are using this Foundation model let's say we are using small variant of the model let's say 70 billion or 13 billion but what is happening inference time is very high here okay it is like very slow here so again people won't be using my application so this is another issue got it now let's say somehow you created one application let's say it is taking 5 minutes to execute now what you have to do uh if you want to publish this application to the audience you have to deploy this project yes or no let's say you want to do the deployment you want to do the deployment M okay deployment now I think previously I showed you one deployment right uh like uh we deployed One n to Medical chatbot project there I was using actually AWS okay AWS so I was using let's say ec2 service from there ec2 then I was using ECR okay lastic container then I was also using something called Docker okay so these are the services actually I was using there one by one now see there I was actually deploying the open a based application that means I was using open a model that's why I was able to deploy this project in the cloud platform with the help of these are the simple service only but whenever you are using open source large language model so that means this model you have downloaded in your local machine and now what you have to do you have to move this model to the production server that means your Cloud machine and there just try to consider if you are using these kinds of 8GB let's say instance like T to large instance will it work so I think remember we use something called t2. large instance there and it was having 8GB memory only okay 8GB memory with CPU CPU code so it won't be working right if I'm loading this llama 3 or Lama 2 in this machine it won't be working so for this what I have to do I have to purchase I have to purchase actually a GPU based machine there so if you see the ec2 instance you will see that there actually will also have GPU based machine so there actually you can also purchase GPU based machine apart from that AWS provides another service called AWS salemaker those were from actually uh MLS background they already know what is aw says maker so salemaker is a complete actually platform so here you can uh actually ingest okay train evaluate okay evaluate and deploy any kinds of machine learning or deep learning project okay and it also provides different different virtual instance that means virtual computer okay virtual let's say uh computer it will also give you so there actually you can take any kind of instance and you can let's say host your model it is also possible so salemaker provides actually lots of service you can search uh over the Google you'll see that it provide different different Services okay now a few month back actually I was uh going through one actually research article so there I found if I want to let's say deploy any kinds of Open Source lar language model uh as as a let's say my custom created let's say server let's say I want to uh launch my own server and there I want to host my model for this what I can use I can use something called sales maker okay A W salemaker I can use because salesmaker will give you different different kinds of instance okay so there actually you can host your model and if I want to use says maker and if I want to let's say deploy this kinds of uh open source large language model because see if I want to use this kinds of Open Source large language model I have to use different different Library like I I told you we have to use hugging face okay we have to use Lang chain so different different things we have to uh install even if I want to use hugging fist I also need to install accelerate bits and bytes because this model access the GPU right and to access the GPU I also need deserve the package okay I already explained uh in my hugging F session so if I want to install these are the package when let's say I'm taking any ec2 machine there you will see installation issue so most of the time you will see lots of installation issue actually will get but what they did actually they created one service called DLC okay DLC that means deep learning container so this service is already available in the AWS okay you can use with the help of salemaker salesmaker you can use this DLC that means deep learning container so inside deep learning container you can install any kinds of deep learning package let's say you can install hugging face you can install let's say F tensor flow so all the let's say library would be already pre-installed there so you don't need to let's say manually put the effort to install these are the library okay with the GPU configuration everything would be already there okay only just need to take the DLC uh let's say uh instance and you have to connect with the salemaker that is the idea okay so with the help of salemaker with the help of DLC you can host this model let's say you are having one open source model now you can host this model in the DLC platform got it and to get the let's say Endo from the model what you have to do you have to use something called API Gateway okay API Gateway so this is another service from the AWS with API Gateway what you can do you can cre an API okay API like we saw like open a API now we used to use one API so here also you can create API with the help of API other people can access your model let's say this is user so user can access your model with the help of API request so this API will request this uh let's say model that means let's say you are using llama model okay and llama model is present inside DLC that means deep learning container it is running on the salemaker actually instance okay from uh from there actually you can get the response now let's say somehow you deployed this uh model like that okay the way actually I showed you with the help of say makeer DC API Gateway okay all the services let's say you deployed this model and now let's say it is working fine now there one issue we'll get the issue is cost okay so it will actually charge you huge amount of money let me show you so uh in that research article I got one image actually let me show you the image so I have already taken the screenshot so this is the image guys I think is this image is visible H see what they did actually they have taken different different llama model you can see they have taken different different llama model let's say llama 2 7B 7B chat 13B 70b okay and this is the model ID and this is the max tokens like uh what would be the input length Okay of this model I think you know Lama 2 Tes actually 496 token okay and this is the default instance type actually they're suggesting let's say if I want to use Lama 27b model so I have to take M ml. g5. 2x large machine okay and this machine is available in the Sal platform now let me show you the salesmaker so if you just search for sales maker okay sales maker pricing just search for salesmaker pricing in Google so you will get one website machine learning service Amazon salesmaker pricing a let just try to open it up now here if you just go below you will see uh salesmaker will give you all kinds of pricee list with respect to all kinds of uh let's say machine type let's say you want to use MLT 3 medium it is having actually 4GB RAM and here you will get two vcpu and this is the price per hour like that actually it is having actually different different instance actually you can see it is also having large instance so you can see it is also having large instance x large instance okay then 24x large also instance it is also having now see the more good configuration instance you will be taking that means your vcpu is increasing as well as the let's say memory is also increasing you'll see that price is also increasing so this is the par hour price let's say par hour price it will charge you $6 if you're taking M ml m5d 24x large now see if I show you the chart now so this chart also they have also suggested let's say you are implementing one project with the help of llama let's say Lama 70 okay Lama to 70 billion parameter and now see this is the configuration you have to take this is the configuration you have to take mlg5 48x large okay configuration machine uh but let's try to consider Lama to 1 billion okay let's say you want to use this this actually configuration model now let's find this configuration MLG fine 12x large so here you can find out that configuration you can see uh there are different different CI are available this is the M5 C5 you can also find out the G5 so as of now let's try to consider this machine let's say ml uh M m5d 24x large okay let's say I want to use uh this okay this machine I want to use this machine this machine is having U 96 actually CPU and it is also having 384 GB uh memory now what is the Power Hour cost Power Hour cost is you can see uh $6 okay almost $6.5 you can consider $6 as of now now let's calculate the pricing so what I will do I will open up my calculator uh I'm going to actually calculate the price per day actually per day how much actually it is charge me let's say the price you can see it's $6 okay $6 times I want to run 24 hours this model okay this model I want to run let's say 24 hours in my uh actually says make okay platform because see 24 hours your application should be keep on running it's not like that you are running for two hours again you are stopping no people won't be using your application chat ZB is running uh 24 hours okay uh 7 days it is all uh I mean running every every time so you will see there is no downtime so whenever you are creating your application it should be always running in 24 hours okay so let's say I want to consider part day how much actually it will charge me so 24 six six 6 * 24 so it will uh charge me actually $144 only just one day it will charge me $144 now if you're from India if you're from Bangladesh if you're from any other country just try to convert the currency okay in your let's say money and try to see how much money actually it is taking part day from me got it now let's say I want to run uh this model uh let's say I want to run this model let's say seven days what I do I'll just multiply with seven multiply with seven now see this is the C Day cost I got 1, $8 so it is more than 1 lakh rupees okay more than one lakh rupees actually it will take if you're running this model uh 7 Days let's say I want to run this model 4 weeks so this is the charge actually it will take now let's say I want to run this model one year so I can multiply with 12 see this is the one year cost actually you are getting $48,000 okay 3384 so now let's see if you're running a uh small startup if you're running is a small company so will you afford that much amount of money will you be able to pay this this much amount of money no definitely you are not so at then your cost is increasing if you're using this kinds of Open Source large language model if you're deploying uh on this kinds of let's say platform on the custom let's say hosted server so you will have lots of cost at end so better to use the openi model that time yes or no because openi model will charge you less very less than okay very less than than the this amount of money got it so that's why so that's why actually llm Ops comes into picture so what big tech company actually did they came up with actually different different kinds of llm Ops platform so I think you saw um not recently actually this llm Ops platform came actually long back so Google actually came up with one um LM Ops platform called vertex AI okay vertex AI so previously when you used to use mops now also we used to use something called vertex a for the mlops also because this vertex a provides all kinds of functionality all kinds of let's say pipeline for the machine learning operation as well okay nowadays they also integrated geni okay in the vertex AI even AWS that means Amazon web service they also came up with another lmos platform called Bedrock okay Bedrock okay Bedrock so Bedrock is also one llm of platform and this is the new service actually they have launched in the AWS actually let's say website you will see that there there would be one section called Bedrock okay so Bedrock also provides all kinds of llm off Services let's say you want to use any kinds of foundation model you want to use Lama Mistral okay any kinds of foundation model so this model is already hosted see this model they have already hosted in their server let's say whatever Lama model whatever Mr model whatever model you see these are the model is already hosted in this llm offs platform like that Google has also hosted lots of found model in their server it's not like that they're only hosting their model let's say Google is having their own model they having jini model they having Jimma model yes or no apart from these are the model they also hosted some of the foundation model from any other organization let's say from meta AI from let's say mistal so they so what they did actually they collaborated with these are the organization even they hosted their model in their platform as well and they created one endpoint they created one API okay they created one API now as an user as a user what I can do I can use this API to interact with this model that means like our openi will send the request okay to we send a request to this kinds of llm of platform with the help of API and here I will mention what kinds of model I want to use and this will give me the response that means I don't need to download this are the model in my system okay so this is the main benefit to use this kinds of lmos platform okay and it is having all kinds of flexibility let's say you want to connect the data you can easily connect let's say you want to connect the vector database you can easily connect okay that means all kinds of storage all kinds of flexibility this LM platform will provide you it's not like that manually you have to take from any third party let's say tool it's not it's not like that complete like let's say pipeline it is already having even let's say you are thinking to fine tune this kinds of foundation model you can also fine tune you can also perform the fine tune operation so fine tuning will happening in their server only not your not your system only you just need to set the configuration of the model then you have to pass your data automatically it will perform the fine tuning in their server yeah it is sure they will charge you but you will see this price would be very less very less than your this cost actually whatever cost actually I I showed you here now if you're let's say manually creating your Ser if you're using manually different different kinds of services that time price would be high but if you're using this kinds of lmos platform your price would be very low guys trust me it would be very low if you see the pricing now if you see the pricing I'll tell you whenever we'll be exploring these are the LMS platform there I'll also show you the pricing you'll see the pricing it should be very low cor so that's why actually llm Ops is required we need the LM offs if I want to use this kinds of foundational model it's not like that we only need to rely on the openi model because we we saw that there are so many model which is more powerful than my openi model even there is another cloud provider I think you know a so a also having one lmos platform called a your openi okay a your openi so they have what they did they collaborated with openi and they bring the openi platform in the Azure platform only okay on top of that they created some more services and it is running on the AZ right now so if you know about open now open so you'll be also work with the AO okay AO let's say open so openi wise we already saw how we can use openi with the help of open py how we can access different different kinds of foundation model okay so yes guys this is the complete idea of our llm Ops and why llm Ops is required okay so in the next video we'll be learning about one amazing actually L platform called verx a from the Google site so we'll see the entire platform what kinds of service it provides even we'll also do lots of practical we'll also do the handson we'll be creating different different let's say llm power application with help of verx a even I will also show you the AWS Bedrock how we can use the Bedrock okay to implement any kinds of end to end LM powered application even we also learning how we can deploy these at the project as well fine in this video we'll be starting with our very first llm Ops platform called verx and I think I already told you verx is the platform from the Google so it is available in the Google Cloud so Google has developed this platform so here we'll be doing this complete genv on the Google Cloud we'll be learning how we can use different kinds of foundation model even uh with that how we can uh create different different kinds of LM powered application so guys here you can see this is the complete Revolution at the Google uh inside artificial intelligence I think you remember in 2017 uh they bring actually one architecture called Transformer so whenever this Transformer architecture came in the market uh after there actually so many Revolution happened in the field of language model in the field of large language model that means whatever architecture you can see nowadays all the architecture are using this Transformer architecture in the back end even I already uh created one video right I already took one session on the Transformer architecture like what was the main component inside Transformer architecture and why it is so powerful right so then after that actually in 2018 actually they came up with another model called Bart BT so this is one of the actually language model they brought then they brought actually T5 model then slightly actually in 2020 actually they brought one large language model called Lambda so Lambda was amazing model in the field of large language model then 2021 they uh actually published Alpha fold model then 22 Palm model and in 2023 they introduced something called B model OKAY b a r d b I think we used to use uh Google B right Google B that means uh it is the Char gbt kinds of interface I think remember nowadays this B has been let's say replaced with the jini so we uh now actually we search for Jin but previously we used to search for B right so this was the first application from the Google actually the published and you can see the model summary like what are the task this model can perform so as you can see T5 can perform Tex to text generation it's a transfer learning model uh it is having actually 10 billion parameter and it's open source model then Google Lambda model then you can see the Lambda model uh trained to convers then Alpha fold predict structure for uh for all known proteins then Palm actually this is the industry leading actually large language model they they introduced something called conversational AI service powered by Lambda okay then in 2024 I think you can see from the Google research we are having gin then uh imag 2 okay this is uh this can actually generate image okay with respect to the text prompt then we're having also something called Jima okay Zima is one of the large langage model then there is another model called chart this is the model it can generate is to text so that's actually Revolution happened that means uh it took actually lots of time time to came up in this position and Google introduced actually so many research so many model okay so many technology and nowadays actually we are using these kinds of Technology okay in the field of gen tvi and guys here you can see these are some actually first party Foundation model like Palm for text you can customize language task then uh Palm for actually chat so here you can perform conversation okay then you can uh do the Imaging okay for the text to image that means if you give any let's say prompt it will generate the image okay then we also had something called embeddings model that means embedding API let's say you want to generate any kinds of embedding for the text or image you can use this kinds of embedding model okay then chart model spe to text then code generation model was also available so this was the first party Foundation model in the Google research okay then they introduce something called Model Garden okay so what is model Garden so here you can access customize and experiment with different Foundation models and its API okay that means what Google did actually they uh introduced one platform called vertex a so vertex a was the platform in the Google and it's been actually long this platform is uh available in the Google uh Google Cloud but only we used to perform mlops operation with the help of vertex a but whenever actually this Genera VI came so they updated this vertex Ai and they introduced something called Model Garden that means inside verx AI you have one model Garden inside model Garden you are having all kinds of Google model whatever model actually Google has published now all the model you will get all the foundation model you will get in the model Garden apart from that you will also get something called called open source model like whatever open source model I think I showed you now from the hugging phase from different different let's say organization like llama mistal Falone right different different kinds of Open Source model I think I already introduced in the hugging pH so what they did actually they also hosted these kinds of Open Source model in the model Garden that means you can use all kinds of Open Source model from the model Garden itself okay from the verx a then it is also having some partner Partners model so what is Partners model exactly so they collaborated with different different kinds of organization they collaborated with the different different kinds of company let's say cloud is a company then we are having Meta Meta is a company okay that's how we are having different different kinds of company so this company has also introduced so many large Lang Bas model okay so what they did actually they collaborated with the company collaborated with the organization and all kinds of actually model they introduce in the model Garden so this is called actually partner models now let me show you the vertx platform right now how it looks like you can see guys this is the previous vxi platform okay that means here we used to only perform the ml operation that means machine learning operation that means you can apart from the experiment train and deploy okay for the data science workbench now what they introduce actually on top of this platform they introduce genbi you can see they introduce something called genbi platform that means here you can perform the pr designing fine tuning gen Studio okay Foundation model open source model okay then uh you can also perform actually LM Ops everything you can perform in this platform right now that means instead of replacing uh the previous actually let's say verx AI services on top of that they create created one additional layer and this is called actually llm of splat form now it is on the vertic L okay now I think it is clear now as I already told you uh they introduce so many actually Partners model okay I already told you they introduce so many partners model in the model Guiden so these are the partners okay these are the partners actually with Google I think nowadays they also collaborated with so many organization if you open the Google U Cloud vertx we'll see different kinds of actually partner models are available so here you can see AI 21 Labs uh this another organ ation they collaborated with the Google then anthropy C then contextual AI okay mid Journey then osmo then resistant. a meta okay Runway and so on so these are the actually Partners model actually it will you'll be getting in the model garden now let me show you this uh gcp okay gcp vertex AI so let's open up our account and let's open up the verx there and try to see whether these are the things are available or not so for this guys what you can do just search for gcp okay gcp console in your Google and make sure you have one gcp account okay if you don't have the gcp account guys so you won't be able to use the vertx so make sure you if you don't have the account just try to create one account initially it will give you $300 credit okay so let me uh login with my console so guys as you can see this is my gcp console so here what you have to do in the search button just search for vertex AI okay verx AI so you'll see this is the platform this is the lmop platform you'll get see this this is the complete vertx AI now left hand side you will see different different kinds of services so here I already told you it is having model Garden so let me click on the model Garden so here you will see all kinds of model so guys as you can see whatever model I showed you all kinds of model are available apart from that uh they have also actually brought new new model here you can see uh so Foundation model okay then Partners model see all kinds of models are available okay as you can see Meta model is available that means llama 2 llama 3 okay then Palm model uh you can also show all the model here so see here I can click on the show all model see all kinds of model are available see mral Al also is there then Jamba model then you can see cloudy okay apart from that you will see different kinds of uh actually Foundation model you will get okay and these are the actually partner okay partner company apart from that you can also filter out let's say you need language model so here you are having 63 language model you can filter out all the language model let's you need visual model you are having 11 Vision model you can also filter out all the vision model okay now let's say you want to use this model just click here and you will get all the guideline how to use this model andal okay they have already given the source code everything they have given okay how to uh use the python uh SDK for uh let's say using this model and all all the let's say guideline they have already given okay I'll tell you how we can use these are the model one by one okay now let's say you want to also play this model in the model Garden okay it is also possible let me show you so let's say this is my model Garden let's I want to uh like play with this model jini 1.5 Pro uh so I'll just click here now you can see open in a Vertex AI studio so here you can open this model in the AI studio so they are also having one AI Studio let me show you even you can also open with the help of collab notebook and there also you can also play with this model now let's click on the I agree and continue now here you can pass any kinds of prompt let's say I give hello and I will send this prompt and this is the response actually I'm getting okay so that's how actually you can play with different different kinds of model before using it like how this model is working on all what is the performance of the model everything you can perform here okay then you can also search by the model name let's say you need Jimma model Lama model anything you can search here you will also get these are the model got it and Guys these are the model is already hosted in the Google Cloud so you don't need to manually download these are the model in your system you can use this at the model with the help of uh API request as I already told you that's how so that is why we call it as a llm of platform okay so they gives the API canel functionality with the help of API request we can use these are the model in our uh let's say project implementation and don't you worry I'll tell you how we can access different different kinds of model we'll be also implementing some kinds of application now apart from that vertic also provide so many services you can see it provides the pipeline services this is the pipeline for the mlops let's say you want to perform any end to end pipeline data ination data validation model training model evaluation you can use the pipeline Services apart from that it also provides the notebook services that means let's say you want to uh let's say use one large language model uh you want to find in one large language model you can use their collab Enterprise that means you you can U take the machine okay good configuration machine good configuration collab notebook in their Google cloud service okay then you can also take the workbench as well then you can see different different studio is there you can perform different different kinds of let's say u i mean task task demo let's say you can perform chat demo Vision demo translation speech okay you can play with these are the functionality as of now I'm not showing then you can also download different different kinds of extension for the geni from the extension Market here you will also get something called feature restore data set okay labeling task then training experiment okay so some of the services you will see these are the MLF services not the Genera Services AP from that you will also get something called vectors RCR this is another super important service from the verx a let's say you don't want to use any other Vector database what you can do you can use uh this verx a vector SE this is another Vector database okay and this is hosted in the Google Cloud that means in the verx AI so going forward I will also show you how we can use this uh Vector search Okay Vector search functionality from the verx a itself so yes Guys these are the services actually verx a provides so unless an Al one not exploring all the functionality okay you won't be getting so try to open this account guys and try to explore all kinds of functionality okay now there I told you you can perform different different kinds of operation okay different different kinds of this operation it will give you all kinds of functionality okay and I showed you the model guarden and all uh so then I already told you we can also perform something called fine tuning so it's not like that you can only use these are the Foundation model for the inference no you can also perform the fine tuning operation that means this vertx I will give you the functionality you can also improve the model performance with the help of fine tuning okay on top of your custom data you can also perform something called human feedback to increase your model usefulness like I think previously you saw uh in the chat GPT uh it used to give one feedback box right let's say how use your experience so that you can uh give your experience rating so that kinds of rating also you can pass if you're using this kinds of verx AI then here you can also generate customize for your business then here you can also improve Google's predictive AI with your own custom data okay everything is possible here now you can ask me what kinds of task actually I can perform here you can perform all kinds of task so you can perform language image video okay documents speech tabular so here all kinds of task you can perform with the help of vertx AI okay and what verx actually provides uh as I already told you it will give you stateof the Art Foundation model even you will also get end to end governance that means you can do the pro prompting tuning okay you can also perform mlops operation on the verx a even here you will get the data privacy so whenever let's say you are uploading your custom data to the verx a it's not like that your data would be leaked uh it would be secure okay so this kinds of actually ensure you will get if you're using verx platform that means you will have the complete data security so no need to worry about your data if you're having any custom data all the data would be secured here so now I think you got the difference between mlops and LM Ops so in the verx I we have the AML Ops um like Services already on top of that they created the LMS okay so here we don't need to throw out your existing mlfs investment okay so here what you need to do you just need to understand the unique MLS need for the Gen that means whatever additional let's say functionality they have given just try to understand and try to use uh let's say those are the service in the genbi field okay that means uh you can see in the verx AI you will see multitask model fronting okay then model Garden customization managing new artifacts evaluation monitoring okay connecting with the Enterprise data let's say you want to connect with different different kinds of data sources it is also possible in the vertx a so now as a high level you can see the complete mlops on the verx a this is the so this was actually our traditional verx a that means here we can perform experiment training and deploy uh and predict okay for the machine learning operation and now in the vertic a you can also perform something called uh prom predict okay then you can also use something called Foundation model that means all kinds of Z VI based functionality you will get here then uh I already told you you can also connect with uh different different Enterprise data let's say you want to connect any external sources any API any website you can also connect okay with the help of vertx a so guys all kinds of flexibility you will get here if you're using verx LL platform so no need to worry about anything so yes guys this is the complete uh introduction of our verx a the complete generative AI on the GCB cloud in the next video we'll try to see how we can build different kinds of transformative llm powered application okay with the help of this verx a platform so far we have discussed about llm Ops and this uh generative vertex AI now in this video we'll be uh trying to use this vertic as a practical that means let's say if I want to use any kinds of foundation model uh with the help of python code so how we can do it okay that means we'll be doing the entire handson in this video so try to open up your Google uh cloud guys everyone and just try to open up your verx I I already show you how we can open the open up the vertex a right now after opening the vertx a the first thing you have to do you have to enable all the recommended apis so there you will see one option enable all the recommended apis so make sure you have already enabled all the recommended apis so after en in uh in the notification bar you will see uh See all the API has been enabled so these are the API you should enable otherwise sometimes actually will get actually different different add so that's why make sure you enabled all the API now here you can either open up your Google collab uh to perform all the let's say operation I'll be doing here either you can also open up this collab Enterprise or workbench okay so here I'm using this Cloud platform that means LM Ops platform so in this video I'll show you how we can use their services actually that if I want to use collab Enterprise how we can use collab Enterprise you can also launch this Marben so what is the difference between Marben and collab Enterprise let me show you so in workbench actually you can select the machine configuration so here you can create a new workbench just try to click on create now here you can select the machine configuration like uh what should be the machine name what is the reason then you can also select the instance type okay that's how actually you can uh change the configuration okay all the configurations see you can change here okay everything you can change here that means if you want to create a custom machine as per your requirement you can change here and here you can see the pricing summary that means per hour it will charge you $0.18 you can see price is very less it's not like very huge amount of money they will be charging it's like very less money so you can also create your custom configuration but here I'm not going to create the custom configuration what I'll do I'll use the collab Enterprise okay this one so it will give me Google collab kinds of interface and there I can um actually do my coding so after clicking on collab Enterprise so here you will get one option create a notebook Okay so just create a notebook you can also select the region but I will keep the default region e Central one okay that's it now you can give the name I can rename this notebook let's say I'll rename it as um vertex AI demo okay you can give any name I've given this name now if you want to increase the size of the notebook if you want to increase the size of the Cale let's say if I write something so the text is like very small here so I can also so increase the size so for this what I can do I can click on the settings uh just go to the editor and here you'll see this font size just try to make it as uh I can take 28 okay 28 I think it is fine now the next thing what you have to do guys you have to connect this notebook so let's click on the connect button see guys once you will be connecting the notebook it will give you this kinds of popup screen that means you have to select account okay like which account you want to use so make sure whatever actually account you are using for the Google Cloud console that means is for the vertic a that account you have to select here so this is my Google Cloud account I'll just try to select now it is also asking for password so let me give my password and I'll click on next so if you're doing for the first time so it will give you this kinds of authentication uh it's just a one time authentication okay that's it so guys as you can see my runtime is connected now if I execute the cell if you want to execute the cell just press shift and enter the same thing the way actually you execute any collab notebook you can execute as a same now see I'm getting the okay output now you can also download this notebook so there is a download button you can also download The Notebook so first of all uh let's do the coding after that you can also download uh this notebook even I will also share this notebook with you in the resources section fine all right now see here we'll be using actually verx okay we'll be using verx services that means we'll be using model Garden so from the model Garden itself what we'll do we'll try to access different different kinds of foundation model got it and if I want to use model guardan that means the complete vertx I I have to install one Library so you have install vertex AI SDK for python because we'll be using python code right and if you're using python code you have to install this Library so here I want to install the upgraded version of the package and this is the package name Google Cloud AI platform got it if you want to use Vex a you have to install this python package now let me install okay now after installing it will tell you restart the runtime just click here so it will automatically restart the run time after that you just need to import vertex AI okay just to test whether everything is fine or not now see if I import it should work see it's working fine there is no error fine now see those who are running this code from the collab notebook you just need to do uh two configuration here so let me show you so the first configuration you have to do um this one that means you have to authenticate with the Google Cloud first of all so here let me write the code so first of all you have to authenticate with the Google Cloud okay from the um collab notebook and for this you have to execute this line of code so here everything I'm running from the vertex only that me I'm using collab Enterprise from the verx a I don't need to perform the authentication but if you're running from the Google collab that time you have to do the authentication guys okay so let me show you one example let's say if I want to load any model uh from the collab Enterprise that means if I'm using Tex a services I don't need to authenticate it I don't need to authenticate it I can easily load it let me show you so for this let's import some of the library first so here I'm importing some of the library you can see gen generation config generative model okay I'll tell you why I'm importing them and what is the use of it first of all let me import all of them now let's say I want to load one model let's say I want to load this gini 1 uh Z pro model so you can see there is a model zmin 1 Point uh Z Pro just click here uh if I click here you will see the model ID you just need to copy the model ID from here now if you just go below they have already given the source code here you can see this is the model ID just try to copy copy this ID and try to paste it here okay that's it now see if I execute this code it will automatically load the model see there is no error but if you executing from the collab notebook you will see you will get one error that means your notebook is not authenticated with the Google Cloud okay so that's why you have to execute this lineup code it will uh what it will do it will authenticate first of all it will ask for the email address that means which email address you are using for the Google Cloud account that email address you have to select first of all got it then the next uh actually configuration code you have to run this one let me show you this one if you're using collab Enterprise guys you don't need to execute but if you're using Google collab you have to execute now see this is the code you have to execute so here you have to pass the project ID as well as your location okay that means region now how you will get the project ID so here you can see on top you have the project ID just try to click here now see I'm inside my first project so here is the project ID just try to copy the project ID and try to mention it here okay in the uh in this box actually you just need to paste it here then you have to give the region name and what is your region name you can see I'm inside us Central one so try to mention us Central one here okay then if you execute it will automatically initialize with the vertex a that means it will authenticate with the vert.x a with your configuration now it will get to know okay now you are you are the correct user so once it is authenticated then you will be able to use all the services from the vertx a that is all the foundation model all the services you can use got it so this two line actually you have to execute if you're using Google collab see collab only and if you're using collab Enterprise no need to execute guys okay you can run as it is I hope it is clear now okay so now I think you saw how we can load the model to load the model you have to use one function called generative model you can see I already imported this generative model from the vertex a preview. generative a models now P generative model inside that you just need to give the model ID now if you want to use any other model simply just try to open let's say you want to use 1.5 pro model so just click here okay so you can see jini 1.5 pro model now just try to go below and here is the model ID so try to copy the model ID so this is the model ID just try to copy and try to paste it here so that's how if you want to use any model from the model Garden just try to copy the model ID and try to past it inside this function it will automatically load that model for you so now let's uh test this model so here I'm going to pass one prompt so here I have already prepared one prompt let me show you this is the prompt guys I have prepared okay see so here I'm using the model object and I'm calling one function called generate undor content inside that I'm passing the prompt why is Sky uh so here is the prompt why is the sky blue and stream is equal to True why I have given stream as equal to true because if I show you if I let's say open the j j or chat chat GPT if you can open anything let's say if I give this same prompt here now so if I let's say pass the same prompt I is the sky blue any kind of prompt if you give it will give you stream kinds of output see it's not uh it's not actually onot output it will give you stream output so I think here you saw it will give you stream output that means after one word it is coming another word another word okay that's how it is giving stream output not in one shot so that's how we also want to get the output from my response okay that's why I've given this parameter stream is equal to true that means it will give you stream output got it now see if I execute so here you will get one response object see this is the object okay so it would be a object see this generator object now here I can apply any kinds of iterator that means looping and I can get the response now let me show you so here you can apply looping so here I'm applying looping for response in responses and I just wanted to print the text okay whatever text actually I'm having from the response I want to print it now so if I execute the for Loop right now you will see the response see this is the response actually I got and this response is uh actually short response that's why you didn't saw the streaming output but if it is generating bigger output you will see the streaming output would be visible got it now you can try with different prompt let's try with another prompt so I'll give another prompt here let's say I'll give U uh what are the latest developments in the auto uh automotive industry okay now if I execute so it should give me the response okay see this is the staming response I'm getting guys I think you saw okay that this is called streaming response see the complete response I got great now see here I pass the prompt directly okay in the generative uh generate content function but if you want to pass as a parameter you can also do it for this Ive created another example so this is the example guys just a minute huh just see that so here I created a variable called prompt and inside that I've written The Prompt let's say this is my complete prompt create a numbered list of the 10 items each item in the list should be a trend in the take industry in Trend should be a less than five wordss okay try uh now you can give any kind of prom now here what I'm doing I'm calling the model object generate content inside that I'm giving the prompt okay whatever prompt actually I have defined stream is equal to two then again I'm performing the looping operation now see if I execute it should give me the output okay now you can also customize the prompt let's say here I can give uh translate in Hindi see I'm also getting the Hindi translation as well got it so that's how you can also customize your prompt it's up to you now I think you remember whenever I was uh like going through the model Garden so I can also open this model in a vertic a studio I think I showed you so let's open this model in the verx a studio see if you open the verx a studio right hand side you can see you can also set some of the model parameter like temperature output token okay so these are the thing you can also change so how we can change with of python code because as a developer we have to use with the help of python code not from the UI interface got it from the UI interface also you can use the model but as a developer we have to use from the python SDK so here we can also set the model configuration so let me show you so for this you have to use this function actually so I think you remember the generation config okay so let me show you so I already prepared see in that generation config I'm passing all the parameter okay let me the temperature top P top K candidate okay Max output and so on and I think you already know this the parameter I already explained previously what is temperature what is top b top K got it here temperature means here you are assigning the model creativity like how much creativity you want from the model if it is close to one that means it will take risk it will be more creative if it is close to zero it won't be taking any kinds of risk okay that's the idea now this generation config you have to pass as a parameter of generation config here here you can see generation config is equal to generation config and the same prompt I have given stream is equal to two again I'm loing through the response now if I show you I'll see that your uh output would be more creative okay so previously I think you remember we we got actually uh very short output now see this output is more creative right now because we given the uh configuration model parameter right now okay I hope it is clear now let me show you another thing you can do this is called actually test chat prompt now what is test chat prompt let me show you one example let's say here I ask one question why is the sky blue okay now this promt actually have given and my J will try to remember this prompt now if I ask give me the answer in bullet point okay now see here I haven't mentioned I want the this answer I just given give me the answer in bullet point it will automatically remember my previous let's say context okay that means I want to ask this particular response now see it has given me in the bullet point okay so this is called actually memory that means it is trying to remember the chat history so that thing you can also perform here so let me show you so for this you have to use one more line here this the line guys model. start chat so this start chat will automatically remember all the conversation you are doing with your large language model now this is the prompt actually I've have given my name is buy you are my personal assistant my favorite movies are the lord of rings and Hobbit suggest another movie I might like so this is the prompt I'm giving and this is the stream is equal to two I'm giving and now see if you're using chat that time you have to use chat. send message okay chat. send message because here you have initialized the model you remember now see if I execute the program so guys as you can see I got the output okay now what I will do now what I will do based on this answer I will ask another question so because it has remembered my previous context H so here now asking are my favorite movies based on uh a book series this is the this is what actually I'm asking now see if I ask this question see it will refer my previous actually context yeah you can see both uh the lord of rings and The Hobbit trilogies are the based on the book series okay by JRR to tolken okay now I can show you the story so if you want to see the story just write chat. history so it will show you the entire history see so first of all you ask this prompt your model has given this answer then again you ask this question your model has given this answer got it I hope it is clear fine so that's how actually we can use any kind of language model now let's try to see uh any multimodel that means we'll be also using some visual model so I think you know U here actually we are also having some Vision model as well so this is my model garden now just click on the vision model you'll see there are different different kinds of vision model are available so from here I'm going to use One Vision model so Jin 1 Point Pro Vision model so you can search this model here now if you want to load this model you can load like that this is the model ID so let me show you this model I'll copy the name and in the model Garden so here you can sech this model you will see J 1.0 Pro Vision model okay now see this is the visual model so with this model actually you can also work with the images and videos okay now this is the model ID you have to give now I have given the model ID now let's load the model fine now here I'll be working with images and videos and to work with images videos I need some helper function this that means this helper function will help me to load the image visualize the image okay so here I have created some helper function let me show you so these are the helper function I created you can see different different helper function I created uh display image so it will display the image if you want to get any image as a bytes from from the URL you can get uh with help of this function load image from the URL you can use this function get URL from the GCS you can use this function print multimodel prompt that means if you want to print any multimodel prompt you can use this function okay so that's how we can create some utility function and this function you will get over the internet if you just simply search how to display image give me a function you will get these kinds of cod okay so I have initialized these are the utility related function as of now okay so here the first thing I'm going to show you uh how to generate actually caption from any image is okay so for this uh let's see one example this is the example guys so here I'm downloading my image you can see this is the image uh URL so so guys you can see this is the image okay this image actually will be downloading so here let me show you and how we are downloading the image we're using U GS util command okay so if you execute this command it will download the image from the URL then I'm loading the image then I'm giving a prompt describe this image okay I'm passing the image as well as the prompt then I'm using the multi model that means the model we have loaded I think remember this uh gini 1 Point U zero Pro Vision model okay you can also use any other Vision model so simply go to the model garden and try to choose any other Vision model you can use as it is okay now let's get back now whatever actually let's say output I'm getting I'm just rendering okay that's it now let me show you so guys as you can see this is my results I got so here I given a prompt and this is the image now it has given me the caption so the image shown a gray cat with black strips working uh in the snow the cat has yellow eyes and long tail you can see yellow eyes and long tail cat is working towards the camera okay that means this is a great caption my model has given me now let me show you another example so I prepared another example H so guys you can see I'm using another image now if I show you this example see this is my uh prompt I have given describ the image that means describ the scene now see this is the response I got now this is the response to ponon boats are anded in the charless river in Boston in the background are two Breeze and Boston skyline so guys as you can see this is a correct caption my model has given me okay now if you're use load image function that means the function we created in the utility function uh to load this image URL you can use this load image URL function as well and with the help of that we can also do the same thing okay there are different different technique you can load the image you can also use open CB to load the image okay it's completely fine now see I'm getting the same output now here we'll be learning another thing here we'll be combining multiple uh multiple image and text promp for the F shot prompting that means here I'll be passing the F shot to my model and my model will try to give me the response so let me show you one example I prepared so this is the example guys so here I'm using three image so let me open all the image so this is stored in the Google Cloud Storage okay you can see this is another image so you can see this is one of the image this is another image and this is another image so this three image actually I'm using here and with the help of load image from URL I'm loading both three images then first of all I'm giving the prompt for two images you can see this two images I'm giving the prompt this one and this one this one I'm not giving any kinds of prompt okay you can see I've given city is equal to London because you can see this is a London city and the landmark is a big b okay it's a big ban so you can search on Google big ban I think yeah see this is the big ban okay so that's why I'm giving some prompting that means I'm giving the label okay now promp two the second image I'm giving this is the Paris city city is equal to Paris and landmark you can see it's iffel Tower okay you can see it's I to and the third image I'm not giving any kinds of prompt now let's try to see my model is able to generate the actual uh let say promt for that particular image or not so here you can see I'm passing my image one prompt one image two prompt two and I'm only giving the image three here not the prompt now I'm using the multimodel and generate content now let's try to see whether it is able to uh identify that image or not see uh this two actually I have given it's fine now see third one city roome Landmark uh kosm okay so let me copy and let me try to verify uh see correct it's the correct one okay so beautifully my model is able to generate the response so this is called actually few shot prompting now also let's try to see some video example so what I will do I'll download one video so this is the URL of the video I'll download this video let me download and let me show you here so I think you remember Google has launched one phone actually called pixel okay you can see this the pixel this is the pixel advice advertisement you can see this is the pixel advertisement okay so this video actually have loed from the URL now I will give this video to my multimodel and I will give some prompt let me show you so I already prepared one prompt this is the prompt answer the following questions using the video only what is the profession of the main person what are the main features of the phone highlighted which uh CT was this recorded in provide the answer in the Jon format now see if I give this view uh video and if I give pass it to my multimodel it should give me the response see guys I got the response now you can see the person name is sha shim shimada profession is a photographer brand is Google phone brand is Google model is pixel 8 and uh and you can see the features video boost night sight City Tokyo country Japan amazing okay amazing actually response I got now you can use any kinds of video you can do the caption generation got it so that's how guys you can export different different kinds of mod model in the uh model Garden it's not like only Google model you can also let's say use meta model as well let's say you want to use Lama model just simply click on the llama and try to open this notebook so they have already given the all the code example and everything okay only just you need to execute and you have to see how we can access the Lama model and all got it so just try to explore guys uh this is uh up to you because because all the model I can't show you so I have just given the demo like how we can access different different kinds of foundation model now you'll be exploring whatever model actually you need later on got it okay and one thing guys after implementing all the code what you can do you can download uh this notebook and after that you can delete this instance okay no need to keep on running just try to delete the instance other way you can you can also stop the instance but I will try to delete it okay I'll just try to do the confirmation so after some time actually you'll see that this notebook would be deleted okay now see this deleted so yes uh this is the actually Hands-On part of this vertex AI so in the next video we'll try to see how we can uh do the set up everything on our let's say local machine that means uh how we can connect this vertx with the help of local machine that means uh we'll be coding everything in our vs code from the vs code itself we'll try to access the uh like verx a model that means Foundation model okay so we'll try to access the model Garden from the vs code so for this whatever setup actually required I'll tell you each and everything see how we can uh use this vertex AI from our local machine that means we'll be uh doing the setup everything in our our local so previously I showed you how we can use collab Enterprise that means everything I was performing in the gcloud but uh in this video I'll try to use my vs code and to access this vertx a what are the configuration we have to perform we'll be learning each and everything because see going forward whenever you will be implementing projects Right End to End projects so you have to implement through the vs code right and if you want to implement through the vs code you have to know how to configure this verx AI in your local machine okay so that's why it's super important to know how we can set up everything in our local machine itself so for this guys uh you need one tool actually so the tool name is gcp uh CLI okay gcp CLI install just search gcp CLI install on the Google so after searching this gcp CLI install if you just go below you'll see this link actually install the gcloud CLI so just try to open it up mhm now here you will get the installer see download the installer so I'll click on the link so it will automatically start downloading this CLI for me see it has downloaded okay and if you're using any other operating system like say Linux then Debian Red Hat sento Mac voice okay all the command is already written here you can follow the command and you can install this gcloud CLI in your system because with the help of this gcloud CLI will be doing the authentication with our account okay that is the thing now I have already downloaded it now what you have to do just double click and try to install so the way actually you install any kinds of normal software you have to follow the same step okay there is nothing new so for me I already installed see after installing just search for Google so you'll see this Google uh Cloud SDK shell just try to open it up so we will see this kinds of window okay if you are getting this kinds of window that means you have installed successfully okay now let me close it now what I will do guys I will open up my local folder and here I'm going to open up my um terminal you can open up your any kinds of terminal whether your anagon terminal GB terminal anything now let's also open up my vs code here all right so here the first thing what you have to do guys you have to create one virtual environment after that you have to install all the required packet okay then after that we'll be writing our actually code okay with the help of vertic C so to create the environment you can execute this command so cond create typen in let's say uh vertex AI verx a demo python is equal to let's say I'll take 3.10 ien y now let's create the environment okay it's done now let's clear uh before clearing I have to activate the environment so this is the command let's try to copy and try to execute it here H now let's create a file called requirement. txt so I'll just create this file requirements. dxt inside that I will mention all the requirements I need so these are the requirements guys I need I think you remember so I think you remember to use the vertx a we have to install this package Google Cloud AI platform I think in the collab Enterprise also did the same thing then stream lead I want to use because I want to create a simple user interface uh there actually you can give a prompt and you can get the response and python. because I'm going to manage my gcp credential okay that's why now here let me create this file as well so do EnV okay inside EnV you need actually your project ID okay then you need region I'll tell you how to collect this project and region but before that let's do the configuration okay without gcloud so first of all let's me install all the requirements so I'll just write P install ien our requirement. dxt all right so installation is completed now let's do the configuration uh with our gcloud so for this uh you have to execute this command called gcloud in it okay just try to execute this command guys so if I execute this command you will see that see if you're doing it for the first time you will get this kinds of window you must log in to continue would you like to log in I'll give yes so guys now here you have to select the account the account actually you are using for your gcloud account so this is my account I select now you have to provide the password so this is my password and I try to do the next operation okay then click on the continue and allow okay now you can see uh I'm done with the authentication now if I come back uh see now actually I'm getting my project ID you can see I'm getting my project ID got it so let me show you if I go to my dashboard now if I click here this is my project ID uh studos uh loader 4361 I think you can see that uh Studio loader 43 61 and2 okay so this is my project IDE yeah now if you already have one existing project you can select it either you can create a new project so for me I already have the projects I'll just select the one I'll select the one that means my uh existing project now it is asking for do you want to configure a default compute region and zone I'll give yes now it is telling which region you actually want to take so what I will do I'll take this region actually so Central us so let's say I will take this one US Central 1 C so I'll give seven here okay now I think it is done now let me clear my terminal okay so everything is set now let's uh create one file here called main. by inside that I'm going to write all of the code okay that means we will be trying to access one that means here we'll be trying to access one um model from the model Garden but before that you have to set this EnV so you have to give the project ID so here is the project ID guys I think I showed you how to get the project ID this is the project ID just try to copy and here try to pens then you have to give the region so I think region I already showed you so here you can check the region click on the collab Enterprise left hand side you can see us ipen Central one just try to select it us ipen Central one okay now just try to verify T Central H uh one okay huh so it's fine now let me save now let's create the main. pi so first of all let's import all the necessary Library yeah so these are the library I need guys I think remember I was also importing them in my collab Enterprise so verx AI then stream L I need for the user interface then I'm also importing some of the necessary uh let's say function from the vertic preview generative models okay so I need generative generation config generative model and EnV I need because I want to load this EnV file now let's select my current environment so this is my environment okay now this error will be disappear now the first thing I'll uh load my project ID as as well as the region from my environment okay for this this codit you have to run got it then I'll be initializing uh then I'll be authenticating with my verx a so this is the authentication code guys verx a. init you have to give the project ID as well as the project location that's it now let's load the model so here I'm going to load one model from the model Garden called gin 1.0 Pro so let me show you if I go to the model Garden so this is the model guys I'm trying to load just click here and you will see the model ID so just try to copy the model ID and you can use it so this is the model ID guys here just try to copy and mention it here okay that's it then I have created a simple function let me show you so this is the function I created inside that what I'm doing I'm just first all creating my uh streamly title first of all I'm U first of all I'm setting my page configuration like verx a demo so it will give you one name then I'm uh setting the header that means that means what will happen it will give you one title so here you can give any name so here I have given let's J mini on vertx a or you can give vertex AI uh vertx a local demo because everything we're doing in the local machine okay then uh user will give one question so that's why I have taken a uh text input box and this question actually I'm passing to my model you can see okay if question if there is a question it will execute this uh model otherwise it won't be executing okay after that actually I'm going through the response and I'm printing in my console okay that means in my stream Le console that's it now if I want to execute I have to call the function as well so let's call the function that's it now let's try to execute and try to see whether it's working or not so I'll write stream l run app.py sorry main.py needs now let's give the allow permission so this is the interface guys now here you can ask anything let's say I'll give a hello let's see you can also see the terminal to get the log okay you can see it is giving me one error it is telling uh Google authentication default credential your default credential are not found to set the default configuration you can visit this link so let's open this link um and I think it will suggest me some command there ah so let's copy this command and now I'll execute from my terminal let I'll stop it now let's execute I'll select my account the account actually I'm using for my gcloud so I'll give my password next so if you're doing for the first time so you might get this kinds of issue so once this setup is done now uh you can use it as it is okay now I think it is done now let's execute the application again now let's keep hello okay guys now see I got the output there is no issue that means what you have to do you have to set the credential as a default uh default actually okay credential so that's why we uh we actually executed this command gcloud o application default login got it now see I'm getting the output now here you can pass any kinds of prompt so here I can give let's say uh tell me about python okay see I'm getting the entire response okay got it so you can now ask any kinds of question that means from our local machine itself now we are able to access the model Garden that means by verx a Services all right okay great so yes guys this is all about from this video now we'll be using this technique going forward whenever we'll be implementing any kinds of project okay so in the next video we'll try to see how we can uh Implement a rag based application okay with the help of actually uh verx a platform and we'll be using some vertica Services there all right so as of now we saw how we can use model Garden uh that means how we can access different different kinds of model on top of that how we can perform the inference but let's say if you have some custom data and with the help of that custom data you want to create a knowledge base and you want to connect your large language model there okay and you want to perform the quy operation on top of it so how we can perform it and this is called actually rag I I think I already explained okay in my previous video so if you're not sure about the r guys first of all check those video then you will be able to understand okay what I'm trying to implement here so that means uh let's say here I'll be using my custom data and with that custom data what I will do I create a knowledge base okay and I'll just try to connect my large language model there then I'll be performing the quy operation on top of my data the data actually I have uploaded this is the thing we be be implementing and here technology wise actually will be using the verx entire verx a platform that means here everything will be using uh Google cloud services okay we are not going to use any third party services that means uh to store our data we'll be using Google Cloud bucket and to store our embedding we'll be using uh Vector restore okay Vector restore service from the vertx AI this is one of the vector database they have created okay this is called actually Vector restore so we'll be using all the Google cloud service only not any other service okay in this video so for this guys you can see I prepared one notebook in the collab Enterprise so first of all try to connect the notebook after that you can check with the help of okay command and if it is giving the okay message that means notebook is running then the first thing what you have to do we have to install these are the library as I told you we'll be using uh some custom data I'm going to use PDF document that's why I'm installing this Pi PDF 2 okay this library then Google Cloud AI platform because if I want to use the verx a I need to install this package then I already told you we'll be using custom data that means custom document and to store this custom document I'll be using uh Google Cloud bucket I think you Google Cloud also provides bucket service let me show you so if you just open Google cloud and search for bucket so this is the bucket so here you can create different different bucket and inside a bucket you can store the data see I already created one bucket called start content 2024 inside that I'm having one documents I'll tell you how to uh upload this document here as of now just try to consider uh we'll be using this bucket services to store my content okay and no need to create manually it will automatically create I've already written the code for it so these are the package you have to install for me I already installed everything so I'm not going to install again now see you have to import these are the library right now so here I'm importing stories from google. cloud because I told you we'll be using bucket and to use to bucket I need this uh actually function then I'm also importing text embedding model from the verx AI language model because here we have to perform the embedding generation and to generate the embedding and need some embedding model and here I'm going to use Google embedding model OKAY from the vertx a from the model Garden that's why I have imported this text embedding model function then I also imported AI platform Pi PDF and these are the library I also imported here and here I'm using UI ID okay why I'm using UI ID let me tell you see there is a reason actually I'm using UI ID see if you're using vertex AI this rag would be slightly different okay slightly different that means let's say whatever documents you will be publishing let's say I will be publishing one statistics PDF I'm having let me show you the statistics PDF so guys as you can see this is the statistics PDF actually I'm having so this particular data actually I'll be using as my custom data now what will happen first of all I have to extract the documents from the PDF yes or no so after extracting what I will get I will get uh different different documents I think you know I'll get different different documents that means doc one okay then doc two doc two and so on now what will happen this document I have to convert to embeddings as well that means it would be converted to embeddings so let's say you will get some Vector here let's say 0.29 comma 0.55 0.88 and so on let's say this is the vector representation of this doc one and Doc two and so on let's say I'll I'll just create some dummy Vector here now here what I want to do with the help of this ey ID I want to assign some unique ID let's say the document one it has extracted I will assign one unique ID let's say this is the unique ID let's say 1 2 1 0 let's say this is the unique ID okay it has assigned to the doc one then the doc two it will assign another unique ID let's say 1 2 1 1 okay now what will happen this unique ID also would be assigned in the vector because this Vector is representing this documentation yes or no okay that's why this ID would be there 1 2 1 0 then this ID would be also there because this Vector is representing this document so 1 2 1 1 now what will happen let's say whenever you will perform the similarity s operation that time what happens actually it will return the relevant answer yes or no I think you know whenever you implement any kinds of rag whenever you perform similarity operation it will give you some relevant answer okay relevant relevant answer you will get okay and from where you will get the relevant answer from the documents only you will get the relevant answer the documents you are having okay now let's say it will give you this relevant answer let's say Doc one whenever it will give you doc one relevant answer that means it will return the vector because your model will only return the numbers not the text okay and this particular number will map where in this document that means this document is representing this Vector that means whenever your model is generating this Vector that means it will map this documents that means the text okay how with the help of this ey ID okay with the help of this ey ID so it will look for where this U ID is present that documents actually it will show you as a relevant answer okay now I think it is clear why I'm using this UI ID to give uh to assign actually unique ID uh like uh in front of my documents and in front of my Vector embeddings okay now I think it is clear now let me clear my boat now the next thing what you have to do guys you have to initialize some of the variable now see if you're doing this project from the Google cab first of all you have to authenticate with your gcloud and how to authenticate I already shared you two code I think you remember two configuration code I shared with you in my uh like verx demo session so you can refer the notebook and you can first of all authenticate with your Google Cloud okay said until you are not doing the authentication it w be working I'm running from a collab Enterprise that's why I don't need to do the authentication so if you're running from the collab Google collabs so you have to activate this line actually project so you have to give the project ID here how to collect the project ID this is the project ID got it so here I'm running from the collab Enterprise so I don't need this variable I'll just try to comment it out so here what I need I need the location and this is my location uh then uh PDF path so why do you have to upload the PDF so in the files actually you have to upload the PDF let me show you so here you can right click and upload and try to select the PDF whatever PDF you are having just try to open it here it will automatically upload here see for me I've have already uploaded and this two file would be generated as of now U see I already executed this project okay that's why all the artifacts you can see okay but for you it would be empty initially so this two file would be created how it will be created I'll tell you as of now just try to consider we have uploaded the statistics of PDF file got it then you have to give the bucket name so you can give any kinds of bucket name and make sure this bucket name should be unique so this bucket would be created automatically in the bucket section see it is already created for me again this would be created automatically you don't need to create it manually then here you have to give embed file path what is embed file path because see I already told you uh first of all we have to extract the documents from my PDF then what we have to do we have to generate the embedding as well with respect to the documents and this documents and this embedding I I'm going to save in a Json file okay that's why I'm just creating some Json file you can see these two Json file I'm creating okay starts embedding Json and start sentence. Json inside sentence it will store all the documents that me the English text and inside embedding it will all the uh your embedding okay embedding of the sentence that means whatever let's say documents you are having that means whatever documents you have okay with respect to that it will store the embeddings as well okay with the unique ID so that is the thing then you have to give the index name index name means let's say here we'll be using Vector search now and inside Vector search we we just create an index the way actually used to create the fine code index I think remember we create index here so this is the index name it will automatically create that index now here I have written a function this function will extract the sentence from the PDF so it will take the PDF path and it will give you the sentences that means the all the documents it will give you then I have written some of the helper function guys you can see generate text embedding that means this function will generate the text embedding it will take the sentence and it will generate a text embedding with the help of text embedding model you can see I'm using text embedding Geo model uh so this is the model G text embeding Geo 001 so this model is available in the model Garden uh in vertx AI got it then I have written another function generate and save embedding that means that means this function will actually add the unique ID uh in front to of your sentence that means documents and in front to of your uh embeddings that means Vector embeddings okay that means it will generate this both file okay and it will it will save as a it will save as a juston file you can see here I'm doing it I'm first of all uh actually creating my embedding okay and I'm adding the unique ID I'm also creating the sentence I'm adding the unique ID then I'm saving in a Json file okay this is the thing actually we are doing that means this function is responsible for creating this two file and it will store uh your sent sentences and it will store your documents as well as the embedding with the unique ID okay that's it then there is another function I created called upload file that means after uh let's say generating this file I have to upload this start sentence dojon in the bucket and how I will push to the bucket we'll be using this function upload file you can see if you go to the bucket section so this file is already present okay so if you want to push any kinds of file you can use this function that means we created some helper function this helper function will help me to do certain operation this is the thing now here another function I have written called create Vector index so this function will create the vector index in the vector s okay in the vector s Vector database and each of the dimension would be 784 I think you remember previously we used sentence Transformer uh actually embedding model and we we used to create I think 384 Vector representation I think you remember right but if you're using this uh text Geo model from the model Guiden your vector Dimension would 780 sorry 768 this is the dimension and you can see with the help of AI platform actually Library we are creating the index so this function will automatically create the index for you got it then after that I'm calling these are the function you can see first of all I'm calling generate and save the vector I'm giving my PDF path sentence file path as well as the embedding file path then I'm also uploading this file to my bucket that means if I execute this line what will happen it will create this two file first of all let me open it so this is my sentence that means this is my document and you can see first of all it will show you the ID then it will show you the sentence okay that means this is the document it has extracted from the PDF with respect to that it has also saved the embeddings as well let me show you so this is the embedding and here you also you'll see the unique ID that means the same ID and now this is the embedding representation okay I hope now it is clear now so once it is executed then upload file will execute and it will upload this sentence dojon to my bucket now if I show you see bucket would be created and inside bucket actually you will see this start uh sentence dojon would be present okay because later on whenever I perform the let's say similarity s operation I need that file I need to download that file with that I'll will do the source operation okay similarity Source operation that is the thing now the next thing what we'll be doing we'll be creating the vector index that means we'll be creating the index and inside index actually will be storing all of my Vector okay so here you can see I'm giving the bucket name that means from the bucket name it will load this file okay it will load this file that means the sentence file so sentence file it will load then it will also take the index name and with the help of actually that embedding model it will generate the embeddings of that documents the documents actually we are having and it will store to the vctor database that means inside my Vector SCE now if I execute this line okay if I execute this line it will take some time it will that means it will process all the data it will restore to the vector embedding after that if you open it up let me show you so if you open it up so you'll see that it will create an index the name actually you have given start index okay now you can see both places you are getting this green TI icon that means everything is ex uted successfully if you're getting any red icon it's not completed okay that means there are some issue now if I click on the deployed index you'll see one ID here so we need this ID later on so guys you can see this is the ID the last number you can see this is the ID so we need this ID later on okay see this is the ID this ID actually we need later on so now let's get back to my colar now again just import some of the necessary library then again said these are the actually variable like your location sentence file path and index name that means the same index name name okay same index name you have to give start index okay that's it then just load the model large language model here so here I'm using JD you can also load any other model then just try to load the index that me index endpoint you have to load and to load the index endpoint you just need to give this ID and how you'll get the ID guys I already told you so this is the ID just try to copy this ID and just try to paste it here now if you execute it will load the index ID got it that means this is going to be your knowledge base right now and this is going to be your model now again I have written some of the helper function generate embedding that means whatever user will give the prompt now let's say I have given one prompt this prompt should be also converted to the embedding okay then this function will help me to do that then I written another function generate context and load file that means it will load that documents file and it will generate the context okay that means if we are performing similarity s operation uh it will give you some rank results and how it will give the rank results with the help of this two function it will give the rank results now here I've loaded the file then uh you can see then this is my query let's say what is corelation first of all I'm generating the query embedding with the help of that embedding model and if you want to see the query embedding see this is the vector representation guys this is the entire query embedding now let me comment it now this query embedding I will pass to my Vector SS okay now you can see find neighbor it will give me 10 rank results okay 10 rank results actually it will give me then this response actually I'm giving to my model okay this is the code cipit my model will try to analyze this response even the query I have given based on that it will give me one response now if I execute see if I execute this last kind of code see here you will get the response code delation is a statical measure that indicates uh see blah blah I'm getting the output and here you you can also give the prompt based on the context uh delated in the brackets answer the query okay that's how you can give any kinds of promp and that's actually we can build a retable augmented generation kinds of application okay with the help of vertic platform and all the steps guys I have mentioned here so if you're implementing any kinds of rag based actually application you can follow the same step okay even you can also perform in your local machine that means I told you how we can connect our local machine that means how we can connect our vs code so with help of vs code also you can create this kinds of R rag application and you can create a user interface let's say you want to create a flask interface you want to create a stream late interface you can also create so this task actually I want to assign you just try to create one user interface so you have to use the same logic only you just need to integrate one user interface that is the idea okay I hope it is clear now see once it is done now if you want to terminate all the instance what you can do so first of all uh just try to delete this uh so first of all just try to delete the bucket to delete the bucket just try to select the bucket and there is a delete button you will see just try to click on delete and delete confirmation you have to give so it will delete the bucket then you also need to delete the index so to delete the index just go to the index Vector SE so first of all you have to do the r deploy then you can delete it right now I think now there is a delete button just try to click on delete so it would be deleted okay so that's how you can remove all the instance you will be creating okay so I think guys uh this is helpful I showed you the entire uh uh like process how we can Implement rack see I think you already saw how we can set up everything in our local machine that means if I want to connect with my verx so what are the setup actually I can perform so setup wise I already covered in my previous video so you can check it out so here actually I've already prepared everything because see most of the code are similar whatever things we implemented previously so make sure first of all you configured everything your account uh then your let's say uh configuration everything you just prepared after that in the EMV file just try to uh change this project ID and region so let me copy my project ID so just try to click here so this is my project Ed gu just try to copy and let's mention it here okay and reason I'm inside us Central one only I don't need to change it now the next thing you have to create an environment how to create the environment I already told you okay I'm using the same environment Veri demo now you have to install the requirements so one more requirement I have added called flask so let me install the flask because in this project I'm going to use flask okay flask framework to create the front end application so for this just write this command P install ien add requirement. txd now it should install the requirements so guys many people were asking me how to uh install actually uh GPU Nvidia GPU uh in our local system for this what I did actually I created one video in my YouTube channel let me show you so if you go to my YouTube channel guys this is my YouTube channel you can also subscribe me here now if I go to the video section so here I already created one video uh here you can see the video set up Nvidia GPU okay so here I showed you all these steps you can follow to set up your Nvidia GPU for the Deep learning task got it so let's say if you're having good GPU and if want to let's say execute open source our language model uh in your local machine instead of using collab you can refer this video that time and make sure guys you subscribe uh to this channel because here also I create lots of content related genv mlops then end to project implementation Okay computer vision everything now let's get back so I think installation is completed yeah now see what I have done I created one template file and inside that this is my HTML code because you already know if I want to use flask I need a HTML okay HTML code to create my front end part and again I used the bootstrap website to prepare this front end I'll tell you whenever I'll execute how it will look like now this is my endpoint app.py and here I imported all the necessary library and these code are common I think you know we are doing the authentication with my verx a now this is the route I created this route is my default route it will launch my index.html page and this is my prediction route that means whenever user will give any query okay user input I'm getting the user input and this input actually I'm passing to my model and whatever response actually I'm getting I'm showing in my plus cver that's it now let me um execute the application so what I will do I'll run this application in the port number 8080 save it now I'll open up my terminal and let's execute python app.py okay so it is running now let's get back Local Host now see this is how your user interface will look like now he can give a any commment now here you can give any query so I'll ask what is python now send the request you can also see the log in the terminal see I got the response so this is the complete response I got guys got it this is the complete response I got now if you want to ask another query just try to refresh again you can pass that query okay now that's how actually what you can do the previous rag uh application we implemented with the help of verx you can create your custom rag that means you can up use your custom documents like uh we did one project like I think remember medical chatbot so that's how you can use your custom documents and you can create this kinds of application and this is the front end you can use as it is got it all the HTML code I will share with you so yes guys that's how we can also create llm power application with the help of vertex a so as I already told you in the model Garden you are having so many Foundation model and if you want to F tune these are the model so what are the step you have to follow in this video I'll tell you each and everything so I think remember previously whenever we used to do the find tuning operation first of all we had to download that model in our system then I Was preparing the data then I was fine tuning these are the model but here if you're using these kinds of llm Ops platform you don't need to download the other the model in your system so here what you have to do you have to use that model endpoint that means you will be accessing this model through the API right that means uh first of all you have to authenticate with the verx I think I already told you how to authenticate with the verx a after that just give the model ID which model you want to use it will automatically hit that model so here the only thing you have to do you have to prepare your data after that all the thing would be happening in their server only okay now let me tell you the STP actually you can follow to perform the fine tuning operation so for this what I will do guys I will use the collab notebook so I'll open up collab notebook you can also use collab Enterprise you can also do it from your local machine it's completely fine but as of now we have explored uh like V code we have also explored like collab Enterprise now let's try to see how we can also use the collab okay like our Google collab so here let me change my account so let's say I'm going to use this account okay this account actually I'm going to use and make sure the account actually you are using for the gcloud the same account you have to use in the Google Club as well okay otherwise uh you might get some authentication issue now what I will do guys I'll just create a new notebook here so let me create a new notebook now simply just connect this notebook and in between let me show you the fine tuning step you have to follow so see you can follow this uh blog actually so this is from actually Google so Google developer so they have already given all the step actually you have to follow to perform the fine tuning operation so I already prepared all the steps you have to follow to perform the fine tuning only I will show you one thing from this blog actually the data format okay so here let me show you the preparation and loading the data see if you're fine tuning on the vertx AI you have to prepare your data in the uh Json Json L format okay see this is the Json L format data you can see so here they have already given one example let me open up so you can see this is the U train juston L format data and it is present inside this GitHub so what you can do from this GitHub actually see this is the data you can download this data okay in your system you can download this data so I've already downloaded let me show you so this is the data I'll open it with the notepad++ now if you open the data guys you will see it's a Json okay Json structure that means you will have one key here called input text and this is the input text and this is the BBC data guys okay BBC News data so in the input text actually they are having the entire news and they're having another actually key here let me show you or I can perform the contr F operation now now here I will just write output underscore text now if I find it now see guys this is the output text okay so inside output text actually what they are having they are having the summary okay summary of that news so this is the data actually that's how actually you have to also prepare your data if you're having any custom data what you can do you can prepare your data with respect to that that means what I'm trying to say that means in the Json uh file actually the first key will have the input okay in input _ text okay inside input text what you will have you will have the entire story okay entire story and you will have another actually uh key called output text sorry output output text okay so inside output text you will have the summary okay summary of the entire story so this is going to be your data format okay that's why actually you can take as many as record you can got it I hope now it is clear the format uh so whatever dat you are having try to convert in a jonl format and how to convert in a JL format there are so many converter you will see inside python simply you can execute those converter it will automatically convert your data in a jol format got it that is the idea now you can ask me sir where I will get these kinds of data I think I already told you now so you can use hugging phase Hub actually so there actually will have like so many kinds of data set so you can use any kinds of data from the hugging ph up you can download it and you can convert to the jonl format and if you're using your custom data that time you have to convert everything in a Jin format okay this is the idea okay you can see the image also they have already given the data format so first of all you have to take the input text this is the entire BBC News you can see and this is the output text just means this is the uh summary of that uh story okay this should be your data format now apart from that they have already given all the step you can follow so I've already prepared one notebook let me show you what other the thing you have to do now let me also add this link in the notebook so that you will have the reference later on so this is the link I have added now here the first thing you have to install some of the library so here I'm going to uh install Google Cloud AI platform because I want to access the verx a then data sets then Google Cloud pipeline components okay these are the library I have to install one by one let me install so after installing these are the library you have to restart the Kel and if you want to restart the Kel you can use this code snippit actually uh see you can also do it from the UI just click on the runtime restart the runtime so there is a restart runtime option okay restart the session otherwise you can also execute this line of code it will also restart the your run time okay now what you have to do you have to authenticate with your gcloud account for this you can execute this line of code so here I'm using actually uh Google Authenticator with the help of Google Authenticator actually I will authenticate with my account got it so now let me execute so it will look for your account so it will give you one popup screen let's give that permission select your account let's say I want to use this account because this is my Google account now I'll try to select it now you have to provide the password so guys as you can see my uh authentication is completed there is no error that means you are successfully authenticate with your uh this one your gcloud account fine all right now the next thing you have to select the project so to select the project you have to execute this line of code so let me select the project so I think you know how to select the project click here copy the project ID and just try to mention it here and with this actually we'll be initializing our vertic so let me initialize my verx then let's say uh set some actually variable that means my region and the project ID again I'll will give the same project ID now I have to set one configuration here for this you have to execute this line of quot okay you have to execute this command gcloud config set project this is the project ID okay the project ID actually I'm having here now let me set fine now let's import some necessary Library so guys you can see I'm importing some necessary library now you can ask me from where actually I got this code if you go to that uh uh blog actually so they actually they are suggesting install and import see they're also importing these are the library okay so just try to read this blog actually will see all the steps actually they have written I'm following the same thing only now let me import all of the library okay so I have imported all the library now the next thing uh I will load my data so let's upload my data either you can upload in the gcloud bucket so from the bucket also you can download the data if if you're having let's say use data that time you can keep in the bucket I think I told you so it is already having one bucket Service as well so you can also open up the bucket inside that you can store any kinds of data and you can also load it here okay so if I show you the bucket so this is the bucket guys so here my data size is not used so what I will do I'll directly upload here so I'll just upload this is the data now with the help of pandas actually I'm going to load my data so now we can call Cy the path and you can paste it here now let's execute okay see this is the data I have loaded now you can see this is the input text and this is the output testt now if you want to see the shape of the data you can also see this is the shape of the data and now we can start the training and it's like very easy see only you just need to execute this line of code your training would be started in their server only okay not in my Google collab actually uh it will use their instance got it now see here is my fine tune model name so this model name actually I'm giving BBC fine model you can give any name so after fineing what would be your model name okay that is what you have to give here then you can give the Preen model that means which model you want to find you here I want to find text Bon 002 model and if you go to the model Garden you will see this particular model and if you want to use any other model you can also give the model ID here got it that's the thing now you have to pass the data that P by DF the DF actually I got and you have to set the number of epoch training Epoch you want to let's say train so here I mentioned 100 Epoch okay I want to train as of now and you have to give that tuning job location okay so I have given EUR W 4 you can keep the default size if you go to the like blog you will see that they are also using this particular location now see if I execute the program it will give me one URL and if I click on the URL I I can see the pipeline that isans completely uh that means I can see the complete pipeline my training process is running and it will take guys uh like one to two hours to complete the training but I can't wait one to two hours what I will do I'll stop the execution so guys I stop the execution because it will take time see I'm telling you after actually executing this line of code what you have to do so you can see one URL just try to open up the URL so this is the URL guys and try to make make sure you have selected your account okay that gcp account then you can see this pipeline okay this uh pipeline would be running and this is the jobs so here you will see all the let's say logs so in the pipeline section you will see all the logs that means whether your training is running or not okay and how how how much time actually it will take to complete so everything all the log actually you can see here got it so once this execution is completed you will see it will automatically stop after that your model would be ready okay and then you can use this model and if you want to delete this pipeline so what you have to do guys so there is a delete button just try to click on the delete and try to delete the pipeline okay it will automatically delete the instance okay and guys one thing after completing the training if you open up your bucket you will see two bucket would be automatically created okay and inside this bucket actually it will save all the model checkpoints okay let's say whatever training it is doing all the artifacts would be saved inside this bucket itself okay you can see but once you complete the execution see it is it will already save the tune model okay inside that that you can see the text B model got it so that's how actually it will save all the artifacts in the bucket and from this bucket itself we have to deploy our model as an end point okay and this model would be available in your model Garden so if you click on the model Garden so there you will see one option so here is the option my uh view my endpoint and model if you click here you will see that that model would be present here okay I hope it is clear now let me show you the next step you have to perform so previously I already did this actually uh find un name so let me show you what you have to do after that see after that actually what you can do you can use your train model that means the model actually you have trained and you can do the inference operation so here I'm giving this uh actually uh prompt actually summarize this text to generate uh generate a title so this is the entire actually prompt I'm giving and this is the output actually I'm getting got it now you have to deploy your model as an end point for this you have to execute this line of code okay so this will uh like deploy your model as an endo okay to the gcp server that means this model would be available in your model Garden right now so if I go to the model Garden so here you will see one option view my endpoint and model just click here in this section actually will see your model would be published okay from here actually it will load the model but what I did actually I deleted the model because again I'm using Cloud platform I don't want to keep anything okay otherwise it will charge me so that's why I already deleted okay then after that I was loading that model and I was again performing the prediction you can see this is the results actually I'm getting from my model then I was also loading the base model that means the actual model and I given the same actually prompt and I was just checking the actually output okay whether this output and this output uh actually good or not that means which model is giving the better output and here you can see both model uh giving the good response okay it's not a bad although I only trained 100 Depo but you can see this response is pretty good got it so that's how actually you can perform the fineing operation after that you can deploy your model as an end point to the uh gcloud okay now I I think it is clear now you can pick up any other model and you can perform the same F tring operation all right so this resources would be shared guys in your resources section from there you can uh download this notebook and you can perform the fine tuning operation so guys uh as of now we have seen the uh vertx a demo the complete let's say verx a demo we have seen we have implemented different different kinds of application with the help of vertx a so now it's time to explore another H name ofs platform called AWS badrock so this uh servic is available in the AWS Cloud so make sure you have the AWS account so if you don't have the account just try to create one account initially it will give you $300 free credit but you have to add your card there got it so after login with your console so you will get these kinds of window okay in the AWS so this is my console so now here what you have to do you have to search for bedro so let me search so see Amazon bedro and this is the service actually the easiest way to build anale gen application with the foundation model so let me open up the B drop m now I'll just click on get started see if you're opening for the first time this Bedrock what you have to do you have to request for the model access so there is a button you will see request model access just try to click here and see for me I already requested the model okay for me I already requested the model and I got the access you can see some of the model actually they didn't given me the access for this what I have to do I have to again uh let's say resubmit the access request then I think I might get but for you what you will do you will select all the model and try to send the request okay send the request will see that in 5 to 10 minutes actually they will provide the access got it and make sure you check your region actually in which region actually you are sending the request okay because that in that region actually your model would be available so I'm currently inside AP South one that means Asia Pacific Mumbai okay so now if I go to any other region let me show you so if I let's say go to North Virginia so there you will able to see I don't have any access of any model now see it will show you these kinds of window enable all model okay now if I click here now just select all the model and try to click on the next okay now you have to submit the request okay you have to submit the request so let's submit the request sometimes actually they will ask for some information so you also need to uh let's submit some information let's say your name email address okay then you can send the request after sending the request in 5 to 10 minutes you will see that they will give you the model access so guys you can see after sending the request actually I got the access you can see granted access and some of the model you can see it is still in progress so I think it will take some time to give me the access okay so that's actually you can apply for the access so once you got the access that means congratulations now you can start with the Bedrock services that means now you got all the let's say access of the foundation model now let me get back to my that region actually mbai region H now see this is your bedrock interface if I click on the overview now you are having different different Foundation model here and what is foundation model I already told you these are large language model and different different companies also has collaborated with the AWS even they have also published their model like you can see Amazon is having their own model apart from that cloud has like updated their model then coh Lama mistal okay so you can see all the provider okay all the provider they have collaborated with the AWS and they hosted their model on the AWS that means AWS bed drop okay now what you can do you can access the the model through API got it so you don't need to download the the model in your system that is the m Advantage here now you can also play with the playground let's say if I click on the chat so here is the chat guys so you can select the model let's I want to select this model um let's say I'll select this llama 3 8 billion instruct model now if I send any request let's say hello let say this is my prompt now see it is giving me the answer so that's how actually it is having different different kinds of playground text playground chat playground image playground because it is also having multimodel as well so you can see here different different model let's say I you want to use this uh uh Amazon model so just try to click here see all kinds of Amazon model you'll be able to see it is having Titan uh text G1 light Titan text G1 Express okay Titan image generator then uh Titan multimodel embeddings now if you want to use let's say this model what you can do you need to just copy the model ID so this is the model ID and with the help of model ID you can use it similar wise for The Meta Also let's say you want to access llama okay llama model you can see so for this you have to use this uh you have to use this model ID okay even from here also you can directly open in the playground and you can also play with these other the model even if you go to the example section they have given different different example even you can also copy these are the code and you can execute in your system now let's click on the Bas model you can see different different kinds of base model it is also having even if you want to train your custom model it is also possible just go to the custom model you can also perform the fine tuning operation so from the UI itself you can do the fine tuning operation even let's say after fining you can also keep your model here okay in the custom model section so that you can load this model as an API okay every functionality actually this Bedrock will give you so you can use them so yes this is the overview of our Amazon Bedrock that means it's a platform it's LM of platform here we are having different different kinds of foundation model even all the functionality it is also provides with the help of these are the functionality you can create any kinds of gni based application so in the next video what we'll do guys we'll just try to uh uh do the handson on this uh AWS B drop that means we'll be accessing these are the foundation model through the python okay python code this video we'll be learning uh how we can let's say access this kinds of foundation model uh without python code that means we'll be set uping everything in our local machine I will be writing everything from our V code okay so what I will do guys uh I'll open up my local folder and here I've already created one empty folder let me open up my vspot okay so I'm also going to open up my terminal here and make sure you create one environment so for me I already created one environment so let me activate so cond activate llm app I think remember this uh environment we created previously so I'm using the same environment here and you can see the python version I'm using it's 3.10 so you can use 3.9 3.8 it's up to you okay here then first thing you have to set up the requirements so let me create a file called requirements. dxt inside that let me mention all the requirements actually I need so I need the langin then I also need stream Le because I'm going to create a small let's say user interface here and I need two more Library boto three and python. python. I think you know why we need it because we here we're going to create one EnV file okay EnV file so inside that you have to mention the um I mean your secret credential that means we'll be generating access key AWS access key and AWS secret access key with the help of that we'll be authenticating with our AWS account got it so we'll be uh keeping these are the key inside this EnV file and to load it I need this python. EnV and what is boto 3C with the help of boto 3 python package will be making the connection with our AWS okay so this Library will give you the functionality you can connect with your a this now let me set up everything in my environment so I'll open it up and just write P install requirement. dxt okay for me it is already installed for you it it will take some time now the next thing what I have to do guys uh I have to create a im am user so let's go to my AWS I'll go to the homepage and here you will see or you can also search I am okay identity access management because I have to create an user and there actually I will only give the permission related my Bedrock I click on the user now just create a user here I'll give let's say Bedrock test attach policy Now search for bedro I want to give the bedro Amazon bedro full access now click on the next and create the user then after that I will click on Bedrock test and go to the security credential and here you'll get one option uh create access key just try to click here uh select common line interface I understand and click on the next now create the access key now so guys this is your access key and this is your secret access key now you can also download as a CSV file let me download now I have to configure it so for this you have to install one tool actually so just search for AWS CLI okay AWS CLI this is the first website you can open so for all the operating system they have mentioned okay how we can install it for Linux Mac macway okay see Linux you have to execute some of the command these are the command you have to execute for Mac wise also you have to execute some of the command and for Windows you are having one MSI file so you can directly download this MSI file and you can you can install Okay as a software that means the way you usually install any software now next next install you have to do the same thing after doing it let me cancel it because I already have after doing it just try to open up your terminal okay and execute this command AWS configure AWS configure now see if I execute it should give you these kinds of window if you're getting these kinds of window that means your installation is fine now what I have to do guys I have to set this at the access key now just try to copy the access key open the terminal and it is asking for the access key just try to paste just right click it will paste and press enter Then you have to give the secret access key just try to copy this is my secret access key and I'll paste it here and don't share guys this key with anyone otherwise they will be also accessing your account I will delete it after the recording and now it is asking for the region now you can see which region you are in I'm inside mumai that means AP South one so I have to give the reason so you just check which reason you are working on based on that you can decide so AP South one Now default output format just keep it empty press enter that's it see my credential has been set so this was the first method and the second method what you can do you can uh I think you remember we created this EnV file so here inside EnV file also you can mention so let me show you so inside that you can mention AWS access key ID secret key ID and region name so let me replace all of the secret key again is my access key ID and this is my secret access and sou one it's fine now let me save now here I'm going to create a file I'll name it as main do PI inside that I'm going to do the coding so here first of all let's import some librar so these are the library I need let me select my environment uh llm app I'm using now here you can see guys I'm importing Bedrock from Lang Chen Lang chen. LM Bedrock I'm inputting Bedrock then llm chain then prompt template boto 3 and stream lit okay then I need another package uh this uh one actually because I want to load this at the credential and how to load guys I think remembered so you have to use this code snippit so load ENB and you also need operating system with help of operating system we'll be loading these are the key okay from the environment variable now here it will restore everything now if I want to initialize Bedrock client so I have to use boto 3 so this is the syntax if you go to the documentation you will see that they're using this synx Bedrock client you have to make a Bedrock client now boto three client you have to mention the service name I want to use Bedrock okay Bedrock Services that's why I've given Bedrock run time you have to give the region AWS access key ID and secret key ID so with the help of that it will authenticate with your account okay I hope it is clear now the next thing you have to give the model ID like which model you want to access I'll give the model ID is equal to let's say I want to use one Foundation model let's say I want to use this mistal model I'll click on mistal now you can see mistal having different different variants 7B 8X 7B then Mr Large now let's I want to use srct so what I will do I'll copy this model ID so that's how just try to open any kinds of model and copy the model ID and here you just need to mention it that's it okay so it will automatically load this model now let's create our llm rapper so inside Bedrock you have to give the model ID okay and here you have to give the Bedrock client okay client is equal to bed drop fine and this is the temperature parameter that means the creativity parameter I think you already know now here I'm going to create a function so this function will take the input from the user like in which language they want to let's say get the output and what is the input prompt okay so this function will take this input you can see language as well as the user text then it is create then inside that I'm creating a prom template I think you know what is prom template right so this is the input variable language and user text and I'm creating a prom template youf chatboard and you are in this language and this user text now based on that you have to give give me the response now here I'm creating a llm chain and I'm passing my llm as well as the prompt and finally I'm passing my language as well as the user input to my uh Bedrock chain that means the chain I actually have created okay because inside that I'm having my large language model as well as the prom and whatever response I'm getting I'm just returning that's it now let me create a stream Le title stream L let's say user interface Bedrock chatbot demo now user will also able to give the language so let's say here I'll take a language input from the user whether uh he want to get English response Spanish response or Hindi response you can so here you can also pass any other language it will also work because I think you know these kinds of large language model can also support multi language then this is my final logic so if language is there so they will give the input that means what kinds of question they want to ask then once they have let's say given the prompt this particular prompt I'm checking first of all this uh they have given the prompt or not if they have given I'm passing it to my my chat bot you can see this function so it will take the language as well as the user input language and user input and whatever response actually I'm getting I'm writing in my stream lit application now let me execute and let me show you I'll save it now simply I'll just open up my terminal and this is the command stream lft run main.py so this is the interface guys now you can select the language that's I want to select the English now here I can ask any query let's say what is python now you just need to press shift uh sorry you just need to press control and enter so guys as you can see uh if you give any kinds of prompt now here is the response so here I've given what is Python and here is the response I got now you can ask any of quy let's say I will ask uh uh give me a python code to add two numbers see here I got the python code to add the two numbers okay so that's how you can pass any kinds of prompt and you can uh get the response it's amazing guys and and here we're using Mistral model OKAY Mistral model we are using okay and and it is present inside Bedrock platform that's why this inference time is very low you will see that I'm getting very fast response but whenever I was using mral model I think remember in hugging pH okay hugging pH Hub so there I had to download this model in my system and the execution time was like very slow there yes or no right so that's why we have to use this kinds of lmos platform if I'm implementing any kinds of project efficient project okay in the industry so yes guys now you can uh explore different different kinds of model different different kinds of like Foundation model you can also export Co model meta model anything you can export only just need to keep the model ID and everything you can access got it so yes guys I hope uh it is clear now how we can use this Bedrock platform and if you want to get this kinds of content more so please try to support our channel so please try to subscribe to the Channel Try to share these kinds of content with your friends and family so that they can also get to know okay this kinds of session is going on so please try to support the channel guys try to like the video try to subscribe to the channel you can subscribe to the code Commander Channel even you can also subscribe to my channel D with buy okay both Channel actually I'm operating you will see that in both Channel I'm creating lots of content related data science machine learning genbi mlops okay n project implementation okay everything I'm creating the content if you don't know what is AWS Bedrock AWS bedro is a platform from Amazon web service we can use this particular AWS Bedrock to create scalable genbi application with the help of large language model so if you want to use this particular platform uh Amazon Bedrock so you should have one AWS account so so for me I already have the account so if so if you don't have any account so please try to create one AWS account then you will be able to access this particular platform now if you can't see this particular service here so what you can do you can search here called Bedrock okay if you just search for Bedrock so you will get this particular service called Amazon Bedrock now let's try to click here so it will launch this particular platform for you see guys so this is the Amazon Bedrock platform and this is the easiest way to build an scale genbi application with the help of foundation model so it is having lots of foundation model I'll tell you what are the models actually is having so it has one beautiful documentation you can go through this particular documentation like what it can perform and all so you can perform Tex generation you can also create a chat BS you can also perform the searce operation Tech summarization image generation and personalization okay so this many task actually you can perform here and these are the actually uh Foundation model so it is having let's say lots of model it is having Jurassic 2 model cloudy model command Stone defusion and Amazon Titan and you have another model called Lama 2 okay Lama 2 is a model from met AI so this is one of the like very popular and Powerful model okay you can use so in this particular project actually I'm going to use this particular Lama 2 model okay and I will also use any other model to show you like how we can access this particular Bedrock model OKAY from the Bedrock platform now what you have to do you have to click on this particular uh geted button so if you just click on the get started button okay so initially it will tell you just try to request for the model OKAY request to access all the model because if you're using for the first time you have to send a request like toess access all the model okay so I already made the request and I already got the permission and I I can access all the model OKAY from this particular platform now guys as you can see so in the overview section so these are the models are available now let's say if you want to use this particular model jasic to model just click on this particular model now if you see Jurassic model is having different different variant okay so it is having Jurassic to ultra and it is having another model called Jurassic to Mid okay you can either use this mid model either you can use this Ultra model okay so similar wise if you if you're using let's say Amazon okay so it is having different different model so it is having let's say Amazon uh this Titan embedding G1 text model so this is the embedding model then it is having Titan text G1 model light model then Titan text G1 Express model okay that's how it is having different different model even it is also having Titan image generation model okay that's actually let's say if I click on meta okay that means Lama 2 so it is having different different variant of the model Lama 2 so it is having Lama to chat 1 billion model it is having Lama to chat 70 billion model even it is also having to 30 million model and 70 million model okay so these are the preent model and these are the chat model let's see if you want to perform question answering and chat operation you have to use these are the model and let's say if you want to only generate let's say a text and if you want to let's say do the sentence completion at that time you can go with this particular model okay so that's how actually it is having different different model OKAY based on the base model actually you can see here so again I will go to the overview now you can see I already showed you the foundation model now it can perform different different task I already showed you let's say you want to do any example so we just go to the example section now here you can select what kinds of task actually want to perform so here you can see different different task even it is also having the playground let's say I will open this particular playground okay so playground I want to perform this chat operation so now here what I have to do first of all I have to select the model I want to use so let's say I will be using this particular model called Jurassic to mid model so I'll select this particular model and apply okay after that I will get this kinds of interface now here you can give any kinds of promp let's say if I give hello so here let's say if I send hello okay to this particular uh model so it will give me the response see it is also responding like uh hello how are you how how I can help you today that's why actually you can also change the temperature parameter topic parameter okay so these are the parameter you can uh change so what is the temperature parameter temperature parameter is a creativity actually parameter so let's say if this temperature parameter is like let's say close to zero that means you are telling your model uh to be stick okay it don't be taking any risk and if you are setting this parameter to close to one that means you are uh like telling your model just take any risk okay okay and try to give a uh creative output so that's actually you can change these other parameters so by default you can so by default just keep this default parameter only now you can give any kinds of prompt here okay it will response with respect to that only now guys this is for the playground okay but whenever I'll be creating the application I I'm not going to use this particular model like that so I have to uh use this particular model okay with the help of this Python programming language so with the help of python client actually will be accessing this this particular model but how to access this particular model because this model is already available in the AWS okay so how to authenticate with the this particular account so for this first of all you have to create one IM user okay so first of all let let me create one IM user and let me uh like add this particular secret key and access key then I'll tell you how we can access this particular uh Foundation model OKAY from the AWS bedro uh so guys as I already told you to authenticate with this particular AWS and if you want to access this particular Bedrock services and all so you have to first of all create one IM user and you have to collect that particular access key and secret access key okay then you have to configure that so for this you have to search for this particular service called I am okay that means identity access management now here I'll go to the first option I am now left hand side you can see there is a user option okay let's click on the user now here I'll be creating one user create user just give the name so here is let's say I'm doing a Bedrock project so I'll just give it as Bedrock user okay then I'll just click on next then I will be adding the policies directly so here you need to select this particular option now here you have to search for the Bedrock service okay because I want to only give the Bedrock access okay not the enre service access okay from my WS account now here if you see Amazon Bedrock full access okay so I'll select the first option then click on next then once it is done I will just create the user now my user has created now I'll go to the user I'll go to the security credential and here you will see something called create access key okay let's click on the create access key now I select on the common line interface then I understand the above recommendation then click on the next then once it is done I will create the access key okay now see guys this is my access key and this is the secret access key and don't share this particular credential with anyone else otherwise they will also able to access your account okay I'm sharing uh because I'm going to delete this particular user after the recording okay that's why I'm showing now what I have to do I have to download this thing as a CSV file so click on this particular button okay it will download as a CSV file okay see I've already downloaded now if you want to authenticate okay if you want to authenticate with your actually code so what you have to do first of all you have to install one tool okay called AWS CLI Okay aw CLI download just search on Google aw C download so this is the website actually you will get and you have to install this particular tool now you have different different operating system let's say if you're using Windows so you will get one MSI file okay as you can see this is a MSI file so try to download this particular MSI file and try to install it the way actually you do install any regular software Okay then if you're using any macway or let's say Linux operating system you can follow these are the command to install this particular aw CLI so here I'm using Windows machine so I already downloaded this particular MSI file okay let me show you so this is the MSI file so inside windows so this is the MSI file if I click here so it will start download see guys it will start download okay now we cancel it okay after downloading you have just need to double click and you to install as a regular software okay then once it is done then I will open up my terminal so first of all let me open up my local folder okay so this is my local folder so here I'm going to open up my terminal okay but before that let me create one folder here so inside that I'm going to do my project so here I'm going to name this particular folder as uh um Genera application okay generative AI uh gen project okay bed Dr let's say this is the name now inside that I will I'll open up my terminal okay so let's open up my terminal yeah so now here uh what you have to do first of all you have to test this particular aw whether it has downloaded successfully or not so for this you just need to execute this particular command called AWS okay configure so if you execute this particular command so it will give you this kinds of interface see it will give you this kinds of interface and if it is not giving this kinds of interface if it is throwing any kinds of error that means you are not able to install successfully okay you have to install it successfully so for me I already installed successfully that's why I'm getting this particular option now here you have to provide that particular credential okay that FW secret key ID you have downloaded now let's go back to the CSV file I downloaded so this is the CSV file let me open it up so guys I already open up this particular file with the help of my notepad++ now as you can see this is the access key ID now you have to copy before the comma because this is the comma separated this is a CS v file so I'll copy this particular credential and I'm going to open up my terminal and I'm going to paste it here okay so just right click and paste it okay so it hasn't com copy yet I think so I'll copy again open up the terminal and let me remove now I'm going to paste okay now see if you right click it will paste now if you hit enter it will automatically save okay now you have to also set for the a secret access key okay so this is the secret access key so copy before the comma and again open up the terminal and past it here okay then it is telling select the region okay so so make sure you are checking the region currently which region actually you are in so for this just go to the home okay AWS home so here you actually will see that particular region okay see now currently I'm inside North Virginia that means Us East one okay but if you're in any other region you have to select this particular name let's say you are inside Asia Pacific that means Mumbai you have to write AP South one that time but I'm inside Us East one okay that means not Virginia so I'm going to write Us East one here so I'm be opening the terminal and here you just need to write in the same way us past one okay now I'll press enter now you have to keep it as default press enter now see all the credential has been set now I can easily authenticate with my Bedrock okay Bedrock platform with the help of this particular terminal okay now what I have to do so let me open up my folder the project folder I have created now inside that I'm going to open up my V code okay so let's open the vas code so here let me write down all the steps so that that you can refer later on also in the readme file I'll add everything so here let me close it now first of all I'll create a file called readme okay readme do MD so here first of all Let me give the project name so this is uh N2 okay n2n generative AI a project okay using AWS bedro bedro okay so this is the title of my project now inside that I'm going to write the step okay you have to perform to set up this particular project so first of all you have to create one virtual environment so I already written so let me just uh give it it here so these are the step I have to perform okay if I want to execute this particular project so first of all I have to create one okay I have to create one virtual environment so let's give the name so this is let's say Bedrock project okay so Bedrock Bedrock okay Bedrock project Bedrock Pro Bedrock project now you have to activate this particular Bedrock uh environment okay you have created and make sure you using python 3.8 you can also use more than python 3.8 is completely fine then you have to install the requirements because I'm going to write some requirements okay for this particular project you also need to install them then I already told you you have to uh download this particular aw CLI okay and this is the link I have already given then you have to set up it okay after set uping you have to configure that and add all the credential okay so these are the step actually you have to perform then uh what I will do I'll quickly uh create some of the folders and file here so first of all I'm going to create a folder called research okay research inside research I'm going to create one file called trials okay I can write B Bedrock trials okay bedro trials do file then outside I'll be creating another file called uh main. F okay then I'm going to create a requirements file requirements okay. dxt yeah so as of now I need these are the folders and file if you want to add uh like G ignore and license file you can add it if you want to comit this particular code in the GitHub but I'm not going to comit okay so that's why I only need deserve the files and folder now first of all let's add all the requirements actually I need for this particular project so first of all let me show you what are the tools and Technology I'm going to use so for this I'm going to open up my Blackboard so here uh I'm going to use some of the tools okay so the first thing I'm going to use Lang chain okay I think you already know what is Lang chain Lang Lang chain is a generative VI framework okay so we can use this particular Lang chain to create generative VI application okay so it it is having different different functionality uh so it will help you to create that particular application okay so then second I need something called P PDF okay Pi PDF why I need P Pi PDF because I'm going to um upload my PDF data okay and from there actually I'm going to uh do the retriever operation okay that means qu operation I'll tell you like what kind of of application we're building okay so we'll be building something called rag application so there actually we'll be creating one knowledge base okay with the help of custom data actually I'm giving so that's why my data source would be PDF data you can also use dogs data or txt data it's it's completely fine but I'm going to use PDF data here so I'm going to like also show you the architecture okay architecture of this particular project like how everything will work but before that let me write down the tools and Technology I'm going to use in this particular project then I'm going to use something called stream lead okay stream stream lead streem L I'm going to use to create the user app Okay because I'm going to create a user app so so that actually user will get some interface to use your application so for this I'm going to use is stream lit you can also use flask okay first API or any other let's say web framework it's completely fine but streamlit would be easy for me to like you can Implement because there I'm not going to write any HTML and CSS code okay then after that fourth I'm going to use Vector DV so Vector DV wise I'm going to use f okay so F so f is a vector DB so this is for Facebook Okay Facebook team has this particular Vector DB called f and this is the local Vector DB okay you can also integrate Pine con then we chroma DB okay it's up to you but I'm going to use f so in future maybe we'll be creating some other projects so there actually we can use any other Vector DB okay so these are the tools and Technology I'm going to use for this particular projects and definitely the final tool and platform I'm going to use something called bedro okay bedro from the a okay so Bedrock I'm going to use and llm wise I'm going to use something called Lama 2 as I already told you I'm going to use Lama 2 okay from M so this is the LM I'm going to use so yes so this is the tools and Technology I'm going to use now let me quickly uh I mean install these are the tools and technology so what I will do I'll open up my code and here let me write down everything one by one so first of all I need something called Len okay Len then I need something called P PDF P PDF then I need something called stream lit okay then I need something called fire CPU P CPU okay so let me save it now first of all I need to create an environment so I'll copy this particular command and I'm going to open up my terminal and let me create this particular environment first of all so guys as you can see my environment is created now I have to activate so this is the command G activate so now let's activate also now see I'm inside this Bedrock project okay that means this particular environment now I have to install the requirements so for this I'm going to execute this particular command see now it is installing everything so it will take some time okay so let's wait I'll come back when once it is done so guys as you can see installation is completed now what I have to do yeah so now I can uh start the coding part so yeah so make sure uh yeah so now what I will do I'll go inside this particular resarch folder and first of all I will test this particular Bedrock okay like how we can connect this particular bedrock and how we can access the model and all because I already showed you it is having some Foundation model and if you want to access it so for this first of all you need to do some authentication so that authentication we have already completed so let's go inside this particular Amazon Bedrock yeah so now see these are the models are available okay and I think you already know this Lama 2 then Mistral so these are the model is also open source model okay so this model is also available in the hugging face okay hugging face is also having these are the model let's say I want to access meta Lama model okay so this is the model actually I can see so all the model actually you have 7B then 70b 13B all the model actually you are having but if you want to load this particular model okay you have to download this particular model from the hugging P itself okay for this you need GPU machine okay you need a GPU machine and you you you should have a good memory there okay otherwise the you can't actually load this particular model even if you have already used this particular model okay so you'll see like inference time would be also High because it's a huge model again okay uh because everything you are running on your local machine okay and then you are executing the are the model but whenever I'm talking about this particular Amazon Bedrock so this model actually is already hosted here okay uh as an API so you can connect this model through API okay API request so first of all you just need to make a client okay with the help of this particular client you can send a request that means you can send a prompt and you can get a response okay from this particular model and this execution time would be very fast okay so for this if you want to let's say create a production grade application and if you want let's say Fuster inference okay at that time you can go with this particular Amazon Bedrock service okay but let's say you have uh good instance okay you have a good instance you have lots of money you can buy good instance good GPU configuration machine and all and if you are not worrying about the fer inference at the time you can go with these are the model okay you can like manually download this particular model you can use it but here we'll be using the client okay to access this particular model and every request actually you'll be sending okay will have some of the cost okay now if you want to check the cost also so you can check it out let's say if I want to use llama model so Lama is having there uh like cost okay cost per request so here you can see the view pricing option so part token actually it will charge you okay so see so if you if you're using this this model Jurassic to mid model so let's see the Llama model I think llama model is also there yeah meta Lama so this is the price uh per thousand tokens okay see per thousand tokens this is the price actually it will charge it's like very less okay lesser than your open I think okay so uh there is no like more charts so you don't need to worry about so if you want to create a produ grade applications you can go with this particular Amazon Bedrock service okay you can visit that particular pricing pce and you can try to understand now what I have to do guys uh first of all let's try to access one particular model OKAY from this particular Amazon bedro so let's say I want to access this particular model called this Jurassic model OKAY Jurassic model I want to access that's I want to access this particular model Jurassic mid model so if I want to access this particular model I have to hit the API request okay so here I have to send the API request but I'm going to send the API request throughout the python okay so guys now let's see how we can uh use this particular Amazon Bedrock that means the different different actually Foundation model okay so first of all we'll be doing this particular experiment and if we are able to access these are the model okay so next actually I'm going to show you how we can create this particular uh Inn rag application with the help of this particular Amazon bed so I'll go to my code editor and first of all here I'm going to import this Bedrock from the langen because it is already available in the langin okay Len framework so we have already installed this particular langin so make sure you have selected the correct environment so so let me refresh so this is the environment uh I'm using yeah so Lang chain do uh you have to import llms then inside that you have something called this particular service called Bedrock now I'm going to import this particular Bedrock class okay so bed drop then I also need something called llm chain because uh here whenever you will be creating that particular QA object okay so you need this particular LM chain so let's create this particular LM chain so from L chain dot chains so if you already know about Lang chain I think you already know what is the things actually I'm importing because these are the requirement actually I'm expecting you are already familiar with this particular Lang chain framework okay so chain I'm I'm going to import something called LM chain then I'm going to import something called prom template so here I'm going to write prom Lang chin uh do prompts okay I'm going to import something called prompt template then I'm going to import another Library called boto 3 okay so if you don't know what is boto 3 boto 3 is a library python Library actually we can use to connect with our AWS account okay but here we haven't installed this particular package so let me install also so here I can write boto 3 now let me open up my terminal now again I'm going to install this particular requirements so installation completed now let's create the client quickly so with the help of this particular um client actually I'll be accessing the bedro so we have imported B of three then I also need to import uh stream lead Okay because I'm going to create one Basics uh UI for my user okay so that's why it's needed so let's import it so I import stream lit as STD yeah okay it should be uh import okay not form yeah now I think everything is fine now first of all I'll be uh defining the Bedrock client okay so let's define the Bedrock client Bedrock client so for this I'm going to use this particular boto 3 so boto 3 okay dot client and uh here you have to mention the service actually want to use so service servicecore name so I want to use this particular Bedrock service okay so you have to write Bedrock underscore runtime okay bedro bedore runtime then you also need to define the region like which region actually you want to use in the AWS you are having I already told you how to check the region so we are inside this particular Us East one okay so let me also write down this particular region so I'm inside this Us ipen East ipen one okay so this is the reason so yeah guys this is my client so I'll store this particular client in in a variable so let's name it as Bedrock okay Bedrock client then I need to write the model ID okay which model actually want to access from the Bedrock okay so you have to define the model ID now how you will get this particular model ID so again go back to this particular bedro and I already told you it is having different different Foundation model let's say I want to use this particular Jurassic 2 model okay I'll click here now it is having different like variant Jurassic and Jurassic mid let's say I want to use this particular Jurassic mid I'll click here now if you just go below this is the model ID okay now let's copy this particular model ID I'll copy and I'll open up my code and here I'm going to paste it okay so this is the model ID now here what I have to do I have to create a llm rapper so let's create LM rapper llm is equal to uh bedro and inside that first of all you have to define the model ID OKAY model ID so model ID means the model ID actually we have defined okay this particular model I want to access then after that I have to also Define the client okay so client is equal to this Bedrock client we have created okay with the help of this bedro client it will authenticate and how it will get this particular credential I think you remember I think you remember we already set uh those credential okay in the terminal uh by running that particular AWS configure command Okay so it will take the access key and secret access key from there and it will take by this particular Library called boto 3 okay boto 3 automatically will take like take this particular credential okay from the environment then uh what I have to do I have to define the model uh keyword okay so let's define the model keyword also so model arguments so inside that I'm going to mention one arguments called temperature parameter okay because this is the parameter we usually twak a lot actually whenever we are using llm and all okay so here is the temperature parameter but it should be defined as a string right then here you have to provide the value of this particular temperature parameter so let's take 0.9 that me I'm taking close to one I'm telling my model just take any risk and try to give my and try to give a creative output okay whenever you are generating any kinds of let's say output and all so you can set this particular parameter based on your requirements so I said 0.9 now what I will do I'll create a uh I'll create a function here called my chatbot mycore chatbot okay my chatbot so inside that actually I'm going to write the final logic okay so it will take the language uh I also want to give the language okay language let's a choice let's say you want to generate this particular response in English language or let's say uh Spanish language or let's say Hindi language okay you can give any kinds of language so you can give this particular parameter as language then it will also take the user okay user text user text like whatever text user is giving it will also take that particular input then what I have to do I have to create a prom template here so prom template I have already imported this particular prom template now inside prom template first of all I need to specify the input variable okay so input variables okay so here input variables I'm having the language okay language and this user text okay the these two actually I have this input input variable okay here now what I have to specify I think I should also close this particular quotation yeah then I also need to specify my actual template okay so the template is equal to so here uh you can give any kinds of let's say prompt so I'll give this kinds of prompt actually so you add a chatboard uh you are in this particular language and this is the user text okay so this is the prompt I have given to my llm okay that's how you can Define this particular prompt template now let's instore this particular promp template in a variable I'll just name it as prompt okay prompt now what I will do I'll just uh create a LM chain so LM chain is equal to uh I'll Define this particular llm object okay llm is equal to the llm rapper we have created llm then I also need to give this particular prompt so prompt is equal to okay prompt is equal to prompt we have created okay then I store this particular things in a variable I'll just name it as Bedrock okay bedro _ chain now uh user will uh ask the query and they will get the response so for this I'm going to use utilize this particular Bedrock chain I have created so Bedrock chain so it will take first of all the language okay input as a language because first of all user will give one language so it will take that particular language so language should be language okay then it will also take the user input user text so user text uh should be user text I think everything is fine let's test okay it should be text okay not a test so that's why this error is coming user text user text and now I think everything is fine now the response actually I'll be getting so it will uh it will return me the response okay so I'll return this particular response so return this response yeah now uh this function is ready now I can uh inference on top of the model actually uh I'm I'm using here now what I will do I'll create a Basics stream L uh uh you can say UI so for this first of all I'll give one title s. title s. title so here you can give any name of the application so here I can write U Bedrock okay Bedrock demo or Bedrock test okay Bedrock uh Bedrock test I can just write uh then uh first of all I'll be taking one uh you can say select box here because user will uh you can say choose the language so for this you can uh use this particular code snippit so see here I'm creating one uh like slate box and user will select the language so here you can add as many as language you can so I have only added three language English Spanish and Hindi okay you can also add Bengali then you can also add let's say uh I mean U like Russian okay anything you can add here it's up to you now what I will do uh I'll just write one logic if user is given any kinds of language so what you have to do first of all you have to take the input from the user so I'll take this input and I will store in this particular variable user text okay user text is equal to so here I'm going to create a uh select uh text area Okay because uh I'm going to just create a box in inside that particular box user will give the input okay so for this you can use std. sidebar s. sidebar okay then you can take something called text idea okay text idea yeah then inside that you can Define the label that means uh the question actually you want to render here so I'll give a message what is your okay what is your question okay and you can also Define like how many let's say uh character user will able to put okay so here you can just Define Max character is equal to I will just specify 100 okay so 100 character user will put here then once it is done so I also need to check this user text that means if user has given any kinds of input text that means the prompt okay to the llm so what I have to do first of all I have to uh give it to my model so I'll call this particular function my chatbot inside that first of all I'll give my language okay the language user has selected then I will also provide something called user text okay whatever question actually user is asking then it will give me the response okay so it will give me the response yeah then after that I will write this particular response in the Stream lit okay stream L application say St dot write and here I'm going to write this particular response so I'm going to only extract the text okay from the response so it should be text yeah so I think it should work now let's test whether it is working or not so I'm going to open up my terminal so let me Cate this particular terminal and I'm going to execute this particular file this Bedrock trials. P so for this you have to execute this particular command okay so let me also add this particular command so if you want to execute the file so you can write stream lit okay stream lit run uh this is inside resarch okay slash uh the name of this file is bedra Trials okay do p is the name now let's copy the command I'll open up my terminal and let me execute okay so it is giving one error it is telling research okay so research spelling is not correct let me check so research okay now I think it's fine now let me copy and execute okay now my application is running now if I go to my browser now if I open up my browser okay so it will open up one one new tab so this is the tab it has opened but again I can see there is a error so what is the error so unknown service error so unknown service Bedrock undor runtime okay so let me check this particular C snippit so here uh okay so it should be Bedrock hypen runtime okay not a underscore runtime now I think it should work I go back and rerun this particular application okay now see this is my interface now you can select any kinds of language so let's select the English language now ask any kind of qu so I'll ask what is okay what is uh let's say um what is C++ okay what is C++ so now let's see whether it is able to give me answer or not now if you want to execute you need to press control and enter so here it is giving me the response C++ is a general programming Lang language uh that means uh yeah so it's a correct response now you can any ask any kind of query so you can ask like what is python okay and control enter see it is also giving the response now see guys although I'm using this particular model okay this large language model and I'm also using this open source model OKAY zuras is also open source model but the response time is like very uh first here because this model is already hosted okay over the wraw and we we can access this particular model with the help of this particular client okay the client actually we have created okay this particular client we have created okay so that's is why actually uh whenever you want to create any kind of production gr application and you want to let's say get a quick response at that time you can go with these other the services but whenever let's say you are loading these other the model on your machine at that time your inference time would be very very higher okay like it will take lots of time to execute that particular code so that's why actually you can use this particular bedrock and this like very scalable okay like it is like very efficient solution whenever you are trying to create any kind of genbi application now see guys uh I already showed you how we can access different different model now let's say you want to also access Meta Meta model okay so what you can do you can come to the meta and you can take this particular model ID now let's say you want to access this particular model this seven 7 70 billion parameter model so you need to give this particular ID okay so here you just only need to change so let me show you if I open up the code so here you only need to change okay inside the model ID and everything will remain same but here only we're doing the inferencing okay on top of the model but now what I'm going to do I'm I'm going to create one NN rag application okay so NN rag uh like you can say project we'll be implementing so what is rag so let me give you one uh idea so first of all I'm going to create a architecture okay of this particular project I'm going to develop so here first of all what I'm going to do as I already told you I'm going to use PDF documents okay let's say I'm having some PDF documents okay PDF docs okay so it can be multiple PDF also it can be one PDF also it's up to you now what I have to do first of all I have to extract the text okay I have to extract okay extract data okay from this particular PDF after extracting what I have to do I have to create a chance I have to create a chance why I have to create a chance because all the model is having their input length okay if I show you uh let's say I'm using this uh metal Lama 2 okay going forward I'm I'll be using this metal Lama 2 so metal Lama 2 uh is is having actually uh input size okay this token input size let me show you so if I go to the official metal Lama 2 website so let's go to the website so here you can see guys so it is having different different models 7 billion 13 billion and 70 billion and if you see here the context length is 496 token okay now what will happen so whenever you are using any kinds of PDF documents so if you extract all the data that means all the documents okay from the PDF you will see sometimes it would be more than 4,096 token okay it would be more more than 496 token at the time if you give this particular input to the model okay to the model your model will throw input error so to prevent this kinds of issue what I have to do I have to create a chunks okay chunks means I have to create a different different chunks okay let's say this is your entire text okay let's say this is your entire text okay this is your inter text so what you will do you'll just take a chance okay chunks of the text so this is one chunks this is another chunks okay this is another chunks okay that's how you will be giving to the model okay as in inut so different different chunks actually you are giving instead of taking all the text together you are giving different different chunks so that time you have to also Define the Chun size okay and there is another parameter we can also refine called chunks overlap okay so this is the idea of this chunin now once this chunks is created now what I have to do I have to download one embedding model okay I have to download one embedding model so in this case I'm going to use this Titan embedding model I already showed you okay so embedding model Titan embedding model with the help of this particular embedding model I will convert this particular data to Vector embedding okay so Vector embedding Vector embedding that means numerical representation Vector embedding then what I have to do I have to store this particular Vector embedding in a knowledge base that means in a vector DV so here I'm going to use something called FAS okay f is a vector DB it's a vector DB Vector DB okay so this is nothing but this is my knowledge base knowledge base okay now what will happen user will ask some query so let's say this is the user so user will ask some query so let's say this is the query user has asked so what I have to do I have to pass this particular query to my knowledge base okay so it will do something called semantic sear okay semantic sear semantic index S I think you already know what is semantic sear inside Vector DB then it will also return some of the rank results okay it will return some rank results rank results okay so it will return this particular rank results B on the K parameter let's say if K is equal to three so it will return only three relevant answer okay with respect to the query you have asked now what I have to do I have to connect the LM so I'll be collecting the llm so in this case I'm using something called Lama 2 okay Lama 2 so I'll fit this particular rank treasur to the llm okay then I'll also give the query to the llm so LM will try to understand the query it will also try to understand the results that means the answer then it will process this particular query answer and it will give you the actual response okay actual response so response okay so let's say you have asked something related python so first of all it will check in the knowledge base whether I'm having answer related python or not if it it is having so it will take most relevant three output okay from this particular knowledge base then it will process okay based on the query then it will give you the correct response that means what is python exactly okay this this is the idea and this is called okay this is called rag application okay rag pipeline this is called rag pipeline okay this called rag pipeline that means retrieval augmented generation so instead of fining the model what I'm doing I'm just adding some additional knowledge okay additional information in okay information okay additional information to the model okay so this is my additional information so I'm just processing this information I'm creating the embeddings okay and I'm storing in a knowledge base and I'm connecting okay I'm connecting the llm to the knowledge base and whatever user is asking this kinds of query okay I'm just uh like getting the response and I'm showing to the user okay so this is called rag Pipeline and what is fine tuning fine tuning means whenever you will be like say training that particular model that means you will be changing the we parameter that that is called actually fine tuning and fine tuning is like very hard task and it's like very costly task okay so that's why you don't need to perform this fine tuning every time okay first of all you will be uh applying this particular rag concept and if rag is working fine then you'll be going to going with the r rag concept and if rag concept is failing somewhere that time actually you have to perform the fine tuning so feature actually be also learning how we can perform the fine tuning okay on top of the custom data that thing we'll be also learning so yes guys this is the entire architecture of our like you can say application now I need to code this particular example so for this I'm going to again open up my code editor now here I'm going to open this particular m.p file so guys I think you already got the idea how things are working and how we can make the connection with this particular bedro and all so let me just quickly write all the codes so first of all I need to import some of the library here so let's import all the library so these are the libraries are required okay I'm importing boto 3 because of that particular you can say Bedrock I want to access with the Bedrock streamly I need because I'll be creating the web application then I'm also importing something called Bedrock embedding okay because I already told you I'm going to use one embedding model OKAY from the Bedrock so Bedrock having also embedding model so if I show you let's say Amazon is also having one model called Amazon Titan okay so let me show you yeah Titan embedding G1 text okay this is the model so this embedding model actually I'm going to use okay that's why I'm importing this particular embedding from the uh you can say Lang chain okay and this is the Bedrock eming then I also need this llm that means Bedrock then P PDF directory loader because I'm going to keep some PDF okay in the directory so let me create a directory here I'm going to name it as data okay and I can name it as PDF data okay PDF data inside that I'm going to keep my PDF so with the help of this particular package I'm going to load this particular PDF then character recursive character text splitter so I already told you something called chunins so if you want to perform the chunins you have to use this particular method called character text splitter okay recursive character text splitter then I also need something called Vector DV so Vector DV wise I'm going to use F and it is already available inside langen and prom template and retal keyway because I'm going to perform then I'm importing this particular retal keyway okay this particular method because as I already told you I'm going to create this rag application and on top of the knowledge base actually I'll be performing the query operation okay so that's why actually this is need it now the first thing what you have to do you have to Define one prom template okay so this is the default prom template I just prepared okay so here I just written so you human will ask some query okay based on that you have to return the response okay by taking the context okay context means the knowledge base so this is the prom template I have created now what you have to do you have to collect the you have to connect the client okay so I think you know how to collect the client so this is the code for the client so boto three client and you have to provide the service name and the region name then what you have to do you have to get the embedding model so to get the embedding model what you can do you can use this particular Bedrock embedding okay Bedrock embedding to load the embedding model so here is the code okay so that's how you can load this particular embedding model as you can see Bedrock embedding here you have to give the model ID so Amazon Titan embed text V1 so this is the model actually I'm using so Amazon Titan embed text V1 okay so this is the model ID I'm using let me show you yeah so this is the model ID after that you have to also assign the client okay the client actually you have created then first of all what I have to do I have to load this particular PDF documents okay so I don't have any PDFs so let me upload some of the PDFs here so I'm going to open up the folder and here I'm going to keep this particular PDF okay so this is one research paper actually as you can see so let me show you this is one research paper and uh the name of the research paper is development of multiple combined regation method for rain rainfall measurement okay so this is the research paper actually I have have given here so you can give any kinds of resarch paper any kinds of PDF here any kinds of PDF documents it's up to you okay so I already have this in my system that's why I'm giving this particular PDF now let's uh see how we can extract these are the PDF text now what I will do I have already created one function so let me show you so inside main. Pi here I can mention this particular function called get documents okay so first of all I will load this particular PDF okay as you can see so here I need to give the path of the PDF copy the name yeah so this is the folder inside that actually whatever PDF actually you are having it will load everything then after that I'm performing this recursive T splitter that means I'm performing this chuning operation okay so as you can see so this is the chunin actually I'm doing I'm after extracting the documents I'm performing this chuning operation that means it will create the chunks different different chunks and this is the Chun size that means it will take thousand character okay in one chunks let me show you so let's say whenever it will create this particular chance it will consider thousands character Okay thousands tokens in a one chance okay so that's you have to give this particular chunk size and chunk overlap means how much overlap actually you want from the previous okay from the previous um like you can say chunks you have created okay so this is called chunks overlap now once this is done then you have to uh apply this particular split document that means it will perform the chuning then after that I'm just returning the documents then I also need to load the vector okay so to load the vector you can execute this particular function let me show you you can load this particular function called get Vector store now it will take the documents the documents actually you have extracted now here I'm using this F okay F Vector DV as you can see FES and I'm initializing the files I'm giving this particular documentation the documentation I have extracted and also giving the vector embedding okay the vector embedding I have initialized okay vrog embedding then what it will do it will automatically take those other the documents and it will convert to Vector representation okay and it will save inside my local system with the help of this particular name okay F index now once it is done I also need the llm op okay so I have created another function called get llm so here I'm initializing this particular uh you can say llm now if you see I'm using metal Lama to okay so now if I show you my Bedrock now if I go to the overview and I'm using this Lama 2 and I'm using this particular model say 7 billion model okay now this is the model ID okay just copy and here you can paste it okay here you can mention now client and here you can give the model arguments okay now here I have given Max gen length okay that means how much actually like let's say tokens he want to get as a output okay from the llm so here I've given 512 okay that is 512 token it will give me as a output and after that I'm just returning the LM then what I have to do I have to create the prom template so I think you remember we already defined the uh you can say prompt here so prompt template now here I'm just defining the template okay inside the template I'm just defining these other the thing now input variable should be context and question because here I mentioned okay question and context now once it is done uh I have to uh create the response function because here it will take the input and it will give you the response okay so this is the simple respon function so it will take the llm that means large language model and Vector destroy that means your F and query now first of all it will create this particular Ral object okay inside that it will take the llm and chain type is stop because I'm going to create a simple chain that's why because in Lang chain there are so many chain type you can explore over the documentation now R object means your knowledge base okay here I'm using the f as you can see store F and as reter and I'm performing similarity s okay and this is the uh this rank result parameter that means K is equal to three it will return only three okay relevant answer then I'm just returning okay this particular Source document as well then you also need to give the promt template you have created here then you need to ask the query okay the query actually user will give and whatever answer actually will get I'm just returning this particular answer okay then here I just need to create a simple user application so first of all I'm going to create a new main method let me show you so this is the main method so here first of all I've given one title let a rag demo and here I've given the name of the project into rag application okay then here I'm just giving one input okay input text okay text input from the user user will ask any of query from the PDF itself now first of all what I have to do okay let's say if you want to ask any question on top of the knowledge based first of all you have to build a knowledge base that means you have to execute this particular function called get Vector store okay but before that you have to execute this particular function called get documents that means it will extract the documents after that it will store as a embedding okay so I have to execute this two function so for this I'm going to create one button here okay so let me show you so here I'm going to create one button as you can see so here I'm Crea one slide but and here I've given update or create a vector store now if someone is clicking on this particular button store Vector first of all it will run this particular document that means this particular function and it will extract the documentation and whatever documentation actually I'm getting okay sorry whatever documentation actually I'm getting from here I'll be passing inside this particular function called get Vector restore okay as you can see get Vector restore this documentation I'm passing then once it is done I'm just sending the success message then uh if my uh knowledge base is created that means Vector store is created now I'll be performing the question answer of on top of it okay so again I'm going to create another function I think it should be inside this particular a yeah so again I I have created another function called uh send okay send button so whatever user will give the query so whatever user will give the quy here okay first of all what I have to do I have to load my uh knowledge base okay as you can see I'm loading the knowledge base f. load actually I'm doing and this is the index name then I also need to give the embedding object then you also need to give this particular parameter called allow dangerous der serialization is equal to two Okay if you're using this F so this is the uh parameter you have to pass because I saw from the documentation they are also using this particular parameter then I I need to load my llm okay that means I already created one function to load the llm so as you can see get llm object okay then after that uh here is the final function I'm calling so get llm response and it will take this llm Vector store and query so llm Vector store and query the uh query actually user is asking and I'm just writing the response okay whatever response actually I'm getting I'm writing on top of the stream L okay now let's see whether it's working or not so to execute this particular file you need to run this command so let me also mention this command so it should be stream L run main. Pi Okay because I'm going to run this particular main main file now let me copy the command and I'm going to open up my terminal so this is the terminal now I'm going to stop the previous execution let me clear and let me execute this particular file now again this is running so if I go back and I will close the previous one and this is the new one it has loaded okay I'm not getting anything because let me check my code main. Pi okay so this main actually I'm not calling okay so I need to also Define this particular main function in this particular if statement okay if underscore name underscore mean then I'm going to uh access these are the code okay now I think it should work I'll go back and run this particular code so guys now as you can see I got my interface now first of all I need to store the vector okay because I need to extract the documents I need to store the knowledge base so let's click on this particular store Vector so once it is done you will see the success message so guys as you can see the execution is done now if I show you my code left hand side you can see it has created this particular index okay that means here actually it has stored all of my Vector but it is in a pckl format okay because you can't visualize these are the vector again it's a local Vector DB okay if you want to see that particular Vector you can use pine con okay Pine we there actually you can visualize these are the vector like how it is look like and all now what I will do I'll ask some of the query so let's ask query with respect to the PDF actually I'm having so let me open the PDF so let's say I'll be asking related uh this particular uh rainall measurements okay so rainall measurements I'll copy this particular term and here I can ask so tell me about rful measurements now if I just uh I think I need to click on the send button okay now I think it should work now guys let me ask another qu so I'll ask tell me about uh tell be about methology tell me okay about methology of the paper now guys here is the response I got uh so guys here is the response I got the paper compares the performance of the various regression models for the rainfall prediction and the matology involves the comparing of the performance of difference regession model statical metrics such as R2 me and MC and rmsc okay if you read this particular paper you'll see the same thing actually uh they're also explaining okay about this particular paper and all that means it is working fine okay now not only this particular paper you can uh place any kinds of actually PDF here in this particular folder okay any kinds of PDF any kinds of PDF books and you can again uh click on this particular button so let me show you so this is my application you can again click on this particular button that means store Vector it will again store those new Vector that means new uh text and it will create a new knowledge base and on top of that you can perform the question answer okay so this is like awesome application actually you can create with the help of this particular a uh Bedrock okay not only this model you can also use mral AI okay you can also use this particular uh stability AI okay you can try these are the model at least okay after this particular uh you can say uh video you can try with different different model and you can create different different application on top of it so yeah guys this is all about from this particular video I hope you got the entire understanding how we can create our different different application how we can create a you can rag application with the help of this particular AWS Bedrock so here you can explore this particular playground as well as the model actually different different Foundation model you can export and you can create different different application okay so yes guys uh this is all about from this particular video and uh this is like awesome actually platform they have developed uh if you see the inference execution time actually it's like very fast although I'm using like bigger bigger model let's say I used metal model this particular 7 70 billion parameter model and my execution time was like very fast there okay but if you're loading this particular model on your system you will see uh you will get lots of difficulty there okay so yes guys this is all about from this particular video I hope you like this particular video so thank you so much guys for watching this video and I'll see you next time"
vA5TTz6BXhY,Git &amp; GitHub Crash Course 2025,https://www.youtube.com/watch?v=vA5TTz6BXhY,Traversy Media,UC29ju8bIPH5as8OGnQzwJyA,This is a crash course to learn the fundamentals of Git version control and the Github platform. Learn all of the core commands ...,2025-01-13T15:01:15Z,hey guys welcome to my git and GitHub crash course for 2025 and Beyond so I figured that this would be a good idea for the first crash course of the year because git is something that absolutely every developer needs to know at least the basics of and I do want to stress that this is a crash course meaning that we don't dive super deep into really Advanced topics this is more for beginners as well as intermediate developers that may know just the very basics of git and want to learn a little bit more so we're going to cover all the stuff that you need to know such as creating a local repository staging pushing to a remote GitHub repo pulling branching and merging and more and we're going to start with some slides just to go over what git and GitHub is and just some of the fundamentals and then we'll jump in and we'll start using Git along with GitHub and I'll even show you how to deploy a project using cicd which is continuous integration and continuous deployment we'll do that with GitHub and uh a company called versel all right so let's get into it all right guys so I just want to go through some slides talk a little bit about what git is what GitHub is and look at some of the the key features and so on so git is a distributed version control system or VCS and it helps developers track changes in their code base also allows them to collaborate with others and manage multiple versions of a project project and in its absolute simplest form and simplest use case it's used to back up your code now unlike other Version Control Systems some of the older ones git is decentralized meaning that you don't need a central server to use it instead every developer has a full copy of the repository on their local machine and a repository you can think of as a like a digital filing cabinet that stores all your files and all the changes that you've made so it's kind of like a time machine for your code and you can roll back to certain versions when you need to so Version Control is a musthave skill for any developer it's used in almost every software project and if you think about big companies like Google Facebook Microsoft they have thousands of developers that are working on the same giant code bases and they need a way to to manage all the changes that are made and that's where git comes in it allows developers to work on the same Project without stepping on each other's toes and it also provides a way to track changes roll back to to previous versions and it's used for anywhere from you know a one person to Giant companies like Google and Facebook now just to go over real quickly the key features of git it's distributed it's decentralized so there's no need for a central server it keeps track of changes made to your codebase multiple developers can work on the same project you have branching which we're going to talk about more in a little bit but if you want to create a separate Branch to work on outside of your your main branch your main code to either create a feature or fix a bug you can do that and then when you're done you can merge it into the main branch into the main code you have the option to work with uh remote repositories like GitHub but there's others as well such as gitlab and bitbucket um extensive tooling so get is supported by many tools including idees and we're going to learn about the the workflow soon when it comes to get but in addition to your repository there's also a staging area that you can utilize that you can put files before you actually commit them to your local repository the speed so git is very fast and efficient uh it also uses sha one hashing to ensure data integrity and of course it's open source and free it's it's widely available without licensing costs it has a large community and support for plugins and things like that now there are are other version control systems like sub verion or S SPN but git is by far the most popular version control system today for the reasons that I mentioned it's fast it's efficient decentralized now this chart is from the stack Overflow developer survey of 2022 and it shows that almost 94% of developers use git over other Version Control Systems which is a huge number and they didn't even have this this question in the 23 and 24 surveys because it's just so obvious that you know everybody uses git now I want to talk a little bit about GitHub because some beginners can confuse git with GitHub but GitHub is a web-based platform designed for Version Control and collaboration and it hosts G repositories remote repositories and provides a graphical interface within the browser to manage your code and do other things as well um in addition to hosting your code GitHub offers you know powerful collaboration tools like bug tracking feature requests task management there's wikis for your projects so git is the tool that you use to create these repositories and and push your code to them but something like GitHub because there's others as well it's not just GitHub but these kind of remote Services um this is where most of your collaboration is going to happen this is where people are going to pull your code from and make poll requests and add issues and things like that so it's important to to note that git is the version control system while GitHub is the platform that hosts git repositories all right so when it comes to installing git there's there's multiple ways to do this and it really depends on the system you're on so if you're on Mac OS you can use the Homebrew package manager if you're on Linux you can use whatever package manager for whatever Dro you're using if you're on Windows or or any platform for that matter you can download get from the official webs s it which is get- scc.com and when you download the installer on Windows you also get a really cool terminal program called git bash which is a Unix like terminal for Windows and even though the windows terminal has gotten a lot better over the years I still prefer to use git bash on Windows but that's just me so when it comes to using git you have two options you have the the terminal where you write you know type commands and then you also have tools with graphical user interfaces now I recommend learning git using the terminal it's it's more powerful and you'll have a better understanding of what's Happening behind the scenes um when you use an interface it's still doing the same thing that you would do in a terminal but you're not seeing what's actually happening and the commands that are actually being run and then I would say once you're comfortable with the terminal you can try out a guy um there's many available like GitHub desktop Force tree git Kraken um if you're using visual studio code or other IDE there's usually well for visual studio code there is built-in git features and for many other idees there are as well but again I would say get comfortable with the terminal first now when you start using git you do have to configure it initially with your name and email address this is important because every git commit uses this information and you can set this with the these commands here get config and then-- Global username and then your name and then same with email now I want to go over the workflow of git and and you're going to learn more about this at when we actually do it this is just kind of an overview so if you look at the boxes at the top you have your working directory and this is on your local machine you have your working directory this is where you make changes to your files you have the staging area where you PR prepare your files for commit and then you have the local repository where git stores all the changes you've made to your files and this will be all stored in a hidden folder called dogit in your project directory and then the remote repository whether that's on GitHub or gitlab or wherever that is that's stored remote and people can then pull that code down and so on so I just want to go over kind of the workflow and the commands that you'll run to move files around to these different areas and again we're going to be doing this so this is just an overview so first off you're going to run get and knit and that will initialize a new repository in your project folder or your working directory and it'll be a hidden folder called dogit then once you're ready to add some files to the staging area let's say it's your initial commit or you added a a new feature or you fixed a bug or whatever it might be you add it to the staging area with the get add command and then when you're ready to commit it to your your local repository you would run the get commit command and you add a comment explaining what that commit is okay once you're ready to push to your remote repo whether that's on GitHub or gitlab then you're going to use the get push command and this is after you configure your remote repository because it has to know where it's actually going to be pushed to and I'll show you how to do that now when you want to pull changes from a repository you would use the git pull command that's going to pull the files down to your working directory all right so let's say one person makes a commit and they push to GitHub and then another developer wants to get those changes and they're already you know they already cloned the repo or whatever then they would just type get PLL and that will get the latest changes now once you go to a repository for the first time and you want to get that get those files on your machine there's a few ways you can do it you can click the download button and get the zip file but you don't really want to do that if you're going to continuously work on the the repository so you would use the get clone command and that would pull the entire thing onto your local machine now branching is a key feature of Git it allows you to work on new features or bug fixes without affecting the main code base so you can create a new branch make a change and then merge those changes into the main branch and this is a common workflow in git and you can also create branch branches for different environments like production staging and development so let's say you have a project that logs workouts and you want to add a feature that calculates the total calories burned so you can create a new branch called feature SLC calories and work on that feature and then when you're done you can then merge that Branch back into the main branch and this is called a poll request okay you're requesting that your changes be merged into the main code base so this is uh again a common workflow in git so I think that that's all I want to talk about in the slides so kind of a general overview now we're going to jump in and I'm going to show you how to actually run these commands how to create a local repository how to create a remote GitHub repository how to push it how to pull make changes Etc so let's get into it all right so first thing you want to do is get get installed if you don't have it already and you can check by opening your terminal and just saying get-- version that'll show you the current version if you don't have it then like I said there's a few ways you can install it you can use home brew on Mac or your Linux package manager or just go to get- sc.com downloads and download it for Windows Mac or Linux all right so once you get it installed we're going to have to configure your your name and email and this is something you do just once the first time that you you're using git so you just want to open up a terminal it doesn't matter what folder you're in at the moment I'll get into what this task track tracker is in a minute but we want to run two commands so you're going to do get config and then d-g Global and then you want user.name and then whatever you want to specify as your name so I would say you know Brad traversy okay I'm not going to run that because I already have it set and you can check what's that by just taking the value away and just running this so you'll see that's what I have as my name all right then you're going to want to do the same for email so that would be user. email and then you would put in you know whatever email that you're using okay so that's how you can configure that now there's one other thing that I would suggest configuring and that's your main the name of your main branch because by default with Git it's called Master but with GitHub they changed it from Master to main so you can check What It Is by doing dash dash Global and then it's init do default Branch okay and you'll see mine is main because I changed it but yours might say master so what you can do to change it to match githubsign to talk about the project which doesn't really matter because that's not the focus but I have a download downlo uh a link to a download in the description to this task tracker zip file which has an index HTML a script JS and a style CSS and it's just an example of a project that we're going to use to make changes commit to our repository push to GitHub Etc if you want to use some other files that you create on your own that's absolutely fine but I figured I'd just give you something to work with and the reason that I put it as a download and didn't add it to you know its own repository for you to clone is I don't want start with cloning I want to start as if this were your own project all right so just download that and you can see I'm already in the the task tracker folder and I could do everything from here in my terminal but I'm going to open this folder up in vs code so that I can use the terminal here and we can actually see the files okay because there are some some git Integrations with VSS code and even though that's not the focus of this tutorial the focus is the you know the commands and the term we still have that as like a you know visual confirmation of what's happening so just to kind of go over these real quick very very simple I just have an H1 and a UL here so we have a script.js with just a console log and then a stylesheet with a little bit of CSS so again this what's in here doesn't really matter so the very first thing you're going to do when you create a project and you want to use git is you want to initialize a local repository and you do that with the command get ini it okay if you remember if we look at this slide here we run get in it that will initialize a new repository and it creates this hidden dogit folder right so if I were to do an LS so list my files and show hidden hidden files and folders it shows this dogit that's my git repository if you wanted to completely get rid of it you could do rm-rf and then doget and that would completely delete it all right so and you can see that a couple things happened within VSS code one it shows my Branch name down in the corner Main and it also changed the colors of the file names and put this U next to it so this just represents files that are untracked okay the U and the green coloring which means that I haven't added them to my staging area because remember there's a a staging area right and then there's our local repo where we commit to so we haven't done anything with these files yet so they're untracked now there's also a source control tab here and you can do everything that you can do within the terminal with Git commands you can do here as well but this isn't a tutorial on vs code so I'm not going to get too much into that but it does show you which files you know are untrack and it shows you the status now to check the status within the terminal you can do get status and that shows us that we have three untracked files okay so what we would do next if we look at the workflow here is we would run get add and add files to the staging area so typically what you'll do is you'll work on your project get it to a place where you know you want to save it essentially and then you want to run get ad and typically you'll add all so all your files but I just want to show you you can add them individually so if I do get ad index HTML now in vs code just to show you as a visual representation it has an a next to it it says index added so this file has been added to the staging area and if I were to run G status it shows me that okay so this here and then these two are still untracked so if I run get add dot or add all now they all have an A next to them and if I run get status status then you can see that they're all now in the staging area to be committed now to commit let see so to commit we run get commit and that will commit files to your local repository not your remote not GitHub or anything we haven't set any of that up yet this is all local so let's go ahead and run get commit and what you're going to do is add the dhm flag and add a message in quotes So typically when it's your first one you'll do something like initial commit so if we run that now you can see the files are no longer green over here they're white with no letter because now they're it everything's up to date the everything's added to the local repository if I run get status it says nothing to commit working tree clean because I've committed everything now from here you have the option of either adding your remote repository with GitHub so you would need to create one on GitHub or you could just keep working locally for now so for instance if I want to you know make a change and I'll just do something silly here I'll just add another task right so now if I save that you can see that this has changed color now to Orange which means that this this file has been changed from the what's in the local repository so you go through you make some changes you add a feature you fix something whatever it is and then you're going to add again so just say get add all which is only going to add the index file because that's all it's been changed right so now that gets added now you want to commit it so let's say get commit dasm and and I'll just say added new task okay so now that gets added and now I have uh my repository up to date and you can also run get log which will show you your commits starting with the most recent first which is added new task shows me the author the date and the commit hash and if I click the down arrow you can see that it goes to the next one which is initial commit and then to to get out of this you just hit Q to quit so that's going to be your workflow as you make some changes you add a new feature whatever the the change might be you add the files to your staging area and then you commit them okay and we're not dealing with a remote repository just yet but as far as frequency goes it's really up to you some people will will commit really often some will only do it after major features it's really just based on your your preference all right so now what we're going to want to do is the next step which is going to be git push where we push to a remote repository and that could be GitHub but it could also be gitlab bit bucket or or something else um so what we're going to do is set up a GitHub repository because right now we don't have one to actually push to so you're going to want to go to GitHub if you don't have an account create one and um you can list all your repositories that's what you see here um you also have a profile that will show your most popular repositories and also your contribution grid here so basically the lighter the green the more contributions like this day November 30th I had seven this day I had three and then the blank ones I didn't have any contributions meaning I didn't push to GitHub all right so what you're going to want to do is create a new repository with this right here it's a plus sign and the new repository you're going to name it typically you're going to call it what your project or your folder is called which in my case would be task tracker and I'm just going to say demo project for tutorial I'm not going to keep this now here is where you choose if it's public or private if it's public anyone can go to this repository and anyone can see the code all right so keep that in mind I'm going to make it private because I don't want people seeing this because it's just for this video um and it's nothing that I want anybody to have because it's just nothing really and then you can also initialize a a read me file I typically don't do this I create it myself and then and then push it but you can do that here you can also add a do get ignore file which I'll talk about in a little bit but again I add that myself so let's say create repository now it shows you basically the steps if you're creating a new repository or if you're pushing an existing repository which is what we're doing we've already done this the init the commit the add so basically what we need to do is first run this command so this will add the um this this repository as our remote so I'm just going to paste that in here so it's get remote add and then origin is just the name of the or the Alias of the of the repository so you can name it whatever you want but typically I'll just keep it as origin and then we're just adding the the address to the repo which is my username okay yours will obviously be your username slash and then whatever you called the Repository so I'm going to run that it's not going to do anything but it it did add the uh the remote repository so next uh let's go back here so we want to make sure that we're using the main branch I mean we don't really have to run this but I usually do anyway so we're just saying we want to use the main branch um and then we want to finally push so we're going to run this get push dasu origin main now we only have to add the dasu which stands for Upstream and then origin main we only have to add this this time any other time that we push in the future we can just simply run get push after we commit to our local repository so keep that in mind um so we run that and then you can see that it gets pushed to GitHub now if I go back to this page and I reload we see our code so we have the three files in the repository okay this is private so nobody can see it unless I give them permission if it was public anyone could go to this link and they would see your codee now what shows here is whatever is in your readme file your readme.md which is a markdown file and we don't have one so that's why it says add a read me and we can do it from here or we can what I'll usually do is create it on my you know create it on my machine and then push it but I want to show you how we can pull stuff from the repository so I'm actually going to add the read me from here so I'm going to click that button and then I'm just going to add a number sign and we'll say task tracker now this uses markdown syntax and if you use a a number sign that's going to be an H1 right if I use two that would be uh you know this heading would be an H2 if I use three that'll be an H3 and so on and I have a full crash course on markdown if you want to check that out I'll I'll put try to remember to put that link in the description so I'm just going to say this is a demo project for my git tutorial okay and this is where you'll usually put things like the usage so what do you have to do to run this if you're building something with node.js you would you would say you know run npm install to install any dependencies uh npm run Dev to run the server you just want to give full instructions on how to use this project okay but this is something very simple so I'm just going to add this and you can see the preview as well as to what it will look like which it will look like like this so I'm going to commit the changes and this does a commit just like we did from the terminal and you can add a description I'm just going to do create readme and then we'll say commit changes now we have a readme file here however we don't have it here so what we would do is we would pull the changes from the remote repository all right and we would do this if someone else had um you know cloned the repository made some changes and then put push to it we would need those changes so that would be this step here which would be a get poll okay so let's go ahead and run get poll and now we have the read me here okay because it pulled any changes from the server now the next thing I want to talk about is theg ignore file which is really important because you're going to have some things in your your project that you're not going to want to push to GitHub so for instance you might have a EnV file that has environment variables which can hold things like API keys and stuff that you definitely don't want the public to see so let's actually create a EnV file and let's say we have something like API key and we have it set to whatever one two three doesn't really matter so you're not going to want this to be available in your repository especially if it's a public repo right so what you would do is create a file called dotg ignore make sure you have that dot and then anything you put in here is going to be safe and not push to the repository so I'm going to add EnV all right so I'm just specifying that I don't want this file to be in the repository right so now let's make um another change we'll just go ahead and add another task I guess and then I'm going to say get add all and get commit and let's say added Task 5 and then if I want to push I can just say get push I don't have to do the you know the dasu origin or anything like that so I'll go ahead and push and then if we check out the geub repo I'm just going to reload this you'll see that we have our doget ignore we have the latest commit which is added Task 5 but the file is not here okay I have it in my in my directory here but it's not included in the actual repo now there's a couple shortcuts that I want to show you as well so if you if you want to add and commit at the same time in one command you can do that with the with the a flag - A so let's say I add another task here and when I'm adding these tasks this is just an example U normally you would be adding a whole new feature there'd be multiple files changed but I just want to make some kind of change so let's say that I want to I want to add and commit in one command so I can do get commit remember I haven't added this the index HTML to my local repository yet or I sorry I haven't added it to the staging area but I can do Dash a and then also M for the the message here and then I'm going to say added added task six okay so if I run that now say get status and it doesn't show anything in the the the staging area if your branch is ahead by one commit so I can now just run get push okay and now if we go back to our repository we should see the new commit you can see added task six all right so that's how you can do it in one command another thing you could do and I'll just again add another task just to make a change another thing you could do is say get add and let's say index.html and then we can do double Amper samp so and get commit dasm and let's say added task 7 so here I'm doing the get add and the get commit in one command as well and then we'll do get push check it out and we should see added task 7 okay and it's only going to be on the files where that were changed and this case only the index HTML was changed now while we're on the the the GitHub repo here the interface just want to go over a couple things and just to get you a little bit more familiar so obviously it shows our files it shows the commits and it shows when they were made um here is the branch Main Branch if I had other branches then they would show here as well um over here it says six commits so that's what I've made so far and if I click on that it'll show me all the commits that that are made and it breaks it up by day and if I want to see the state of the code in one of these commits I can do that so if I click on add new task it shows me um what was actually changed at that point and what was changed was I added uh a new task I added task four all right so you can always go back and and check what was actually added or or removed or whatever was changed okay and let's see we have up here A bunch of tabs of course the code tab that's what we're on the issues tab so people can submit issues so if they run into a bug or something they can do that and they can add labels to them um poll requests so if someone wants to collaborate and they fix a bug or they add a feature they can then make a poll request for you to look at and approve so all your poll requests will show up here actions so here you can set up continuous deployment and continuous integration pipelines um that's beyond the scope of this tutorial and then projects so here you can manage your your project using github's built-in project management tools uh Wiki so if you want to create a Wiki security has to do with your security policies um insights so you can see you know the traffic and analytics um settings so from here you can do things like change the visibility so if you want to change it from public to private if you want to disable issues if you want to delete the repository arive it transfer it so all that stuff is done in the settings tab or and also add collaborators that's another important one so if you want someone else to be able to to work on this repository you would just add their their GitHub email here and that would send an invite to them um you can do more advanced stuff like web hooks there there's a lot you can do here I'm just scratching the surface just to you know just to give you an introduction but yeah there's a lot you can do it shows here the languages so whatever Technologies are actually used in the repo um but yeah so that's kind of the basics now let's talk about getting code from GitHub okay and we've already looked at PLL which is is one of the ways now you can download an entire zip of the the repository if you go to this code button here and you just say download zip but you're only going to do that if you just want the codee and you don't want anything else to do with the repository you don't want to add to it you don't want to you know do anything with it it still I would say clone it anyways uh because it's literally just a command and you have the whole thing on your machine rather than extracting a zip file and so on and that's the next one which is get clone you copy uh Co you get a copy of the full repo onto your machine right so to do that you would run get clone and you can clone with the SSH H link here or using htps now to use SSH you're going to have to generate some SSH keys and add them to GitHub I'm going to show you how to do that in a minute um another thing you could do is get fetch which is going to it's it's when you want to get the latest changes from the remote repository but you don't want to merge them so you can use get fetch and then forking is copying a repository from GitHub onto GitHub within your own account right so if someone else you'll see I can't Fork my own repository but if I was on uh if someone else was on this and they wanted their own copy of this on their GitHub account like let's say my username was hello it would be hello slask tracker okay and I could Fork it by just clicking this button and I'd have that automatically in my account then I could clone that onto my machine and I could work on that which would be my own repository all right so those are the the main ways that you would get files from GitHub now I want to go over cloning so like I said before you can clone using this SSH link right here you need to generate some keys and put them on GitHub so the way you would do that let's just jump back into vs code here just going to close that up so the way you would do that ssh-key gen that's what we use to generate a new SSH ke pair and then we'll do dasht so the type would be RSA and then the bits so Das B would be 4096 so if I run that it's going to ask me the location and the name of the key and the default would be in my home directory and then in a SSH folder which is a hidden folder and it would call it ID RSA and if you're fine with that you can just hit enter but if you want to change it then you would put the location so for me let say users Brad traversy obviously yours would be a different location at least I hope so and then SSH slash and I'll usually call it like idore GitHub we'll say GitHub 2 okay and you can add a passphrase if you want I'm just going to hit enter for no passphrase and now you can see that it's created this so two things ID GitHub 2 which is your private key and ID GitHub 2. Pub which is your public key all right now what you would do is is put the public key on GitHub so the way that we can read that public key to copy it to put it on GitHub is with the cat command so we'll say cat and then the tild day which is just an alias for your home directory slash. SSH and then SL idore GitHub 2 and then we want the pub public key so Pub and there it is so what you would do is copy this so from here the SSH RSA to the end so you copy that and then you'd go to GitHub go to your not your repository settings but your actual settings which are uh right here and then go to SSH and gpg keys and then new SSH key and then you just give this some kind of description like you could say I don't know basement um this isn't Windows basement Mac something like that that just describes your computer your machine ADD SSH key and then that would get added to your account all right and you can test to see if that works by doing SSH duper case T and then get github.com and I get this success message okay now if you get something that says like public key denied or something like that you usually what will fix that is to get your agent running so eval and then in back ticks SSH Das agent and then um whoops still within back ticks DS okay and you'll just see like this Agent P and some number then after that you would add the key so SSH Das add and then locate the key so home directory sl. SSH slash and then whatever you called it so ID GitHub GitHub 2 and you wouldn't put the pub here you're adding the private key and it says identity added so once you do that then you can try try that again and hopefully that works all right so now you're ready to clone if you want to get this like let's say we're on a different machine and we want this task tracker application we want to clone that Repository onto the machine so what I'm going to do is open up um let's see I'll just create a new folder I guess and I'll just call this let's say task I guess I'll say Tas tracker -2 and then I'm going to open that in my terminal okay so now I want to clone the repository into this folder so we'll say get clone and then you're going to grab's see we're going to go to repositories go to the task tracker and then I'm going to go to code and then get this right here copy that paste that now if I just run this as is it's going to create a new folder called task tracker if I want to take the files and put them into this folder of task Tracker 2 then I'll just put a dot at the end so now it says close cloning into now if I do an LS you can see I have those files and then you can continue to work in that folder on a different machine now I'm going to go back to where I was here in the first task tracker and I want to now talk about branching and merging so branching is a key feature of Git it allows you to work on new features or or bug fixes without affecting the main codebase and you can create a new Branch you can make changes and then you can merge those changes back into the main branch and this is a common workflow in git you can also create branches for different environments like say production staging development so let's let's go ahead and create a new Branch let's pretend that we're creating a login for this this project so what I might do is create a new Branch so I'm going to say get checkout so checkout dasb so I'm checking out creating and checking out a branch and I'm going to call it feature say feature and let's say slash login that's a common naming convention it's feature slash and whatever it is um you might also have like bug slash whatever bug you're fixing so let's do that and not only did it create the branch but it also switched us to the branch and you can see which branch you're on with get Branch so you can see that there's two there's Main and there's feature login and that's the one that I'm on all right so anything that I do from this point on on while I'm in this branch is only going to be on that Branch so I'm going to create a new file here called login. HTML and normally you'd create you know the whole login functionality not just the page but again we're not doing that that's not the focus of the tutorial but what I'm going to do here is just copy the index HTML and paste that in here and then we'll just change up some stuff like we'll just add login to thep title and let's change the H1 here to login and let's see we're going to get rid of this ul and we'll add a form and in that form let's do form Dash control and I do have some classes in the CSS to make this look somewhat decent we'll just have label uh label then an input and then let's go under well actually we'll just copy this down and then let's change this actually we'll change all these to password okay change the type to password as well and then we'll go under that div and we'll add a button give it a class of BTN and we'll say login all right and then just to check out what this looks like if we go to I'll show you the index page doesn't really matter again it's not about this project but it just looks like this right and if I go to the login so slash login. HTML then it looks like this all right so let's just say we just added the whole login functionality so I want to obviously add that to my staging area first so get add I'll just do get add all and then we want to get commit and let's do Dash M and say added added login page so now that's committed to my local repository now I'm going to push it to GitHub but it's still I'm going to push it in the feature Branch so let's say get push and then I'm going to do dashu origin and then the name of the branch which is feature SL login now when I go back to my my code here my sorry my repo we're going to see this window it says compare and poll request because we can make a poll request to merge this into the main branch and you can do that as a separate developer you know if you just if you're working on an open- source project and you create a feature or you fix a bug or whatever this is how you would create a poll request all right but if I don't want to merge that into the main then you're going to still see right here feature login so when I'm on the main branch we don't see the login. HTML right but if I switch to the feature login then we do see the login HTML so you can switch between branches here now let's actually make this a poll request so I'm going to click this button here and you just add a title to the poll request add a description and then create all right and then the owner of the repository will then go into they'll see that there's a poll request you can see there's one here and they can check it they can click on this and check the code and then they can choose if they want to merge that poll request so I'm going to say that I want to merge that poll request confirm merge and now pole requests success successfully merged and closed and then you can choose to delete the branch as well so I'll say delete Branch now if I go back to my code you can see that there's no there's no more branch on the remote repository and the login is now merged into the main branch all right now back on this machine what I can do is switch back to the main branch so we'll just get rid of that let's say get and then we want to check out that's how we can switch branches we want to check out uh main so now I'm on the main branch and then you can see that the login isn't here because I'm not up to date with the the latest changes on the remote repo so what I'll do is I'll say get poll origin and I want the main branch so I'll do that and now the login is now there okay so I'm up to date with the the latest uh the latest changes now if I say get Branch locally I still have that feature Branch right because I didn't delete it here and and you can actually you can merge it into the main branch on your local machine as well before you actually uh push it to the the repo so I could say get merge and then feature slash login I'm not going to run it because I've already pulled down the latest changes but that would merge it into the main and then I could push to the the remote repo so there's a lot of different ways to do things now I want to delete the feature login Branch locally so it's already deleted on the remote so let's say get branch and then we would do dasd and then the name of the branch which is feature SL login and now that Branch should be deleted if I say get Branch then we just have the main and we're all up to date so that's how you can not only create branches and and merge but also how you can create poll requests now the last thing I'd like to show you is how to set up a cicd pipeline with continuous integration continuous deployment with versel which is a great hosting company with a very generous free teer so there's nothing you have to pay or anything like that and this is great for hosting small projects so let's go to ver.com now I'm already logged in you're going to have to just log in with GitHub or whatever they offer I forget it's been so long um but you'll get this hobby package so I do have a pro package as well but I'm using my hobby which is the free one and all we have to do to get this task tracker deployed is simply click add new project and then since I'm I logged in with GitHub it there's they have access to it and I can choose the task tracker right and then down here since it's just a basic just it's basically just an HTML file with a little bit of styling there's nothing I have to add as far as you know build and output settings or environment variables um if I were using environment variables I would take the ones that are in the EnV and I would add them here on my server but I don't have any so I'm just going to click deploy all right so that was very quick because it's basically nothing and then I can say continue to dashboard this is the dashboard for my project if I click on the if I click on visit it takes me to the project which is now deployed publicly at this domain and if I go to SL login. HTML takes me to my login page okay so it's as easy as that now if I make a change right so let's look at the deployed version we have what five tasks so I'm going to come back here and I'm going to add another say six and then I'm going to go ahead and say get and I'll just do commit am and say added new task and then get push and of course you can use the The Source control tools as well maybe I'll do another tutorial on that but like I said for this I just wanted you to get comfortable with the terminal so if I go to versel and I go to deployments you can see that um add a new task is the latest deployment and it happened really quick because it's such a small project and then if I go back to the deployed version and reload there it is Task six so it's as easy as that now if if you guys have been around for a while and you know you remember using like filezilla and stuff like that it's it's a lot different now and it's a lot easier um you know once you know how to do it so uh yeah I mean versel is a great platform they're not sponsoring this in any way and there's a lot of different options and things you can do which I'm not going to get into but I just wanted to give you an example of how simple it is to um to deploy a project using GitHub and and um cicd with versel so that's it guys please give this a like if you enjoyed this if you learned something from it and I will see you next time
PyaSnpXssks,React Admin Crash Course 2025,https://www.youtube.com/watch?v=PyaSnpXssks,Traversy Media,UC29ju8bIPH5as8OGnQzwJyA,Learn how to create a full-featured admin panel for your APIs while writing very little code using React Admin. We will create a ...,2025-01-07T15:00:33Z,all right guys in this video we're going to talk about and build a project with react admin which is a tool that I've used for a while and I actually did a crash course on react admin a few years ago but a lot has changed since then so I wanted to give you guys an updated version and we're going to just first look at some slides literally like 3 or four minutes just to give you a better idea of what react admin is and then we're going to just jump in and we're going to create an admin area for a Blog using uh Jason server as a backend API all right so let's jump into [Music] it all right so like I said I just want to spend just a couple minutes talking about react admin and what it is so it's an open- Source front-end framework built on react and it was created and is maintained by a company called marm laab and it's designed for creating datadriven applications like admin dashboards and and B2B interfaces and and it offers greatl looking UI components based on material design you can create anything from simple crud apps create read update and delete to complex business management systems and it it adapts to projects of all sizes and one standout feature of react admin is its low learning curve so if you're familiar with react you're going to find react admin incredibly intuitive to work with even if you're new to react um the framework just it provides enough structure and pre-built components to get you up and running very quickly so it's great for Rapid development and it's also backend agnostic so you can build your interface on top of any API whether it uses rest or graphql whether it's built with Express or laravel or D Jango doesn't matter at all and react admin doesn't use fetch directly it actually uses something called a data provider object and it uses that to interface with your API so let's talk a little bit about data providers so these are objects that expose a predefined interface that allows react admin to query any API in a normalized way and you can think of a data provider as an adapter or bridge between your react admin interface so your frontend UI and the backend API and it handles communication like data fetching creating new records uh updating existing ones deleting records all that stuff and there's literally dozens of of different data providers that you can use for certain types of projects for instance there's a simple rest API provider there's a graphql provider um there's even a specific provider for Json server which is the service that we're going to be using in our demo uh and of course you can also write your own data providers which I actually may do a video on at some point now if you were to write your own provider there's just a few methods that you need need to implement and they're all pretty self-explanatory you know if you want to get a list or a single resource if you want to create update delete resources um you can also add other custom methods as well and like I said we're going to be using the Json server provider but regardless of of which provider you use and which type of backend you use the rest of the stuff will be used in the same way as far as our front end as far as react admin and the components and all that stuff goes now as far as the basic building blocks with react admin we have a resource component which defines crud routes for a given API resource whether that's posts or users or products you have a list which of course displays a list of Records create which displays a form to create a record edit will display an edit form and show to display a record in readon mode so we'll be working with these basic building blocks and a ton of other stuff but I don't want to spend too much time in slides so let's get right into it and let's start working with react admin all right guys so we're going to create our admin UI in a second but I just wanted to just briefly talk about the data we're using the backend so we're using a service called Json placeholder which is at Json placeholder.jpg with crud functionality create read update and delete and we have multiple resources we can use we have posts so if I click on post it goes to Json placeholder typy code slost and it gives us about a hundred of them with an ID title body and a user ID that pertains to a user in the user's collection so now you can see we have all these different users so this is the data we're going to be working with and you can make get requests posts to add you know put to update delete to to delete uh it doesn't persist in the database obviously because they don't want people just deleting everything or creating a ton of posts but it does make a successful um request and send you a successful response as if it were a real rest API okay so that's what we'll be using and there's actually a data provider that we can use with react admin to work with this service now in reality you'd have your own API but the way you work with it as far as in react admin is going to be the same so you're going to use the same components like resources and data grids and all that stuff so let's go ahead and get started we need to run npm and nit react admin so you do have to have no. JS installed with and you need npm of course so let's run npm and nit make sure you go into a folder where you want to create this and then react-admin and then I'm just going to call it react admin demo but you can you can call it whatever you'd like now it's going to ask us about the data provider and I showed you a a quick screen that had dozens of data providers so this is by no means all of them um but just a couple that can get you started so fake rest which is a client side inmemory data provider Json server which is what we're using it's based on the Json server API simple rest so if you have a a simple rest API and none if you want to configure it yourself now I'm going to choose Jason server so let's hit that and then you you can also have off providers for authentication and I'm going to choose none here I'm going to show you how to use it but I want to do it from scratch rather than choosing it here so I'm going to choose none and then if you want to add your first resource like post or user whatever you can do it here but I'm going to just hit enter and leave it blank because I'm going to show you how to do it within the app all right and then I'm using npm if you want to use yarn that's fine as well so now it's just going to generate our react application all right so now that that's done I'm going to go ahead and just open it up with vs code so I'm going to say code react admin demo if you want to use a different editor you can that's fine and I'm going to open up the integrated terminal here and I'm going to run the server with npm runev and it's going to run on Port 5173 by default if I click that and open it it's just going to show us this welcome page all right now before we do anything I just want to kind of go over the structure here so if we look at the package.json it it's very similar to just if you were to set up a react app with vit it uses the vit server um we have npm runev which we just ran npm run build will build your your production site and then you can serve that with serve you have type checking you have linting with es lint and formatting with prettier so if we look at the regular dependencies of course we have react and react Dom in addition to that we have react admin and we have the Json server uh data provider that we selected and then just a bunch of Dev dependencies for typescript and eslint and prettier we are using typescript so we're using TSX files but we're not really writing any typescript so if you have no no knowledge of typescript that's absolutely fine and then there's just a bunch of config files for things like vit uh typescript prettier eslint and then if we look in the source we have our index TSX which is the entry point and looks just like any other react Spa bringing in react Dom we're passing in the the root element we're rendering the main app component which is right here app. TSX now in here is where react admin kind of takes over you can see what we're exporting from our app component is this admin component that's like the the root of react admin and it takes in a layout which we have right here layout TSX if you wanted to add something to this or you know add styling or components or whatever you could and then we also have passed in a data provider in our case if we look at data provider. TS we're using the the ra data adjacent server provider and all that consists of is just exporting this function passing in the URL which is in the EnV and it's the same exact URL that I was using here so if we go to/ poost so we're using the same exact data again we can't persist the data like if we add a new post it's not going to really get added to the database but it will make a successful request so it mimics a real API so in that app TSX you'll see this this resource component right so in the admin component it expects to have at least one resource so let's add a resource for post so we got to give it a name and you want that that name to correspond with your endpoint which in our case is post all right then we want to add we can add different views like create edit list which in our case is going to list the post and for now usually you'd set this to your own component but for now I'm going to set it to the list guesser so it has this concept of guessers and they just kind of guess the config for the table columns and stuff like that um or the you know the field names and it's B based on the data that's fetched so if we look at our project now we have this post table or data grid and it has the the user the ID the title and the body so it's get it's getting that from the data it's fetching all right and it has pagination down here um we can export as a CSV file we have dark light mode so just by adding that one line of code right just that one resource we have all this functionality and just to get something from your API and and show it like this and have pagination and Implement a a mode Toggler that's that's quite a bit of code so you can see how high level react admin is and how easy it is to use and you can really customize the stuff now the the guesser isn't meant to be used in production what's really cool is that if we look at the console it actually gives us the code to use to make our own list component so I'm going to just grab this import and this this uh export here and copy it and then we're going to go and create our own component so in Source I'm going to create a folder called pages and then in Pages I'm going to have a folder called posts and anything that has to do with post will go in here and I'm just structuring it how I want if you wanted to structure your folders a different way you could there's no convention or anything nothing you're supposed to do as far as how you structure this stuff or how you name it so I'm going to create uh I'm going to create a new file in post called post- list. TSX all right and then what we'll do is just paste in what I just copied from the console now I prefer to to have my exports at the bottom as default so I'm going to get rid of that export and then down at the bottom I'm going to say export default and then post list okay now to use this right now it's not doing anything but to use it we can then bring it into our app TSX so let's say import post list and then instead of list guesser we want to replace that with our post list and we can then just get rid of that list guesser if I save it it's going to look the same way but now we have control over it right and one of the things I want to do is the users I want to move that to the end so I'm going to move that down to the bottom save it and now the user is at the end of the the table or the data grid okay now as far as this code goes the list component that wraps everything that is what actually fetches the data through the provider and then we're using a data grid to display that data however you're not limited to just this data grid and having it look this way there's a lot of other components you can use there's other themes and layouts it doesn't have to look like this but I just want to keep keep it simple so I'm just using a basic data grid and one example I can give you is the simple list so if we bring that in just going to temporarily get rid of the data grid you still want to be within the list component because that's what basically provides the data and let's say we want a simple list and this takes in a primary text and primary text is going to be a function that takes in a a record and you have access to that record which in this case is a post so let's say we want this to show the the record. tile for the primary text right and then we have secondary text same thing I'm going to pass in say record and we want to display record. body for the the secondary so if I save that we take a look now it looks completely different right we have a list with a primary text title and a secondary text body pagination still works right so um it's just another way to display the data but I'm going to just revert it back to the data grid just because it fits more information okay so now we have the data grid back now we can customize this like one simple thing we could do is let's say instead of title we want this to say post tile we can then add a label to the text field so we'll say label set that to let's say post title come back over here reload and then now it says post title right if we want to change the way that the data is displayed like let's say for the body you know you might have 10 20 plus paragraphs of text you don't want to show that all in this in these tables so why don't we truncate it let's use uh we're going to use something called function field which allows you to really customize the data that you're displaying so instead of a text field which just simply displays the text um or displays the data straight up like if we look at the ID title and body that's exactly what's showing here there is a reference field for users and that's why it's showing the user name here and not the user ID because remember in the post we only have the user ID not the name but what this reference field does is it references the users's table by the user ID and by default it shows the name okay but again this this body what I want to do is use function field and let's set a label and we'll set the label to excerpt and then it takes in render and render is going to be a function that takes in a record just like the simple list I showed you and then we can do whatever we want with that record and that record has the title The Body Etc I want the body but I want to truncate it so what I'll do is Let's uh let's actually use back ticks here and then we're going to take the record do body and then I'm just going to use substring to shorten it let's say we want from 0o to 50 and then I just want to add three dots at the end so now if I save that we take a look now the body is is now an excerpt I changed the label and it's only showing the first 50 characters and then showing the dots so you can change it up to show whatever you want using using that data now another thing I want to show you is how to add style now you can add your own CSS file and you can take any of the classes you know use your your elements here and look at the classes and you can change things in a CSS file but if you want to add to an individual element or component you can use the SX prop which is very similar to react style prop so let's say we want to add some padding to this header right here this header cell so I'm going to go into the data grid and I'm going to add a prop of SX which works like the style prop so you want to have your double curly braces and then you can put your CSS selector so I know what I want is a class and it's called r a data grid Dash header cell so that's the class I want and then I want to set some padding on it so I'm going to set padding to let's say 16 pixels save that and and now you can see that there's some spacing in the header all right now um another thing I want to show you is the expand so I can basically have these these rows have an arrow where it can expand and show more content for instance you might want to show the whole body so let's go to the list and we're going to pass in I'm sorry not the list the data grid and let's say expand and I'm going to set this to a component called we'll call it post panel I know I haven't created it yet but we're going to create it right now so right here let's say const post panel set that to a function and we're just going to return from this for now just a div and just say hello okay now post panel is being passed into to expand so if I come back over here we have these arrows and if I click it it expands and it shows hello for all of these but what if I want to show like I said the whole body in that case we can use a hook called use record context which will allow us to use just that the record context in data wherever we want so in this case in the post panel so let's bring in use record context and then I'm going to go right above that return let's say const record set that equal to use record context and then I should have access to record Dot and then I I want actually I'm going to use the optional chaining here and then dot body so now if I click on the expand I see the entire body so we got the excerpt here but we have all the text in the dropdowns all right now that's not something I want to keep I just wanted to show you how that worked so I'm going to get rid of the expand and the SX and get rid of the post panel all right so now what I'd like to do is show you how to add more resources because right now we just have post but what if we also want to add users so what I'm going to do is create a new file uh a new folder rather in Pages called users and then in users let's create a file called user- list. TSX okay and then for this I guess we could just could probably just type this out it's pretty quick so I'm going to use my react simple Snippets extension and just do sfc and then we're going to call this user list and it's going to be similar to the the post list where we're going to use the list component and we need to make sure we bring that in from react admin and then within the list we're going to have a data grid so let's also bring that in and in the data grid we'll have our text fields and this fact text field is going to have a source of ID and then I'll just copy that down a few times so we have the ID we have actually do I want the ID no yeah we'll keep the ID and then let's do the name the email and the phone okay and this data pertains to the user data so if I go to Jason placeholder and then slash users so we can get any of this data here right because we're using that data provider um but I think that that's good name email phone ID so let's go ahead and save that now we need to go back to our app TSX and let's bring that in so import user list and then what we'll do is copy this resource down add a resource for users and for the list we want to use the user list now automatically we should see users over here on the side if I click that now we have a data grid with our users with pagination with an export with delete that's I didn't mention that either so we can have these check boxes and we can click delete it's not going to stay deleted because again you can't persist the data with this API but it works in theory so we have post and users now let's create a show view right I want to be able to click on one of these and show a readon page page with the the post data so what we can do is go into pages and then posts actually before we do that we can use the show guesser so yeah just like we did the the list guesser so in the resource for post let's say show and let's set that to the shows the show guesser and just by doing that if I now click on this it takes me to the show page where it has as the user ID title body all right but we don't want to use this in production so what we can do is look at the console and it gives us an example of the code that we can use to create this ourself and again you're not limited to this you can display it in any way you want in fact if you go to the the mar laab homepage I mean you can see some of these examples here uh no I don't want Source I want demo so like like look at this this is all custom you know this is react admin go to this demo so an e-commerce dashboard or or whatever so you can really customize it this is I'm just keeping it very basic I know this isn't the best looking but the functionality it gives you is is crazy for the amount of code that you write so yeah we'll copy that and then we'll create a show view so let's go into Pages posts we'll create post- show. TSX and paste that in and again I just like to export it at the bottom just kind of an OCD thing so export default and we want post show and then what we can do is bring that in we can get rid of the show guesser and then we can bring let's say import uh Port post show and then replace the show guesser with post show and now it's the same thing right if I click on it it shows me that that show view okay and we can do the same thing for users so if we go to users and create a new file called user- show. TSX and I'll just copy the post show and then we'll change this and this to user show and of course we don't want this the reference here uh we'll get that out let's do we'll do the ID um name email and phone okay and then in the app TSX we'll bring in the user show and pass in here show I know I'm going kind of fast but this is it's really easy stuff so user show and now if I click on that now we can see the user view also if I go back to post notice now the users actually have a their blue with an underline and it's a link to go to that user page okay so not only can I go to the Post page from here but I can also click on the user and go to the user page so really cool now let's create an edit for the post so we have an edit guesser so we can use that to kind of see what it'll look like so let's say edit set that to edit guesser temporarily and now uh we don't have an edit button we can create one and I will in a minute but the way we can get to it right now is to go to the show and now there's an edit button here if I click on that now we have the the form okay but again this is using the guesser so we're going to want to just grab this and let's create in Pages posts we'll say post- edit. TSX paste that in and I'm just going to bring this down here default post edit and then back in the app TSX we can get rid of the edit guesser we don't need that and let's import post edit and then change this to post edit and we should get the same thing okay so we're able to have an edit page and I can change the user so this is a reference field so I can change the user if I want and then I can change you know title body I can save it now it gets updated but it doesn't stay updated because again it doesn't persist um but I want to show you how we can add an edit Button as well on the list page so and it's very very easy all we have to do is go to Let's close this stuff up let's go to the Post list and let's import edit button and then I'm going to put that as the last thing in the data grid so edit button save that and now we have an edit button so if I click this one I can edit that post now what about create let's do that let's go to post let's create post-c create. TSX and we'll just type this out because it's pretty simple so I'm going to do sfc and let's call this post create and we're going to want to wrap this in create okay and then in that we want to have simple form just like we use for the edit again make sure you bring this stuff in and in simple form let's have a reference input to the user so that we can select the user so reference not error reference input and we're going to add the source is going to be user ID and the reference is going to be users okay and then we'll also have uh the title which is going to go in a text input actually wait a minute text input is going to be self- closing bring it in okay and then we just want to add a source of title and then let's also add one for the body now for the body I want it to be bigger so let's say multi-line and then we can even specify the number of rows let's do five all right so that's our create view so let's go back into app TSX and let's bring in post create and then just simply add on to the resource create set that to post create and now what that did is it added this create button if I click that now we have a create form I can choose the user and I can save save now it's going to give you an error because what happened is it it makes a successful request and we get a successful response but it doesn't actually get added so when it goes to to get that new resource that new post it's not there so we get an error so that's to be expected all right so yeah I mean that's that's crud create read update and delete if you want to add the create and edit to the users you can just simply add them here uh and then just you know plug them into the the resource but I want to move on to filters search and filters and this this is super easy so let's open the post list and I just want to have a search form so I can search for things in the title and so on so I'm going to bring in a text input and then I also want to be able to filter by user so I'm going to bring in a reference input because remember the the user that's not part of the um the post it has its it's part of users so we need to reference users now instead of returning a list directly from post list what I'm going to do is add a curly brace here and then a return and then add our ending curly brace here okay and then I'm going to go above the return because what we need to do is pass in to list we need to pass in filters and I'm going to create po a post fil filters array so let's go right here and let's say const post filters set that to an array and it's going to be an array of inputs so the first one is going to be the text input and I just want to give that a source of Q for query okay and then we'll give it a label of search now if I do that what happens is it it creates this add filter if I click that I get a drop down with search and then if I check off search then I get the input so I would rather have it always there because if I reload well I guess it's still there but if you first come to the site it's not going to be there but you can add always on like that you don't want to set it equal to anything just always on now it's just there and you can search for whatever all right now I'd also like to add a user filter that's where this reference input comes in So within this these brackets just make sure you put a comma after that input and then let's do reference input and for the source we want that to be user ID and let's give it a label of just user and I don't want this to be always on so I'm not going to use that I do need to add a reference though to user and now we should have ADD filter if I click on user then I can narrow it down to whatever user all right so as simple as that to have search and filters now another small thing I'd like to change is the icons right the post and users icons here are the same and we have automatically with react admin you have material icons available so in the app. TSX I'm going to go ahead and bring in let's say import article article icon and that's going to be from at mui SL iconsmaterial SL article I want to bring that one in as well as the person icon so let's change that to person change this to person right and then what we can do is for the resource for the post I'm going to say icon set that to article icon and then for the users icon I'll set that one to the person icon save that and check it out and now there's different icons all right so the next thing I want to show you is how to create a custom homepage because right now if you just if you come to your your homepage which in my case is just Local Host 51 73 it just takes me to the Post table you might want to have just a welcome page or something like that so I will create something very simple so I'm going to go into pages and create a file called homepage. TSX and what you call the file and stuff doesn't matter um you can put it wherever you want call it whatever you want and I'm just going to do some copying and pasting here so we can bring in these components from Material UI so card card content typ graphy box and then uh let me see I'm just going to grab this homepage component real quick okay so we just have a box with some styling we're using the SX prop making it a flex box centering everything and then we have a card card content we have a heading and a paragraph so very very simple stuff um and there's just certain certain props you can pass in like topography you can pass in a variant and a component and so on and to use that we need to go to our app. TSX and bring it in so we want to bring in our homepage and then that gets plugged in to the the admin component so in the admin component let's add dashboard that's the prop that you want to pass it in as and say homepage so now if I go to Just Local Host 5173 now I see my little message here welcome to the dashboard okay it's also a link over here as well and then I can go to posts or users whatever all right so that's how you can create a homepage now the last thing I want to show you how to do is to create an authentication provider and we're going to do something very simple and just have a username and password that has to have the username of admin and the password of password but obviously you would have a real authentication system that you would integrate into your provider so in the source folder we're going to create a file called o let's say oth provider. TS and I'm going to import o Provider from react admin um and then that's uppercase a and then we need to export let's say export const oth provider and we'll give it a type of oth Provider that we just brought in set that equal to an object and then in that object we're going to have some different functions that do different things or run at certain times so this first one runs we'll say runs when user attempts to log in so we're going to say login and set that to a function and what this will take in is an object with a username and password okay and then in the function Bo body here basically our validation is going to check to see if the username is admin and the password is password and then a successful login is going to set that username to local storage so let's say if the username is equal to admin and the password is equal to password then we're going to take local storage and we're going to set an item and we'll just set uh the key will set to username and then the value will be the username right and then what this needs to return is a promise it needs to return a promise resol resolve the promise if it's successful and reject it if it's not so in this case we're going to return promise. resolve okay now if this isn't correct right if the login is bad then we're going to return say promise. reject okay um and then let's see what's going on here is missing the following properties Au provid yeah so it's just we haven't done we haven't added the log out yet but yeah so very basic obviously you would integrate your own authentication system here but we're just uh we're just doing something very simple so under login let's add our log out so right here we're going to put a comma and then log out okay and then all we want our log out to do is remove let's say remove username uh remove username from local storage so we're going to say local storage dot um REM remove item and remove the username and then we want to return promise. resolve so that's our log out then we also want to have a check error actually let me put a comment here it's pretty obvious but let's just say runs when log out okay put a comma here then this is going to run runs when API returns an error so this is going to be called check error oops check error all right and then what that's going to take in this check error is going to be an object with status and the type for that object status that's going to be a number all right now in check error error we're going to check that status and see if that's a 401 401 is unauthorized um and then we want to also check if it's a status of 403 so if it's either one of those then we know that they're unauthorized and if that's so then let's remove the the username from local storage so local storage. remove item and remove item of username and then we want to return a a promise reject so let's say return promise. reject right and then underneath that so if there is no status of 401 or 403 then we want to resolve so return promise promise. resolve okay so that's our check error then we have our check off so this is going to let's say runs when the user navigates to a new location to check for off for authentication so let's say check off okay now for check off we're going to return success if username is in local storage right so if we go to a page that where you need to be authenticated it's going to check to see if it's in local storage the username if it is then will resolve if not then we'll reject so let's say return and say local storage. getet item we want to check for username and then I'm using a Turner here so if that's true then let's do promise. resolve so you're you're authenticated right and then if it's not true then promise. reject do reject and that's it and then one more so this will let's say runs when user navigates to a new [Music] location to check for permissions permissions or rules right because there might be you might be logged in but you might have certain permissions for different users or different roles and you want to check that um and that's going to be called get permission or get permissions and for that we're not going to do any logic here I'm just going to resolve so promise. resolve I just want you to know all the different functions okay so yeah that should do it let's save that and now to use it we need to go into our app. TSX we're going to import Port the uh what is it the off provider the lowercase version okay and then we just want to add that to the admin so right here let's say off and let's set that equal to the off provider um sorry that should be off provider not off okay now let's go to the homepage and we have a login okay so right now everything you need to be logged in to do anything and I'm going to just type in anything just whatever I get authentication failed please try again I'm going to do admin and password sign in and then that works so now I'm logged in all right and you see the little user icon here as well with the log out if I log out it clears that local storage item brings me back to the login okay and again you would have your own authentication logic here these are just the the functions that you would use right obviously this stuff would be different but I mean it's all put together it's all there for you to take advantage of and just really easy to use and doesn't take much code at all to create a really cool system to to manage your API manage your your resources all right guys so hopefully you enjoyed this I will have the code in the description so if you want to create something of your own and you want to use this as a resource you can if you want to add on to it of course you can do that but that's it and thanks for watching
VeNfHj6MhgA,Vue.js Crash Course 2024,https://www.youtube.com/watch?v=VeNfHj6MhgA,Traversy Media,UC29ju8bIPH5as8OGnQzwJyA,"3 Hour crash course of the Vue.js framework. You will learn all the fundamentals including components, directives, lifecycle, ...",2024-07-01T14:00:32Z,"hey guys welcome to my vue.js crash course so this is a course that's designed to get you up and running with vue.js as quick as possible and it's scared toward beginners so if you've never used vue.js before if you just dabbled with it or even if you've worked with it but you want some Refreshers or you want to learn about the composition API then you're in the right place and there's going to be a few different parts to this course so first we're going to go through some slides and talk about what view is and how it works and that shouldn't take very long probably under 10 minutes or so and then I'm going to show you how to get up and running very quickly using the CDN which is the fastest way to use view although you should only use that for really small projects and testing and just messing around for larger projects we use something called create view which is ultimately what we'll be using so after we do that we'll get into set getting set up with create View and we'll go over the fundamentals of components directives data methods Etc uh we're going to look at a very basic task project I wouldn't even call it an app it's just a project to experiment with and learn different things different directives and so on and then after that we'll move on to our main job listing website and since view is a front-end framework we need a backend for data so we're going to be using something called Json server which is a library that allows us to create basically a mock rest API and we'll start with some hardcoded job data but then we'll add some Dynamic data from the API and we'll learn how to make requests and so on so I'll have the the template files the HTML with the Tailwind classes and all that available for you in the repo as well if you took my latest react crash course it's the same exact application and that was intentional so that you can compare the two Frameworks and I'll also be creating an angular and a spelt version of that joob listing project as well because that's that's essentially the reason for these crash courses is so you can just get your feet wet and you can compare and contrast with other Frameworks and then you can decide on which one you want to specialize in all right so relax get a coffee or tea or whatever it is that you drink and let's get started learning vue.js [Music] this video is sponsored by daily dodev which is a platform that lets developers stay up to date with current Tech and I've used the daily dodev Chrome extension for over a year now so it opens up automatically when I open open a new tab and there's always something that catches my eye in fact there's been a bunch of articles that have given me inspiration and ideas for new videos and it can often feel like you're falling behind because it seems like every day there's new trends and new technologies that come out and daily dodev compiles information from all over the web and you can even set up your own custom feeds with specific tags of the type of content that you want to follow and you can manage categories content types and block certain tags you can also create Squad SS and I've recently created a public traversy media Squad so feel free to join and stay up to date with my latest content so visit daily. deev today and download the extension or use the web version all right so as with any of my crash courses we're going to start off by defining what VJs is so it's a progressive JavaScript framework used for building user interfaces and single page applications or Spas although you do have meta Frameworks now such as n and gridsum where you can build serers side rendered apps as well as static websites but we're sticking to spas in in this project or in this course so it's designed to be simple flexible and incrementally adoptable meaning you can start using it for small parts of your application and and then gradually scale up and view makes it easy for developers to integrate it into projects of all sizes whether you're just adding some interactivity to an existing web page or building a complex web application from script ratch and with its reactive data binding and component-based architecture VJs helps developers create Dynamic and interactive experiences for users in a very straightforward and efficient way so view was created back in 2013 By a developer an independent developer named Evan U who is I believe currently based in Singapore at least that's what I know from his bio and the reason that I I like to mention that is because I think that the fact that Vue wasn't created by a Google or a Facebook or any other Tech Giant like most of the front-end Frameworks were and the fact that it still has the popularity that it has I think that speaks volumes about the framework and about its quality and about its Community now as far as prerequisites a lot of people ask me when am I ready to learn a framework and the answer to that is a tough one because everyone has a different learning ability and different ways that they like to learn I know people that learn JavaScript at the same time that they learned react or view however I don't think that's the optimal way to do it for most people I think you should first learn the building blocks HTML CSS JavaScript and when I say JavaScript I don't mean just learn what a variable and a function is I mean learn it to the point where you can build at least some kind of of fairly simple front-end Project without any framework so I usually recommend the following JavaScript fundamentals so Loops functions objects arrays things like that events and Dom manipulation the fetch API and just basic HTTP so learn how to make a request to public apis get data back send a post request Etc um things like Arrow functions high order array methods destructuring basically all the es6 features that we got I think you should know that stuff because because you're just going to run into that constantly and you don't want to get mixed up in you know what is actually JavaScript and what is actually VJs or or react or whatever framework you're learning you want to know have a solid understanding of JavaScript and then I think learning npm is important learning the node package manager because you'll be using that constantly including using it to get set up with your initial VJs project now before we talk specifically about vue.js let's talk about the role of front-end Frameworks and why they were created and some of the advantages that you have uh cuz some people don't understand why you would use something like VI VI or react or angular so one you have enhanced user experience so front-end Frameworks are designed to make it easier for developers to create uh interactive user interfaces they provide a lot of functionality out of the box and allow you to focus on the things that are unique to your application and if you try to build a really interactive interface with just vanilla JavaScript it can get really messy really quick and I'm not saying that you can't do it but it can be uh it just be really difficult and it's it's kind of like Reinventing the wheel so next you have organization front-end Frameworks are designed to make it easier for developers to organize their code the UI is broken into components and each component has its own State its own properties things like that and they're also essential um frontend Frameworks are also essential for collaboration so if you have five different developers create an interface with vanilla JavaScript you're going to get five completely different code bases it's going to they're going to all be have their own style by using a framework everyone can be on the same page and it's much easier to collab and to build with a team so performance front-end Frameworks are optimized for performance they they have a lot of built-in features such as the virtual Dom which is a way of rendering the document object model without having to render the entire Dom every time this is a huge performance boost and gives users a really fast UI and then one of the key benefits of front-end Frameworks is their modularity they allow developers to break down their applications into smaller reusable components and this modular approach not only makes the codebase more manageable and easier to understand but it also promotes reusability so those are just some of the reasons why we use front-end Frameworks I'm not saying that you should always use one in fact that's something I see a lot of people doing these days is using view or react or felt to create something like a very simple landing page and I think that that can just over complicate things so you have to look at each project individually all right so that's just the role of front-end Frameworks now let's talk about why view because there's there's quite a few out there so first we have Simplicity and approachability VJs is renowned for its Simplicity and ease of integration into existing projects and it has a very gentle learning curve and it makes it makes it accessible to developers with varying levels of experience and it allows them to quickly get started and become productive rather than learning something like angular and I don't mean to trash angular but it is a very difficult framework to learn and it's going to take you a lot more time to start building stuff so flexibility VJs is designed to be incrementally adoptable again that means that you can introduce it into your projects gradually and whether you need to build a small widget or a full-fledged single page application VJs scales effortlessly and uh it it allows you to meet very diverse project requirements next we have performance and size so VJs offers excellent performance due to its efficient rendering mechanisms including the virtual Dom additionally View's core library is very lightweight which uh contributes to faster initial load times and better runtime performance and it's known to be one of the fastest front-end Frameworks around view promotes uh component-based architecture and components are self-contained units that can be reused across different parts of your application fostering maintainability and code reusability VJs also has a really Vibrant Community and Rich ecosystem of libraries tools and plugins in addition to building single page applications you have meta Frameworks like nujs which allows you to build serers side rendered applications as well as Frameworks like gridsum which allows you to build static websites so VI has a great ecosystem that is similar to to that of react now choosing VJs over react spelt angular it often boils down to personal preference and you should also take into account what's being used in the industry and especially in your area but I'm also of the opinion that you should enjoy the framework that you're working with all the time so my advice is to always try the framework s that interest you that's again that's why I create these crash courses so you can get your feet wet and create something and see which one really clicks with you and I think that building the same project with multiple Frameworks really gives you a lot of insight so as with any other front-end JavaScript framework vuejs is built around the concept of components and components are reusable selfcontain pieces of code that can be easily dropped into different projects and view components a very simple structure that's broken into three parts essentially so first we have the logic which is the JavaScript and this is wrapped in script tags this is in a in a an actual view file your components are have a do view extension and this is where you would Define any state or data as well as any methods events Imports things like that then you have your template output which consists of HTML that will be rendered however we can can also include Dynamic elements within this template such as variables Loops conditionals um using something called directives and we'll cover these later and then you have the style which is the CSS and you can add scoped which means that the styling will only pertain to that specific component so this is just a very simple example uh I don't even have any JavaScript or css but you can see how it's broke it's clearly broken up into those three parts and you might not even have any sty or you might not even have any any logic it could just be a dumb component which is just a just something that displays something and then you should also be aware of the the two ways to build view components one is the options API which is kind of the traditional way of of doing things um where we everything is within objects or options the data the methods Etc and it's a it's more straightforward and it's a it can be a good choice for smaller projects however the composition API which is uh released with vue3 is more flexible and allows you to create more complex components and I'm going to give you an example of both but overall I want to use the newer composition API and if you really want to get into the options API you can also look at my my older vue.js crash course because that's what we used in that one with both ways you can Define State data methods life cycle hooks you can have certain things happen at certain times such as when the comp component is is done loading Etc so I mean there's they're similar in what they do but the way that you write them is it's pretty different so the last slide that I have is just getting set up there's different ways to do this the easiest way is to use the CDN although this isn't really the recommended way if you're building any serious project so basically you can just include the URL in uh in a script tag and you can just use vue.js you can initialize a view in and go from there and I'm going to show you an example of how to do this as well as using Create view now there's something called the vew CLI which was used and popular for a very long time it's a command line interface to scaffold up a view project it includes a rich collection of official plugins and Integrations however the vli isn't recommended for new projects anymore uh and it's in I believe it's in maintenance mode meaning that it will only receive bug fixes and security updates if you go to the VCI so view CLI website you'll see that it's no longer recommended and they actually suggest using Create View and create view uses the V web server and frontend Tool and it includes features like hot reloading out of the Bots typescript and other features and it also has a re Rich ecosystem of plugins and Integrations so we can set up a project with one single command and this is what we'll be using for our job listings app and then another way to use View is with meta Frameworks just like react has nextjs view has njs which allows you to create server side rendered applications and then gridsome is a static site generator that uses view it's comparable to Gatsby and react so these Frameworks have their own tools to get set up and they're definitely things that I think you should check out but I always suggest learning the core framework first and learn how to build single page applications then move on to you know SSR and and SSG so that's it for slides now we're going to jump in and like I said I'm just going to show you real quick how to use view with the CDN and then we can jump in and use create view all right guys so this is the vue.js documentation which is pretty good and I'd suggest just keeping it open as a supplement to to this crash course and you can check things out there's obviously going to be stuff in here we're not going to go over CU this is meant to be kind of a beginner's guide now you can switch here from composition to the options AP and it will change the the code examples because the logic in your in your view components is going to be different depending on which API you use we're going to start off using the options API but then ultimately we're going to use the composition API in our main project so to get started there's a few ways that you can do it the recommended way is to run create View and that will scaffold up a project for you and you can have your your single file file components meaning you can have components in a file with a view extension and it allows you to build you know really scalable applications but if you just want to try things out or you just have a little bit of functionality you want to add to an existing project you can use the CDN and that's what I want to show you first so we're just going to spend a few minutes using the CDN so I'm going to copy this script tag right here and we're going to just go into I have this empty folder called view test and I'm going to open that with vs code and then we're just going to create an index.html and just scaffold up an HTML document we'll say view test and then let's add in that script tag with the CDN and we now have access to the The View object so in the body what I'm going to do is just have an ID of app and if if you're familiar with how react works if you've ever used react or angular in a single page application you have a specific div specific element and you basically bind your UI to that element and that's what this is so down at the bottom let's add in some script tags and then I'm going to create a variable called app and what we can do is use the view object to create a new instance or to create a new app and there's a um method called create app and what that's going to take in is an object and then here we can Define any any data or methods that we want on this in this app and the data and for now we're using the options API this is going to be a function called data and that returns an object okay it can be a little confusing because some people think it's you know when you first get started it's something like this so you have a data object but it's not it's a function called data and returns an object and then here we'll just Define something like let's just say message and we'll say hello from view okay and now what we can do is go under where we created the app variable and we can mount that so app. mount to the ID of app or whatever you choose to to call this and now inside this div we should be able to use interpolation which is going to be the it's going to be double curly braces that's a syntax and then we can use any of the variables that we have in our data so if I go ahead and save this and I'm just going to open it with live server we get hello from view all right so any data we put in here we can then add in here and it's it's basically Dynamic now we can also have events and methods and and I'm going to go over this stuff in depth later on I'm just doing this really quick so you can see how useful it is to just use in your projects but let's go we'll actually put uh an H1 around this message okay and then underneath that let's create a button and I'll just say click me and then we can add an event by doing at and then the event which is going to be a click and then set that to the name of a method which I'll just call we'll just call it uh click me all right so now this method we can Define down here in our app so we want to go under the data function which ends right here and then we're going to say methods and that's going to be an object of methods so let's say click me and then all I'm going to do here is just console log and we'll say button clicked okay so now we have the button and if I open up my console and I click we see in the console button clicked okay so you can see this is very easy to implement and it's nice and structured so you have all your your data your state and then you have uh any methods and also you have access to this data from within your method so for instance I could do let's say this so we use the this keyword message and we'll just say updated message so now if I click this that changes to updated message all right so that's about as far as I want to go with the CDN just wanted to show you how it works now we'll go ahead and create a new application using Create view so I'm just going to close this up and we can delete that okay and then I'm going to open up a terminal and just navigate to wherever you want to create this and we're going to run npm create space view at latest and then whatever you want to call the folder I'm going to call it view crash 2024 okay so this is going to ask us a few questions and what we want to include if you want typescript you can I'm going to say no you can also have jsx support within your templates we'll say no and then the view router is important and I want to I do want to use the view router in our our project but I'm not going to say yes here because I'm going to show you how to set it up from scratch so we're going to say no for now and then paa is a state management Library similar to like Redux and if you have a larger application you might want to include it but we're going to say no we're not doing any testing so tools for unit testing and and end to end testing we're going to say no yes lint no view Dev tools no and then let's CD into that folder and we do have to run npm install or npmi to install the dependencies okay then once that's done let's uh I'm just going to go ahead and open up this folder in vs code and I'm going to go over all the files and not all but most of these files and folders in a minute but but I just want to mention for extensions you want to install a view extensions and there's a few to choose from but what I would recommend is this one right here view official um this is going to give you all the syntax highlighting and stuff that you need if you don't install a view extension and you you go to a view file you're not going to have the correct highlighting and it's it's not going to be a very good experience so just be sure to install this one or one of the other ones if if you know of another one all right so let's look at the package Json first it's pretty simple we just have the view framework as a a dependency we have vit as a Dev dependency that's our our Dev server and our Dev tool and that there's a ecosystem of plugins for V and view this plug-in view is one of them and that's what allows us to use vue.js there's also a react plugin and many others and then for scripts we have the dev script which will run our local Dev server we have the build script which will uh create our production build and then we can preview our production build with preview so pretty simple package.json we also have the the V config and this is where you would bring in your plugin such as the view plugin and initialize it in the plugins array one thing I like to do is change the port because by default the dev server uses I believe it's 5173 or 5713 I like to use 3,000 so I'm going to add the server object here and in that I'm going to say port and set that to 3,000 you don't have to do that that's just something I like to have my my frontend projects on Port 3000 so the index HTML this is the the single page of the single page application so this is what the browser loads as you can see there's an an element with the ID of app just like we had when I used the CDN and that's where our UI is rendered and that comes from the main JS file in the source folder which is the basically the entry point to view Js and since we're using vit it's this is included as a module because vit has U es module support so unlike webpack where it would be you know a compiled u u bundled Javascript file so the title I'm just going to change that to view jobs and we can save that close it up and then the source folder this is where you know all the magic happens this is where all of our components go the main JS this is the entry point and again we're just using we're we're bringing in create app just like I did when we had the CDN and we're mounting to that that div that I showed you with the ID of app and what we're mounting to it is this app. view component which is right here in the source folder and this is bringing in some other components from the components folder so and you don't have to worry about this code we're going to wipe it all away but uh as you can see there's a script template and then Style so it has those three main parts um and then for the CSS this main CSS um we're actually going to be using Tailwind for our project so I'll show you how to get that set up there's a couple steps we have to go through but yeah that's pretty much the structure of of what you get when you scaffold up a a view app so I want to just clean things up a little bit actually let's run the dev server first so if we run npm run Dev as you can see see for me it's starting on 3000 um because of that what I added in the config file and it's just the the landing page it's just this stuff here this hello world and so on but what I want to do is just get rid of all this so in the components folder we can actually delete everything here and in the app. view I'm going to just for now get rid of the script and let's clear everything out of the template uh we want to keep the template tags but clear everything out and then clear out all the style and for now we'll just have an H1 and we'll just say um I don't know we'll say hello or let's just say view jobs even though we're going to do some some stuff first just to demonstrate what certain directives are and so on before we actually start on our application but as you can see now it's just showing the the template here now before we do anything else I just want to go over a few things so as I said as I showed you we have our script that can go at the top but you can also put your script down here if you want which was more of the convention with uh with vue2 but I like to have it at the top and then you can have your style and you can scope that to this specific component by saying scoped so anything I put in here like if I put H1 and I make that red that's only going to be in this the H1s that are in this particular component now just like we had in the where we use the CDN we can Define data in this component let's do that so we'll open up our script tag and we're going to export default in objects now I'm as I said I'm going to start with the options API and we're just going to do a few things I'll show you some directives and then I'm going to go back in and and switch it up and convert it to the the composition API so you have a a clear definition of of both apis so with the options API you do have to export default from the script so you have access to the data and methods in your template so in this export default we can Define our function called data and that will return an object and in that we can put our data so let's just say name and we'll say John Doe all right now since I have this this name I can use that down here so in this H1 I'll replace that and I'm going to use interpolation with double curly braces and I can just put name and as you can see it's now outputting John Doe so that's how we can create data and use it within our template now we're going to look at something called directives which allow us to uh to basically make this template Dynamic and we can have things like conditionals and loops and events so let's um let's start off by adding another piece of data here called status and I'm going to set that to true for now just a Boolean and then under the H1 I'm going to have a paragraph and the first um directive I want to show you is V if and all these directives are going to start with v-h and you use them just like any HTML attribute so let's say V if and then I'll say status okay so it's going to look at that status data and I'm going to say user is active and if I save that now we can see user is active on the screen and if I change this status to false now we don't see it so that's V if just like any if statement and we also have V else so if I go under that and let's have a paragraph and say um v- else and then I'll say user is inactive if I do that now user is inactive and if I were to set that to true then user is active now I'm going to change this from a Boolean to a string and we'll say active and I'm going to show you V else if so let's say well first of all instead of just saying if status let's add in here if status is equal to active then user is active and then we'll have another paragraph and we'll say v- else if equals status and let's say if that status is equal to pending then we'll say user is pending okay so now we see user is active if I change this to inactive or anything anything at all it's that's not active or pending then it's going to show this right user is inactive and if I add pending as the status then user is pending all right so that's how you can use those conditional directives now the next one I want to show you is V4 which you can use to iterate over array items so let's go ahead and um and add some data here I'm going to call this tasks and set that to an array and we'll just use an array of strings we'll say task one task two and task 3 okay and then what I want to do is down here under these paragraphs I want to Loop through actually let's put an H3 and just say tasks and we're not building like an actual app here it's just it's just to give you an example of these directives so let's say we want a ul and we want a list item item for each task so what we can do is create a list item and then we can use v-4 and it's basically a four in Loop we can say task in tasks okay so this task refers to the data up here right and you can call this whatever you want but since we use task we'll be able to use that within our list item now when you create uh a list like this just like with react you have to add a key so we do that by doing colon key key and then I'm just going to set that to the task it should be something unique all right and then inside the LI let's just output a t the task itself with interpolation so now if I save that you can see we have task one two and three in list items so that's V4 now the next one we have is V bind which allows you to bind a piece of data to an attribute so for instance if we have let's say link I'm just going to use https google.com and then let's say down here we have an a tag and I want to bind that link to the href what I can do is say v-bind colon href and then set that to link and I'll say click for Google and now if I click that it should go to google.com that was just cached uh so yeah so you can bind any data to to any attribute now this is the long way of doing it I'm going to just copy this down and comment that out because I want you guys to have this um but the shorter way is to get rid of V bind and just have the colon and then the and then the um the attribute okay so when you use a colon what you're saying is this is going to be dynamic this this is not just text of Link it's a variable okay if we do that without the colon then we're just setting it to a string of Link so that's V bind now for events there's a couple ways to do it I already showed you one of them and I'll I'll revisit that but we can use the V on directive so let's create a button I'm just going to put a space here and let's say button and let's say change status okay and then what I want to do here is say v- on colon click and then set that to u a function called toggle status right so when I I set this V on click and you can use other events too but we want to click and then we can create a method so just like I showed you earlier let's go under the data and say methods and then in here I'll put toggle status like that and what I'm going to do is change the status and I can access any of this data I can access in the methods by using this and this is with the options API it's different with composition which I'll get to soon but I'm going to go ahead and just have an an if else if here so let's say if this. status is equal to active then I'm going to set this. status equal to pending okay else if this do status is equal to pending then I'm going to set it to inactive so this do status equals inactive and then we'll have an else and then we'll set this do status equal to active all right so now we have this button and I'm just going to put a line break right here okay and if I click change status you'll see that now says user is inactive user is active user is pending so it's reacting to my my button click here now the the shorter way to do an event I'm just going to comment that down is we can do instead of v on colon we can replace that with the at symbol and just say at click and now you'll see that that still does the same thing all right so I mean in my experience you see this more than you do this all right so yeah I think that that's that's pretty much all I want to show you as far as the options API so you have your data you have your methods it's it's very straightforward and you'll probably see you'll probably find that the composition API seems a little tougher at first but it's much more flexible and you can create much more complex components and there's a a long way of doing it and a shorter way I'm going to show you the longer way first all right so um do I want to keep this you know what I have I I'm going to put the blog post in the description which has all the code like every bit of code I write in this tutorial so I am going to get rid of this um oh you know what I'll do is I'm going to rename or not rename I'm going to copy this and then rename that to let's say app 2 and then back in app. viiew I'm going to get rid of everything in the export okay so I want to keep keep all this cuz whether you're using options or composition this stuff is going to be the same the directives all that those don't change it's just this the logic all right so we want to have and I'll keep this open too so we can see we want the this data back but using the composition API now with the composition API we have to wrap everything in a setup function okay and there's again there's a shorter way of doing this and I'm going to show you that after so in setup we can then Define our data just like we would normal data we don't have to have a data function or anything like that and I'm going to set that to John Doe and then we want what else did we have the status which I'll set to active and then we have our tasks so we'll say task one task two and task three and then we have the link we don't I guess we don't need the link so I'm going to get rid of this uh this right here okay so I saved and you see that the tasks aren't showing um I'll I'll get to that but let's let's create the function because remember we have the methods object with a toggle status what I'm going to do is copy everything in the toggle status body and then we're going to define the function here I'm going to use an arrow function so toggle status equals arrow and then we can paste that stuff in there all right and then what we'll do is in the setup function we're going to return so down at the bottom setup ends right here so I'm going to return the name the status tasks and toggle status all right so now we can see our task a task are back the name is back so basically we have our setup function we have our data we have our method and we're returning all that now if I click this notice that it's not uh it's not changing the Status the reason for that is these aren by default these values are not reactive and we need we need the status to be reactive because we're we want it to react to this button so the way that we fix that is we need to wrap it in a function called ref there's also a function called reactive which you can use with objects but I'll get to that later so what we need to do is import ref so up here we're going to say import ref from View and then we just need to wrap our data so ref and we're going to wrap John Doe and then for the status ref wrap that and ref like that okay so I'm going to save it and then click change status and it notice it's still not working that's because when you have a reactive variable like we do here we don't use the this keyword and we need to use value so what we can do is change these instances of this do status to status. Value save that and let's come over here and now it works all right so this is the the conversion of this the options API to the composition API now there's a bunch of things we can do to shorten this up this is the long version so first off we can instead of you using the setup function explicitly we can actually put it in the script tag like this script setup and then not not only do we not need the the setup but we don't even need to export default so we can get rid of both of these lines and then down here get rid of both of these and then since we're we don't have an explicit setup we don't even need to have this return we can completely get rid of that okay so now that looks a lot cleaner right we don't have the setup function we're just using setup here we don't have the export which is nice because with the options API you need the export and then we're not returning anything it's just implicit so if I click change status it still works all right so this is the the composition this is the options and it's up to you on what you want to use but again this is much more flexible this is very rigid right you have a data function that you need you need to return the specific object you have a specific methods option or object with all your methods here you just it's it's more like a react application right um and ref you can think of ref sort of as used state in react if you are familiar with react um because it with used State you you can't just have a variable and then just reassign it to something you update it with used State that's kind of similar to what we do here although you can just directly set the dot value which I think is is much neater now I know we're like a half hour or more into the video and we haven't started the project yet but there's a couple other things I want to show you and the reason I'm showing you all this stuff now now is so we can kind of go through our project with ease obviously there's new things that I'll show you there but you're already going to know understand reactive variables and you know how to create methods and events and and directives so let's add a little form where we can add a task to this list so I'm going to go into the template and let's see we'll just go doesn't really matter this doesn't have to look good at all but we'll go above the H3 okay and then I'm going to create a form tag and what we can do here is either use v-h onsubmit we can use V on directive or we can just do at submit and set that to a function which I'm going to call add task now when you submit a form whether it's vanilla JavaScript or whatever you have to do you know e. prevent default because you have to prevent that default um Behavior but what we can do here is we can just do prevent and then we don't have to worry about doing event.prevent uh above in the method so in the form let's add a label so we'll say for let's call it new task and we're just going to say add task and then we'll have an input type is going to be text ID we'll say new task uh what else do we want here let's do a name of new task now what we can do is we can bind a piece of data to an input and we can do that using the V model directive so up at the top here where we have our data let's say con new task just like with react I know I'm saying a lot about react but I'm guessing a lot of you guys have at least a little bit experience with it and it's fine if you don't it's absolutely fine but with react when you usually when you have form inputs they're attached to a part of your state and that's what we're doing here so we're setting new TX task to ref and it's just going to be an empty string that's our default and then down here in the input we can then set the V model attribute or directive to new task okay so now if I put something as the default in this new task and I save it's going to show in the index input so those two are bound together all right now let's create the ad task so I'll go right under the toggle status let's say const add task all right and actually forgot a submit button so under that what is going on under that input let's do button type is going to be submit and I'll just say submit all right so we have our add task and I'm just going to do just a little bit of validation we're just going to check to make sure that it's there so let's say if new task. value and we'll do trim if that is not equal to nothing then we're just going to add it to the the the list the array so we have access to task. Value right and then we're going to push onto that and we're going to pass the new task. value and then we'll clear it by saying new task. value and we can set that to nothing so it's nice that we can just set it equal to something so now I'm going to go up here and I'll say task 4 enter and there we go so I can just add tasks and obviously they're not going to stick if I reload because we don't have any persisting database or anything now the last thing I want to do in this this little project here is is delete a class I'm not delete a task so down here where we have our task we have our our list item and what I'm going to do is let's see I'm going to put this this Tex ask and to put this in a span yeah so we'll do that put that in a span and then I want to have a delete button so right under it let's say button and we're going to add uh for the content we'll just put an X and then we're going to have a a click event so at click and set that to delete task now we need to pass in in something so that we know which task we're dealing with and when we have a V4 we can actually get the index too so instead of just saying task in tasks we can open some parentheses and we can get the task but we can also get the index and then let's pass in index into the delete all right so now whoops I don't want to move that so now up at the top here let's go down under add task and let's say const delete task okay and that's going to take in index all right now to delete this is going to be very simple I'm just going to take the tasks do value and I'm going to use splice and I'm going to splice at the index and then one so that should just take take it out so if I go to task two I click that task two is gone okay so now we can dynamically add and remove tasks change the status now the last thing I want to show you before we move on to the The View jobs is life cycle methods so if you're familiar with react you might be famili familiar with these These are functions that are called at different points in the life cycle of a component so for example um this on before Mount is called before the mounting begins on mounted calls when the component is mounted and this I would say this is probably the most common one if you're going to make an HTTP request when your component loads this is probably what you're going to use you also have on before update on updated on before unmount on unmounted on activated on deactivated and on error captured okay so these are the the life cycle methods that you have to work with so let's just do something real quick I'm going to just fetch some to-dos from Jason placeholder which is just like a f fake rest API um same people that created the Jason server that we're going to use and I'm just going to add them to the task list here when the component mounts so let's go to the bottom here and we're going to say on mounted uh and actually we do have to we do have to bring this in so let's go up at the top and just bring in on mounted from View and it's a lower lowercase o all right so in on mounted it takes a function and I'm going to make this asynchronous because we're going to be using U the fetch API so we'll say async and use an arrow function and let's just put this in a TR catch so we'll say const response set that to a waight Fetch and the end point is going to be htps and Json placeholder do typy code do com and then slash todos so there's different resources we're going to get to-dos which are basically tasks and then let's say cons data set that to await the response. Json and then I'm going to take the tasks. value and set that to the data now I just want the title because these the data is going to be bunch of objects right they're going to be uh to-do objects so I'm going to use map so that I can just get an array of titles so I'm going to say for each task then I just want the task. tile all right and then in the error I'll just do uh console log of we'll just say eror error fetching tasks all right so let's save that and there we go so you can see it's fetching the data it's it's just turning it into an array of uh of titles and adding it to the task array so now we can see them we can also delete them we can add more so that should get added to the bottom as you can see right here all right so that's pretty much that that's pretty much the fundamentals of vue.js so now we'll move on and we'll create um a a more real Life Application so what I'm going to do is take everything that I have in app. viw and I'm going to put it in the app 2. viw so you guys do at least have this code close that up and then we'll completely get rid of everything just put a template in here I don't know why em it's not working and let's just do an H1 and say view jobs all right so let's let's let's get Tailwind set up and if we go to or if we just search for view Tailwind there's a documentation page that we can follow so it's going to be right here it's at the in the Tailwind CSS um documentation so we want to to run this so npm install Tailwind CSS and post CSS in the auto prefixer so we can just grab that and I'm just going to open up another uh another terminal here actually wait I don't okay so I'm going to paste that in all right once we do that we need to create a Tailwind config which is going to be this and if we add the- P that'll also create a post CSS config file so I'm going to paste that in all right now there's a few things I want to add to the Tailwind config so I'm going to uh close that up and and notice in the documentation here they still have Purge now well it's now content all right and what you want to put in here is what files do you want to watch for tailin classes so the first thing I'm going to put in here is going to be dot slash and then index.html which is the the entry point basically all right then I'm going to add the the folders and and file extensions that I want to watch so it's going to be do/ source so in the source folder and then slash and then double asterisk slash as asterisk Dot and then in curly braces I want to look at the following EXT extensions Vue JS TS jsx in case you're using jsx and TSX all right so that's what we want in content now in theme there's a couple things I want to add to extend one is going to be the font family um so I actually want to use the Poppins font so what we can do is add sanss and set that to an array and we're going to pass in here Poppins and Sans Das serif okay so that's that and then under font family I'm just going to have a class of grid I want to do grid temp split columns because on the actual job page I want to have uh split columns where one is 70 and one is 30 so we'll have a class let's do 7030 and then we're going to set that to a value of 70% and not quite 30 but 28% okay so it's just adding some extra um classes for for Tailwind or an extra class and that's it so we can close that or we can save that um yeah I don't think there's anything else the variance extend we don't need but I guess I guess we could put it in there like that and yeah so we can close that up now we can continue on here and let's see it'll also create a post CSS yep that's already created we don't need to do anything to that that's the post CSS and let's see what else we already did this The Purge which is now content and then the last thing we have to do is just add these three lines to our CSS file so that's going to be in assets and then main.css I'm going to replace everything here add that and now if we look at our project let's see is this being included should be because you know what I might have to restart the server there we go all right so Tailwind classes should now work we can test that out by doing class let's set that to text- 2XL and there we go so Tailwind is now is now working now I like to have my projects at least look decent so in the final repository which is a link to in the description you're going to see a a repo that has the final code and it's going to have this underscore theme files and this is just the HTML for the project like if I open the index HTML you can see basically just the just the interface or just the the website it's not functional or anything and there's no data real data it's just the HTML all right so what I would suggest doing is bringing that into your pro you can bring it into your project or open it up in a separate editor so I'm just going to copy the folder into here so that I have access to those so for for when we need the HTML and then also if you look in Source there's going to be uh in assets there's an IMG folder so I want to bring that over to our assets folder like that and I think that I think all that's in there is the the logo let's see yeah it's just a logo and we can get rid of the base CSS and this logo SVG we can delete both of those okay so now we have the logo now the first thing I want to do and you know what I'm just going to open up the theme just so we can see what the page we're looking on looks like and what we're actually working on at that time which first I want to do the navbar here so the Navar is going to have the logo and then just some links and I want it to have active links like if I click on jobs I want the jobs uh to be highlighted in the navbar so we're going to create a component in the components folder here called navb bar. viw okay all your all your view components are going to have a do view extension and when we add our script tag since we're using the composition API and we're using the shorthand then you always want to make sure you add setup here if you don't add setup then you're going to have to export default you know if you're using either the options API or if you're using the the explicit setup function so here I'm going to import and we want to bring the logo in so that's going to be from and we can use at slash so this is a shorthand or an alias for the source folder so from there we want to go into compon uh not components sorry assets slash and then IMG and then logo.png I believe it's a PMG yeah all right so we're going to bring that in and then let's create our template and forgot M it's m it's not working for template and to get the HTML I'm going to go into index.html or any of them really and grab the nav tag so that whole thing because there's no sense in US typing out all that and then paste that in the template here and then we just want to replace the image or the image source cuz right now it's just pointing to images SL logo but what what we want to do is bind the logo variable that we just created above to this source so we can do v-bind see so now you already know what this stuff is and I don't have to explain it because we already went over it and we want to bind it to that logo variable so in here we can just put logo and then we can even use the shorthand and just do colon Source all right so let's go ahead and save that and let's go to our version now obviously it's not going to show because we need to bring this Navar into the app. view so up at the top here let's say script let's add in setup and then let's import the navbar okay that's going to be from our Alias SL and then components slash and then navbar and then we can replace this H1 here with the navbar embed and there we go okay so I mean this right these right now are going to like HTML obviously those don't go to the right place and we don't even have uh we don't even have the view router set up so don't worry about the the actual links for now we'll get to that later and we'll get to the you know highlighting each each of these uh links later so the next thing I'll do is the hero component which is going to be this right here it just has a title and a subtitle and this is where we're going to going to get into props right CU components can have data passed in and those are called props so what we'll do is in components let's create a new file called hero. viw and we'll create script setup and let's add our template okay and then for the template I'm just going to go to the index HTML and we're going to get the next section so I I created this template so it's just easy to go in and grab each section I know some people really don't like that to have to copy and paste but we don't also don't want to type out a bunch of classes that's not what this is about so let's paste that in the template and we'll just save it for now I'll do the props after let's just bring it into our app so we'll just copy this down and let's take navbar here and here and replace that with hero and then let's see under that that we'll say hero and there we go now like I said we're going to get into props so I want to be able to pass in into hero I want to be able to do this title equals and then set it to we'll just say test title for now okay so I want to be able to pass this in and have that show here as the the H1 so to have props in a component we have to go into the script and we have to first off import Define props okay so we're going to import that from view then we want to call Define props and then we can pass in here an object of the props that we want and there's a couple ways to do this we can say title because that's what I want to call this prop and then we can just set that to string like that or you can set it to an object and then then have type and then put string okay now the reason I want to do this is because I also want to have a default prop so if I put here default and I'm going to set that to become a view Dev as the default so basically if I don't pass anything in if I don't pass a title in then this is what's going to show now we can just simply go down to the H1 and replace this with our double curly braces and title and if I save now we get test title okay now I want to be able to pass in the subtitle as well so let's say subtitle and set that to test subtitle and then what we would do is just add that so I guess we can just copy that down and do subtitle it's going to be a string and then for the default let's set set that to this text right here and then in the paragraph get rid of that and have subtitle and there we go now if I don't pass either of these in which I'm not because I just want to use the default then there we go we have the default values so that's that's essentially how you use props you just bring in defined props you define them with their type and a default if you want one and then just use them so pretty simple so the next thing I want to do is these two cards here which I'm going to put them both in a a component called home cards and then I'm going to show you how we can use a container component which is a component that wraps around content so let's start off by creating in components home cards. viw and we'll add script add our setup and then our template and I'm notice I'm not doing any style because we're using Tailwind classes so there's really no we don't need any custom styling so to get the home cards HTML I'm going to go to theme files and then the index and this developers and employers that section is what I want to copy so I'm going to grab that paste that into the template and for now just save it bring it into um into our app. viw so we'll copy that down and let's replace that and that with home cards and then we're going to put that down here home cards save it let's look at our version and there we go now I want to like I said have a a wrapper component called card and put the data or not the data but the content of each one of these inside of it so basically this right here would be instead of having a div here we could have card like that and then anything that's in here would be in that card and we can have certain background color props and stuff like that in the card so let's create a new component called card. viw and we'll have script setup and template and let's see the the way that I want to do this is where we have our home cards we have this div with the class of BG gray P6 basically I want to have this div so I'm going to just copy that and paste that in here with an ending div and ultimately I want to be able to pass the background color in so we can have a dynamic background color for the cards but I'll just leave the gray for now and the way that we output the content that we wrap is with a slot like this and if you've use react it's similar to when you have a children prop right and you output that so now yeah we should we can save that and now in home cards I'm going to bring in I'm going to bring in the card component I don't know why it's not coming up so slash component SLC card. viw and then I'm going to replace the div right here where we have the P6 rounded Shadow I'm going to replace that div with the card component and we're going to wrap that content okay so that's the first card then we have this one which has the BG green so we're going to replace that div with card as well so if I save that now it's working but notice the BG green is now gone right because the card component has BG gray so what I'd like to do is have a prop for that class for the background so let's go up into the script of card and let's import um we're going to import Define props and then let's define props and I'm going to call this BG for background and let's say type is going to be string and then let's add a default and the default will be BG Das gray- 100 and now we can come down here and we can use this BG prop in place of this but we need this to be dynamic right because we're going to be adding a variable to it so what we can do is bind to this by putting a colon here or you could do VB colon and then instead of double quotes um actually no we still want double quotes but we want to add in back ticks after it okay because when you when you put a colon here whatever you're putting within the double quotes is Javascript okay it's actual code so right here so we want the back ticks and then we want to replace that with BG like that so now if I save it's they're still both gray but I should now be able to go to the second card and pass in BG you'll see it comes up here and let's say BG Das green-00 save it and now that's green if I passed in red 100 so now I have this Dynamic component where I can just pass in the color that I want this card and I can reuse that all around the project all right so that takes care of that now the next part is going to be here the browse jobs so what we're going to do is create let's just close some of this stuff up just leave the app open and we're going to create a new component called job listings plural. viw and let's add a script tag with our setup and then we'll have our template and just for now I'm just going to say jobs listings or job listings okay and then we're going to bring that into our app. view so import jobs our job listings and let's output that right here so job listings and then if we look at our project you should just see job listings now as far as the data goes we're going to ultimately we're going to use Json server which is like a fake backend rest API but for now we're just going to use a Json file so if you go to the code and repository and let me just uh let me just grab that real quick so code Dev okay so this is the code from the from the repo and you'll see that in the source folder there's a jobs. Json and jobs 2. Json so right now we're going to be working with the jobs 2. Json there's just a slight difference here but we do have to change the structure later so that's why there's two versions so let's bring that into the source folder okay make sure you bring it into Source not the root and then we're just going to rename that for now to just jobs. Json and what we have is an array of of objects that have an ID a title A type description location salary and then a company object with a name description email and phone okay so what I'm going to do is now in that job listings component I'm going to import that data so let's say import and I'm going to call this job data and that's going to be from and then up one level uh actually we can just do at slash and um should be yeah that should work right do we put it I put it in the right place yeah Source all right so that should work now um in order to make that data reactive which we need to do because we're going to be adding and deleting and stuff so we also want to uh we want to import ref from from view okay and then what we can do is just create a variable called jobs and set that to ref and then pass in job data making it reactive so again it's if you're coming from the react framework it's similar to Ed State and just to see if that's actually getting them let's do a console log and it's going to be job do value cuz remember since we're using ref we use value and if I open up the console here you can see that it is fetching that data so array and there we go all right so now that we've done that I'm going to use V4 to to Loop over them and then output each one like this all right so let's go into the template here and uh yeah I guess for for now I'm just going to just have a div and let's say v-4 and we're going to set that to let's say job in jobs and we need to give it a key so colon key and we'll set that to let's say job. and then in here all I'm going to output for now just to make sure this is working is the job do title and there we go so we know that we're fetching the data I mean fetching if you even want to call it that we're just getting it from a file now we want to have like the title and stuff in here and it's going to be kind of confusing if I copy it so let's just type this part out so I'm just going to put section and the section we're going to give this a couple classes let's say BG - blue uh -50 and then padding on the xais 4 padding y-10 and then in the section we're going to have a div with the class of container Das XL and also on that we're going to say on large screens we want to use the container class and then also m- uh margin Das Auto and in that div we're going to have an H2 and that's going to have a class of text- 3XL and then let's do font Das bold and text- green or text green 500 margin bottom six and text Dash Center all right and that's going to just say browse jobs okay now uh let's see we want to go under the H2 and that's where we're going to have our grid so let's say grid and then grid Dash calls D1 and GAP D6 so that'll be a one column but on medium screens and up so MD colon and this is just Tailwind if you don't understand these classes that's fine don't worry about it that's not really the point of this course so MD grid calls 3 all right so in here is where we want to have this this div that iterates over the job so I'm going to cut that from here and put that inside the grid like that all right so now it's going to look like this and if I make this bigger you'll see that it goes into three columns but obviously that's not the data we want to display just the title we want the whole the whole card this whole box all right so what we can do is go into the template the index HTML and down in the browse jobs we already have this stuff right so what we can do is just grab one of the these listings and they're they're labeled they're commented so I'm going to grab this first job listing which ends right here so I'm going to copy that and then we're going to create another component for just a single job listing so job listing singular. View and we'll add script setup and then our template and then I'm going to paste that into the template now I'm going to want to show this job listing component for every listing here right instead of this div so let's bring in the single job listing component so import job listing and then I'm going to replace this div right here with job listing and it's not going to be a a wrapping component so we can get rid of oops I hate when ites does that just get rid of this and then add a slash at the end here but we also need to pass in the job right We're looping through right here so we're getting the job so we need to pass that in as a prop so we're going to say colon job so we're binding it to job now we should be able to access this as a prop okay um and notice that now it's showing all the boxes but it has all the hardcoded data so High coded content so it's all the same so let's go into the job listing and let's prepare to to get that job prop so in order to do that we need to import Define props and then we're going to Define props oops find props and we're going to pass in an object with job which is going to be an object okay so now we should have access to job so I can replace fulltime here with double curly braces and then job. type okay now if I save that I think one of these yeah this one right here says part-time so we know that that's that's the data from the file let's replace this with job. tile now we have all different titles and then we have the description so replace that with job dot description the salary which how is this let me just see how this is formatted so the salary is yeah like 70 80k so it's doesn't have the slash year so let's just replace this with job. salary okay what else we get the location we also have the icon which doesn't show up because we're not using font awesome I'm going to use a another package called view awesome for that but we we'll get to that after let's change this this the hardcoded to um to job do location okay and then finally the the link here it's going to job HTML which obviously that's not correct so what we're going to do is bind so we're going to use the colon here and then replace this because we do have to have the ID in here so it's going to be dynamic so we'll replace that with u we'll just have quotes and we'll say slash job Flash and then let's concatenate the job. ID and that should do it so now if I were to click on the read more and we look at the link it's job sl3 right if I go to this one job SL1 so that they're bringing us to the right place obviously we don't have that you know that route we don't even have the router set up yet but the link is correct and now the content is correct now the next thing I'd like to do I'm just going to make this bigger so we can see it better I want this this whole job listings I want to take in a couple props one is going to be limit so that we can limit it because I don't want all of them to show which right now if I had 30 jobs here they'd all show on the homepage I want to limit it to three so we'll pass limit in as a prop and then also if we look at the template that view all jobs I want to include that in this component as well but have an option to not show it cuz I do want to show it here but when we use that component on the jobs page I don't want to show it so we'll have a prop of limit and a prop of show button so let's do the limit first so we'll go into job listing so I'm going to just close that up this uh yeah we can get rid of that for now so in job listings I'm going to also bring in Define props and then let's define props and we're going to take in a limit which is going to be a number all right so there's a couple ways we can use this limit what I'm going to do is come down to the the V4 and just add on to this this uh where it says in jobs I'm going to use do slice and then pass in from zero to the limit uh or then just show all of them so job jobs. length Okay so now if we were to pass in let's go to app. viw where we're embedding job listings and let's say limit equals 3 actually since it's a number we need to add the colon in front of it so if I do that now it's only showing three if I put two then it shows two okay so that was pretty easy now for the button we don't have that in our job listings component yet so let's go to the theme files in index HTML and under the browse job section you have this section with the U with the button so I'm just going to copy that and then we're going to put that directly under this section okay but I only want this to show if the show button is true so what we can do is pass in show button which is going to be a Boolean and actually I want to have a default for that so let's set that to an object with a type of Boolean and then a default of false so it won't show by default and then all we have to do is go down to the section where the button is and add a v if and set that to show button all right so save that we don't see the button but if I go to app. viw and I add show button actually we're going to do colon show button and set that equal to true now it shows all right and that button right now goes to jobs. HTML so we also want to change that it's just going to go to uh Slash jobs so change that there we go all right cool um and that's just cache let me reload it there we go so the next thing I want to do is talk about the computed function and this is a function that returns a value based on other values and it will run when that particular value changes and if you're familiar with react it's kind of like how the dependency array in the use effect hook works when that dependency changes that effect runs or that function runs so let's use it to show a truncated version of the description so basically we'll have a short or truncated version with a button to show more and then it will show the full uh the full description so that's going to be within the job listing component the singular so let's close job listings and go to job listing which is this one okay and in order to use computed we're going to bring it in so let's bring in in in addition to Define props we're going to bring in ref and we're going to bring in computed because we need a a a piece of data for the the true or false if we want to show the full description or not all right in fact let's go right under Define props and let's say const show full description and we're going to wrap this in ref because this is going to be reactive and set that to a default value of false now I want to access the job up here so what we can do is we can this Define props we can actually set that to a variable so set it to props and then props do job should give us the job and we can say like props do job. description to get the description so now we're going to use computed here let's say truncated description ultimately that's what this is going to give us and the way we use computed is we just set it like this and then pass in a function all right and then let's say let description and I'm going to set that to props do job. description okay so that's going to come from the prop that's passed in the job and then let's have an if statement under that and we want to check to see if it's let's say if it's false so if not show um wait do we yeah if not show full description and remember remember since we're using ref it's going to be value and if that's not then we're going to say description and set that to description and then do substring so this is how we're going to truncate it we're going to cut it off a little bit let's do 0 to 90 and let's add an ellipsis after it so we'll just concatenate onto it three dots so it'll get the first whatever 90 characters and then after the if we'll just return description okay so now anytime the uh full show fold description changes the truncated description is going to run okay now we need a well we we'll do the toggle after because we need a function to actually change it this is just checking to see what the if the value is false if it is um so if we don't want to show the full description then it's going to narrow it down using substring so let's go down to where we have the description and instead of job. description we're just going to say description uh let's see why is that not showing a that's because we want to show we don't want to show description is a variable in this computed we want this truncated description there we go so you can see it's not showing the whole thing and it's adding the ellipses onto it so now let's just have a function to toggle that so we'll say cons toggle description or maybe we should call it toggle full description and we'll set that to an arrow function and all we're going to do is take the show full description. valal and we're just going to set it equal to not show description full full show description value so if it's true it'll get set to false if it's false it'll get set to true now we just need a way to to actually trigger that so let's put this right below the truncated description here so basically we have um you know what let's put this in a div so we'll go like this and move that into the div and then under the div let's have a button and I'm going to give this button a couple classes we're going to do text- green- 500 and let's say on Hover we want to do text- green- 600 and then margin bottom five okay so uh in the button I want to show either less or more so what we'll do is we can say I don't even think we've used a Turner yet we can use Turner um um uh operators inside here so we can say like show full description if that's true then show the text of less if that's not true then show the text of more okay so if I save that we see more right because it's not showing the full description so let's add an event to this button now so we'll say at click and let's set that to that toggle full description what what did I do here okay so I'll save that and now let's click on the more and now I'm I can toggle this particular description I can toggle this one all right cool so now what we want to do is the icons where we have these locations I want to have the little map icon right now if we look where that's supposed to be which is where is the location right here we have the it tag with the the font awesome icons which aren't showing up because we have't included font awesome and if you want you could just as well include the font awesome CDN or you could install it but I'm going to use something different called Prime icons so let's go to or just search for view actually it's just Prime icons and you can use this for react and other uh Frameworks as well so it's this right here so you can see Prime NG for angular Prime react Prime faces we want Prime View and then we can install it like this and then all we have to do is import the CSS into our main J main JS file so let's install it I'm going to go here and npm install Prime icons all right and then um let's go to the main.js and right under that CSS I'm going to paste that in and that's it now we can use these classes to to have the icons show up so where we have the fa solid this right here the it tag I'm going to just get rid of all those classes and I'm going to replace it with pi so Prime icons and then I'm going to use pi- map-marker that's the icon I want and then I'm just going to add in text- Orange d500 which is just um or 700 which is a Tailwind class so let's save that and see if that shows up and there it is okay so you can use these icon classes wherever you want now I think that we've come to the point where we want to start to use the router our homepage is is pretty much done right there's not there's not really anything else we need to do here we have the data obviously we want to fetch it from Jason server uh in a little bit but I want to introduce the router first and get that set up now now remember at the beginning when we use the create view CLI we could have said yes and it would create the router file for us it would create our our home route and all that and that's probably what you're going to do from now on after this but I want to show you how to set it up from scratch so of course we need to install it because it's not it's not you know bundled within the the framework it's like using the react router it is the official router to use so let's go ahead and what am I doing import um npm install and then it's going to be view- router okay now we need to set up the router in a file so in Let's see we want to go into the source folder and create a folder in there called router just close this stuff up so in router we're going to have a file called index.js and this is going to be our main router where if we want to add you know an about page and set that to an about view we would do that here if we want to set our home page to a home view we we'll do that here so let's start off by importing and this code I'm writing right now this would be included if you chose yes in the beginning so we want to bring in create router and we want to bring in create web history I think that's right yeah create router create web history and we're going to bring that in from view- router let's uh close that up okay and then we're going to need a view to bring in so why don't we create in the source folder a a folder called views now a view is uh is basically a page right and your views can have multiple components so in this case I want our home View to basically be what we have here in our app folder or in our app file rather all right so if we go to app. viw the only thing I want to leave here is the Navar because I want that on every page the hero home cards and job listings should only be on the home the home view so what I'll do is cut these Imports and then we'll put that in let's go into views and create a new file called home View and it still is a component so it'll be have a view and then let's add script and setup and in that we'll paste that in and then we'll have our template and I'm going to grab from the app. viw everything except the nav okay so we'll do that if I save now we're only going to see the nav bar but let's go to home view paste that into the template all right and then let's see we're going to go back to um The View file I'm sorry the router file which is router and then index.js and we're going to want to create that home view so first off let's import it so import home view from at views home View and then we're going to create a variable here called router and this is going to use that create router which takes in an object and and we need to add this history and this is where we use create web history so this is so we can go you know back we can use the back button and stuff just like if it were a regular server rendered app and then we're going to pass in here import. meta do env. basore URL so that will provide the base URL then after that we want to provide our routes which is going to be an array of objects and each one is going to have a path so let's do slash for the home and you can give it a name so I'm going to give it a name of home and then the component that you want to load or the view in our case so home view all right and then at the bottom don't forget you have to export this as default router all right so it's not going to work just yet because we're not doing anything with this there's actually two steps we have to take for this to actually work first in our main.js in the entry point we need to use the router the file that we just created so let's import that so we can say import router from and then we can just do do slash router we don't have to do slash index.js because since we named it index.js it'll automatically load that all right and then we can just come down here and instead of just saying create app I'm actually going to set a variable of app set that equal to create app and then down at the bottom we can say app. Mount so this is doing the same exact thing but now I can also say app.use and then pass in router all right so that'll use the router so if we look at this it says fail to resolve import components job listing view oh I didn't use the Alias there all right there we go okay so the last thing we have to do in order for the stuff to show the home view is in the app. view we need to bring in something called router view which is like the outlet if you've ever used react router then you you put an outlet in your main layout and that's what we're going to do here wherever we put this is where the the the view will show so I'm going to go right under the Navar and say router view save it and now you can see that we have our entire home view showing right because we're at slash if I go to slash anything else it doesn't show and we can create a not found page as well so yeah that's how we set the router up just to kind of reiterate we create the router folder the index.js we we add our routes create our view bring it in set it as the component and then in the main JS we use use the router we bring we import it and then we use it and then in the app. viw the main component we use our router view which is like the outlet all right so now we have the router set up and again if you chose yes in the beginning all this would have been created for you and in your app. view I mean in your main JS this would be here too the router View and also basically everything we just did would already be included now let's do our job drop this right here which goes to slash well right now it's going to U jobs HTML we actually want that to go to slash jobs so let's go to the navbar and let's see we're going to change this so This Home is going to go to slash now we're not ultimately we're not going to use a tags there's something called router link but for now we can just we'll stick to a tags just to create this route and go to it so let's say slash jobs and then this one is going to go to slash jobs slad okay so if I go to slash jobs obviously nothing shows here so let's create a jobs view so under views new file jobs view. viw Vie and we're going to have our template and then all I'm going to do here is is use the job listings component that we already created so let's say script oops script setup and we're going to import the job listings plural and then we're just going to embed that here job listings and we're not going to pass in a limit or the show button true all right so if we do that and then go to our router files so router index bring in that view so you can see kind of the process of adding new views so jobs View and then let's we can just copy that down and let's say slash jobs change the name to jobs change the component to jobs view save it and there we go okay so we're at jobs and this highlighting is is not working yet we'll we'll get to that but I can go home and I can go to jobs all right now before we do the highlighting the active link let's change the a tags to use the the router link so we'll start in the nav bar so up at the top here we're going to import router link from view router and then anywhere where we have an a tag including the logo right here I'm going to change that to router link okay make sure that the ending tag changes as well and instead of an hre it's going to be a two okay just like with u with react rotor and then let's change this to just slash it's going to go to the homepage so that's that then let's go to these three a tags change that to router link uh again make sure that the ending tags some sometimes it doesn't register so make sure we do oops is that right that's right I don't know why it's putting that on the next line but yeah that should work so let's go to this one oh actually you know what we want to change this let's change all these so commander control D again and we'll change those to two Okay so this one here router link make sure we add the ending tag and then this a tag router link add the ending tag all right so let's save that and I'm going to click on home all right so now that works a lot faster because it's not actually refreshing the page right it's a single page app so it's the JavaScript is doing all the work now there's some other places where we have links right here here these three and so let's go into our home cards we can close some of this stuff up for now let's go into uh components and then home cards and again we want to bring in router link and then we want to exchange the a tags for router link and we're going to change the HRA to two and this is going to go to uh Slash jobs and then this one here let's see this going to be router link and we're going to change that to two and change this to slash job slad okay so that takes care of that you can test those out that goes there add job that's not we haven't created that yet but it goes to the right place and and then we have the the job listing so we can close that up let's go to job listing and let's import router link and where we have the a tag change that to router link and change this href to two click on that and it goes to job job one this one goes to job two good and then the button at the bottom that's going to be the job listings component so let's bring in router link and down at the bottom change this change that to two and make sure that the ending tag gets put on there we go okay so now all the links are working and they're all using router link so now let's do the active links if I'm on the jobs page I want that to be highlighted not home so if we open the navbar and I'm just going to close that up and then we want to basically just get the path here and we can get that by using the use route Hook from view router so let's say use route bring that in and then we're going to have a a function called is is active link and just set that to an arrow function and it's going to take in a route path which we're going to pass in and we want to check to see if that route path matches the actual route path now we do have to set a variable of route to use route and then we can access the actual route path with this so what we can do is return if the route path is equal to the route path that's passed in so if that's true it'll this will return true obviously and we can add a certain class this right here which is the BG if we go down to the the navigation this BG green 900 is what's giving it that if I get rid of that you'll see that that goes away so we need to make this Dynamic now the way we can do this is just add a colon in front of class and then we can put we can make this Dynamic and we can actually set an array here with class names so for instance if I save this now with no class names it looks like this but I can add in here a string of text white and that will add the class right so basically I want to read these classes here the text White and the rounded and the padding so text white and then let's do uh PX what is it PX -3 I believe was that it yeah PX3 and then py2 so I'm just adding in Array items here for the classes as array items and then rounded uh rounded DMD right so now it looks like that and what I can do is let's go I guess we'll do it at the beginning here we'll say is active link and we want to check to see if it's slash because this is the home link and if it is so we'll use a Turner here if it is then we want to show a specific class if else then we'll show a specific class and then we'll put a comma here all right so whatever I put in here will show if it is the active link and I want to do BG green- 900 and then else I don't want the BG green but I do want to add hover so I want um the hover to be BG - gray- 900 I think that's right yeah VG gray 900 and let's also do hover B uh not BG text- white all right so I have this on the home link so if I go home now you can see that that has that background if I go to jobs it nothing has it because I haven't added this to the jobs uh jobs link but let's do that so I'm going to just grab this whole router link and then replace this except I want to change the text to back to jobs and when I'm checking for the isactive link I want to check for slash jobs so I'll save that and now jobs is is highlighted and if I go if I click if I hover this we get that that black black background all right now we want to do the same to wait why can't I click oh the link the actual link uh let's see so we have yeah right here so this should be slash jobs all right good so now we'll do the same to the ad job so let's again just copy one of these router links and replace this router link but we want to make sure we change the the URL to jobs ad and then the is active is going to be jobs ad and the text is going to be add job now if I click on that even though it doesn't work we don't see anything down here it is the active link so now we have that functionality so next why don't we have a not found page since we don't have a route for a job slad it should say like not found right so what we can do is create a new view so in views I'll create let's say not found view. viw Vue and basically the only thing we need to bring in here is the router link so we do need our script tags set up and then let's import uh router link and then we'll have our template and in the template I'm just going to grab from the uh the theme files there's a not found HTML so I'm going to go down to the main section which isn't shouldn't be much right just this section right here I'm going to copy that and then add that in the template and then just change a couple things up so one the link we need to change that to router link and make sure you add the ending tag so router link and then the actual link actually we're going to change this to two so two and then that's going to go to the home view so that that'll be slash all right now we have the font awesome icon here so I'm going to get rid of that and I'm going to use the um I'm going to use the what is it called Prime icons classes so let's do PI and then pi- exclamation let's do what do we want exclamation triangle we'll do and then I'm going to do text Dash yellow 500 and let's do text dash 7 XL and then margin bottom mb5 okay now obviously that's not going to show just yet because we need to add the route so we'll go to router index and of course we need to bring the view in so let's import not found View and then we'll go down here here and the way we can do a not found very they actually make it pretty simple so for the path we can set that to slash and then colon catch all and then in here we're just going to have do asterisk so basically any any file or resource we go to that doesn't exist it's going to match that path and we'll give it a name of not- found and then the component that we want to load is the not found view all right so we'll save that and there we go 404 not found got the nice icon and go back good so any anytime we go to a URL that doesn't exist we're going to see that so I think the next thing we should do is the single job view right if I click on read more it goes to the correct URL but we don't have anything here so let's create the view first so I'm going to go into views and this one I'm going to call just job view. View and let's create our script setup and template and what I'm going to do from here is just grab the from the theme files I'm just going to get the hardcoded stuff and then we'll replace it with Dynamic data later so let's go to job HTML and go to the main section so this we're also going to want this go back as well but we'll do that after this is going to be the main section so I'm going to grab that whole section has the sidebar and all that stuff in it so copy that put that in the template so it's just all hard-coded HTML for now but let's just bring it into the router so go to router and let's bring in import job view now this this URL is going to have or this yeah I guess this URL is going to have a an ID so I'm going to I'm going to keep the catch all at the bottom you don't have to but I just I just like to keep it at the bottom so let's add in another object here and the path since it's going to have an ID what we do is slash jaw slash and then colon ID okay that's going to be the path and then let's give it a name so I'll just call it job and then let's give it a component and that's going to be the job view component save that okay so that's not working and that's because this is job SL1 I do want to keep it as Jobs because that's what I'm I'm going to have everything else as right uh did I what I do collapse this yeah so we have jobs and then we'll have jobs ad and job's ID so what we need to do is change the actual link on these buttons so that's going to be in the job listing and right here I'm just going to add an S all right so if I click read more there we go and then obviously this is all hardcoded so no matter what job I click read more it's always going to be this this data that's what we have in the HTML but we're actually going to come back to this because what I want to do now is Implement Jason server which will be like a real back end instead of just getting it from the Json file I mean technically it does come from a Jason file but Json server sets it up so you can make actual get post put delete requests to um to have you know crud functionality so I'm going to just close this stuff up for now and let's install Jason server so we're going to say npm install json-server and the way this works is it'll actually look at a spe a specific Json file and it'll use that as your data now we have this jobs. Json and the only thing we need to change and this is why I had two versions of this we need to make it so we have this array called jobs so what I'm going to do is first off just copy this so duplicate it and change the initial one oh I'll change the copy it doesn't really matter I'm going to change that to jobs 2 just so you have the old version as well and then in jobs. Json all I'm going to do is we're going to have an object wrapping this whole thing right so opening curly brace and then have jobs and then set that to the array right so jobs set to this array and then just add the ending curly brace down here so that's all I want to change and then Jason server will look at this and use jobs as a resource for create read update delete or I should say get post put delete routes so the way that we set that up is in our package.json we're going to create a new uh a new script to load Jason server so let's go to scripts and let's add we'll call it server you could call it anything and what we want to run here is json-server and d-at and we want to watch in the source folder the jobs. Json file because that's our data and I want it to run on Port 5,000 that'll be our our back end so it's just like if you create if you used Express and you created a rest API for jobs and you put it on 5,000 it's the same exact thing as far as looking at it from the front end all right so now let's run that so I'm going to make sure you keep the the V server running but go to another terminal and do npm run server and let's see what happened here oh I think I have I think I have yeah something's already running on 5,000 that I can't really stop so let's I'm going to change it you can leave it at 5,000 yours will work as long as you don't have anything running but I'm going I guess I'll change it to 8,000 so now if I run npm run server now it's running at 8,000 and I actually have this endpoint of Local Host 8,000 jobs if I look at that there's my data and I have I I can make a post request to add a new job I can do a a put to update a job and a delete to delete a job so that's I mean it's as easy as that to set up a a mock rest API all right so so why don't we now since we have that set up let's have our data that's on in our job listings component come from Jason server now you can keep using the fetch API if you want but I'm actually going to use axios for this which is just a an HTTP client that's a little easier and a a little um you don't have to write as much code to make requests so I'm going to open up another shell here since I already have two running and let's let's do npm install axio again if you want to use fetch you can and then let's go into the job listings component listings plural and this is where initially we're we're bringing in that Json file which now if I reload actually why is it still working because I changed the format up of that oh this is that's the the uh theme yeah so see now this isn't working because I changed the format of that Json jobs Json file now we're not going to need to bring this in anymore because we're not going to use that we're going to make a request to our back end we're also not going to use um job data here so we can get rid of that and just put an empty array so basically our jobs is going to start with an empty array we're going to make our request in the on mounted life cycle method and then fill this array this jobs with the dat data from the API okay so let's bring axios in so we can use that or again if you want to use Fetch and we're going to do we're going to bring in on mounted from view so right here let's also bring in on mounted it's lowercase o and usually we'll put this at the bottom so let's say unmounted and then we want to pass in on mounted we're going to use use a sync we since we're using axios and and this is kind of like use effect in react so let's do uh try catch and we want to get the response so we're going to send a requests with await axios make a get request to http Local Host port and mine is 8,000 so just put put in the right port for your backend and then slash jobs right and then we can set jobs. value to the response response. dat data like that so that should update the jobs and then we'll just do a console. error and we'll say error fetching jobs and I guess we can yeah we'll also output the error okay so let's save that and now we get our jobs back and it should be here and on the jobs page because they both use this job listings component so now it's fetching it from the actual from Json server all right if we were to look at the network Tab and reload you can see uh where is it right here so it's making the get request to Local Host 8,000 jobs getting it back if we look at the response there we go so we're we're no longer just pulling in a file now before we move on this what we've done here with ref and using ref here that's absolutely fine there's nothing wrong with that in fact I think that's probably what most people would do but there's also something called reactive that we can use instead of ref now there are differences so the main difference is that reactive only takes objects it doesn't take Primitives like strings numbers and booleans and it also uses ref under the hood ref can take objects or Primitives so you can use that no matter what in fact a lot of you developers will just stick to always using ref and I probably would do that here but I want to show you other you know what else is available and then ref has the value property for reassigning where reactive doesn't use dot value and it can't be reassigned and when I say reassigned I mean you can't just take the actual variable and set it equal to something else it'll be an object inside and of course you can manipulate that object all right so what I kind of like to think of it as is and this is for people that are already familiar with react so when you have a form sometimes you'll you'll add a different Ed state for each field like the name the email Etc that's like an example of using ref where using reactive is if you were to use a single object that has each field inside of it so an object with name email Etc that's just the way that I think of it I don't know if that's I don't know if that makes sense or not that's just just me uh so let's bring in reactive and then what we're going to do is instead of just setting jobs to ref what I'm going to do is call this state and set that to reactive but we want to pass in an object and then in that object is where I'll have my jobs which starts as an empty array and then I'm also going to have an is loading so you can have a spinner or whatever while it's loading and I'm going to set that to True by default all right and then down here what we can do is let's see so we have cons response we're getting that now remember there's no dot value but what you will do is say state. jobs because I called this state so state. jobs we're setting that to the response data and then I want to use the loading which is set to True by default so what I'm going to do is add a finally to this try catch which just means whatever I put in here is going to run whether this runs or this runs and in both cases want to set is loading to false so we would say state do is loading and set that to false okay now this is not reassigning it this would be reassigning it State equals something I'm just taking an a value in the object or a property in the state object and and setting that that's perfectly fine all right so let's save that and uh let's see that's not working and that's because that's because down here um for job we want to say here state. jobs and then over here where we get the length we want to say state. jobs there we go so now that's working if I go to jobs that's working so again this is kind of um you know this is optional you don't have to do it this way but I just I just want to show you guys other ways of doing it now we should probably use that that loading so let's um let's set up a spinner and there's a an extension called view spinner that's pretty cool it's very easy to use so I'm just going to install npm install and it's called view Dash spinner very very simple extension now we do need to I believe we have to add the CSS file is that right um no maybe we don't actually yeah I don't think I don't think we need to add that um so what we'll do is bring in up at the top here say import now there's different types of spinners you can bring in I'm going to bring in the post pulse loader from and that's going to be from view spinner slash Source SL puls loader. viw okay so we're bringing that in and then let's go down here to the template and where I want to put this is right under the H2 so I'm going to say show loading spinner uh while loading is true okay so we can use the the V if so let's have a div and let's say v-if set that to State don't forget the state and then dot is loading so if that's true and I also want to add a couple classes on this so we're going to do text- Center and let's do text- gray- 500 and py- 6 and then in that div I'm just going to put the pulse load all right so that's if it's loading and then down here where we have the the grid with the job listing let's just put a comment here so we'll say show job listing when done loading so we can use V else here so v- else and that should be all we need to add here so if I reload you can see real quick three dots so it'll be there and it'll be here all right so now what I want to do is the single page right so we'll come back to that because right now this is all just HTML so let's go into the job uh where is it the job View and if you want you could put this in a separate component if you don't want to put it all in a view file but I I assume it's I mean it's a component so we'll just do it here now I'm going to use reactive just because I use used it in the job listings if you want to use ref you can so like I said it's all preference U so what I'm going to import from here is going to be the pulse loader so pulse loader from and that's view spinner Source pulse loader and then I'm also going to import axios because we need to make a request for the single job listing and then let's go under that and I'm going to also import actually we'll just this up here and I usually like to put axios at the bottom so I'm going to import reactive and then we're also going to need on mounted from whoops on mounted from View and from The View router let's import use r rout so we're going to bring in US Route and we're going to bring in router link okay all right now let's see we're going to initialize use route so route set that to use route now the reason I'm doing this is because we need to get what is going on here why did I say import const the reason I'm doing this is because we need to get the ID from here and we need to make the request to the back end with that ID and way we get that ID is with this route variable so I'm going to say cons job ID and I'm going to set that to Route Dot and the way we do it is params and then do ID and the reason it's ID is because in the router right here is what I used I used ID if I use like slug or something here then it would be pam. slug so next let's create our state so we're going to use reactive and again if you want to use ref you can if you want to use Primitives you can but I'm going to just I kind of like the idea of just having a state object so let's say job which will be just an empty object to begin with and then is loading set that to true to begin with and then let's do our on mounted I'll actually copy it from uh from the job listings so this on mounted right here I'm just going to grab this whole thing and paste that in except now we're making a request to jobs slash and then the ID so let's actually change change this to back Tex and we'll do job slash and then job ID okay and then let's see State this is going to be state.job not jobs and then this stuff we'll just say error fetching job and that should do it okay now down here let's let's figure out where we're going to put the loader I guess I'm just going to put it so uh we only want to show this if the if loading is not true so why don't we go into the section and add a v if so we'll say V if not state do is loading and then down at the bottom let's just put actually know what I'll do is grab from here yeah just grab this and it'll go under the section and then paste that in so we're just saying if uh actually here we want to say if else and get rid of this all right so if it's not loading it'll show that if it is loading then it'll show this and if I reload you can see the dots now we want to make this obviously Dynamic we want to have the actual data so let's go back to the top of the template and just kind of go down so we have fulltime let's change that to interpolation of state do job dot what is this type and you can see it still says fulltime let's change this I'm just going to copy that and then we'll change that to title senior view developer and then we have the location which is going to be right here so oops job location just make sure this is working right so this one's myami yeah there we go so Miami good um the description change that description then we got wait what is this oh this is um wait what is that what did I just change oh I changed the title idiot description all right and then we get the salary so we're just going to replace this part of it with job. salary then we got in the sidebar company info so this is the name the title of the I think it's the what is it the title the name let me check so jobs yeah so we have company object and then name so let's replace that with job dot job. companyname okay so that changed the vineer solution ions and then I'm just going to copy this replace this with the company do description contact email change that whoops I just copied it change that with company. contact email okay that changed and then this one here the phone is going to be company do contact phone then down here we have the manage job now we're going to want to use a router link here did I bring that in yeah I did all right so anywhere where we have a tags which should just be the edit job so we're going to change this to router link add the ending tag all right and then we're going to change the the hre to a two attribute or a two prop and then this is going to go to since it's an edit um what do we want this to go to so we can put back ticks in here and then we can say slash jobs slash edit slash and then the um job ID I believe that oh actually you know what let's not do that let's do state. job. ID so we're getting the ID from the database or from the back end and then if I hit edit job yeah that's that's not working what did I do wrong here um can I not use back ticks oh two needs to have a colon in front of it there we go so it's going to jobs edit 2 which is what we want okay so this is all now Dynamic so if I click on any of these it's going to show me the actual data coming from the back end now let's do the the go back button which is going to be pretty simple um we'll just create a separate component for that so let's go to components right here and let's create back button. viw okay we'll add our template now the back button we can just get that from the theme files if we go to job. HTML up at the top here there's this this right here this section for go back I'm going to just grab that and I'm going to put that in the template and since there's a link so there there's a link and we'll also change the icon class so let's bring in router link and then let's change that to router link let's change this to two and we want to go back to slash jobs and then for the icon let's get rid of that and let's do it's going to be pi and what is it going to be the arrow so Pi Dash let's see arrow and I want to do an arrow left so we'll do Circle Arrow left let's see what that looks like so will bring the back button into the job View and then I'm going to put that right above the section so back button okay so let's add a little bit of spacing after that icon so in the back button We'll add what do we want M margin right three maybe yeah I think that's good now the next thing I want to show you is proxying because right now we have two requests we have one in the job view making it to the the single job and then we have one in job listings to jobs now you might have you know 5 10 15 different requests and you don't want to have this HTTP Local Host 8000 cuz what happens when you deploy so what we can do is add a proxy and say instead of using Local Host 8000 we can just use like slash API so we can do that in the v um uh where is it the V config so I'm going to open that up and we're going to add this to the server object so right here let's add proxy and proxy is going to be set to an object and I'm going to do slash API because that's that's what I want to use is slash API slash and then jobs or or whatever so we set that to an object and then we're going to add the Target and the target is going to be HTTP Local Host and then M's 8,000 if you used 5,000 for your server then that's what you want to put and then we're going to add change origin set that to true and then we're going to have a rewrite uh rewrite path and this is just what's in the documentation we're going to say path. replace because what we're doing is replacing we're going to like I said replace this with uh we want to replace it with a slash API so in here it takes a regular expression and we can just put two forward slashes and then the carrot so we're going to say begins with and then we want to use um escaping for the next slash so back slash escapes the forward slash and then API slash and then we want to um put pass in just an empty string wait a minute is that no that's not right that shouldn't be there that should do it all right so just copy this and then what we can do is go back to where we make those requests like in the job View and I should now be able to replace this with API or SL API SL jobs and then same thing in the um job listings replace this with Slash API and then just reload so the jobs view is still working and the jobs listing is working and now I'm not uh explicitly saying Local Host 8,000 so that's proxying so let's start to work on the ad job page I know this is a this is a long crash course but I wanted to just I wanted to fit all this stuff into it so and if you've made it this far congratulations uh most people don't these days at least I feel like I feel like people just don't have attention spans anymore they want they want to learn everything through uh 30 second Tik Tok videos so let's create I sound like an like a grumpy old man so let's create a new view for this so in views we'll say add job view. [Music] Vue and let's add um for now I'm just going to put template and I just want to get it displayed so I'm just going to say add job like that and then bring it into our router let's close the rest of the stuff up go into our router index bring in the view add a route for it we'll go right here path is going to be slash job slad name is going to be add job component is going to be add job view so now we can see add job so this is going to be a form pretty long form so we're not definitely not not going to type it out let's grab it from the theme files so ad job HTML and go past the navbar to the section and we're going to grab the whole section again I tried to make the theme files easy so that everything is just laid out in sections that you can just take so we'll take that let's paste that into the template save it and there we go so we have our form now now obviously we want to make this form function so couple things um now forms are where I do like to use reactive and over ref right so because that otherwise I'd be creating a primitive for every single field and even in react I'll have an object in Ed State rather than you know a separate state for each one so let's add our script and let's import reactive okay and then I'm going to call this variable form set that to reactive and pass in an object and we're going to have all the fields so type now type I want it to be filled with fulltime first uh rather than just being empty I want it to show like that full time so I'm going to add that as a default value and then title is going this is going to be empty everything else is pretty much just going to be an empty string description we have salary we have uh location and then company company is going to be an object and in that we'll have name description contact email and contact phone okay so that's our data or State uh what else so we want to to to bind these to the inputs and that's where we use V model right so let's come down here to the first input well it's actually a select but we're going to add to this v- model and we're going to set that to form. type all right so if I save that it should still say fulltime if I were to change this to part-time then it'll say part-time now it has to it have this has to match one of the the actual options so it has to be one of these or it's not going to show right if I put um part-time one and save it's not going to show it it has to match one of those so that's the select then let's go to the name uh yeah is it n yeah name and then we'll add v- model and set that to form. name right we'll go to the next one the description which is a text area and V model set that to form. description then we get the salary which is a select uh we'll go right here V model set that to salary not salary job um form. salary then we got the location location and then company info so we have the the company uh what's this this is going to be company name so let's add V model set that to form. companyname then we get the description make sure you put it in the the input or text area not in the label so here let's say [Music] vodel form. company dot description contact email so v-model form. company. contact email and then finally the phone so form. company do contact phone all right and if we put like any default values like for Loc if I say hello and I look in location it says hello so these are they're bound together now the next step is to add the function or the submit event and point it to a function so let's go to the form and let's say at submit or you could use V on and we're going to do uh submit. prevent to prevent the default behavior and let's set that to let's say handle submit all right so with that we're going to come up here under the form the bottom of the script here and let's say const handle submit okay and then we're going to be making a request so let's make this asynchronous and then just for now let's just see if we can get if it actually works so we'll do a console log and I should be able to get like form. tile let's try that all right so if I put something in here I think these are required so we need to just put in some dummy stuff here and just put whatever it doesn't matter so add job and then I'm going to look in the console and uh let's see we should see the title so I'm getting nothing did I put a title in I did oh you know what did I put title or name I did I put name so this right here job listing name should actually be that should be form title as the as the V model so I'm going to have to submit this again with a title and there we go all right so I just had the I had the V model wrong so we're up to this point where we can actually where we have the the data bound to the inputs we can get the data when we submit like that so why don't we create a new job object and let's set this to let's say title set that to form. tile which we just saw that we can get type set to form type uh what else location description uh salary what's next company which is an object so that's going to be we have name which is form. company name and what's next description form do company. description contact email and contact phone all right so that gives us the new job and let's just test that out now make sure that we we get that and make sure all the the fields are actually filled in so new job and this is kind of a pain to actually I think I have yeah I have the fake form filler I don't know why I'm not using that that's a pretty good extension fake form filler just add some data in there so we have this object with company so all that stuff is good description yeah so everything looks looks good so it's it's catching the data as it should and then we want to make the request so let's do I'll just copy from uh from one of these other from the jobs view uh job view this inside the unmounted I don't want the unmounted I just want the try we don't even need the finally I guess I could have just typed it so we're going to say response but we're making a post request now so we want to say post and it's going to be the end point will be API jobs you can actually just make these quotes or you can keep back tick some people see a lot of people lately just always use back ticks um so API jobs and then we want to pass in the new job as our data and then we don't need to do this state thing um what I do want to do is add a toast so I'll say to do show toast which is like a notification and then let's router so router. push and then we'll pass in some back tick and say slash jobs slash and then from that response we want the data and we want the ID so it'll go to the the actual job that we add all right and I want to add a toast down here if there's an error so let's try that out I'm going to go ahead and just reload I'll just say test job and we can put anything in let's use the fake filler again add job let's see what did I axios is not defined so I didn't bring in axios all right let's try it again there we go so that's just all the dummy data that I just added if I go back to job listings there it is all right one thing I'm missing here is the little map icon so that's going to be in the job View and let's see right here we want to replace that let me just see what I used for that job view so it's called it's map marker all right so I want to I'm going to keep I'm actually going to change it to text XEL and then get rid of these classes and we're going to do PI and then pi- map marker and there we go all right cool so up to this point we have uh create functionality now we have read so we all we have left is edit and delete right so I want to be able to come here and click delete and delete it but before we we do that why don't we do the toast because I want a nice notification that slides in and says you know uh job has been added so to do that we're going to install a package called view toastify so let's say npm install view Das uh toastation at next make sure you put that at next or you'll get an error so now we need to initialize that in our main.js so there's two things we want to bring in here we want to bring in um we want to bring in the CSS file and the actual toast so let's say import toast oops no import toast from view- toastify and then the CSS is going to be view- toastify slist SL index.css so that'll give us the styling and then we just have to come down here and we have to do app.use and then pass in toast okay so that will give us the styling and the ability to use the the used toast hook so we're going to go back into the add form so add job View and from here let's import uh we want to import the Ed toast Hook from view toastify all right now now we need to initialize that so I'm going to go right under the form here and let's say const and call this toast set that to use toast and then wherever we want to use that we can just replace that and say toast. success so you can do success or error depending on what you know what color you want the thing to be so the message I just want to say job we'll say job added successfully and then if there's some kind of error then let's do toast. error and I'll just say job was not added and it'll console log the actual error cool so let's save that and now let's try to add another job so I'm just going to use my form filler so it's called Dennis Horn as the job listing name we can change that to like uh just like view Dev and then add job there we go so we get job added successfully in our toast and it brings us to the new the new job page so moving on we want to do the delete so let's go into that's going to be in the job view so we can close that up let's go into job View and then Let's uh let's add the button first so or we have the button but let's add the event so down at the bottom where we have the delete button I'm going to add at click and we'll set that to let's call it delete job okay and then up at the top before we create delete job I'm just going to import a couple things so we want I I want to use the toast so I'm going to say use toast and that's going to be from View toastify and then in addition to use route and router link I'm going to bring in the use router uh use router hook as well uh and then we need to initialize both of those so let's do that let's see we'll go right here and let's say const router set that to use router and then we want cons toast set that to use toast and then we we'll create our delete job I'm going to put that right above the unmounted so const delete job use an arrow function and this is also going to be a synchronous because we're using axios and we'll have a TR catch and in the try let's await axios do did I bring in axios I think I did yeah so we want to await axios do delete cuz we're making a delete request now and the endpoint let's actually use back ticks for this and it's going to be SL API SL jobs slash and then the job ID all right so that'll make the request and then let's say toast. success and we'll say job deleted or job deleted successfully and then after that I want to redirect to the jobs page so this is where we can use router. push and let's go to slash jobs and then in the catch here let's do console dot we'll do console. error and we'll say error deleting job and let's also show the error and then after that we'll do a toast so toast. error and let's say um job just say job not deleted all right so I think that should do it let's come back over here I'm just going to give it a Reload and let's click delete job job deleted success F we probably should have a confirmation so let's let's um yeah we'll do that as well so we'll say const confirm set that equal to window. [Music] confirm and we'll say are you sure you want to delete this job and then under underneath that we'll say if confirm then we want to do this all right so let's go to this one delete job if I say cancel it doesn't delete if I say okay then it deletes and I get redirected and we get our toast all right so that was pretty easy now the last major piece of functionality is the edit so let's create the edit View view so in views I'm going to create edit job view. viu and for now I'm just going to put a template in here and just say edit job and then we're going to add it to the router so router index.js let's bring that view in so import edit job View and then we'll add it down here uh I'm just going to copy this and we want it to go to jobs sledit slid for the name we'll do edit djob and then we want edit job View for the component all right so now if I go to one of these and I click the edit button it should bring you to the correct URL now for the form we might as well copy the the whole ad job view page because it's similar so I'm going to just grab everything in the ad job View and paste it in here and then let's change like um the button text we'll change that to update job and there's I believe there's a heading as well so this right here instead of add job we'll say edit job all right and then let's see there's going to be some stuff that we need to bring in um actually yeah so do we have we need to use route from the router because we need to get the ID from the URL so let's say import use route and let's also do use router and then we'll go right here and initialize those so cons route equals use route and const router equals use router and then we need the job ID so let's say const job ID and we can get that with route. params doid so that'll give us the ID and then we're going to need some state so let's see we have our obviously we have our form our form Fields state but we're also going to create a state object we're going to use reactive pass in our object and the job which is going to be just an empty object to begin with and we'll do is loading and set that to true to begin with now we need to fetch the job so that we can fill the form Fields so we're going to need on mounted as well so let's bring that in from view so in addition to reactive we'll bring in on mounted and then let's put that down at the bottom of the script here so we want to go under handle submit and let's say on mounted we're going to pass in an async arrow function and let's make the request so we'll say cons response actually let's put this in a try catch all right so const resp response set that to await axios and we're going to make a get request because we're getting the job and let's use backtick SL API SL job slash and then the job ID which comes from the URL and then we're going to assign state.job to the response.data okay now to populate the forms or populate the inputs what we can do is just set form. type set that to state. job. type okay and then we'll do form. tile job title we have form. description state job description and form do salary state job salary and the location location and then we have the the company stuff so form. compan which is an object so we want the name and that's going to be state. job. company. name and and I'll just copy this down so in addition to the name we have the What description so we'll grab this and this description okay then the next one is going to be what contact email and then we have contact phone all right so that should fill the forms let's just add in the catch here um we'll do a console. error and we'll say error fetching job and the actual error and then we'll add a finally here because once once that's done we want to set state. is loading to false all right so let's see what we got here identify a router has already been declared oh bring in router here so I you can do you can either do this use this router yeah you can either do that or use the hook I guess I guess we'll just use that so we don't have to initialize it I think that'll work okay so we can see that these form fields are all filled which is good now the next step is to do the handle submit because right now it's uh it's making a post request we need to make a put request so let's change the the name of this because it's not a new job it's an updated job and then this stuff can all stay the same because we're still getting it from the form and let's see down here we're going to say response equals axios dop put and then the URL needs the ID so let's make this into back Texs and let's do slash and say job ID and then pass in updated job and then for this the toast we'll say job updated successfully and then for the push we'll just yeah we'll do the same thing and yeah I think I think that should do it so let's try it we'll save it and then I'm going to just change something so let's see which one should I change we'll go to senior view developer click edit job and I'm just going to change it to senior view Dev and we'll change change the salary to let's say 90 to 100 and then update job job updated successfully senior view Dev and 90 to 100 so now we can update our jobs so we have full crud functionality all right so that's that's it I mean that's our application I know it's very simple in functionality but we there's there's a lot that you learned here that you're going to use in every single one of your your vue.js single page applications now when it comes to deployment I actually am going to show you how to deploy this to netfi um versell is another great service both of them have very generous freets however when we if we deploy this the jobs aren't actually going to show up because remember we're using Json server which is a it's a local mock rest API so we're not going to be able to access it from um from a production website but I want to show you the process just so you know for your own projects but there's really no sense in deploying this because it uses Json server all right um so let's let's uh go into the terminal here we can close this up and what you're going to do first is well you actually you don't have to do this step because the build command is actually ran on netlify but you can run npm run build yourself and it says building for production and it's going to what it's going to do do is create a disc folder with all your static assets okay so if you were if you were deploying to like a shared host or something like that then you could upload the disc content now if you want to preview your production deployment that's what npm run preview is for so if I do that it starts on 4173 and it just gives you your production which is the same it's the same thing as the dev server same content and all that um but it is the production uh production build so now what you would do if you want to deploy to netlify is create a GitHub repo and push to GitHub I'm not going to do that part because you guys should know how to do that just get your repo up and then let's go to nfy and I'm going to log in and then you would create uh and I already have my my uh GitHub repo up so you would go to add new site import from GitHub and then search for your repo so let's see I want this right here view crash 2024 site name could say like view- jobs project okay and then here you can see it's it's going to deploy the main branch and it's going to run npm run build on the server that's why you don't have to run it before deployment and then it's going to publish the disc directory okay so if you had a different command then you would change this or if you had a different uh production folder you would change that but it's already what we need we have no environment variables so we should be all set to deploy and this might take a couple minutes so uh what I'll do is pause the video and I'll come back when it's done all right cool so it's done so if I click on the The Domain here it's going to open up and again it's not going to show the jobs because we no longer are on the local server where we have Jason server running right if I go to jobs there's nothing there uh and if I were to open up the network tab you'll see that there's just an error fetching the jobs well that's the console but if I go to network and reload and it's trying to get if we go to right here um yeah it's trying to get from API jobs but remember that's that's Jason server which of course we didn't deploy so it's getting a 44 but that's the process of deployment and when you update your GitHub repo it should automatically Deploy on netlify which is really cool but that's it guys I hope that you learned a lot from this and I will see you next time"
CnH3kAXSrmU,Express Crash Course,https://www.youtube.com/watch?v=CnH3kAXSrmU,Traversy Media,UC29ju8bIPH5as8OGnQzwJyA,Get started with the most popular web framework for Node.js. Code from Video: https://github.com/bradtraversy/express-crash/ ...,2024-05-07T13:00:11Z,"what's going on guys welcome to my expressjs crash course so this is a revamped updated version of the one that I did about 5 years ago I also just revamped my node.js crash course you can find a link to that in the description node.js is a JavaScript runtime environment and if you're brand new to node I would definitely suggest that you watch that one first it's going to give you a better understanding of what nodejs is and how it works but if you're ready to dive into Express let's get started [Music] all right so we're going to be covering a lot of stuff in this video we're going to spend just a few minutes in some slides to talk about what Express is and what it's used for then we'll jump into uh uh Express project and we'll look at things like creating routes the request response objects middleware error handling and more so let's first establish what Express is so Express is a minimal and flexible noj s web framework that provides a robust set of features for web and mobile applications and it's used for both server side applications as well as apis and microservices I would say that it's most used for building backend apis that are consumed by front-end Frameworks and you've probably heard of the M Stack which is mongod DB Express react node.js there's also the mean stack the mevan stack where you can swap out uh react for angular or view or really any front-end technology that you want even just vanilla JavaScript so it's a very popular framework in fact I would say it's the framework for node.js there are others I'd say there's even Frameworks that are more powerful but Express has really established itself as the go-to framework for node.js and it's used by huge companies like IBM Uber Nike and a bunch of others it's also a really popular option for smaller projects and start UPS so Express simplifies the process of handling HTTP requests if you watch my node.js crash course we started to build an API from scratch just using the HTTP module and you saw how difficult and and how lowlevel it was well Express gives us a ton of tools to work with to make building apis and just working with HTTP much easier and express is a very fast and unopinionated framework which I just want to spend a couple minutes on so when it comes to web Frameworks you have two types you have opinionated and unopinionated and opinionated framework is one that has a lot of rules and conventions that you need to follow so there's there's basically recommended ways of doing things and it's very structured it's it's going to guide you in in a certain direction they also come with or they usually come with a lot of bells and whistles out of the box things like authentication CIS uh database ORS and some examples of opinionated Frameworks are Ruby on Rails jeno laravel uh if we're talking about node.js in particular nestjs and Adonis are opinionated Frameworks for node and I would say in general opinionated Frameworks are more popular I think node and express is is really the only exception I can think of where the most popular framework is a minimalistic unopinionated one so opinionated Frameworks are extremely flexible and there's not really a right way to do things you can structure your application however you want and use whatever libraries you want you can use whatever database you want it's very minimalistic and it's up to you to to decide how you want to structure your application there's not as many rules to follow but you also don't get as many uh as many features or bells and whistles out of the box but you do get the necessities and of course you can install other packages for the functionality that you need so there's definitely uh pros and cons to both I would say it's really features versus Freedom depends on one what means more to you for that project so there's a few things that you should know before you jump into Express you should have a good understanding of JavaScript obviously all the fundamentals as well as all the the es6 features Arrow functions destructuring promises a syn await um you should have a basic understanding of node.js you don't have to know a lot in fact I would say watching my 2-hour crash course is plenty before you jump into Express you should know how to use npm how to install packages and in many cases you'll be working with Json data but you can also use a template engine like ejs or pug and I'm going to actually give you an example of that later on um but yeah you can build both server side applications as well as Json apis microservices Etc and if you're learning let's say the M Stack it doesn't really matter which order you learn the Technologies if you want to learn react and you want to learn the front end first that's fine or you could do nod and express first and then learn react what's really important is that you you know JavaScript before you jump to either one of those front or back end now as far as what we're going to do here obviously we're going to set up a server we're going to look at routing how to handle requests we're going to look at the request and response cycle and the request response objects to see how we can get things like the response body how we can get the headers um things like that we're going to look at custom middleware so middleware functions basically sit in between the request and response and you can do all sorts of things we'll create some custom logging middleware we're going to look at crud operations so create read update and delete we're basically going to create a full crud API uh at the end we'll look at template engines we're going to use the ejs which is embedded JavaScript um cuz you can render HTML Pages directly from your server as well it doesn't have to be Json data we're going to look at error handling creating custom error handling middleware thirdparty npm packages controllers so I'm going to show you how we can actually clean up our code and and take take our code out of the route file and put it into a file that has a bunch of controller methods fetching data from the front end so I'll give you an example of how we can create a static file server and we can basically have frontend JavaScript that will make a request and fetch data from our Express API and we'll look at environment variables we look at a lot more too but these are the the the core things that I want to go over all right so that's it for slides let's jump in and get started okay so this is Express js. this is where you can find the documentation there's some guides here on routing and middleware and you can use this as kind of a supplement to this crash course so to install Express just like any other package you can just install it with npm so we'll get to that but we're going to jump into vs code or open whatever text editor you use and go into some empty folder where you want to create this project now this isn't uh um an actual project that we're going to be working on um like I do in many of my videos we're just going to kind of explore uh we will be building a crud API it'll be ad Json API that will create read up update and delete posts but we're also going to look at loading HTML files we're going to look at using template engines creating middleware error handling uh all kinds of stuff all right so just open up a folder and in our terminal since this is a nodejs project and obviously you have to have node installed if you don't just go to nodejs.org so the first thing you're going to want to do is create a package.json file and I'm not going to explain every single little detail like what a package.json file file is because you should know that if you don't just go ahead and watch the node crash course so we're going to run npm in knit and I'm just going to do dashy so we don't have to go through the questions and that will create the package.json file with all the defaults okay now to install Express as you saw on the homepage we can simply run npm install or I and then Express okay and that will get added as a dependency as you can see right here it also creates the node modules folder now at this point I usually like to create a dog ignore file and what that'll do is it'll whatever you put in here it will not be pushed to your git repository and you never want to push your node modules folder so you pretty much always want to create this and I'm also going to putv in here just in case we have an environment uhv file usually you don't want to push that either because that's usually where you have things like API Keys things you don't want to share all right so let's create an entry point and I'm going to call it server.js and typically the convention I like to use is if I'm creating an API or like a M Stack application where I'm serving Json data I'll call it server.js the entry point if I'm building a node app that uses a template engine like ejs then I'll call it appjs that's just kind of what I like to do but obviously you can create you can call it whatever you want so let's go ahead and bring in Express and I'm using the commonjs syntax which is like the the native node module syntax later on I'll show you how you can switch it up if you want to use uh es modules and you want to use the import syntax but for now we'll just go ahead and use the require and we're going to require Express and then we want to initialize Express into a variable called app and then app variable or this object this is basically what we use for everything to create routes to use middleware to start the server and listen on a port which is what I'm going to do right now we're going to call the listen method and that takes in a port number usually I'll use 5,000 for backend stuff however that's being used on this machine so I'm going to use 8,000 and then there's an optional function call back you can pass in actually we don't even need curly braces and we're just going to do a console log to just say that the server is running so we'll say server is running on Port 8,000 and those three lines will actually allow you to run a server so if I come down here and I run node and then the name of the file either server.js or just server there we go so now it's running it's not doing anything there's no routes so there's there's not really any requests we can send for it to do anything but it is running so I'm going to stop that now with roller command C and the next thing we'll do is just add a very very simple route and we can do that with the app object and then depending on what type of method you want to handle if it's a get request or post request you use that method in this case uh we'll use a get method so this is going to say respond to a get request to slash just the root URL or endpoint and then that takes in a second argument of a function and that function takes in a request and response object and those objects just have a ton of stuff on them so whatever you want to get from the headers the body or query strings from the URL that's all in the request object the response object has a bunch of methods we can use so let's use the send method and we'll just send some text so we'll say hello world and then let's run the server and we'll go ahead and go to the browser go go to Local Host 8000 and we'll see Hello World and what's nice about this is we don't have to Define like the the content type we don't have to say HTML or text slpl text or text/html if I put an H1 in here like this and we do have to restart the server I'll show you how we can fix that but for now we do have to restart it you'll see now it's uh it's parsing the HTML we could even send Json data so I could do let's say message hello world and we can it's just a JavaScript object but it'll actually stringify it on its own we don't have to do it manually like we would have to with uh you know with the with nodejs and just the HTTP module like we did in the node.js course also this is only pertaining to the root route if I go to slash about then that's not going to work if I make a post request to the root route it's not going to work it has to be a get request because that's what we defined so we don't have to manually check for that stuff like we would without using Express now having to restart the server every time we make a change is pretty annoying so there's a few things you can do what I've done up until recently is used a a thirdparty package called nodemon which is really easy to set up you just install it with npm but with recent versions of nodejs you can can actually use the watch Flags you don't have to use a third- party uh package so I'm going to show you how to do that in in the node.js crash course we did use nodemon so you can check that out if you want to you know if you do want to know how to do that but let's go ahead and stop this and uh I'm going to go into the package.json here and what we want to do is create a couple scripts and to create npm scripts we just go into this object I'm going to create two going to create one called start which is just going to start at normally just like we just did with the node and then the name of the file but then I'm going to also create a Dev script which watches it so that we don't have to keep restarting so we can just simply do node-- watch and then server or whatever you call the file so now if I save that and come down here and we run npm run Dev you'll see that now it's running on Port 8000 and it does say watch mode is an experimental feature and might change it any time but I'm pretty sure that it's not going to change so you should be able to to use that um but let's go ahead and try it out so I'm going to change this back to just a string of hello world and save and I didn't restart it myself it did it on its own and if I come back and reload now we just get the string okay so now we don't have to worry about restarting it now the next thing I want to do well let's just create another row just so you can see so we'll create one at slab and we'll just return say about okay so now if I come back here and I go to slash about get request then we see about in the browser now most of what we're going to be doing is dealing with Jason data but I do want to show you how you can serve HTML pages and there's a few ways to do that this first way I'm going to show you really isn't what you're going to do and that would be create a separate route for every single page you can you can do this in a much easier way by just creating a static server but I do want to show you this way just so you so you know how it works so this res uh this res object has a method called send file so I want to send an HTML file when we hit a route so I'm going to create a folder called public public and let's say this is where we want to have our HTML files so I'll create index.html we'll just go ahead and create a boiler plate here I'll just say welcome say welcome to the homepage and then I'm also going to create an about. HTML and we'll say welcome to the about page okay so we have these two HTML files now I'm going to go into this this uh root route and let's do a res. send file and this will take in an absolute path to whatever you want to load and there's a few ways we can do this I'm going to go ahead and bring in the path module so we'll say path I'm going to require and this is just a uh it's kind of like a utility to just help with file paths so so in this send file we can use this double uncore durame and that will basically give us the path to the current file that we're in or the current location that we're in I should say the directory and then from there we want to go to the public folder and then the index HTML that's the page that I want to load so we can actually wrap this in path. jooin which just allows you to join together folders and files so we'll say from the durame then we want to go into public then we want to go to index.html so that'll give us the absolute path to that to the index HTML file so I'm going to save that and actually you know what let's just copy this and we'll do the same with the about change this to about HTML and now if I reload the homepage here we get welcome to the homepage if I go to slab we get welcome to the about about page so that's one way to do it if you just want to load HTML files but you can imagine if you have a lot of files you're going to have to create a bunch of routes just to load a single page and that's kind of silly so what you can do is use the the express static middleware so to do that we're going to come right here and we just need to add a line so let's say setup we'll say setup static folder and basically we're going to declare one of our folders to be static meaning you can just go to the URL and it will just work and we're going to set public to be our static folder so to do that we can say app. use because this is middleware middleware is just a function that runs between the incoming request and the outgoing response and we want to pass in here express. static just like that now this takes in the location of what you where you want your static folder which in our case is public so we can again use path. jooin and same thing we'll just do double uncore durame and then uh we want to go to public okay so if I do that and then I just get rid of these two routes completely and we come back to the homepage and reload it still works now if I go to slab even though I have that about. HTML it's not going to work because I actually have to specify the HTML if I do that it does work so now anytime I wanted to create an HTML like let's say I want contact uh. HTML all I have to do is create it in this folder and it will automatically work I don't have to create a separate route for it so that's how you create a static server with no. JS now I want to move on to working with Json data because the chances are that's what you're Learning Express for and and again I'll get into template engines as well which allows you to load HTML pages but also use Dynamic data you can pass data into the route and into the page but uh let's go ahead and um we'll just leave this the static here well no let's comment it out for now because we're going to use it later because I do want to show you how we can interact with our Json data with uh through these HTML files but for now we'll just comment that out and let's create a new row we'll say app.get and let's say I want this to be SL API that's a common uh convention is just to to have if it's adjacent API prefix all your endpoints with API so we'll say API slash and let's do post and then we have our request response our function and usually you're going to be dealing with a database but let's let's just go ahead and hardcode some posts here so we'll say cons post actually I'm going to use let and you'll see why later but we're going to use let and let's set an array and all I'm going to have is an ID and a title I'm not going to get crazy here so we'll say id1 title oops we don't want quotes around that title we'll say post one what I got two colons there so post one and then we'll just copy that down a couple times post two three change this up 2 three all right so let's just pretend that this this isn't a database so we want to serve these posts through this endpoint so let's do res. now we can do res. send and like I showed you before you can pass Jason in there or you can pass a JavaScript object and it will get pared as or stringified as Json but there's also o a specific Json method and that's what I prefer to use so we're going to do res. Json and then simply pass post which is just a JavaScript array of objects but if we go to back to Chrome now and we go back to let's go to SL API slost now we get our Json post okay and you could you could hit this endpoint from your react application or view or your mobile app whatever it is you're using you could hit that endpoint and get this data dealing with adjacent API the browser isn't the best tool to use because you want to you want to be able to test post and put and deletes so there's a ton of tools that you can use to do that Postman is what I prefer and there's a desktop version there's also a vs code extension which I have installed so that's what I'm going to use if you want to use that as well just search for Postman under extensions so this right here you can install it you do have to create an account but it's free so you can just install it and then you'll have this little icon here and then you can simply open up the new HTTP request and then you can choose whatever method you want let's say get request to this right here Local Host 8000 API posts send it and you can see we get our Json data in the body here we can also see the headers here so we have like X powered by Express we have the content type which is automatically application Json content length Etc all right so this is what I'm going to use from now on and we don't I don't even have to leave vs code to to make my requests now before we move on to to other routes and all that I just want to talk about environment variables so basically you have variables on your system that you can use uh called environment variables and you can also create them in a file called EnV now prior to uh I think it was I don't know a couple versions of node.js a couple versions ago you had to use a third-party package called EnV but now you can actually use envir an EnV file without using that package so I'm going to show you how to do that real quick so let's create a file called EnV and usually if you have like if you have like a Google API key or something like that you'll put that in this file so you don't want to push this to to GitHub or anywhere else so that's why usually you want to put this in your G ignore file now I don't have any API keys or anything so all we're going to put in here is the port number and I'm going to put that to just for now I'll put it to 8080 just so we can we don't need a semicolon just so we can make sure that this this is being used and then in server.js what I'm going to do is come up here I usually like to put this at the top and we'll create a VAR aable called port and I'm going to set that to process. EnV Dot and then Port because that's the name of the environment variable okay now you should also have a fallback just in case that doesn't exist so we'll say or 8,000 and then down here where we're connecting to 8,000 here and here I'm going to change that to well here we need to use a we need to use this syntax because it's a variable okay so now we're using that Port variable so this is going to look in the EnV now it's not going to work by default in fact if I restart the server you'll see it's not using 8080 as we have in the EnV it's using 8,000 it's using the fallback the reason for that is because you have to actually you have to explicitly describe the EnV file in your package.json so right here where we're running the dev script we're going to add- dv- file equals Dov like that okay so now I'll save and let's now restart the server and now you'll see it's running on 880 okay so that's how you can use a EnV file without having to use the EnV package now I'm going to change that this to 8,000 I just wanted to show you that it was working so I'm going to change that restart and now it's back to 8,000 now what if we want to get a single post let's create a route for that actually I'm going to put a comment here so this is to get all post and then what we'll do is just grab that and I'm going to show you later on how we can create a separate file for routes but for now we'll just put it in here so this will get a single post and we want to be able to put API slost slash and then when whenever the ID if it's post with an ID of one then we want to be able to get it by passing in a one so since this is dynamic this param here we have to prefix it with a colon and then whatever we want to call the param in this case we want to call it ID you might have like a if it's a a blog post you might have maybe a slug or something like that but we're just going to stick with an ID now how do we get whatever is passed here in our function here well we do that let's console log we do that with the request object and on that there's a pams object let's just go ahead and console log that so I'll make the request to API post SL1 and when I send it you'll see that now we have an object with an ID of one and notice that it is a string by default okay so that's how we can get it we can do request. prams and then doid or if this was slug we could do prams do slug plug so let's make it so we get that particular post so what I'll do is first of all just create a variable call ID and I want a parse int so I want this to go from a string to a number so we're going to pass that into parse int request. perams doid okay so now we have the the the ID now let's filter the post so we're going to respond with Jason and then we can use filter and I'm assuming that you guys know filter that you know all this this JavaScript stuff if not then you might want to just pause Learning Express and kind of get into just JavaScript a little more but filter will take in a function basically we're going to Loop through and for each post we want to say if that post the current iteration if that post ID is equal to the ID that's passed in right here here which is this variable now then that's what we want to show that's what we want to respond with so let's go ahead and save that let's come back here and send and now you can see we get just the I the post with the ID of one if I do two we get the post with the ID of two now if I do let's say 200 which we know doesn't exist right now it just gives me an empty array because it's filtering through and it doesn't doesn't find a post with that ID in reality you should probably have this return a 404 not found with an error message and we'll get to that we'll get to error handling but before we do that I want to talk about getting query strings so for instance if we were to go to API slost and then do question mark limit equals two maybe you want to limit the the amount of post that come back how do we get this value well we can still use the the request object right just like we did here but instead of request pams it would be request. query so this is the route we're looking at where we want to be able to get it so let's just do a console log of request. query okay and then we'll make that request again and now in the console you can see we have an object limit to and it is a string by default and if I were to add onto this an Amper and then maybe we want like sort equals DEC now you'll see that that is also added to that object so let's make the limit work we won't do the sort now but let's let's actually make that limit works so we'll come back in here now one thing you have to realize when you're dealing with with backend development is anytime a user can change the data right like in this case you have to just be aware of that and be aware of what you're doing with that data because it's possible someone could put like a a an SQL query in here and really screw things up that's called SQL injection um in this case obviously we're not even using a database but you just have to you just have to be aware of that okay and the type of data that you expect should be the only type of data that that can be accepted so in this case we want a number right in particular we want a number that is positive because it's a limit so let's first of all let's um let's say put this in a variable I do want to parse it as a number so let's say parse int and we can get it with request. query. limit okay so that'll give us the actual number and there's a ton of different ways you could handle this what I'm going to do is just check and I'm going to say if not Nan or is Nan is n n right which stands for not a number so is Nan is a a function that will return true if it's a number and false if it's not so we want to say if it's not is a number limit and then we also want to make sure that it's positive so we'll say and if that limit is greater than zero okay so if that if those conditions are true then we want to respond with Jason um except we want to only return the whatever the limit is so we'll say post so we have our post array and then I'm going to use the slice method and say I want to go from zero to whatever the limit is and then we can do an else and then move this into here because if there's no limit then we just want to return all the pose all right so let's let's try that out we'll save it and let's try it without any kind of limit so we still get all three but then let's do question mark limit equals 2 we get two if we do equals one we get one all right if we do 10 of it's just going to give us all of them all right cool so that's how you can deal with query strings now status codes are really important you should have a basic understanding of the the main status codes the the ranges like 200 means success um 300 you have redirects 400 you have client error 500 you have server errors so let's um let's be specific about the the actual statuses we're sending back when you just do res. Json it's it's going to default to 200 however I like to still specify 200 explicitly even though I don't have to I think it just makes it more readable so what we can do is do a res. status and you can pass in the status you want to send back so in this case I'm going to say 200 and then you can actually chain on the Json so we can do it like that and same thing here we'll say res. status and you can just send the status without any content uh without the Json but we do want to send the post back so we'll say 200 and then Json all right same thing down here so res. status 200 now let's make it so that when that post doesn't exist we get a 404 and a message so I'm actually going to just get rid of that whole thing there and we want to put the post in a variable because we want to be able to check for it and we can use find here so post. find and let's pass in here so for each post and we want where the post. ID is equal to ID and then we can check for that post or we'll say if not post so if the post doesn't exist then let's say res. status and this time we'll send a 404 and then you don't have to but I also would like to send a message so we'll say MSG and we'll actually let's use back ticks here and we'll say uh we'll say a post with the ID of ID was not found okay and then we'll say else so if it is then we'll say res. status and we want to send a 200 and then as far as the data we send back that's going to be the post all right make sure this is singular post not posts so let's try that out so if we go to API slost SL1 we get post one go to slash two we get post two if I go to post sl200 then you see over here I get a a 404 not found for the status and we get this message a post with the ID of 200 was not found all right so that's how you can send different statuses um and you always want to make sure that you have a proper response if what you're looking for is not there now just to kind of clean this up a little I don't really like to have the else's here so typically what I'll do we'll start with this where we're checking to we're making sure that the limit um seeing if the limits there since we have two res. statuses we can do this and just have an if else but what I'll usually do is not have the else so we'll go like that but if we do it this way then the first one here we want to return so that should work the same way so let's try it out if we go to SL poost okay so that still works and then here instead of using the else so we'll get rid of this but this first first one even though it's within an if we still want to have a return like that I think I just think that cleans it up a little bit all right so now we know how to create routes we know how to get route pams we know how to get query pams we know how to send different statuses now let's move the routes to a separate file because you can only imagine if you have a bunch of resources like post users categories and then you have a bunch of routes for each resource this file can get filled up pretty quickly so you're usually going to have a separate file for your different resource routes so let's create a folder in the root and we'll call it routes and let's create a file called posts. uh post.jpg we're going to be using the express router so first off let's bring in Express and then let's we're going to be using the router so we can do that by defining a router variable and then setting that to Express dot and then capital r router like that all right so the way that this works we can actually just copy or not copy but cut the two routes that we have here okay so I'm just going to cut them out of that file we're going to bring the post into the routes file as well but let's paste those in and let's also cut this okay so we'll cut that so we're really cleaning up the server JS and we'll put that here all right now instead of using app because obviously we don't have access to app anymore that's being defined in the server JS we're now going to use the router so here let's replace that with router and replace this one with router so now anytime we create new routes we're going to be using the router instead and then very important you have to export that at the bottom here so we want to export as default router now we need to bring that in that router routes file into the server JS so up at the top here let's say const post and set that to require and we want to go into let's see do slash routes slost and then we're going to come down here let's say routes and what we do is we use app.use because this is in fact middleware so in the app.use we can pass in the endpoint that we want to use for that file which is going to be SL API SL poost and then as a second argument we pass in post now since we're defining API or SL API slost here in the actual route file we don't need to have API SL poost here again so instead we're going to get rid of this we still want the ID for this particular route so this would just be slon ID and then this would just be slash okay because if you were to leave this and that then it's going to be slash API poost twice obviously we don't want that so let's save and let's make sure that everything well looks like we're getting unexpected token export um oh we're still using commonjs modules which I should probably change up so with commonjs we would say module exports router okay so now let's try it out so API post that works API post one that works all right now I do want to switch it up to es modules I prefer that over the the commonjs require syntax so you don't have to do this if you if you want to stick with this with the you know the standard node.js module syntax you can but I like to to have the same syntax on the front and back end so I'm going to go into package.json and I'm going to set type to module instead of commonjs now we need to switch up let's go to server JS first we can replace this with import Express Express from Express and then for path I know we're not using path right now but we will so import path from path and let's see for we're going to import posts from do slash uh what is it yeah dot slash routes slash now when you're using this synta the es modules with no. JS you do have to do the JS if it's a file all right so we'll save that and then where else do we need to put this in the actual route file we're going to replace this okay and I think that's it let's see what's going on here ah the export so in this the post route file now we can change this module. exports to export default posts uh I'm sorry router all right so now everything should work let's try it out okay we can get that good so now we're using ES modules the next thing I want to do is show you how we can get data from the request body so let's let's make it so we can make an actual post request and submit a new post and I know we're not using a database but we'll just add it to to memory so I'm going to open up a new uh Postman tab so we'll say new request and I'm just going to move this over here okay and I want this to be a post request and it's going to be the same endpoint API poost but I want to be able to go to the body here and either send Rod Jason or use this www form URL encoded where we can just put like you know title I think title is the only field that we have for posts but this kind of replicates a form a web form so in order to get the the body data we actually need to add a couple lines of middleware we don't have to install anything you used to actually have to install a separate body parer package but now it's just included with Express so let's go right here and let's say body parser middleware and we're going to say app.use and pass in here express. Json like that so this line this will take care of being able to submit raw Json but again I also want to be able to use URL encoded data so we need to add one more line app.use and in here we're going to say Express . URL encoded and that just takes in an object and we're going to set extended to false so that will allow us to send the form data now let's create a new route so obviously that's going to be in our routes post JS file so we'll go right here let's say create new post and we're using the router now since this is going to be a post request instead of router. get we use router. poost and again the the end point is still going to be API SL poost so here we just need to put a slash because remember we already have this defined right here so now create a new post and we'll have our function with recres okay and then to get the the body data let's just do a console log here I'm going to do request. body and if you if you took the node.js course crash course you remember we did do this but it's it was a lot more difficult you actually got a buffer and then had to turn it into a string um it's it's much more complicated Express makes it really easy and then for the response we'll just say res. status now a 201 means successful and it means something was created and then let's also add post I know we're not actually creating a new post yet but that's the the response we're going to want so if we go to make a post request to API poost right if I just send it as is then we're getting all the posts and we just have an empty object but let's go to this form URL encoded and let's add title we'll say my title is the value and send and now you can see we get this object of we have title and my title so we can access this value right here with rec. body. tile so let's go back into here and if you want to pause the video and and try this yourself basically you're just pushing it onto an array there's no omm or anything with with a database um if you want to pause it and try it you can but I'm going to go ahead and just create a variable called new post and there's so many ways to do the same thing that's like I said earlier about Express it's very unopinionated so you can do things how you want so I'm going to create an object and let's say ID and I'm going to just keep it very simple and take the length of the post and then just add one to it for the ID okay so we're keeping it simple in reality you'd be adding it to a database and most of the time the database is going to give you the ID um automatically and then for the title this is where we can access request. body remember it's that object which will have the title on it all right and then let's say if there's not if that new post doesn't have a title then let's return a 400 because that means it's a client error so it's something the the person making the request did did something wrong so we're going to say return res. status 400 and then we'll add on uh message so here we'll say message and we'll say please include a title okay um else so basically if there is a title title then we just want to add it to the array so let's say post. push and pass in here our new post and we're still sending this back so let's go back to postman and I'm just going to change my title to uh yeah I guess we'll just say Brad's post and I'm going to send and what I get back is my post and you can see that there's a new one here with an ID of four with the title of Brad's post now obviously that's not going to persist if I restart the server it's going to just go away because it's not being put in a database but it gives you an idea of how this would work also in reality you'd have your your form whether it's just regular HTML CSS JavaScript or if you're using react view spelt something like that now I think it's it it's only natural that we finish this as a a crud API and do a put which is an update and also a delete request so let's go under where we did the post and Let's do let's say update yeah we'll do update post and we'll take our router and put is normally what we use for updating you can also use patch I prefer a put though and when we update a post obviously we need to know which one we're updating so it's going to be API slost slash and then whatever the ID is and then we'll have our function with our request response and we want the ID so remember we can get that I'm going to par it I'm going to parse int and we can get that with request. prams doid so that'll give us the ID then let's get the post so we'll get that with find so we'll take the post array and find and then for each post we want to uh we want to get where the post ID is equal to the ID in the URL then we'll check for the post so we'll say if not post then let's return re and we're going to do a status of 404 not found and we'll just P put a message in here and actually let's use back ticks and we'll say no what do we what do we do up here um yeah we can just copy this all right and then to do the update I'm just going to Simply take the title so post title and I'm going to set it to request. body. booty request. body. tile and then we'll do a res status of 200 and we'll send back the post and that will include the updated post so let's try that out so let's say we want to update slash we'll do two and I want the title we'll say updated post and then we send that and what we get back well we're getting a 404 oh that's because I'm making a post request this should be put so now you can see id2 the post with the id2 has a title of updated post so that takes care of the put request now let's do the delete so under that we'll say delete post so router actually you know what we could just copy what we just did delete post and this is going to be a delete request same thing it's going to we need the ID so we're going to keep that we're going to um par it as an INT and then we're going to find the post we're going to check for it and then uh let's see all we're going to do get rid of that all I'm going to do is basically overwrite the post that's why I used let when I Define the array so we'll say post then equals post. filter and let's pass in our function for each post and uh we want to say where the post ID is not equal to ID so that'll return all the posts except for the one with that ID and then say that we can leave this because we want to just send back all the posts with the one that's deleted should be gone so let's I guess we could just use this so let's do delete and we'll do Post slash1 send and now you can see the ID with one is gone so we now have a full fraud API create read update and delete now again obviously in the real world instead of doing this kind of stuff you would be working with a database and you'd use some kind of om for instance if you're using mongodb as your database there's an OM called Mongoose and it has methods like find um delete things like that and you would be finding and deleting from the database rather than from just a hard-coded array like we're doing here here in fact the code would you have less code because we have to write more JavaScript to deal with this hardcoded array than we would to just uh to use a few methods with  and if you're using a SQL database SQ eyes is a really popular orm for node.js so that takes care of creating an API now what I want to do is talk a little bit about middleware so middleware functions are functions that have access to this request and response object and they can do anything I mean you can use it for logging you can use it for authentication you can add to the request object here for example a lot of the authentication middlewares will allow you to add like a rec. user and then in your row you have access to the currently logged in user now I'm just going to do something simple we're going to create some logger middleware that will show the method and the end point in the console whenever a request is made and you can have middle Weare run on either the route level so in any one of these routes or at the app level where it runs no matter what route is hit so let's start off by just creating uh a function uh we're not going to keep this here but I'm just going to put it here for now so we'll make this an arrow function now middleware functions take three things in the request and response remember I said they have access to those and then also next which is a a function that you're going to run at the end of your your middleware function because what that does is it calls the next piece of middleware in the stack so in this logger function let's do a console log and like I said we have access to everything that's on this request object including the method the protocol the just everything cookies if you have any so what I want to do is just log let's put some back ticks in and then I want to use a variable so I'm using the money sign the template literal syntax and let's get the method we'll put that first and then outside of that curly brace let's put the protocol so request. protocol which would be HTTP then we'll put colon SL slash and then we can get the host name with doget and then just pass in host okay and then after that curly brace let's put the the original URL property so request. original URL and then finally we need to call next which again we'll just call the next piece of middleware in the stack so as I said we can implement this on a route level or the app level so let's start with the route level let's say I want this logger to run only on this get all post route so for middleware to run we just have to add it as a second argument so I can simply pass in logger like that and now when I hit API slost you can see it's logging it's a get request Local Host 8000 API post if I go to API post SL1 then it doesn't run because it's only being passed into this one route now you might have middleware you want it to run on all routes on the app level so in that case we're not going to do this so we can get rid of that and we don't want this function in this file because we want to use it in our server JS so commonly what you'll do let's cut this commonly what you'll do is have a folder for your middleware and we'll create a new uh we'll create a new file here called um logger.log or you could call it like logger middleware and we'll paste that in and then we just want to export that as default okay then we'll bring it into our server JS so let's import logger that's going to be SL middleware SL logger JS and then all we have to do is is wrap it in app. use that's how we use middleware so I'll say logger middleware app.use and we're just going to pass in logger so now let's make a request so this is API post one and you can see now it's logging that if I do just API post still logging it if I go to the delete so any request I make now it's going to log it down in the console so that's how you can create and Implement middleware so now I want to look at error hand Ling now Express comes with a default error Handler if you make a request to something that doesn't exist like let's say we go API SL test you'll see this is the default error Handler it gives us a 404 but it actually gives us an HTML page and if you're building an API obviously that's not what you want so I want to show you how we can create a custom error Handler that will give us a Jason response along with the status code that we want so let's go to our routes and we'll start with the single post so basically wherever we're sending these 404s I want to instead of doing that here I want that to happen in the error Handler so let's actually uh I'm going to just all I'm going to do is copy this right here the message itself and then I'm going to get rid of this return that's inside here and I want to be able to go like this oh or yeah we want to be able to do new error this is what fires off the error Handler by saying new error and we're going to pass in a message like that okay now we do have to call the next function and next can get passed in as a third parameter up here so we're going to pass next into the actual route Handler and then underneath where we just said new error we're going to return next but we want to pass the error in there as well so let's do this error like that okay so in order for for this to work we have to create an error Handler which is going to be a piece of middleware so in middleware let's create a new file called error. JS and we're going to say const error Handler now just just like any other middleware this is going to take in request response and next however the very first thing it's going to take in is error and just by doing that just by passing this first error in it's going to run when we do this now as far as what I want to put in here for now let's just do a res. status and we'll just do 404 and then Json and for now I'll just do a hardcoded message so we'll say MSG and I'll just say error and we just want to make sure we export as [Music] default now to use this just like any other middleware we need to wrap it in app.use so let's bring it into our server JS so import error Handler and we're going to do you put the app. below the routes here otherwise we could have some conflicts so say error Handler app. okay now it should work if we if we get that error right so if we if there's no post with the ID that we pass in then it this should run this should run so let's try it let's go to API slost sl100 and there we go so we get a 404 not found we get message error now obviously we want this to be more specific right so we're passing the message in right here so we can access that through this object so right here let's say for the message instead of just uh Str ring of error let's say error do message so now we'll try that again and now we get the correct error message now at the moment it's it's always going to be a 404 right and I don't want that what I want to do is check to see if we if we set a status in the route if we didn't then I want it to be a 500 by default which is a server error so what I'm going to do is say if let's say if the error. status then we'll say res. status set it to whatever that error status is and then Json and in there we're going to do message and set it to error. message okay else if there is no if there is no status defined then let's make it a 500 so I'll change this to a 500 all right so now let's try it again we'll try to get Post 100 now we can see we're getting the correct message but it's a 500 that's the default so all we have to do is when we Define this error here right before we return next we can just do error. status set that to 404 now hit send now it's a 404 okay so if it doesn't if it doesn't have an explicit uh status code then it's going to just be 500 now let's just use the error Handler in these the other routes where for instance uh where else did we use this like right here here so instead of returning the the res status Jason instead of doing it here we'll let the handler do it so I'm just going to copy these three lines and let's go let's see is there anything up here that we need no so create new post so where we check for the title let's replace this this with this except I want it to be a 400 and let's say please include a title so let's see if that works if we go and we try to make a post request to API post and we don't include a title oh next is not defined so in in your route we just want to make sure that we add next and just add it to all of them so here that's better practice anyways just to make sure we have that even if you're not going to use it there we go all right so we'll try that again send with no title and there we go so we get a 400 bad request and please include a title so now let's find where else we can use the error Handler so right here so a post with the ID so basically we can do the same thing so this right here and then same thing right here yeah I think that's it so we're just letting it go through the Handler rather than than doing it here all right now I want to have a a catch all for like I said if we go to like API test which doesn't exist it's not a post that doesn't exist it's an it's a URL it's an endpoint that doesn't exist it's still giving us that HTML page so to have kind of like a catchall we'll go underneath let's see we're going to go under these routes we can do it so let's say app.use and let's pass in so we're just creating another middleware function so we got wreck res next and let's say const error equals new error so same thing we did in the routes let's say not found and the status so we'll say error. status set it to 404 and then call next and pass in the error all right so if we do that now if I try to go to API test which is an uh an actual endpoint or Route 404 not found and we get message not found and we could clean this up a little instead of having it in here we could just create another file and we'll call it not found. JS and then we'll just take the function here cut that we say cons not found equals so we'll do that then we'll bring it in up here yeah we'll just do that and we can just move that down here I think that makes sense so now that should do the same thing if we go to API test good so the next thing that I want to do is show you an example of using uh another package and we're going to use a small Library called colors that allows us to basically just add colors to the console and we'll make our little logs here pop a little more by adding color to it so you can either stop the server for a minute or you can open up another terminal I'm just going to open up another one and I'm going to run npm install colors and if you go to package.json you should have colors as a dependency so we're going to be using this in the logger file let's just close up some of this stuff that we don't need and we're going to go to middleware logger JS and we want to bring in colors so import colors from colors and the way that we can use this I believe we can just I haven't used this in quite a while but I believe we can just go like this add an array and and then put like red I think that's me let's see just try that yeah see so now it's red and it doesn't it right now it doesn't matter which requests we make or anything like that it's just all going to be red but what I'd like to do is make it so if it's a if it's a get request will make it green if it's a post request will make it blue and so on and there's a lot of ways we could do that we could have a bunch of if else but I think to Define an object and Define a mapping of HTTP methods two colors would be the cleanest way to do this so let's go above the the console log and let's say const method colors and set that to an object and we'll say forget let's make that green for post blue for put we'll do yellow and then for delete we'll do red all right and then all we have to do is let's create a variable called color set that to our method colors and then the request. method because remember we have access to that or it'll just be white and then we can just replace this in this uh array here replace red with the color variable so now let's make a get request you can see that it's green if I make a post request blue put request I mean these are not found because it's API test but it doesn't matter it's still it's making the request so it's still going to log and then delete is red so it's just it it you can see how much Freedom you have with Express it's it's very minimalistic and you can use all types of libraries to to do what you want and and create any kind of middleware that you want you have total control over the whole request response cycle now the next thing I'd like to do is move all the functionality from the routes file I want to have controller methods I think that that's a cleaner way to do this rather than just having all the the logic inside the route file I just want the route file to to point the correct whatever that endpoint and Method point to a controller method rather than putting everything in here so this would go in its own function in the controller file so let's create a new folder called controllers and then inside controllers we'll have a file called post controller.js and then in here we're going to define a bunch of different functions I'm going to use Arrow functions so for instance we'll have get posts and we'll set that actually you know what we could do is just go to our uh routes post file and just grab this entire function right here and cut it so we'll cut that and then we'll set get post equal to that and what I'll usually do and if you've ever taken my node.js courses or mstat courses in my controller methods I like to have a description and a comment just saying what it does so this will get all post and then I also like to put the route so we'll say a route uh in this case would be a get request to SL API SL post and then I I would also put access but uh we don't have authentication so there's no reason to do that so next we'll have let's do description get single post and then route this would be slash API SL poost slash and then the ID space that out a little more all right and then we'll have get post and set that equal to and we'll grab this cut that paste that in all right I'm just going to copy this so the next one would be to create a post or create new post post and oh I forgot the method yeah so we want to do that and then post create post set that to this okay and I'm just going to copy this again so we get two more we get the update and the delete all right so const all right so let's grab this so that's the update and then we got the delete oops okay so these these methods have to be exported you could either do it at the bottom or you can just simply put export before each one which is I guess what I'm going to do okay so looks ort those now we want to import them into the routes file oh this to obviously we need access to the posts in the controller so that will go at the very top okay and then from here let's import from and then we're going to go let's see up one level into controllers and then post [Music] controller.js and then I'll we have to do is replace what we just cut out with the the name so get post this will be get post so you can see how much we're cleaning this up and let's see get poses oh I didn't bring them in so right here we need to bring in get all right so everything should still work the same so if I try to get post two okay that works if I try to get all posts if I try to get a post that doesn't exist okay error Handler is working good so I think that this is cleaner to have these these named functions here and then to have our routes that just point to those named functions and I just realized that I have create post here this should be delete post all right now what I want to do next is give you an example of how we can interact with our backend from the front end and we already have a public folder with some HTML files and I'm not going to this is going to be very like very simple I'm not going to create a UI with styled CSS or anything we'll just make it so we can have a button we click and it fetches data we'll also just have a simple form where we can add a add a new post add a title all right and we're going to do that that's why I kept this commented out because we're going to use this um this Express static middleware because I want to be able to use those HTML files now we're going to have an issue here and you'll see if I save this I get an error and if we look at this it says double undor dur name is not defined in es module scope the reason this isn't working this right here this this usually will you know get the C the current directory that you're in it doesn't work when you when you're using ES modules it's in the scope of the commonjs modules however there is a workaround so we're going to just uh just add a couple lines here to make this work so first thing I'm going to do up here I'm actually going to import a function from the URL from the URL package or the URL module which is is part of node.js so we're going to import from URL and the name of the function is file URL to path and then basically what we're going to do is create this our s because it's not available to us because well I mean if you're using commonjs it is available to you but if you're using this import syntax it's not so I'm going to go right here let's say get the directory get the directory name so first off we're going to create double uncore file name that doesn't exist either anymore but we can create it oursel by using the file URL to path and then passing in import. met. url and what this gives you is your file URL to the the current file we're in it'll give us like file it'll look like this right and then path to whatever file we're in um I don't want the file URL I want the just the path and that's what this does is it gets you just the path and we can do a console log here of file name and even though we have the error it should still show us above that um right here so see this users Brad traversy desktop so that's that's my path and this is the file or server JS um to get the path name or the D the directory name let's say cons Dore durame all we have to do is then use the path module and there's a durame method that we can use and then we can just pass in that double uncore file name so now everything works right we're not getting any more errors so now that that works we have our static folder and if I were to go to Local Host 8000 we should see the homepage right because I have that index HTML I also have that about page so if I go to slab HTM ml shows me the about page now this this index HTML this is where I want to have some frontend JavaScript to fetch the data from my back end and you'd probably be using something like react some kind of front-end framework or Library um we're not doing that we're just using vanilla JavaScript but the way that you would fetch data and stuff is going to be the same you're going to use the fetch API or something like axios so let's go to the public folder and then index HTML and I'm just going to change a couple things up here we'll say post again this isn't going to be like a nice looking UI or anything so H1 we'll say post I'm going to have a button and given an ID of get- post- BTN say get post and then let's have an out output ID and then we need a front-end JavaScript file so we'll have a script tag with a source let's say [Music] sljs main.js that'll be our front-end JavaScript so in public let's create a folder called JS and then create a file called main.js all right and then let's go ahead and I'm sure that you guys don't really need me to explain much here it's just frontend JavaScript we're going to use document. Query selector and I want to get that output ID element and let's also get the button so get- post- BTN and we'll call this uh button all right and then I'm going to have a function we'll make this an async cuz I'm going to be using a sync of weight so we'll make an a async function called show posts and let's just say get and show post all right so we'll say const res set that to await Fetch and we want to fetch from our API so HTTP and Local Host Port 8000 SL API slost same endpoint that we've been using in Postman and then we'll say if um so if not res. okay so something goes wrong and we can't fetch then let's just do throw new uh throw new error say failed to fetch failed to fetch posts okay then underneath that let's say cons post set that to await the res. Json and we're going to take the output dot enter HTML I'm going to set that to an empty string to begin with okay then we're going to Loop through the posts so we'll say post dot for each I mean there's a million ways to do this this is just a very quick way so let's say for each post then we're going to let's say post element uh we'll set that to document dot so I'm going to create an element for each post and that element will be a div okay then we'll take our post element d and let's add some text content and set that to the post. tile and then we're going to take the output and append child and we want to append that post element okay we should probably put this in a try catch so let's do that just take this okay and in the catch just do a console log and we'll say error fetching posts all right now we just need an event listener so let's say event listeners we'll have the button and let's listen for a click event and when we click that we're going to call show post all right so let's go to our homepage and now if I click get post there we go post one two and three right if I were to add a new post by making a a post request of a title let's say new post send okay and then I go back here there we go see our new post so now let's make it so we actually have a form here an input that we can add a new post so let's go back to the HTML and I mean I know that a lot of you guys probably already know this stuff but it's just for those of you that aren't really familiar with full stack development how we can interact with our API with our back end from the front end so I'm going to add just a very simple form so we'll put this let's see we'll just put this under the H1 say form no action but I am going to give it an ID of add post form and we'll give it a label let's say for title and I'm just going to put a line break I'm not using any CSS at all so we'll put an input let's let's give it an ID of title type is going to be text we'll give it a name of title and we'll put a line break here as well and then let's do a button give it a type of submit okay so we should now have a very ugly looking form and when we submit this obviously we want to make a post request and add some data add a post so let's go back to our main JS our frontend JavaScript and let's create a function so this will be also async function we'll call it add post and I'm going to pass in our event param we want to prevent the default Behavior so e. prevent default then for the form data I'm going to set that equal to new a new form data object and pass in this and then we can get the title with form data doget and title all right so that'll give us the title then for the request I'm going to put that in a try catch and let's say conr set that to a wait Fetch and we're going to make a request to http Local Host 8000 API poost now we want this to be a a a post request so we're going to pass in an options object as a second argument with a method of post and we're going to set headers and we want to set the content type I want to set that to application SL Json and the body so the data we're going to send we're going to wrap this in json.stringify and pass in an object with the title all right and then after that let's check to see if it's not okay so we'll say if not res. okay then throw we say Throw new error and fail to add post okay then here let's say const new post set that to await res. Json then I'm going to create post element document dot uh create element that's going to be a div okay then we're going to take that post element and we're going to add t text content which is going to be the new post. tile and then we just want to append that to the output so output pen child post element and then in the catch here let's just do a we'll do a console. error all right and then we just need another event listener that's going to be on the form which did I bring in I didn't bring that in so up here add post form form it's going to be a submit and it's going to call add post all right and actually we want to let's show the post after too so right at the end here we can just call show post this is just very very quick JavaScript that I just created um so this should work though so let's reload it let's go ahead and say Brad's post add post and there we go and I can you know keep adding them cool so just an example of frontend JavaScript working with our backend API so where we at now I think I think that I've covered everything I wanted to as far as you know building an API I I do want to get a little bit into template engines because you might want a build just a a server side app similar to like what you would do with PHP um and there's a bunch of template engines you can use ejs embedded JavaScript is my favorite um I think it's it's very similar to how PHP works as far as the tags go and all that and I I don't want to use it in this project so I think what I'll do is just create a whole new folder and and go from there so I'm going to stop this server and I'm going to close that up and then create something else so let's do this isn't going to be very long I'm not going to get too deep into it so let's create uh I'll make a directory call this Express 2 CD into Express 2 and open up vs code all right let's put this in here my little square okay so we're going to basically just start from scratch here but I'm going to go kind of quick so npm and nit and then we're going to create I'm going to call it app.js this time and let's install Express npm install Express now we're also using ejs so let's install that as well so Express and ejs those should get added as dependencies and then I'm just going to add a script start script here so this will be node not server node app and then let's do a Dev and this will be node d-at app and let's use es modules you don't have to but that's I just prefer it so we'll say not module type and module all right so we'll just create a basic server so we want to initialize Express and we want to listen I'm not going to bother with environment variables or anything like that just say server started all right [Music] so the way that we configure ejs is actually very simple so let's say config ejs so basically we just got to set the the view engine so we do that with app. set and we want to set view engine and then we also want to pass in ejs as a string then we also want to set the the folder that we want as our views folder so let's say app. set I think it's views by default so you might not need to add this but I do anyway so I want to set the view view folder to a folder called views all right and then let's see we'll create a route let's say app.get so app.get slash and request request response now since we we're using a template engine we have access to res. render so if I say res. render and I pass in here index it's going to look for an index page in My Views folder so let's create that let's say new folder views and inside that we're going to create index Dot and it's going to be ejs is the extension that we want to use and in here let's just create like a basic HTML I'll just say welcome H1 welcome all right now I'm going to run the server so npm runev so server started now let's go to the browser let's go to Local Host 8000 and we get welcome okay so it's using v um VJs it's using ejs now what's really cool about these template engines is not just that we can render HTML pages I showed you that in the very beginning but we can pass in Dynamic data right so if you have if you if you have like if you fetch data from a database you can pass it into the view now I'm not using a database but just to show you how to pass data we can just add an object as a second argument here and let's say we want to pass in title so we'll say title welcome and then let's say message and we'll say hello from ejs all right so I'm passing these these variables in title and message and then I can go into my my page that I'm rendering let's say for the title instead of welcome I want to show that variable and the Syntax for this is going to be an angle bracket and then percent sign and then equals and then whatever the variable and then close it with percent brackets so very similar to PHP and then let's say we're I have this H1 that's where I want to put the message so again I'll use my percent equals and then message and then percent angle bracket okay so now we'll check that out if I reload we get welcome in the in the tab here and that's coming from this right if I say my website so now my website in the title we got hello from ejs which is the message so you can pass this Dynamic data in you can also pass in arrays so let's say we want to pass in we'll say people make that an array John uh Jane and Jack all right so now I got these people and ultimately these would most likely come from a database and then let's say I want to put them in a UL so I'll use my ejs syntax and we can take that people variable which is an array and then do four each and say person and open curly brace and then we can close off this line and then down here we'll open up another one and that's where we'll have our closing curly brace in parentheses and then in the middle here we could put An Li and then we could output each person okay so let's try that reload and there we go so this is good if you have something if you have a a project where you don't really need uh a very Dynamic UI and you just want to fetch data show it stuff like that I mean ejs something like ejs could be a really good option you can also have partials so for instance if we want to have if we're going to have multiple pages and we want a header on every page obviously we don't want to put it you know put the header code the header HTML in every single view so we can create uh let's do a folder here called partials inside the views folder and we'll create header. ejs and let's just put a header with an H1 okay and then if I want to include that in my index file I can use an include so I'll go right here and the Syntax for this it's changed from from back in the day now you're going to do uh a hyphen like that and then you can do include and then the location which is going to be partial slash the location is going to be from from within the um the views folder there so ejs and then close that off so now you can see now we have the header showing all right and you can also have layouts obviously so you don't have to repeat yourself with all with this stuff but I'm not going to get too too much into this I just wanted to show you it is possible you don't always have to build apis um with Express but hopefully you guys learned a little something from this I know a lot of you probably already knew a lot of the stuff but even if you did hopefully you could pick one or two things up and for those of you that are new to express if you're overwhelmed don't worry about it things will will start to click as the more you work with it um but that's it guys thanks so much for watching and I'll see you next time"
kALOM4xfdnA,Alpine.js Crash Course #11 - Alpine Lifecycle,https://www.youtube.com/watch?v=kALOM4xfdnA,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,"In this Alpine.js tutorial series, you'll learn what Alpine is, and how we can use it to create dynamic, interactive and reactive user ...",2025-02-25T08:53:14Z,okay then my friends we have nearly reached the end of this course and I feel like we've covered quite a lot of ground but there's just a couple more things I want to show you before we finish and both of these things kind of relate to the life cycle of any Alpine component you make and by component I mean any room element that you add the X data directive to along with all of its children elements as well so to demonstrate these two things we're going to work not with the form that we made previously but with a different HTML template which I've already created here so we have a div tag with the X data directive already applied to it and notice the value of that is demo which is a reference to the Alpine data I've already set up and I'll show you that shortly anyway inside that div we've got two different sections the first section is just a placeholder for where we're going to dynamically output some fetched data shortly and the second section is an input field which later we'll use to update the page background color on the Fly also notice this x hyphen model directive which keeps in sync with a property called BG so both of these different sections are going to allow me to demonstrate different life cycle features of Alpine now in the Javascript file we already have the data object set up called demo and inside that we've got two properties defined posts which is an empty array and BG so then the first thing I'd like to show you is a life cycle hook called init which Alpine automatically fires when a component first gets initialized so think of this data with creating right here and the element It's associated with that div as a component two parts of a component and when the page loads in the browser Alpine initializes this component and it's at this point that it automatically fires the init function if we have it defined within this component data object all right so let's make that init function first of all by coming down here and calling it surprise surprise in it and that's important you must call this in it because that's the function Alpine looks for and then inside this function for now let's just log something to the console by saying console.log and then inside that we'll just say init all right and then in the browser I'm going to refresh and as soon as Alpine initializes this component we should see init over here in the console which is pretty much right away and we're do in it awesome so it's firing that function straight away okay so we know this init function runs right away when Alpine initializes the component but what use is it well we could use this function to fetch some data that we want to show on the page because that data is going to be fetched then right away as soon as the component initializes so let's do that I'm going to paste in a simple fetch right here using just a fetch API and all this does is grab some fake Json from the Json placeholder s in the form of post objects and then when we have that we update the post property on this Alpine component to be equal to that past Json data so now that post property would be an array of JavaScript objects where each one rep represents a single post right so Alpine fires this init function as soon as this component gets initialized and inside that we fch some data and update the post property with that data and therefore we could output those posts now in the template so let's go back to the HTML file and do this now the way we're going to get those posts on the page is by using a loop like we've seen previously and that way we can just Loop through the blogs property or the post property I think it's called which is an array remember and we're going to Output a little bit of template for each one so we can make the template tag first of all and then we are going to use the X for directive on it now as a value we can say Post in posts and we should also give this a key property and bind to it just in case these posts ever get reordered they won't do but it's good practice so for the value of that key we can use the ID property which comes along for the ride on each post object all right and then inside this template tag we can just output An Li tag for each post that we have and on that tag we're going to use the xen text directive to inject some text content which will just be the post title so just write post. title to Output that and this title property by the way is something Jason placeholder provides to us all right I've not made it up okay then so now when the page loads in the browser Alpine should trigger the fetch request by running the init function and when we get the data back we should see it then output on the page okay and there we go my friends now we can see these five post titles right here and if we refresh you're going to see that they come in pretty much immediately it just takes less than half a second to fetch those and output them to the screen okay then so the last thing I want to talk about is how we can watch properties and react by firing a function when they change for example we've got this BG property right here which is an empty string to begin with and current this is bound to the input field in the HTML because we use the X model directive to hook it up so whenever a user types into the input field it's going to update the BG property in real time now the idea behind this is that whenever a user types in a color like red or blue or even a hex code into the input field we're storing that color in the BG property right then I want to watch the BG property for whenever it changes and I want to run some code to update the background style of this page whenever it does so how do we do this well we can use a special watch function in Alpine to watch a property and react to it so we're going to set that Watcher up inside the init function so that we're watching the BG property from the get-go and we can do this by saying this Dot and then it's dollar sign watch and then we want to invoke this watch method now as a first argument to this method we say which property that we want to watch now in our case it's the BG property and there's a second AR we pass a function which runs every time this BG property value changes now as arguments to this callback function we automatically get access to the new property value which we just changed to and we're going to call that new BG and the previous property value which we changed from which I'm going to call Old BG now we don't actually need the previous value inside this function old BG but it's there if you did want it what I'd like to do then is update the background po style of the page when the value changes and to do that I can say document. body and then use the style property on that and the style I want to change is the background color okay and we want to set it equal to whatever the new BG value is which we have access to and this line of code is standard JavaScript stuff nothing to do with alpine we're just updating the background color of the body tag all right so now we've got a watcher set up to watch the BG property and whenever that property value changes after we type into the import it's going to find this function to try and update the background color to be whatever that value is so let's try it out all right so Moment of Truth what shall we change this to let's go for pink y that works awesome let's go for light blue cool that works and now let's do a hex code I'm going to say 47 89 F2 and yep that updates as well awesome okay then my friends so that is the end of the series then but there is still a lot more to Alpine that I've covered in these lessons this was more of an introduction course than a deep dive so definitely check out the docs to learn more about it now you've got the basics under your belt also I will be releasing courses in the near future like I mentioned at the start of this series which incorporate Alpine JS into those projects so if you like this one then definitely stay tuned for those [Music] [Music] [Music]
LRDPbj5NcYE,Alpine.js Crash Course #10 - Transitions,https://www.youtube.com/watch?v=LRDPbj5NcYE,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,"In this Alpine.js tutorial series, you'll learn what Alpine is, and how we can use it to create dynamic, interactive and reactive user ...",2025-02-24T13:41:34Z,okay then my friends in the last lesson we saw how to use the X show directive to conditionally show some content when a certain condition was true and we use that to display a model when the phone gets submitted without any errors but currently when it pops in it just appears from nowhere and it would be nice to animate or transition the model in instead and the effect I'd like to go for is where the overlay fades in first and then after that the model itself drops in from the top of the screen or something and we can do something add that pretty easily with the help of Alpine so there's two separate transitions we want to make the overlay first and then the model we're going to start with the overlay which we just want to fade in over maybe half a second or something and to do this we can just add the X hyen transition directive now if we leave it like this without any further customization then Alpine automatically applies a default transition style to the element to transition it in but you can also customize the transition by adding some modifiers to it for example if I want the transition to just be for the opacity which I do I could add a DOT and then opacity to this and then Alpine will only transition this in using the opacity from 0o to one you could also use scale instead of opacity if you wanted and transition the scale but I would to make the overlay fading so I'm using opacity I can also tack on the duration modifier after this to specify how long I want this transition to take by saying dot dur duration and then another dot followed by how many milliseconds I want the duration to be for example 500 milliseconds and now with all this when the overlay gets shown it's going to get transitioned into the page using just the opacity over 500 milliseconds so let's try this out and see all right so let's watch this carefully when I click on submit hopefully you'll see the opacity fading the background in fact it's going to fade in the whole thing because currently everything is going to have this transition because it's the parent element that we've used this transition on so it's going to be very subtle because it's only half a second we're doing this over but just watch it fades in now instead of just popping in you see that that was a little bit nicer right okay so that's the overlay sorted but I also want to transition in the model separately so that it drops down from the top of the page off screen somewhere after the overlay has already faded in now currently because the modal div is nested within the overlay div and it's a child of that element the opacity transition applies to all of this as well the whole template inside the model fades in together and if you want to apply a different transition to any of these child elements you need to do two things first you need to add the X hyphen show directive to the elements you want to have a different transition and it's going to have the same condition as the overlay div which is if the success value is true and we have to do this so that this element gets shown and hidden independently from its parent element so that we can transition it in independently as well so next we need to add the transition directive however this time we want the transition to be a bit different we want it to drop in from the top of the page and out of the box Alpine doesn't provide that transition to us the way it does with the opacity it's a little bit more tailored for this application the transition that we want so what Alpine does instead is provide us with some specific transition directives that allow us to provide CSS classes or rules for the start and the end of the transition and then when the element gets shown it applies those custom CSS classes for the transition so the way we do this is by first of all adding the XY transition directive and then a colon and then we say enter hyphen start and we set it equal to something now this value should be a class name which contain CSS properties for the start point of the transition I'm going to supply a class name of offscreen for this part of the transition for the starting point then we add another xen transition directive but this time we follow it by a colon and then enter hyphen end and the value of this should be a class which contains CSS properties for the end state of the transition and now Alpine will dynamically switch between these classes as the element gets shown on the page so that we can transition between them so in order for this to work we need to make these custom classes in the CSS file which I I'm just going to paste in and you can see I've got the starting class of offscreen which translates the element in the y direction way off the screen so that's the starting point and for the end class I reduce the translation back to zero so it goes back to the original position I also added the transition property to the model class to specify the easing function and the duration as well as The Slight delay as well to make sure it drops in just after the overlay comes in and that's it this should all work now all right so Moment of Truth Let's cross our fingers I'm going to submit this we should see first of all the opacity of the background the overlay Fad in a little bit and then when that's nearly done we should see the model dropping from the top so let's give this a whirl yep and we see all that awesome so that's looking a lot better now now we have the transitions on the overlay and also the transition for the model itself to drop in from the top and that's how easy it is to do it with alpine
e0nbXQ6kfAk,Nuxt Router Middleware Tutorial #2 - Basic Inline Middleware Example,https://www.youtube.com/watch?v=e0nbXQ6kfAk,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,"In this Nuxt tutorial series, you'll learn how to use and run middleware between routes in Nuxt applications. Get access to ...",2024-08-07T11:57:58Z,okay then gang so in this lesson we're going to make our first middleware function and that middleware is going to run just before we enter the logout route so that we can log the user route by deleting the user cookie in the browser and then we'll probably also redirect the user back to the login page as well so then how do we do this well there's a few different ways that we can make and use middleware for routes in no but to begin with we're going to make the middleware direct directly within the page or route that we want to run it before which in our case is inside the logout page right and when we make the middleware directly within a page like this we call it inline middleware so we can make this middleware by coming to the setup script and we use a function provided by no called Define page meta and we invoke that function now as an argument we pass in an object which contains many different optional properties to configure this page one of those properties is the middleware property so let's add that on and then the value of the middleware property can be a function and this mid aware function will then be run anytime we navigate to this logout page and it runs before the page itself gets output to the browser so then inside this function we'll eventually delete the user cookie to mimic the user logging out of the application but before we do that we're going to accept a couple of different arguments into this function which noted automatically gives to us and these arguments are called to and from they're both objects and they provide context as to where a user is navigating from and to which route they're navigating to so what I'll do quickly is just log these two objects out to the console so that we can take a look at them when we go to the logout page all right then so I'm going to head to the logout page over here when I click this before the page actually renders we're going to run that where we just created now you won't notice any kind of delay because that function runs almost instantly so you will see the page straight away but we'll also hopefully see that log over here as well so let's go to log out and yeah we can see these two objects to and from so we can see this object two is saying that the full path of where we're going to is forward SL logout the hash if there is one hre then we have these other things down here we have the name of the route logout a path again any parameters in the routes any queries Etc and also this thing right here where we've been redirected from if we have been redirected so there's quite a bit of information about where we're going to and the same is true for where we've come from and this says that we're basically coming from the homepage which is called index okay so that's pretty cool we get access to that every time we use a bit of middleware in no so then we have a middleware function created and we've seen how we get access to these two arguments inside it now what I'd like to do is delete the user Cookie by setting its value back to null so I'm going to delete the console log right here and then we're going to access the user Cookie by saying const user and we're going to set that equal to use cookie and we invoke that and the cookie we want to access is the user cookie so pass user in as a string so now that we have that we can change the value of the Cookie by saying user. value and setting it equal to something else now we want to set it equal to which essentially removes the cookie and in the eyes of the demo application then it logs the user out or mimics that all right cool so let's try this out now all right so I'm back on the homepage and we've got Dev tools open so we can see any cookies and we can see we still have that user cookie over here so we're still logged in now if I go to the login page over here it's going to run that middleware it's going to hopefully delete that cookie for us and then in the eyes of this demo application kind of log us out so let's try this out go to log out and you might need to refresh over here to see this take effect but if we refresh now we can see that that cookie has gone and if we go back to the homepage we can see now in the index page we no longer output the user because it doesn't exist now I'm going to log in again this time as Peach and then any old password log in I'm going to refresh over here we can see we're logged in because we see Peach but if we refresh over here we see that user cookie again if we log out again and refresh now that user cookie has gone so this is all kind of working now so when we make a middleware function for a route it runs that function before outputting the page to the browser but then once the function's been run it continues to then render the page template and output it to the screen and this is normal behavior and what we typically expect but in this scenario it doesn't really make sense to render a simple page with a logout title once user logs out technically you could make a page with a custom logout message or something but I think for us a better approach is to redirect direct the user to the login page after they've logged out so to do this we can use a built-in Nook function called navigate to to say we want to navigate the user to the login route and we also have to return this function as well for this to work so then now we're saying once we delete this cookie navigate back to the login page and that way after this function runs the logout page never actually gets rendered because we redirect the user to the login page and we return that as well before it gets a chance to render the page so you can see I've already logged in as Bowser and we have the user cookie over here what I'm going to do is head to the logout page it's going to run the middleware log us out Delete the cookie but then also then navigate us to the login page so hopefully this all works go to log out and yeah now we see the login page and if we refresh over here we no longer see the user cookie so that's all working awesome okay then my friends so now we've seen how to make a middleware function let's try make picking another one this time on the index page so currently whether we're logged in or out we can view this index page if we're logged in and that user cookie exists then we also output the username if we're not logged in and the user Cookie doesn't exist then we don't output the username but we can still view the page now what I'd like to do is make some middleware so that when a user isn't logged in so when the user Cookie doesn't have a value we navigate the user away from this page to the login page so essentially we'll be using middleware to make some kind of Route guard so only authenticated users can view the page right okay then so let's give this a shot first we need to make the middleware function inside the page meta much like we did for the logout page so I'm actually just going to grab that code and paste it inside the index page so we can use it and then we just need to delete the body of the function so we can add some different logic right then so in here we need to access the user cookie so I'll say const authenticated is equal to use cookie and we want the user cookie and you don't have to call it authenticated by the way you can call it user or something else whatever you want but since I'm just using it to check whether a user is authenticated I'm calling it authenticated makes sense to me so then now I'll say if and then parentheses and then not authenticated do value and then I'm going to do something so I'm accessing the value for the cookie right here and I'm saying if this does not have a value then we'll run some code right and at this point we know that the user Cookie doesn't exist or it doesn't have a value and that means that the user isn't logged in and that means inside this if block we can return the navigate 2 function to navigate to the login route instead and when we do that we block the user from seeing this page it never gets rendered to the browser because the middleware function runs first and then we navigate the user away when they're not logged in so now we've implemented a simple kind of rout guard for this page and before we preview this I want to make one thing clear this is not a robust authentication system to protect your site data this is just some frontend logic to implement a user flow and a user experience based on the current authentication status if you're showing sensitive data on these pages that you want to protect you absolutely do need to protect that data from unauthenticated users on the back end as well okay all right so let's give this one more go I'm going to log in as Luigi this time any or password doesn't matter a log in and I can see the index page we can see we're logged in as Luigi I'm going to refresh over here to see that cookie as well now I can view any page while we're logged in right but if I log out now and refresh over here we see we no longer have that cookie I can still go to the admin page because we don't add that kind of rout guard middleware to the admin page where we do an authentication check however if I try going to the homepage where we do have that middleware we're going to see that because we're no longer logged in we don't have that user cookie we get redirected to the login page so let's check this out home and yeah now we see the login page so this is working I can log in again and I can see that index page because we pass the authentication check we can see the user cookie over here so we can see this page but now everything's working awesome all right so there's two basic examples of how we can use middleware inline middleware directly inside the pages in the next lesson we're going to take a look at named middleware
3slYTHP6c-8,HTMX Tutorial for Beginners #11 - PUT Requests,https://www.youtube.com/watch?v=3slYTHP6c-8,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,"In this HTMX tutorial series for beginners, you'll learn what HTMX is, and how to make dynamic web applications with it. Get ...",2024-07-15T07:44:32Z,okay then gangs so now we can click on individual books to edit them whereby we swap the book content for an edit form and then we can go ahead and change these values but when we click on confirm well nothing happens right so the next thing we need to do is trigger a put request which is to update an item when we submit this form when we click on confirm now that put request is then going to be handled on the back end by updating the book in the data array and then sending back the original book template with that new book data to replace this form again so let's give this a try so first of all let's make the put request from the form by using this HX put attribute on the form tag and remember the default trigger on a form is the submit event now the path for this put request is going to be forward slash books and then forward slash then the idea of the book we're editing um we can access that because we have the book as an argument so we'll come back to this later and we're going to add a target for this when we get a response and also a swap strategy when we get that HTML back right but for now what we're going to do is flesh out the Handler function for this route in the app.js file so I'm going to create this just below this delete request and above the other get requests because when we're dealing with book resources I kind of want to keep them all together so we're going to say app and then this is going to be to respond to a put request so app. put the rout path is going to be SL books SL and colon ID to denote a route parameter for the ID then we need a function to handle this request which also takes in the request and response arguments okay so now inside this put request we first of all want to get the ID and also the title and the author from the field uh from the input Fields so if we go to the edit form we can see we have these names title and author and whenever we send a put request or a post request from a form it attaches these values to the request body so we can access those values in the inputs so we can grab them right here by using a bit of destructuring and saying const and then title and author which is the name of those fields and setting this equal to request. body we did something really similar for the Post request up here we grabbed the title and author from the request body okay so we have those things we also need the ID and that comes from the route parameters so we can say const and then this is going to be the ID again destructuring is equal to request do params all right then so after we've done that we want to create an object that represents a book based on these things so I'm going to say const you can call it new book or updated book whatever you prefer call it new book probably should be called updated book to be honest but let's create an object where we have the title we also have the author and we also have the ID so they are the three Fields inside each book right so we're creating that object and we have that new book now what we want to do is not just add this book to the data to this array because then we're going to have the original version of this book that we're editing and the edited version of the book we want to replace the book we're editing right so let's first of all find the index of that book and we'll do that by saying const idx is equal to booksor data and then find index and this finds us the index of a book we've actually done this before right here so we're going to do exactly the same so I can just grab that and paste it in here so we're saying find us the index of the book where that book ID is equal to the idid that we have right here that we're making the request for all right so we have the index of the book and that is the book we want to update so now we can say booksor data and then pass in that index and we're going to set it equal to the new book so we're updating that book object in the array okay then so now we just need to send a response back to the browser but what do we want to send exactly well when we submit the form and up update the book we should send back the single book template for the book we've just updated and then that's going to replace the form so let's invoke the create book template and pass in that new book to send the template back now currently if we do this then what's going to happen to the HTML response in the browser well on the form if we take a look we've not specified a Target or a swap strategy so the default behavior is that the target is the current element the form that triggered the request and the inner HTML is the stuff that gets swapped by default now we don't want that instead we want to set the target to be the closest Li tag because we need to replace the whole Li tag that this form is in and for HX swap we need to say outer HTML so that the whole Li tag including the LI tag itself gets replaced and not just its inner content because when we respond with the book template the LI tag is included within that book template all right all right so hopefully now all of this should work okay so moment of truth let's click on one of these we see the form let's just add any old junk on the end of it I'm going to confirm this hopefully we'll see the original book template but with these new values which we do awesome let's get rid of those again because don't want that junk on the end of it Brandon Sanderson confirm yep all working
uPXn9S31o7Q,Solid JS Tutorial #1 - What is Solid?,https://www.youtube.com/watch?v=uPXn9S31o7Q,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,"In this Solid JS tutorial series you'll learn what Solid is, and how we can use it to make a fast & interactive web app. Get ...",2023-04-03T08:26:35Z,hey there gang and welcome to your very first solid.js tutorial [Music] okay then so first up let's talk about what solid JS is and the simple answer to that is that it's a front-end JavaScript framework for creating fast interactive data driven and reactive websites like a blog or a portfolio site or whatever else it might be and it's getting a lot of popularity within the dev community over the last year or so because it's really fast it's fun and it's intuitive to use now if you're familiar with other front-end Frameworks like react vue.js angular or svelte then you might be thinking what is the point in me learning yet another framework to do exactly the same thing and likewise if you've not got any experience at all with a front-end framework you might be thinking well why would I learn solid.js instead of learning something with a big ecosystem and a bigger community and support around it like react so I'm gonna attempt to answer both of those questions in this video and just before I do that I am trying to aim this series towards two kinds of people either people completely new to front-end Frameworks or people who are coming from another framework like react so I will be making comparisons with those other Frameworks along the way so then first of all what makes solid.js different from react and this question and answer is geared towards people coming from react so if you have no experience with react or other Frameworks don't worry if this doesn't make sense yet so the way that react Works under the hood is by using something called the virtual Dom and it uses the virtual Dom to keep track of changes that need to be made in the real Dom in the browser so react makes a virtual Dom for the application when it first renders and then every time we need to make a state change in a component react will rerun that entire component and all of its nested components to recreate an updated virtual Dom and then by comparing the new virtual Dom with the old virtual Dom it can see which real dumb nodes in the browser it then needs to update and it does that and this process of comparing vdom versions is called diffing so the byproduct of this approach is that every single time there's a state change in a component react reruns that entire component tree to make the updated virtual Dom even if that state change only affects one tiny tiny part of it in one place and when State changes happen frequently it means we're constantly running and rereading and component functions which isn't really optimal and it can sometimes lead to unexpected Behavior as well if you're not well versed in the underlying mechanism of how all of this process works now in contrast to that solid.js doesn't use a virtual Dom and our component functions are only ever ran once to compile our jsx templates and insert them into the Dom as well as set up any reactivity for future State changes and then solid.js just gets rid of the functions completely it doesn't need to rerun them whenever any component State changes or events occur and instead it essentially memorizes any locations in the Dom that it might need to update in the future when any component State changes so that it can surgically update those places when that happens and it does this using its own reactive system and the benefit of this approach is that we don't need to keep running component functions over and over which in turn leads to a better performance so that would be one of the main reasons you might want to learn it and on top of that making solid applications actually feels very similar lots of making react applications in the way that we make components that return a jsx template attach event listeners use props Etc so if you already know react learning solid will be really really easy and I think that you'll love it so it's not really like having to learn a completely new framework from scratch and that actually brings me to the second question if you're new to front-end Frameworks completely why learn solid instead of react which has a bigger ecosystem around it well ultimately that's a choice that you need to make and it depends on a lot of different things and to be honest you could learn either I'm not going to say one is better than the other but what I will say is that if you were to learn solid first then by the time that you're comfortable with it you'll find that learning react is going to be really really easy as well because again like I just said the developer experience in both react and solid is pretty similar and I think that we're going to find this more and more with any new Frameworks that come out in the future I feel like all new JavaScript Frameworks are now trying to provide a more unified developer experience whether someone uses solid or quick or whatever other framework is on the horizon because so many developers are used to making applications with react and they generally like making them that way so it seems like new Frameworks are trying to coalesce around making the coding experience quite similar to react in terms of component functions that return a jsx template using props and attaching event listeners all that kind of stuff but it's the underlying mechanisms and how the Frameworks work under the HUD that seem to be changing and evolving more over time and that's how I kind of see solid because on the surface well yeah it is quite similar to how we make react applications in the way we create components and build up a component tree to make an application but under the HUD it works in a completely different way there's more performant and in some places it just feels more intuitive as well so my friends in this series we're going to be building something like this using solid JS so it's a simple storefront application and you can see we've got a lot of products right here I can view those products I can add them to the cart let's add something else as well like this thing right here in fact We'll add that twice and then if we go to the cart we can see how many items are in the cart by the way up there if we click on this we can see all the items and then the total as well and where we have duplicates we see times two right here so this is what we're going to be building throughout this series and to do this we're going to be learning solid from the ground up we're going to be learning things like signals how to use the solid router we're also going to look at solid context as well now to follow along with the series you will need node.js installed on your computer so if you've not already got it installed head to node.js.org and download one of these versions then install it I am also assuming you have at least a basic understanding of JavaScript because we will be writing quite a lot of JavaScript in this course it's a JavaScript front-end framework after all now I've also created course files for every single lesson in this series the role upon this repost solid JS tutorial so this link is going to be down below the video and I've created code for each lesson so if you want to see the code for a specific lesson for example lesson 9 then click on the lesson 9 branch and then you can see all of the different files and code down here you can also download a zip folder of lesson 9 or whatever lesson you choose by going to the code button and then downloading a zip right here so there we go my friends that's your introduction to solid.js in the next lesson we're going to go ahead and create a brand new solid application by the way if you want to watch this entire course now without YouTube adverts you can do it's all up on the net ninja website netninja.dev you can buy the course for two dollars to get instant access to all of it or you can sign up to net Ninja Pro and get instant access to all of my courses without adverts as well as premium courses not found on YouTube including my udemy ones that's nine dollars a month and you can get your first month half price when you use this promo code right here so I'm going to leave this link Down Below in the video description for you to sign up and I really hope you enjoy this series and please do not forget to share subscribe and like the videos that really helps a lot and I'm going to see you in the very next lesson
Asw1BfUxj0g,Qwik Crash Course (first look) #11 - Fetching Data,https://www.youtube.com/watch?v=Asw1BfUxj0g,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,Get early access to this entire course now on Net Ninja Pro: https://netninja.dev/p/qwik-crash-course-first-look Access the ...,2023-03-24T10:30:48Z,all right then gang the next thing I want to talk about is how we can fetch data in a quick City app for example a list of blocks and there's a couple of ways we can approach this the first option is to fetch the data in the browser after we get the initial HTML page from the server and then once we get a response quick update the page to inject that data into it or we could fetch the data on the server and once the data response comes back quick renders the HTML on the server and it sends it to the browser and then the HTML already has the data injected into it and this second approach is what we're going to look at fetching data on the server so we want to fetch the data for the home page so that we can show maybe a list of blogs there and the data itself could come from a variety of sources it could be from a database or a third-party API or whatever else in our example we're just going to use a local Json file which I've already created inside a data folder up here so this Json has a property inside it called blogs which is an array of blog objects and each blog object has an ID property a title and a Content property now what I'm going to do is use a package called Json server to wrap an API endpoint around this Json file and that allows us to send a fetch request to that endpoint to get the Json data so it's like we're simulating a request of some kind of API endpoint right if you've not got Json server already installed on your computer you can install it by going to a new terminal and typing npm install then hyphen G so it installs globally on your computer and then Json hyphen server and press enter to install it now once you have done that we can then just type Json hyphen server then a space then hyphen W to watch a file and then the path to that file which in our case is going to be dot forward slash data to go into the data folder and then db.json so it's going to watch that file for us and now you can see that we have an endpoint to fetch that blog's data from cool so now let's look at how to do that for the home component okay so the first thing we need to do is make a function which can run on the server to fetch us this data we need to export this function otherwise it won't work and we also need to give it a specific name on get the reason it's called on get is because we're handling what will be a get request if we wanted to handle a post request then we'd use on post for the function name we're essentially just making an endpoint here on the server and it needs to know the type of that endpoint whether it be for a get post put or delete request and the function name tells it that anyway we need to declare also the type of this function as well which is a special type of function that quick uses called a request Handler so we need to import that type request Handler from Quick City as well and you might be noticing by the way that some imports come from Quick City and some just from quick and this is a bit like if you have a next JS app some imports come from next and some come from react in this case quick city is The Meta framework built on top of quick that helps us to do things like routing and server endpoints all right anyway we can also specify the return type after this as well in angle brackets now the return type is going to be an array of blog objects but we don't have anything in this file describing those blog objects so now let's make a new interface to describe those blog objects that we'll be getting back so inside this interface I want a property called ID which is going to be a string and then also we need a title which is a string and then finally the content which is a string that matches up to what we have inside the Json file all right so that's the type and we can pass it through right here blog data but then it's an array of blog data so square brackets all right so we set that equal then to an asynchronous function and it's inside this function we go out and fetch the data itself so what I'm going to do is just log a message right here to say fetching the data just so that later on we can see that this runs on the server and not in the browser fetching the data okay now under this we can just do a fetch request so I'm going to say const response is equal to a weight and then it's Fetch and then the end point which is in the terminal this thing right here is sort of copy that and oops I've canceled that with that process so let me run it again but I think I did copy it paste in here yep okay so we have the response and from that we want the Json data so we'll say const data is equal to a weight response dot Json this is just standard fetch stuff okay so then finally we can return the data all right so that's the function created up here to actually go out and fetch the data on the server so we have the function ready now which is fetching the data on the server but how do we then use inside the component itself well we use a hawk called use endpoints and that needs to be imported from Quick City and this hook allows us to use the end point that we've defined up here to fetch the blocks it returns us a value as well which we're going to call blogs datum so we also need to specify the type of data that we're going to be getting back from the end point which is an array of blog data objects right so this use endpoint hook tells quick that we want to use an endpoint to fetch data on the server so it's going to fire that endpoint up here which will then fetch the data and return it to us now there is one thing to note this use endpoint hot can be triggered on either the server or on the client in the browser if we send a request in the browser to this website and land on this page initially right the component is first rendered on the server and the use endpoint Hook is fired then on the server but if we land on a different page initially when we first come to the website and then navigate on the front end to this page using some kind of Link then this use endpoint Hook is then going to fight in the browser now whether it fires in the browser on a server is of little consequence to us as a developer but it's worth knowing because it does affect how quickly the data can be used in the template so you can think of this returned blocks data value as a bit like a promise when the data has been fetched then it has a resolved State while it's being fetched it has a pending State and it can't be used in the template until we have that resolved state so the way we output this to the template is by using a component called resource now I'm going to use that resource component right here in the template which is self-clausing and it also needs to be imported from quick as well so this resource component has a few props that we need to add to it the first one is the value prop which is set to whatever resource value we want to Output in our case that's the blocks data that's returned from use endpoints the second one is an on pending prop which is a function that returns a template to render while the fetch is being made and it's in its pending state so in here we could just output a loading message inside a div or something and then a third one is an unresolved prop which fires a function once the fetch is fully resolved and we have the data and this function returns a template we can show when we have that data we also pass that data through as a prop into this function which we can call blocks so now we just need to return a template here for when we have the data and we want to Output it and remember if this index page was the first page we requested on the website from the server all of this happens on the server before it reaches the browser but if we navigated to this page from another one on the site then this stuff inside the component right here is executed in the browser but the on get function is always always fired on the server and just returns data to us anyway let's flesh out this template so then what I'm going to do first of all is a div inside here to surround all of the blogs and this is going to have a class of blogs as well so we can style this shortly then inside this div we want to Output a few things right now we need to cycle through the blogs remember this is an array of blog objects so we can cycle through something by saying blogs to make sure we have a value and double Ampersand logs dot map so if we get no blocks back we're never going to map through them okay so we're going to map through them and we're going to take each individual blog as we cycle through each one and return a template for each blog object so for each one we want a div and let's close that off first of all each div is then going to have a class in fact we don't need to give this a class but what we do need to give it is a key much like react and this value must be unique for each individual block now we do have an ID property on each one which is unique so we can say blog.id and then inside here we'll do an H3 for the title of the blog so blog dot title like so and then below that we'll do a paragraph tag and we're going to Output the content so blog dot content but we don't want to Output all of the content maybe just the first 50 characters so we can say dot slice and we'll say from 0 to 50. all right and then after that we want to add dot dot dot so it kind of implies that the blog continues now later on we're going to click on this blog to go to a Blog Details page but we'll leave it there for now now what I do also want to do is go to the global CSS down here so that we can add some styles for this so you can see right here the blocks and we're given the whole thing a margin at 40 pixels remember this is this div that surrounds all of the blocks we display it as grid and then this is the grid template column so there's going to be three columns of content we're going to have three blogs in a row basically and the gap between each column and row is 20 pixels okay now we're going to test this out in a second but first of all I'm getting an error over here in the index and I think that's coming from the Imports at the top yes it is okay so there's a few things here first of all these we don't need anymore that was from before when we were playing around with state so we can get rid of those and then we have this warning right here ah okay so this right here this is a type and this is a type but this isn't so I don't know what's going on here we need to say type right here and then remove use endpoint from this and then we just need to import use endpoint from Quick City itself so it looks like this use endpoint because this is a function whereas these are types so they need to be imported as a type and this is just a function okay so that's what it should be like now we can preview this in the browser so let's go to the home page over here and you can see now we get all of these blocks awesome and if we refresh the page you can see we're loading them straight away and that's all working so we're grabbing the data on the server and then returning that putting it in the template cycling through those blogs and we're outputting it in the browser right here
Kv_1Y9DEa-8,Qwik Crash Course (first look) #10 - Functions &amp; QRLs,https://www.youtube.com/watch?v=Kv_1Y9DEa-8,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,Get early access to this entire course now on Net Ninja Pro: https://netninja.dev/p/qwik-crash-course-first-look Access the ...,2023-03-23T09:51:57Z,okay then so in the last lesson we talked about passing props into other components like this here on the model components and you can pass any kind of primitive values or objects in as props but what if we need to pass a function as a prop for example I've got a function up here already created called closed modal and inside that function we just change the value of model visible to be false and when that becomes false it means the model isn't shown anymore because of the conditional rendering that we have down here it only shows when it's true so what if I wanted to call that function from inside the model component when a user clicks on the close button well that means that I'd have to pass that function down as a prop into the model component so it can be called from inside using the props so what I do is I would make a prop called close and I would set it equal to close modal the function that we created then we need to declare that function as a prop inside a model component so inside the interface we'll say close as a property and then the type of that should be a special typing quick called a prop function now that type needs to be imported into the file so that we can use it and the way we do that is by saying import type first of all and then inside curly braces crop function that's the type we're using and that comes from appbuilder.io dot quick okay so make sure you import that and after the prop function typing down here in the interface we need a function signature to declare what it's going to return which in our case is just going to be void since we don't return any value okay so far so good well now we need to call the close function when we click on this close div right here so let's attach a click event handler on click to call that function directly on the props object and this all seems logical so far right we're just passing a function as a prop into this component we're registering the type of that prop in the interface and then we call that function directly on the props down here when a user clicks on to close if the close button but now let's try this in a browser with the console open so that we can see any feedback and when you click on the open modal button you're going to see an error like this and this area is saying that only primitive and object values can be serialized as props and it's basically saying that the function we passed in as a prop cannot be serialized now remember the whole premise of quick apps is that it can serialize all the data it needs into the HTML and when it comes to props primitive values and objects are easily serialized but functions are not they cannot be serialized into the HTML so we need to take a slightly different approach when we pass functions into components as props so that they can be in some way serialized and the way we do that is by using something called qrls which is something unique to quick and they're basically just quick URLs which point to a chunk of code that can be lazy loaded like a function and since this URL is just going to be a string path to that location it can then be serialized unlike a function so what we need to do is turn our function into a URL which means that quick will put this function into its own chunk then and the qrl will be a path that points to that chunk of code and then since a qrl can be serialized because it's just a string path essentially we can pass that URL into the model as a prop so then how do we make a qrl from a function well it's pretty simple we just need to import a function from quick and that is just dollar sign now we'll invoke this function like this dollar sign and then just parentheses and as an argument we pass in something that we want to turn into a qrl now in our case that's going to be the function so all we need to do is wrap the function in this other function so dollar sign open parentheses and then at the very end close parentheses so now we're passing this function right here into this dollar sign function and this function this dollar sign function turns this function right here into a qrl which is just a string path pointing to this function so that when we use that function in the future it knows where to get it from and since this is now serializable we can pass it through as a prop down here so this is now going to work and we invoke it just the same way even though essentially now this is just a path it's a qrl when we invoke it it still does the same thing it downloads the code it needs that function in order to invoke it so now if we try this you'll notice first of all the error has gone away let's refresh open the model and now this works so it opens and we should be able to close it close voila it works so there we go we've now serialized this function or this qrl so it can be passed down as a prop so a good practice then whenever you have a function declared like this even if you might not be passing it as a prop into another component is to wrap it in the dollar sign function to make it a qrl because that URL can be serialized whereas the function cannot be and then whenever you want to invoke that function you can do so as normal and by the way you might be thinking why didn't we need to manually make a qrl for inline functions attached to event listeners like where we have an on-click event and the inline function that it fires and we didn't have to manually make a qrl for this because these inline event handlers quick does that automatically for but where you have a function not in line or used as a prop you do need to manually make that URL from it first of all okay
MPYNkau4Bgg,Nest.js Crash Course #4 - Providers,https://www.youtube.com/watch?v=MPYNkau4Bgg,Net Ninja,UCW5YeuERMmlnqo4oq8vwUpg,"In this series you'll learn how to make a ninja-themed API with Nest.js, which is a node.js framework for making server side ...",2023-02-09T09:35:56Z,in this video we're going to talk about providers in sjs in the last video we created a ninjas controller that defines our routes for our ninjas API however like I mentioned it's very lean it doesn't have much logic and when we really think about where should that logic live that's what providers or services are usually for providers are really just a class just like anything else in Nest but they specifically have an injectable decorator that means that this provider is something that can be injected into any class that depends on it now what does that even mean let's maybe write some code first that I think will help explain this concept better so we mentioned that our API is meant to manage an Army of Ninjas now that collection of ninjas probably lived somewhere right in a real application you might save it in a database in our case here we're just going to create a simple array so this array contains representations of our Ninjas for the controller you can probably assume that we have an ID and we said that they also have a name from the create route and then I also added a weapon property here just for fun right they might have uh ninja stars or nunchucks whatever and then let's provide a method that simply returns this collection and it allows us to optionally filter by the weapon now ultimately we want to use that method in our get ninjas controller right so instead of filtering by type here this probably should have been weapon so let's update that query and then instead of returning a mock array here we'll return the actual collection of ninjas but first how do we get that collection or the service in general into this controller so if you weren't already familiar with Nest yes you might imagine that oh this is a class that means that in order to get access to this method I probably need to instantiate an instance of this class so let's try that let's do con service equals new ninja service and then we'll return a service dot get ninjas pass in the optional weapon filter by the way notice that we have a type problem here because this is expecting a specific Union of strings so let's update this to be stars and nunchucks and now it's good so we should be able to go to our Local Host again and do request on get slash ninjas it's send there and we should get back our array of ninjas and we can go ahead and test our filter actually as do weapon equals Stars and that should limit it down to just the one ninja that has stars as the weapon now as you might imagine as we start moving you know the logic for the rest of these routes into our ninja service it might get kind of annoying to keep instantiating a new instance of the Ninja service across all of our routes you know it would be nice if that was just you know the instance was just created for us and injected into our Ninja's controller and that is actually what nestr can do for you so what we're going to do in our Ninja's controller is we're going to add a new Constructor here and let's do private read only ninja service we're going to provide this with the type of our service then we can actually comment this out and just replace this with this.ninja service and if you test that out it should work the exact same way so what's going on here basically what's happening is that because our service is a provider right it's an injectable it's got this decorator up here we're telling Nest that this is a class that hey you're in charge of instantiating this class and you can automatically inject it to anything that depends on it so we're saying that the ninjas controller depends on the ninja service and you can tell Nest that by simply providing it as a parameter to the Constructor and Nest will look at the type of this and automatically sort of instantiate for you behind the scenes right and similarly we never instantiate the Ninja's controller class right Nest is doing that for us so you can imagine that behind the scenes what Nest is doing is it's doing something like this you know it's doing something like that and then you see that our ninjas controller requires the ninja service right so it's also doing something like this behind the scenes instantiating that service and providing that service automatically into the controller and that's really what we're talking about in terms of injection right that's why the The Decorator for our provider here or service is called injectable because behind the scenes an sjs is automatically instantiating it for you and injecting it to your controllers and anything else that is depending on it and you know you can inject a provider into a service right you can use multiple services that inject other services controllers can inject multiple Services it's really up to what you're trying to build but understand that at a super high level this is what's happening behind the scenes this is dependency injection so basically you need to remember that you shouldn't pretty much ever instantiate classes in SGS a lot of it will just happen automatically for you alright so from here what we really need to do is let's start to implement the logic behind the rest of our ninja crud into our ninja service so we probably want a method to find a single ninja that's pretty easy let's just do a get Ninja that takes in a number ID and tries to find that from our collection and then we'll have a special case of what if we don't find a Ninja uh we'll throw an error here and we'll talk about exception handling probably in the next video but for now throw the error and then otherwise we'll just return the found ninja next we probably want to be able to create ninjas and we said that we already have an object that represents you know the the thing that we pass in so let's do create ninja detail we'll just reuse that here and we're simply gonna add to our collection of ninjas however we have a type error here because we have a couple things that are missing in our uh on our object one is that we said we're providing weapons right so we need to update our create ninja dto to have the weapon and then next this is still expecting an ID so we need to generate an ID so let's do something like this right so we'll just generate an ID for that ninja and then we'll pass it in into our collection and return that Ninja now just to save you some time I went ahead and actually implemented the update ninja method in our service as well as the remove ninja go ahead and pause the screen if you'd need to copy it but basically we're doing this that ninjas and replacing it with you know a map of the original collection simply overwriting uh the ninja with the same ID as the thing that we passed in and then remember similarly as the create ninja dtl we have the update ninja dto so that's how we're sort of doing the update of the original record and then we're simply returning uh we're using the get Ninja ID here so that we get back that single item in the collection and then for remove ninja similarly we query that ninja that we're looking for and then we update our collection to basically filter it out and then we return that ninja that we found uh you know just prior to it being filtered out now we need to remember to go back back to our controller and update the rest of these so forget what Ninja this should return this dot ninja service that get Ninja passing the ID now notice that we have a type area here because it's expecting a number not a string and coming from the URL it is a string technically so we'll Typecast this by adding the Plus in front of it and that basically turns it into a number for create ninja same thing we do this dot in your service dot create ninja and then we just forward the dto again same thing pass in the number ID and the update dto and for delete let's wrap this up all right so that pretty much wraps up our basic implementation of a crud API right we got our read great read update and delete let's go ahead and test our application so far so again if we do a get on slash ninjas we have as before our two Ninjas and we should be able to query a single Ninja by providing the ID up here let's try adding a new Ninja so remember that needs to be a post request on slash ninjas and you need to provide a request body we said that our create ninja dto requires a name to call this ninja c and a weapon or maybe this ninja just has a stick for a weapon let's hit send we get back a 201 creative response with that name and that weapon and a new ID that means that if we provide this as a parameter to the URL and do a get we should be able to get that same ninja back right that we just added to our collection and similarly we can go and update this ninja by changing their weapon to Stars let's hit send here so put request on ninja slash ID and we get back uh the updated record so just to make sure we're doing this correctly if we do a get on slash ninjas we should have uh the three ninjas and then the last one should have a weapon of stars because we just updated it although uh you might catch that we have a problem right because our application kind of describes that there's only two weapons there's only stars or nunchucks but we were able to add a ninja with a weapon of stick so ideally there's validation there right so we'll cover that in the upcoming video but let's keep moving and testing our application for now let's go ahead and test deleting this ninja to make sure that our last route is working as expected so we'll do a delete on ninjas slash ID we don't need a request body in this hit send and it's going to respond with the deleted record again just to make sure that we're doing it correctly let's go to slash ninjas and do a get to make sure that it's no longer in our collection of ninjas right our army
HAKteiQuTQ8,GitHub API User Info with FE Engineer Dylan Israel,https://www.youtube.com/watch?v=HAKteiQuTQ8,Dylan Israel,UC5Wi_NYysX-LfcqT3Hq9Faw,Lets connect to the GitHub API and make a nice banner to add our statistics. Angular Course ...,2021-01-27T15:30:24Z,hey guys today we're going to be talking about the github api um it's a easy to use client side api at least this one no api key required it allows you to pull your user data as well as any other user data for that matter so i made this little thing for my personal website it's a link to my github so let's displays my current followers and the current public repos that i have available i'll include a link to a quick little blog article that i wrote about this on medium that's about does it in java real regular vanilla javascript but i'll talk about it i built this in angular it honestly takes is not very complicated so you should be able to follow along and if you'd like go ahead and go to my github and give me a follow i really would like to hit a thousand follows on github github.com pizza poker guy with all that being said let's go ahead and jump into it hey guys if you end up liking this video this is going to obviously go over angular i have 100 angular challenge course which i'll be doing a more refined version this i'll be adding eventually but here we build a hundred components services directives pipes and a whole bunch of other stuff it's currently at twelve and a half hours of just nothing but projects really building things non-stop and you're gonna have a whole ui library of it at the end of the day i'll include a link in the description below check it out let's go ahead and jump into it all right so as i said i did this in angular and i built a component here called app github info it's going to be relatively empty and then on our right we have the output so we're not seeing anything quite yet right so let's go ahead and actually just add that to the app component i believe i did it right after courses so we do app dash honestly i should probably rename this component this i call it github component this should definitely be github info component but uh go ahead and do one of these bad boys so add it to the application and uh we're not gonna see anything because there's nothing in it but we can go ahead and test real quick that we see something like hello world and save it and we should see hello world so cool it's getting injected don't really need that now the actual http service um angular has this cons this property called um not property has a package called http client so we do our constructor and then we do hdb um we'll make this private we'll do http of http client you could just normally use perhaps a a um what do you call it a um let me take my video down you'd use like the fetch api but this wraps it more or less and returns observable don't worry too much about that so now we have that as a dependency we're actually going to use it to get our route now the base route essentially the root of our url we'll make it read only because we're never going to reassign it and i'll call this base url for the github api that is https oops colon slash api dot github dot com so that's the the base of it now when we want to go and we want to get my user write a method here and uh what we want to happen here is we want to return in this case we're going to use the http package again but you can always do the fetch and um again i encourage you to check out the blog i do it in vanilla javascript there so if you're not familiar with angular but essentially passed in the path the path here is that base url use users then the username in my case my username is pizza poker guy and this gets returned all right now that we've done that what we want to do is jump over to our github info and we need to actually make use of that so i'm going to create a a github info class here of type any for now but we'll go and define that type in a second now when you want to fire off something on initialization of the component it uses this thing called on init so we are going to implement that our ng on a net and it's not going to return anything so just be a void okay so all we want to do is take that github service which we have to use some dependency injection so we'll go and get our github service of type get up service and i guess i didn't do that i'm just following the same convention i did i think probably i'd have to look at github but i think they capitalize that h so probably better do that we'll worry about that later so okay in our own init we're simply going to take our github service and we're going to get my user and we're going to subscribe scribe essentially returns the data and then we have a next key here that is taking in this that's going to return the data and we simply want to go ahead and say this dot github info is equal to our data all right so now that we've done that where is the error uh we're missing a parenthesis we're missing more than one parentheses data one too many there we go all right fixed it all right and we can see this on the screen by if we go to our github component simply outputting the github info i think i called it and i'm using a json5 just to see that it's going to return a whole bunch of stuff all right and what i'll do is i'll actually go over to the browser and we'll come up here and if we look at the network call go ahead and refresh it you can see that we have this call here this is all the data that comes back from our github info excuse me um now we're gonna worry about followers and i think the uh url if i remember correctly i don't know but we only worry about three things really um but you can get your twitter username you get your full name your login your location the whole deal right so there's quite a bit here that you can work with um i'm only going to worry about a couple of them all right so now we've done that before we actually go and style it actually the style at first why not um let's jump back over here and we'll style it so i have a reference to a background image and i think we're done with app component and we're done with we're almost done with github service uh we don't want that okay so i have a background image that you're probably gonna want uh but you can just go to unsplash add whatever it is that you want so in my example here i create a container called the gip github container to house all my stuff and because this github info component isn't defined instead of it just blowing up there's a couple different ways we can go about it we can go and you know have everything check if it exists in this case i'm just going to wrap the whole thing and say listen if github info isn't defined go ahead and ignore it now let's go and create a div and we'll add an anchor tag and in here we're going to have a we're going to bind some property the brackets here bind it and we'll say github info dot profile page profile page is one of the properties in here or actually it's one of the ones that i map so maybe we should map first let's do that so normally what i like to do is i like to take this value and then map it map is a value in observables piping essentially means to transform or or do some sort of action on our data our observable the data that's coming so import map from rxjs of operators cool now what we want to map is we want to map it to a model so you'll see that i actually already have this built out i forgot to clear it but it's going to take in our data and we have three things followers which matches the api expectation public repos which comes in this form i transform it and then profile page which is this html url so with our data we're simply going to go and say new and get hub info pass in the data and it's going to do that for us so now when we go back to our github info component we can give this a type of github info and you'll see that if we were to hover over this the data that's coming back is github info so we don't have any issues all right now our github info component.ts is done this model is done the rest is just css and html i have the font awesome dependency in my uh personal portfolio if you don't go ahead and install fort awesome awesome free and then in your styles i believe you have to do this in your styles css you're going to want to add this css line right here okay so now that we have our profile page h uh href bound um i like to have it open up in a new page so we'll do target equals blank um and then right below that we'll add an icon so we should uh we'll be uh i dot fab dash github we can test this real quick see that our markdown's right if we scroll down what's going on here is our github info not defined let's not [Music] any console errors all right let's go ahead and debug real quick and we'll say console.log data is it getting our data it's getting our data and you can see it's getting transformed so why isn't it working ngf all right github info let's try this real quick oh maybe i wasn't looking far enough i think it's uh probably so small we can't see it that's okay we'll fix that in a second um so now that we have that div and we'll we'll still we'll we will circle back oh boom the dash there that was it so you can kind of see it right here it's kind of small we'll make it we'll make it a little bit bigger in a second um let's go ahead and create some stats div this is going to house the two stats so we will have div set times two cool so we have both these divs one's going to house the followers and one's going to house the the code branch so for the first one here we'll go ahead and do the i dot far far user so that should be the user icon excuse me and then here we will have another div and we'll just have an h2 and this will be the total github followers and then in small font we'll have followers all right we should start to see a little bit something or another you can kind of see the icons they're making out here and it's all black not the the easiest thing to see we'll make it better in a second and then our other stat we just have to do it one more time with the auda flaw dash code branch that's going this will be the repo icon and then go ahead and copy this div it's gonna more or less follow the same format and then instead of followers we want our public repos and what we call this total repos is cool so we have all of our content here on the screen at this point we just have to do some styles if you remember we had our github container let's go ahead and give it some padding of 2 rem also give it a margin dash top of 40 pixels to give it some space a margin dash bottom of 40 pixels again do you use whatever styles that you want this is just what i'm going to do so we have a little bit padding a little bit of space i'm going to use a background here so we'll do a linear gradient the reason we're going to do a linear gradient here actually let me show you the url first and then you'll see why i want to do a linear gradient um the path i'm going to use is something that's in my local project in assets and it's get.jpg and that should go across like so you can go to unsplash or somewhere put whatever url you want in here this is just my local one now our background size we want it to cover so that it doesn't you know we get a little bit more of the background image that looks much better right and then i'm going to use a display of grid here and then text align center and don't forget your semicolon and let's see here cool so you can kind of see it's slowly coming together did i put this on here i don't think i'm not sure i need this property but we'll find out yeah that was a mistake that's something easy okay so you can you can kind of see how the the text is hard to see so let's do this eye color white so you can see it as white so there's our icon colors and then our stats we want that to be white as well but white's a very it's very harsh color if it's not on the right background and it's going to sort of bleed in a little bit that's what the linear gradient is going to be for so if we go before this url we can have multiple things for our background and what i want is the linear gradient that's going to not be transposed any different degrees and we'll use rgba and we'll simply go zero zero comma zero comma zero comma zero point four so it's partially see-through and then we'll do another one here of rg va of 0 comma 0 comma 0 comma 0.5 save it and now you can kind of see glad i blew it up why did i blow it up oh comma you guys see that's a little bit easier to see this because we put this nice little linear gradient over it so it pops out a little bit more okay so i want a couple things i want a font size on my icons to be about 1.5 rims to make them pop out a little bit more that's too small cool they're a little bit bigger i also want the github icon specifically to be larger since that's the main one we can do this by simply saying hey does our fadash github have a font you know if it has that class i actually want to have three rim so it's a little bit bigger cool that seems to be working and whenever i hover over it i want it to be blue so let me do that with a and colon hover our pseudo selector we'll give it a color and blue is something i have to find which is imported from my source styles colors and if you're curious what that color is blue is hashtag 007 acc all right so when we hover over it it transitions i like any transitions to to close this so the dogs don't bark transition on all properties to occur over 0.3 seconds just makes it a little bit smoother you kind of see it comes in and out cool all right so that's it for that for our icon set up there now let's go back to our stats we have our color white but we want these to be lined up so that we're going to make bringing some css grid and then we're going to change the flow of the direction to be a column instead of a row and you can kind of see we're almost there and then we want to justify the content to be center and then we want to give a little bit of a grid gap here to do some spacing between our grid items of two ram and a margin top of 1.5 room and that should just give us a little bit of spacing on the top and some setup so you can see it's spaced out now what we need to do is for these two align them left and right and so nested in there we had our stat class which was part of our stats and we'll simply do display grid we'll give it a gr each of the items in the grid a grade gap of 10 pixels and then the grid template columns remember we have two items here and we'll do auto and one fr and then we'll align the item center so they are horizontally the same and why is this still not right i'm these should have floated to the side what did i do wrong grid auto oh grid auto flow that's why i didn't work bam and now we have our component we can go to it we're pulling this data from a simple route and um that's that not too shabby and again if you want to see this in the medium article that i wrote and just vanilla javascript for the api call you can uh there'll be a link to it i just started writing blogs so um get your stats easily and whatnot so i just chill with the try catch here and async await um i want not some of the data nothing too crazy um launched a second blog the other day so with that being said guys thank you so much for uh watching the video um be sure to like subscribe share all that good stuff and um yeah check out my courses link in the description below see you next time bye hey guys thanks for watching the video don't forget to comment like and subscribe all that good stuff so i can see what questions you have maybe i'll do a video about it in the future and take a look at some of my courses will be in the description below see you next time you
YQsU2Zq2Zis,Introduction to Clean Code Course on Scrimba by JavaScript Engineer Dylan Israel,https://www.youtube.com/watch?v=YQsU2Zq2Zis,Dylan Israel,UC5Wi_NYysX-LfcqT3Hq9Faw,Introduction to Clean Code Course on Scrimba by JavaScript Engineer Dylan Israel - Clean Code Course: ...,2021-01-12T14:00:09Z,you might be saying dylan you're looking mighty cold it's cause winter is coming you may be saying what is also coming the introduction to clean code it's out baby so if you guys are big fans of scrimba like i am i just released the um introduction to clean code on their platform and um you may know nothing young dev but by the end of this course you will uh you'll know some clean code um this is something i've been super passionate about for quite some time you hear me talking about leveling up your skill set uh clean code and writing proper code is really one of the best ways that you can go from a junior to mid or senior level engineers quite quite often you see people who repeat the same the same year 10 times and so they're at a junior level but with like five 10 years experience it's kind of astounding to be be quite honest but this is a great place to get you started so uh what i'd like to do is go over a little bit of what's in the course is quite a bit i actually there's a i'm adding stuff to it as i go um so it's out but i just sent my um it's just my producer sounds like i feel like big time saying i have a producer listen we made it no my producer an additional video to add to it because um i like to expand on my courses uh so let's go ahead and talk a little bit about the course i'll include a link to it so you can check it out right now it's available cool [Music] [Applause] [Music] so like any course um on scrimba there's going to be plenty of challenges we're going to talk about writing clean variables we're going to be talking about properties magic numbers and eliminating them limiting your parameters naming and standardization encapsulating some of our conditionals um good comments versus bad comments this is something i see so this drives me nuts i'll be honest with you um you know and then uh a final challenge as well but i thought instead of you know obviously um you know that's quite a bit here as we go through there's uh 23 going on 25 lessons let's talk a little bit about why this is important right so let me go to mine this is the actual slide that i have from the course and we'll do it live for you all right view area present so um let me go ahead and take my camera off not that you don't want to see the eye candy but the eye candy's here look at i mean look at this uh so code like a pro that's that's sort of my unofficial title for this course is um clean code i think is one of the things that's gonna make you become a professional and um i think it's worth noting that that that's what your goal should be so what are we going to learn in this course well we'll be talking about you know clean code in regards to variables functions classes comments and a lot of other things all the fundamentals now with writing our code we should have three main purposes obviously it has to work right it's you know any code that doesn't work isn't gonna you know it doesn't matter right like if it's broken it's broken but even bad code can work it's just harder to work with and when you go back to make changes or updates you no longer enjoy it you hate your life and there's three reasons that you that it's difficult to work with legacy code and current code and by legacy code i mean like a month ago code like there's an old joke in software engineering where you know when i wrote this code only me and god understood how it worked and then a month later only god understood and so part of the reason is because your code hasn't been searchable readable and understandable or able is how i'd like to think of it and we're going to fix that so by the end of that of this course you're going to be able to write professional level code in terms of those three aspects now who's the course for right it's for aspiring software engineers there's no better time to learn how to write clean code than early on in your career it's like you know you ever hear about people they want to grab people before they have bad habits perfect example junior engineers you're trying to go from junior to mid to senior fantastic skill to have senior engineers a lot of senior engineers brilliant brilliant people don't write clean code and um there's a problem with that sometimes as you go and you know you add simplicity to your code a lot of brilliant individuals think you're dumbing down the code and it's not the case you want your code to be easily readable and there's then the category of senior engineers that really aren't senior level because they've only repeated the same year 10 times and that's not what i want you to do i want you to level up if you're qa being able to write clean code means being able to write clean integration tests clean unit tests and you can set that up as well and then really those just looking to better understand javascript we'll be working with javascript in this course and so you'll have a much better understanding of it and then finally you know why why like you know we talked about uh making our lives easier but ninety percent of your job is reading code believe it or not you know even in greenfield development you're working with code that was written either by yourself or somebody else and you need to be able to read it to do your job well and readability is a gr is one of the key portions of writing clean code it's a natural progression of your skill set if you really do want to get better and you know progress your skill writing clean code is just the natural direction employers value this skill they really do especially as you interview with developers you know you're it's going to be one of those um i don't say buzz words but it's going to be one of those skill sets that catches people's eyes like myself um you know and the effort you know from a very practical stance this course is about an hour long but the when you go and take that hour and you apply it you get 10x the payoff so it's a great skill to have you know i i've said in the past clean code testing and solid principles got me a forty thousand dollar raise truly took me from junior to senior in terms of compensation because i've spent you know a month learning those three things and so the payoff on this is fantastic so that's why you need to learn this stuff but that's a little bit about the course guys i hope that you check it out there's a link in the description below it's you know as i go and i continue to build these courses for scrimba um you know i'm just so excited especially i'm trying to build some of the stuff that i don't think there's a lot of great content on and clean code we include a couple of resources in the in the course as well that you can check out but it's um it's part of their um it's part of their pro membership that you can check out but um i i love working with these guys they're really easy to work with uh we just got done with the javascript myth stuff and and which a lot of people really loved and i'm looking forward to building out more courses with them and actually expanding on this and a few other courses that i have with them i'm going through actually this weekend to take a look at some of my past courses to see if there's any updates i want to keep the courses updated because uh you know you guys are using them and they're they're doing well so check it out introduction to clean code can't recommend it any more than i already have i'll see you guys next time bye hey guys thanks for watching the video don't forget to comment like and subscribe all that good stuff so i can see what questions you have maybe i'll do a video about it in the future and take a look at some of my courses will be in the description below see you next time
SxcaeYdKTSA,JWST Made a Cosmological Crisis Worse,https://www.youtube.com/watch?v=SxcaeYdKTSA,SciShow,UCZYTClx2T1of7BRZ86-8fow,Visit https://brilliant.org/scishow/ to get started learning STEM for free. The first 200 people will get 20% off their annual premium ...,2025-02-26T18:00:17Z,"A hundred years ago, astronomers figured out that 
the universe hadn’t always been the same size. More specifically, it’s getting bigger. But if you ask a bunch of astronomers 
how fast the universe is getting bigger, you won’t get a single, satisfying answer. Estimates tend to hover 
around two different values. And it’s such a huge issue, some 
people call it The Crisis in Cosmology. So when the shiny new James Webb 
Space Telescope launched in 2021, there were hopes that the 
crisis would be resolved. But the JWST may have actually made it worse, leading to an even bigger mystery that 
might reveal brand new physics at work. [♪ INTRO] Our story starts in 1929, when American 
astronomer Edwin Hubble published a paper announcing that a bunch of galaxies in 
the night sky are moving away from us. In other words, the universe was expanding. Not the galaxies themselves, 
but the space between them. The rate of that expansion has varied over time. And astronomers refer to the current rate 
of expansion as the Hubble constant, H naught. Hubble even provided us with an estimate for 
H0: 530 kilometers per second per megaparsec. Which doesn’t mean a whole lot to 
someone who isn’t an astronomer,   so let’s take a moment to break it down. A megaparsec is a unit of distance. One megaparsec is about three million 
light years, or 31 quintillion kilometers. For context, the distance between 
the Milky Way and Andromeda… the next major galaxy over…is 
about 0.8 megaparsecs. And the entire observable universe is 
about thirty thousand megaparsecs wide. So if the value for H0 were really 530, it’d 
mean that a galaxy that’s one megaparsec away from us would be flying away from us 
at a speed of 530 kilometers a second. A galaxy that’s two megaparsecs away would be 
moving away from us at 1,060 kilometers a second. And so on. But over the years, it turned 
out Hubble’s estimate was off. Like, way off. Thanks to better telescopes and better datasets, we know H0 is really somewhere around 
70 kilometers per second per megaparsec. But the exact value? That’s where the problem lies. And we’ve got a cosmological crisis 
on our hands because different groups   are trying to measure H0 using different methods. They should all give the same answer, 
but right now, they simply aren’t. And since the problem surrounds the Hubble 
Constant, some call it the Hubble Tension. There are two main ‘camps’ 
that are in conflict here. Let’s call them the ‘CMB’ camp 
and the ‘distance ladder’ camp,   for reasons that we'll make clear. The CMB camp says H0 is about 67. The Distance Ladder camp claims it’s about 73. Compared to 500, that doesn’t 
sound like a big difference at all. But it is when you realize 
the error bars don’t overlap. That’s a fancy way of saying that both 
camps have rigorously checked all the   possible sources of random error 
and noise in their measurements, and strongly believe that their 
number is basically correct. For instance, the CMB crew quote their 
value for H0 as 67.4 plus or minus 0.5, which means they’re confident that the real, 
final value is somewhere between 66.9 and 67.9. But different distance ladder teams quote their 
number as being around 73, plus or minus about 1. And 73 minus 1 is still larger than 67.9. Both camps are claiming that 
random errors alone can’t   explain the difference between their numbers. Hence, a crisis in cosmology. Which, well, okay maybe you 
wouldn’t quite call this a crisis,   but trust me when I say this is 
high drama in astrophysics circles. Because the stakes are high:   the Hubble constant is crucial for 
understanding how old the universe is, how fast it expanded in the past, and what 
the expansion will look like in the future. The biggest of big picture stuff. And every observation we 
make builds on the others. So if the story we’re telling about the 
universe’s expansion isn’t consistent, we might need to doubt the conclusions 
we’ve made in other areas of astronomy. Having two conflicting H0 values also 
makes it harder to look for new physics… like trying to solve the long-standing 
mysteries of both dark matter and dark energy, which our universe seems to be full of. But before we get into how these camps got their 
different H0 values, we’ve got to pay some bills. Thanks to Brilliant for 
supporting this SciShow video! One of the best things about 
SciShow and Brilliant is that   you can access them anywhere 
with an internet connection. That’s a lot of places you could be learning! Like, you could build knowledge around large   language models while your 
kid's over there building a sand castle. Or you could gain an understanding of Baye’s 
Theorem while you're cooling down from your gains in the gym. Brilliant makes it easy to learn 
right on your phone with lessons   you can complete whenever and 
wherever you feel like it. You can learn on the go at Brilliant.org/SciShow,   the QR code on the screen, or 
at the link in the description. You’ll get 20% off an annual premium Brilliant 
subscription and the first 30 days for free. So what exactly are the two camps, and the 
two techniques they’re using to calculate H0? For the distance ladder teams, 
the idea is to look right at   galaxies a few megaparsecs away and 
measure their distance and speed. But getting accurate distances and speeds for 
objects that far away is easier said than done. So astronomers start with more reliable 
distance calculations from our cosmic backyard… those are the bottom rungs 
of the so-called ladder… and then use those rungs to help 
you work out distances farther away. The next rungs up on the 
ladder are standard candles: things that always shine with the same 
intensity, no matter how far away they are. So in theory, all you have 
to do to calculate their   distance is measure how bright they appear to be. You also have to know precisely how these objects   function to know how bright they should 
be, which is also easier said than done. For standard candles, astronomers tend to rely   on certain kinds of stars and 
certain kinds of supernovas. Hubble himself relied on Cepheid 
variable stars, which visibly   pulse super consistently depending on their mass. We’ll be coming back around to those, later. For the past few decades, astronomers 
have also really relied on the Hubble   Space Telescope to study those standard 
candles at all distances across the sky. But the other camp in this cosmological crisis   is relying on data from 
a different telescope entirely… studying light from a completely 
different point in history. The CMB camp derives their H0 number 
from the oldest light in the universe,   the Cosmic Microwave Background. It was emitted just a few hundred 
thousand years after the Big Bang, and our best view of it comes to us courtesy 
of the now defunct Planck Space Telescope. But a few hundred thousand years after the 
Big Bang is over 13.6 billion years ago. And H0 is the rate of expansion now. So these astronomers actually aren’t 
directly calculating H0 at all. Instead, they’re creating 
computer simulations on   the known laws of physics and their CMB data, and plugging in numbers for a bunch of different 
properties to try and recreate our universe. Alongside a bunch of other values, like the 
abundance and type of dark matter in the universe, an H0 value around 67 seems to work the best. So in a way, the Hubble tension represents 
just how well physicists understand the   history and composition of the whole cosmos. Or rather, don’t. Because as is, the models are not predicting 
what astronomers are actually observing. With its superior resolution, the James 
Webb Space Telescope was supposed to provide more accurate observations, and therefore 
a more accurate distance ladder. And that extra accuracy would, 
hopefully, resolve this crisis. But in 2024, the first JWST results came 
in and sort of…spawned a new crisis. Two research groups analyzed 
data from JWST and came to   totally different conclusions about what it meant. And it’s significant because both groups 
are hugely respected in their field, having produced gold-standard distance 
ladder results before JWST came along. First is the team led by Dr. Adam Riess, who 
shared a Nobel Prize for discovering that the   universe isn’t just expanding, 
but expanding faster over time. In February 2024, their results were published 
in The Astrophysical Journal Letters. Their research analyzed over 
a thousand Cepheid variables, and concluded there was no significant difference 
between a Hubble and JWST-derived distance ladder. And with no new distance ladder,   there was no new H0 that would be 
closer to what the CMB models predict. Then, a couple of months later,
veteran cosmologist Dr. Wendy Freedman  presented her team’s research 
at the annual American Physical Society meetup. They had compared Cepheid data with data from 
two other kinds of standard candle stars, meaning they had three kinds of 
standard candles that could be   calibrated and cross-checked against each other. And after all that calibration, they calculated a   new value for H0 that agreed much 
more closely with the CMB camp. In other words, they were claiming that the 
Hubble tension had basically been solved. But come summer, Riess’s team argued those 
results could be biased by the specific objects that Freedman and her team chose to include in 
their analysis…and which objects they did not. Now, this is still hot-off-the-press drama. As of our recording, Freedman’s results haven’t 
made it through the peer review process, yet. Meanwhile Riess’ criticisms have, but 
haven’t actually been officially published. So the jury continues to be out when it 
comes to the latest results from JWST. But what does this bit of 
academic beef mean for now? Remember those error bars that don’t overlap? Well, an error bar is only as 
good as your error accounting,   and there’s one type we need to acknowledge here. These are called systematic errors: 
small assumptions you make in your data   processing that skew every number 
consistently in one direction. And everyone’s numbers…be 
they be from Riess or Freedman, or anyone else looking at standard 
candles or the CMB models,   involve a lot of assumptions 
about how the universe works. From how stars evolve, to how 
subatomic particles really act. So most cosmologists believe 
that the Hubble tension is   caused by some accounting trick gone wrong. Some faulty assumption in the data pipeline 
that’s messing up someone’s results. But if Reiss’s team is right, and the JWST 
can’t produce an H0 that’s closer to the   CMB predictions, it could mean there’s 
some new kind of physics to uncover. There are still a lot of 
cosmological mysteries out there. Like why the universe is expanding 
faster and faster over time. Scientists blame dark energy, but 
no one really knows what it is. Right now, the strength of dark 
energy is considered to be constant. It’s one of the many variables that go into 
the CMB models that predict what H0 should be. So instead of hinting at an accounting error, the Hubble tension could be showing us that dark 
energy actually varies in strength over time. If that’s the case, it would 
be one of the biggest, most   surprising new discoveries in physics in decades. But before anyone throws 
away their astro textbooks,   we should wait for more data to come in. The JWST is only a couple of years 
into its fact-finding mission. So it may yet provide the data we need to solve 
the tension without invoking new laws of physics. Because despite their opposite conclusions,   Riess and Freedman’s teams have 
come to agree on at least one thing: the rung on the cosmic distance ladder 
that corresponds to nearby galaxies. So with a bit more back-and-forth, there 
might be more consensus on other rungs. But JWST isn’t the only telescope 
that could help solve the crisis. By imaging the whole southern sky every few 
days, the upcoming Vera Rubin Observatory will be able to spot millions of supernovas,   providing a more robust catalog 
of those standard candles. And gravitational wave detectors like LIGO could   act as a sort of neutral 
third party in the debate… providing a completely different 
kind of dataset that astronomers   could cross reference against 
the CMB and standard candle data. So, many cosmologists think it’s 
only a matter of time before the   tension is resolved, one way or the other. Whatever the solution ends up being, it’s a 
nice reminder that our story of the cosmos is never finished being written,   and that science is at its most vibrant 
when there are big mysteries to solve. [♪ OUTRO]"
TOq2fKrFDzU,What Made These Rainbow Mountains?,https://www.youtube.com/watch?v=TOq2fKrFDzU,SciShow,UCZYTClx2T1of7BRZ86-8fow,Visit https://brilliant.org/scishow/ to get started learning STEM for free. The first 200 people will get 20% off their annual premium ...,2025-02-12T18:00:21Z,"There are mountains that may look 
like a scene from the Wizard of Oz or a level in Mario Kart, but are 
actually very much of our world. Welcome to Zhangye Danxia National 
Geopark in Northwest China. Here, striking rainbow-striped mountains 
jut out of the harsh landscape. But there is more to these 
landforms than meets the eye. These mesmerizing stripes are also an 
incredibly detailed record of life in China long before humans walked the Earth. So they’ve attracted the attention of 
not only tourists, but geologists who are figuring out how they formed 
and what they can tell us about what this part of the Earth was 
like over 100 million years ago. [♪ INTRO] Now, these mountains have layers,
and layers are pretty standard fare in geology, and so, 
pretty easy to understand. These are sedimentary rocks, 
meaning many little bits, like sand, accumulate, stick 
together, and form rock. At first, geologists assumed that these layers 
formed in the bottom of a river or lake, which is pretty typical. But when they looked closer, they noticed 
some odd details in the multicolored rocks. Sedimentary layers often have 
sharp boundaries between them. But these transition into one another gradually. And there are small structures in the layers 
that almost look like branching roots… probably because they are. Turns out these layers are actually paleosols, 
which basically means fossilized soil. It happens when dirt, like you have in your 
garden, gets buried under more sediment. Over time the soil turns into rock. But it keeps many of the 
characteristic features of soil that geologists can use to identify 
it millions of years later. Things like root traces or soil horizons, where the properties of soil change gradually 
as you dig deeper below the surface. Zhangye Danxia is made of 755 
meters of paleosol layers. There is some uncertainty 
around the age of these layers, but the oldest is likely 
around 120 million years old, with the rest of the layers taking around 
10 million years to build up on top of it. Now, researchers have been able to sort 
these paleosols into 14 different types, and that provides us with some insights into 
the development of their brilliant colors. The rainbow colors are caused by 
different forms of iron minerals, present in different amounts 
in each type of layer. Red comes from the mineral hematite, which 
is made of iron oxide without much water. Brown and yellow come from goethite, another iron 
oxide mineral but with a bit more water in it. Yellow can also come from jarosite, which 
forms when there is more sulfur around. And the gray layers form when there 
is more carbon from organic material. These minerals can also tell us something about 
the environment that formed each soil layer. But more on that in a moment, 
after a message from our sponsor. Thanks to Brilliant for 
supporting this SciShow video! Brilliant is an online learning platform 
that respects your time and energy. They get that you have other 
things going on in your life. So they offer lessons that you can complete in 
a matter of minutes whenever you have the time. And those lessons are designed for you 
to actually remember what you learned from one day to the next. That way, you don’t waste 
your time memorizing stuff that you’ll forget by the end of 
the day and have to repeat lessons. You can find Brilliant at Brilliant.org/SciShow, 
the QR code, or the link in the description. That link will also give you 20% off an 
annual premium Brilliant subscription. And you’ll get the first 30 days for free. To make the Zhangye Danxia mountains, 
these layers needed to go from buried deep underground to sticking 
up into the sky where they are now. 50 million years ago, India slammed into 
the rest of Asia to build the Himalayas. The effects of that collision rippled 
over a thousand kilometers to the north, all the way to Zhangye Danxia. However, the story of these mountains 
really begins sometime between 120 and 145 million years 
ago, in the early Cretaceous, before any of these soil layers even formed. Tectonic forces first pulled 
the continental crust apart, forming a series of faults 
and basins between them. The soil layers built up in one of these basins, got buried under more sediment, 
and over time turned into rock. Then, partly because of the collision of 
India, those big tectonic forces did a u-turn. Instead of pulling the continent 
apart, they pushed it together. That means all those faults that 
slid one way switched direction. This pushed that basin, now full of 
paleosols, up into the sky and tilted it over. The sedimentary rock above quickly eroded away to reveal the dramatic layers we see today. And geologists owe these 
tectonic forces a big favor. Not only did they create a beautiful 
landscape, all those layers are perfectly preserved and exposed for scientists 
to study without digging them up. Which, for one thing, would be a lot of hard work. But also, as one team of researchers remarked, is lucky because the geopark is a protected 
site and they’re not allowed to dig there! Paleosol layers tell the story of how wet 
and humid things were when they first formed. They’re influenced by how 
much rain fell from the sky and how much water stuck around in the soil. The amount of water in soil affects which 
iron oxide minerals are able to form. Hematite forms in dry conditions, 
and goethite forms when it’s wet. So the ratio of these two minerals can tell 
scientists how waterlogged the ground was. Researchers identified that the 
oldest period was very humid, with cycles of the soil being especially 
waterlogged every 100,000 years. After that, there was a long dry spell with 
only a few sporadic periods of humidity. And finally, things shifted to a long wet period. This helps paint a picture of the 
conditions in Cretaceous China. We already knew this was a toasty time on Earth. Greenhouse gasses in the atmosphere were high, as much as 3 times higher than they are today. And with all the carbon dioxide us 
humans are pumping into the atmosphere, we could reach levels comparable to the 
Creatceous by the end of this century. That means the information in the 
paleosols at Zhangye Danxia is valuable. It can tell us how our planet might respond to 
a similar increase in greenhouse gasses now. Today, in Asia, similar soil types can 
only be found a long way to the south. That means at the time, it was 
warmer and wetter further north. So these mountains were once dirt, part of a very different ecosystem 
than we see in the area today. Then, tectonic forces took them on a 
ride lasting tens of millions of years. They were buried, turned to stone, 
thrust back up into the air, tilted over, and finally uncovered. And thanks to that wild ride we now 
have both a beautiful tourist attraction and a snapshot into what ten million 
years of a much hotter China looked like. And times like this in Earth’s history 
gives researchers a window into how water cycles and ecosystems 
could change in our warming world. [♪ OUTRO]"
pNSYvzM_2sA,The Tiny Reasons This Island Is Shrinking,https://www.youtube.com/watch?v=pNSYvzM_2sA,SciShow,UCZYTClx2T1of7BRZ86-8fow,"Visit http://brilliant.org/scishow/ to get started learning STEM for free, and the first 200 people will get 20% off their annual premium ...",2022-07-25T21:00:25Z,thanks to brilliant for supporting this scishow video you can keep building your stem skills at brilliant.org scishow with 20 off an annual premium subscription [Music] hoboro island off the coast of hiroshima japan was never very big but folks have noticed that it is slowly shrinking the island was 22 meters high in 1928 but it's only six meters high today it's not clear how long it has left but some people have guessed it could disappear in the next century and it is not being worn away by the wind or the waves at least not directly i'm going to guess that you're not going to predict this the island is literally being eaten by bugs actually not bugs precisely there are small crustaceans related to wood lice called spheroma seboldei researchers believe they bore holes into rock to protect their mates and eggs and these little holes expedite natural erosion from water which breaks off pieces of the island and then washes them away while there does not seem to be a ton of research about hoboro specifically the phenomenon of bio-erosion is actually pretty well studied in general and it's worth understanding because it doesn't just come for small rocky islands off the coast of japan but for whole ecosystems the perpetrators may include creatures from animals to plants to microbes who bite burrow or chemically dissolve anything from wood to coral and even solid rock plant roots can fracture rocks apart microbes and fungi break down minerals and soils even the footfalls of penguins wear down the bedrock of islands around the world there are tons of examples of bio-erosion an isopod closely related to those on hoboro island can bore centimeters deep into sandstone in malaysia and remove up to 50 percent of the surface from rocks next to the sea isopods like these also chomp down on plant roots wooden structures and deck floats this can cause chaos for humans and even creates microblastic pollution one of the environments where bio erosion has the biggest impact is coral reef ecosystems so they're also the biggest targets of study compared to unique scenarios like hoboro certain sea urchins sponges and fish such as parrotfish all graze on the coral structures that form the reef a single parrotfish can erode over a thousand kilograms of coral per year in a way human tourists benefit from this bioeroders help break reefs down into sand which forms the idyllic white sand beaches on nearby tropical islands however there is a delicate balance between erosion and accumulation of coral as the climate crisis acidifies the oceans the balance tips toward erosion scientists expect climate change to also increase severe weather events which could increase many types of erosion including in spots expedited by bio-erosion human pollution hunting and harvesting of animals as well as introduction of invasive species all can alter the abundance of bio-eroders and all this makes it extremely important to understand bioerosion if we want to conserve these habitats as the climate crisis rages on thank you to brilliant for supporting this video when we bring you information about the critters of this world like spheromasiboldei it's important that we do our due diligence to make sure that we got the facts right but there's a lot of information on the internet and some of it is more helpful for these purposes than others that is why brilliant has an entire course about search engines and how to use them as effectively as possible this course teaches you how search engines work for those who want to build tomorrow's google and for those who want to google things better today and this brilliant course shows you how ancient search engine technology really is one of the chapters walks you through the indexing technology that can be used for sticky notes just as well as powerful computers so for anyone who wants challenging computer science courses in a low pressure environment that goes at your pace brilliant is the place to be this website offers computer science fundamentals along with math courses like pre-algebra and science courses like scientific thinking and logic to get your science and math fix today for free check out the link in the description down below or visit brilliant.org scishow you'll also get 20 off the annual premium subscription [Music]
rV2WrH9c40I,SAT Prep Strategies,https://www.youtube.com/watch?v=rV2WrH9c40I,Khan Academy,UC4a-Gbdw7vOaccHmFo40b9g,"Boost your SAT test scores by using these strategies. Join Rachel, a professional learning specialist with Khan Academy as she ...",2025-02-25T17:32:33Z,"- Hi, I'm Rachel with Khan Academy. Are you ready to make a plan
for boosting those SAT scores but stuck about what to do next? Let's walk through two strategies that can help you make
the most of your prep time and focus on your strengths. Strategy one is all about
using the SAT prep courses in Khan Academy. So how do you obtain your scores? You can get your scores and performance spans from a PDF copy from your school counselor, the Big Future School mobile app if you provided your mobile number or your self-created College
Board student account. If you took a practice test in Blue Book, you can get your scores
from the College Board My Practice Webpage too. How do you understand your scores? The report will look a little different depending on if you are looking at the PDF or an online report. There are four content domains
for each section of the test. For example, algebra is one content domain assessed in the math section. The number of questions and percentage of each
domain will be different depending on if you took one of the PSAT related
assessments or the SAT. You'll notice that the scores
reflect the same structure as the digital SAT prep
courses in Khan Academy. Check your performance bands to know where to place your focus. If you have one to three bands shaded, start with foundation units. For four to five bands,
tackle the medium units, and if you're at six to
seven bands, you're ready for advanced content. With your bands identified, dive into SAT prep course materials. Use videos, articles, exercises
and quizzes to level up and aim for proficiency. Try unit tests and course
challenges to shoot for mastery. Strategy two is the
skills insight approach. Once you have your college board scores from an online report, use
the Skills Insight tool to zero in on specific skills
within your performance band or challenge yourself with questions from a
higher performance band. To access your scores, log into your college
board student account, or use the Big Future School mobile app if you registered with your mobile number. The report will look a little different depending on if you're
in the Big Future app or your college board account. There are four content domains
for each section of the test. The filled in part of each progress bar represents your level of mastery in that content domain and
is called a performance band. The more performance
bands that are filled in, the better you did. The online reports provide
a performance band score, which aligns to college
board skills insight tool. Click view skills and example questions in Next Score Band on your report to access the Skills tool. In Skills Insight, select your domain and performance band score. Then click go to see the skills and knowledge you
typically can demonstrate based on that score band. Skills and questions in the next higher score band are the skills you should work on. Remember these two strategies, focused courses and
targeted skills practice work together to build your strengths and boost your score. Let's dive in and make each
practice session count."
lDrpPm6bGAQ,New Hampshire Summer Learning Series Session 1: The Student Khanmigo Experience,https://www.youtube.com/watch?v=lDrpPm6bGAQ,Khan Academy,UC4a-Gbdw7vOaccHmFo40b9g,"Explore the Depths of Khan Academy with “Khanmigo as a Socratic Tutor”. To learn more about bringing Khanmigo to students, ...",2024-07-30T18:43:33Z,"- All right, well, good morning everyone. Welcome to the first of our series of the New Hampshire
Summer Learning Series, and my name is Danielle Sullivan. I'm excited, I've met
actually many of you. So, hello, (laughs)
nice to meet you again. And for those of you
watching the recording, I'm the senior regional manager of Northeast District Partnerships, and I am leading the charge on this New Hampshire
Khan Academy partnership. Barbara Campbell, she'll be
joining us in a little bit. She is the New Hampshire
District Success Manager. So today, I'm gonna do a deep dive into the student-facing tutor, Khanmigo, and then at the end, we'll
talk a little bit more about next steps, just to remind everybody the next steps. But Barbara is gonna be the
one who will reach out to you to schedule the kickoff call and start enrolling students. And then, Crystal Hercules is going to be the professional learning specialist for all of the districts in New Hampshire. And we are still figuring out
how many people are enrolling, what districts are enrolling, and then we'll release our
professional learning plan in a little bit. So, I did ask this live, but I'm curious. If you wanna come off mute or if you want to just share in the... So you can show me one,
two, three or four. Did I freeze? - Okay.
- You are freezing in and out a bit, yeah. - I'm hardwired too. You know what, y'all? (laughs) I swear to God. I'm hardwired, I don't know. Did you all have huge storms
in New Hampshire last night? Okay, I'm in New York, and we had crazy storms last night, so I don't know if that
affected the internet. Okay, so, I'm sorry, Jacqueline, you had your hands up. Were you a four? You're a two and a one? Oh, a three, you're a three, okay. We got some threes,
okay, a little hesitant. All right, perfect. So, what we're gonna talk about today is we are focusing on learning, and I wanna just give you a deeper dive into what Khan Academy
can do for your students, and then how the student
facing tutor is going to help. And I'm gonna show you
two different modes. There's Companion Mode, where it lives within the
context of Khan Academy content, and then the other activities that you can utilize in your schools. And please stop me at any
point, ask any questions, okay? Does that work? So, just another quick overview, who we are at Khan Academy. We are a nonprofit. Our goal is to provide
free-world class education for anyone, anywhere. The history started with Sal Khan, who was tutoring his cousins, and then it started to snowball. He put videos on YouTube, then they developed the platform, which will and always be free, but the biggest impact to move the needle on student learning, we found as a company, happens in school districts, which is why in 2018, we created Khan Academy for Districts, which includes wraparound
support of automatic enrollment. You get professional learning, dedicated district success manager, and a data dashboard. That is all part of the
New Hampshire partnership. And then, we came out with the AI layered on top of our Khan
Academy content in 2023. So, the difference about this partnership we're working with Khan Academy versus other companies that have AI, is that we will always
be focused on learning and our goal is to focus that every student can
experience grade-level success. The method is through mastery learning. So, I'm gonna take a little
bit of time this morning to talk about what that means and what that looks like with our tools that have
been tested and proven, and then how the AI fits on top of that. And y'all, have you seen this already, Sal Khan talking to everybody? Seen the video? All right, well, let's hear from our founder and CEO, Sal Khan, talking about his view of Khan Academy. - Hi, teachers, Sal Khan
here from Khan Academy. As I'm sure you are aware, there's a lot of talk about things like artificial intelligence, including in education and this has been an area of focus for us. But there's a few very
important things to keep in mind as we go down this journey together. The first is, if I had to pick between the world's
most amazing technology, AI or otherwise, and not having a real human teacher versus an amazing human teacher and no technology at all, I would pick the amazing teacher and no technology at all every time, because nothing is going
to be able to replace that human-to-human connection. The other thing that we've
always stressed at Khan Academy, but is especially important now that the world seems enamored with artificial intelligence, is that you should never be thinking about using technology
for technology's sake. It should not be, ""Hey,
that thing is cool. Let's figure out a
problem for it to solve."" What you have to reflect on
are what are the problems that you have always been trying to solve? And maybe this technology
can help you with that. So, the problems that we have always thought
about at Khan Academy and hope to partner with you
to continue to think about how we can make your lives easier are how can we address the issue that in a class of 30 students, you have really 30 individual needs. Before the pandemic, your
average American classroom had three grade levels in it. Now, after the pandemic, I've seen reports where it could be five or six grade levels of preparedness in that one classroom. This is something that
y'all experience every day. You wish that you had an
army of teaching assistants to be able to help support you, help you save time, do things like create
lesson plans, et cetera, and also to be able to
help support the students, essentially tutor them, but also do it in a
way that it's connected with you as the instructional leader. And so, that's the lens
that we've, to some degree, always taken at Khan Academy with personalization and mastery learning. And so, we saw the tools that are possible with artificial intelligence, if we put the right guardrails
in place to make it safe, we said this could take us potentially even farther on those goals, the goals of better support for students and the goal of better
support for teachers. That second one, I wanna
really, really, really, really underline because I think every ed tech tool and all of us at Khan Academy have been guilty of it as well, for the last decade plus, we would create these tools, we would do efficacy studies, we would go to you and we would say, ""Hey, look at these efficacy studies. If you do the following at Khan Academy, if you do 30 to 60 minutes a week, it could accelerate your
students by this amount. It can personalize."" And I think we can all
intellectually agree that something like that could be useful, but you already have a lot on your plate and you're thinking, now this is one more thing
that I have to learn. And many of y'all have
been willing to do it because it can improve
outcomes for your students. What we're hoping that we
can now do with Khanmigo is not only do what I
just described better, but to do it in a way that
can support you better, so that even though it is
yet another thing to learn, by learning it, by making that investment, not only will it improve student outcomes and student supports, but it's going to save you time. We are already getting
reports from school districts that teachers are saving
at least five hours a week, five hours a week doing
things like lesson plannings, writing progress reports, getting a first pass on certain grades, and by being able to support
their students better. So, we are excited to go
on this journey with you. It is still early days. Just the fact that we are
having this conversation, we're working on things together, you are a pioneer here. And we look forward and give us very clear and don't pull any punches feedback. But we want this to be a way that you can have your
cake and eat it too. Support your students better, but while doing so,
support yourself better so you have more time and energy, not only for your
students, but for yourself, and you can really foster that
human-to-human connection. - Any thoughts or reactions
on what Sal's shared? You can come off mute, type in the chat. - For adult learners or
the learners I deal with which are dual enrolled, that connection is the
most important part. And it's sometimes very hard to get as some of my kids are a little prickly. - (laughs) Exactly. I mean, I've been with Khan
Academy now three months. I used to be a special education teacher, then I've been working
for ed tech companies for the last 15 years. And what I really like about Khan Academy and what I'm gonna show you first is the focus on using
the courses and goals to really move the needle with learning, and then how the AI as
layered on top of that. But then also, you can use the AI tool separate from the content. But we've also done a really good job building these tools to
be safe and responsible. So, I'll show you some of those guardrails as we move forward too. And like data security,
privacy, compliance, very important to us. We've gone through the SOC 2 audit. We negotiated a DPA
specifically with New Hampshire. It's really important. I'll show you more of
those safeguards as well. And Lily said the emphasis of AI, but the replacement of
teachers, absolutely. It is a tool, y'all. This is not like we're not
trying to replace educators. We're actually trying to use these tools to enhance more human-to-human connection. So, I wanna take the first
part to talk about learning. So, just real quick, what are some things you do to learn? What do you do when you
don't know what to do? You can come off mute, type in the chat. You come up with something,
you have to figure it out, what do you do? Read directions, (laughs) that's good. Begin with research, yap. Sometimes you Google it. I've been watching a lot of YouTube videos to learn something, right? Who remembers ""Encyclopedia Britannica""? Am I aging myself? I loved those, I loved that. So, learning, right? Steps to learn something. Learning is actually really vulnerable. We're asking kids and people to show up, admit they don't know something, try something new, make mistakes, all in the context of
in front of their peers. But what makes somebody learn something? We wanna move students from passive to... Let's talk about different
styles of learning. So right now, passive learning means just the learner receives information, maybe watch a video or read an article. But if they don't do anything with it, are they really learning it? No, and sadly, a lot of
US education is passive. Then we move to active where learner can do something like maybe highlight or paraphrase or maybe asking a question. But then, there's constructive learning, the next level up, where the learner starts
to produce something new based on things that they're learning, like explaining what they just learned, drawing something. The best way... I mean, you probably heard this, the best way to learn
something is to teach it to somebody else. So, that really starts to move it from our short-term memory
to long-term memory. But the ultimate goal of learning is to have interactive experiences, where learners are engaging in dialogue, producing their own responses. This is where discourse-driven
math classrooms are highly effective. A lot of talking and reading, when you can verbal process and understand and construct your own knowledge. But sometimes that is not always... You're not able to do that all the time in classrooms for a variety of reasons. And research shows that
students will learn more, this is like multiple
research points to this, when they're actively engaged. So, moving from passive
to interactive learner, when they're working on stuff that's just at the edge
of what they can do. So, it's called the Goldilocks principle. It can't be too hard, too easy, it just has to be just right, but that just right depends
for every single student. They also learn. We all learn as humans when
we get immediate feedback to something that we're learning and we see the value
in what we're learning. So, I have gone to many classrooms where there's been posters
of growth mindset on the wall and classrooms look like this. Have you ever seen that? Right? So, something's not working. Or unfortunately, I've seen
classrooms that are very crowded with one teacher with 30 students. So, how are we able to do
that interactive learning when it's really crowded? This is where, as we're
thinking through AI, Khanmigo was built to help personalize and enhance student learning. So, it was designed and it was trained, not trained, it was... I guess we don't like to say trained, but we prompt engineered Khanmigo to be a true Socratic tutor. It's empathetic, it's enthusiastic, it will encourage thinking, but it will never give answers. But it works very well within the context of our Khan Academy courses, which a lot of educators
know us for math and science, but we keep adding more
courses in humanities, we have the digital SAT
courses, computing, life skills, but the focus is on mastery learning. Do you all know what mastery learning is? Have you heard this concept before? Does anyone wanna give
a shot at what it is? Whatever you say is correct. - Just being able to
internalize it and do it, not just imitate it and being able to remember it a day later. - Yeah (laughs). Anyone else wanna share what
they think master learning is? - I know there's a big
emphasis on it being self-paced versus you meet these
goals by this deadline. It's very individualized to the student and the progress they're making. - Yes. And it's also, you may not master a skill right away, so you need purposeful practice. It's not like a one and done. It's moving towards like, even if you have to practice
a skill a couple of times before you master the skill. Does that make sense? So, we don't need to watch
this video necessarily. If you're interested, I'll
put this in the follow-up. But the benefits of mastery learning, like you said, it's personalized pacing. It's gonna help build
up students' confidence. It's assuring that they
have a strong foundation and it's gonna help educators by simplifying the process of monitoring and students are gonna own their learning, promoting growth mindset. All of the things that we have
said we wanted in education, that is the goal of mastery learning. So, what we've seen with
Khan Academy in general, if students can be on
the Khan Academy content for around 30 minutes per week and get at least two skills a week, their growth is much higher than students who don't use that. So, it will start to
accelerate student learning if you are using the Khan
Academy content in your classes. And Khan Academy content, so if I didn't give you all demo accounts, I'm happy to give you demo accounts as part of this webinar. Actually, let me put this too. This is my email. I'm gonna give it again at the end, but I would be happy to
send you a demo account so you can see what I'm seeing. But we have so many courses as part of the Khan Academy Library and we keep adding more. For instance, we just added AP... Whoops, what just happened? AP College World History,
Financial Literacy. We are adding more reading and vocabulary. We just added sixth grade,
ninth grade, 10th grade. We're gonna have seventh and eighth grade reading and vocabulary, high school physics. We are aligning math
to different standards that weren't aligned before, like we just aligned it to Texas. But we have many different
types of math courses, including getting ready for courses. So, this content can be
used as a supplemental to any of your core classes for ELA, math, or even to compliment
some of the AP courses, or even if you have high school students that really wanna focus
on the digital SAT. So, it comes all with it. And part of the automatic enrollment, which is why we ask you to
have Clever or Class Link, is that we can enroll your students into some of these focused courses, which is gonna help track
progress and all the things. So, now I'm gonna show you what does it look like for using, I'm gonna show you the courses and then I'll layer on Khanmigo, and it's called Companion Mode. So, does anyone have a certain
course they wanna look at? Like Algebra I, Digital SAT. - Math is always a
favorite to me (laughs). - Okay, and then Melissa said Art History. Okay, I can do both. We'll start with Algebra I and then we can go to Art History. So the way Khan Academy works, this is what I'm talking
about, mastery learning. So as educators, students could be enrolled
in an entire course, but you could also assign learning goals and actual assignments to students. So, if I wanted to assign my students, I could assign for my
entire, all of my classes, I'm gonna make it due on... Let's make it due in a week. Let's pretend that's a week. And then, they would have
this as an assignment. So, when they go to their learner page, or if I go to my teacher, their learner home, they're able to look at their progress. They can see the courses
that they're enrolled in, they're able to see any
of their assignments, all of this. So, let me go back to the courses. So, what happens is we want
students to master learning. So, these open boxes means
they haven't started it. If they've attempted it, if you get less than 70% correct, they've attempted it, they're familiar, they're proficient, and eventually they're
mastered the skills. The cool thing about these skills is if I'm taking an Algebra I or even a Calculus class in math and then I take the SAT course, if I mastered a skill that's
duplicated in another course, it will transfer. So, I won't have to take the skill again. But we want students to
be working through this and they can watch the
videos and do the activities. So, this content has been found
to be very, very effective. You can assign the Khan Academy content in multiple languages. And when students are
watching videos to learn, there's transcripts and they
also can do closed captioning and the closed captioning is available in multiple languages. So, this is a great supplement to anything you're doing in math. So, if you're an Algebra I teacher and you wanna assign
some of this as homework or small group work, this works very well for that. But now, I'm gonna show you... But then it's hard because you're like, math discourse is really important or what if a student's
working through this and they have a lot of questions, and I can't clone myself. This is where the Khanmigo
Socratic tutor comes in. So, there's two different
modes in this Companion Mode. US educators can use the teacher tools in the Companion Mode, but I'm gonna show you
the Student Mode first. So if you do get a demo account, make sure that you toggle between, this is teacher mode and
then this is student mode. Do y'all see that? So, you wanna make sure
that you're in student mode. So, one of the guardrails right away is that we do not want students
to share personal data. We are not collecting their personal data. If you typed in, ""I live on Fifth Street,"" it is not gonna wanna collect that data. Khanmigo is like, ""I can't
handle personal information, but let's focus on the problem."" So, you're gonna see
Khanmigo is an empathetic, refocusing Socratic tutor. Now we also understand sometimes students need help with prompts. So, we will have some prompts if they don't know what to do at first, like how do I use this? But we do have a course that you could use with students to teach them how to use Khanmigo because it's a tool. Just like you wouldn't hand
a sixth grader a highlighter and say, ""Go for it."" I mean, have you at all done that? Because you'll have a
fully highlighted page. Just like any math manipulative,
just like anything, we wanna make sure that
we're empowering students to understand how to use Khanmigo. But I'm gonna answer like a student would, why should I care about
learning about this? That's probably the first
thing a lot of kids ask. So, Khanmigo is gonna say, ""Great, what are some of your interests?"" So, what are some of your interests y'all? What do you like to do? - Crochet.
- Crochet and play soccer, let's see what happens. So, the cool thing about Khanmigo, it's going to start to learn
about student interests. You also can, in Settings, you can go in and add interests and then it'll remember
the interest of students, but it's going to start
to learn the students. So as we've been going
through math and art history, if it remembers that I like to crochet and that I like soccer, it will start using that to help me. Does that make sense? So it says, ""Awesome, let's
connect this to your interests. So crochet, you have to follow patterns and soccer, you need to calculate angles. Ready to go back to the problem?"" No, tell me the answer. I'm not ready, I want you
just to tell me the answer. Right here when it says doing math, this is another layer that
we put on top of this. This was actually built
on OpenAI's ChatGPT-4. They're iterating all of their ChatGPT, it's like Omni now. We continue to build on their platform, but we put another layer in to make sure that Khanmigo
does not have issues with math. You've heard a lot of AIs have
those hallucinations, yeah? So we actually have, if for some reason he makes a mistake, you can actually click here and you can thumb up or thumb down any of these answers to give us feedback to improve Khanmigo. So, look what he said, ""Can't give you the answer directly, but I can help you get there."" So instead, if I'm like, ""Okay, fine, help me break this down."" Now the more you push Khanmigo, the more it will help students. So again, it's like, ""Okay, I'm gonna help
you break this down."" But another guardrail that we have is that we keep all of the chats logged for I think it's 30 to 90 days. I have to double-check
on exactly the time, but we're not sharing
this back with OpenAI. We're not using the student chats to train large language models. We keep it for educators to be able to use the
chats to look for data. So as a teacher, you
can use AI to go through and see what students are talking about. You can even ask, ""Khanmigo, what did my students talk
to you about this week? Are there any things I
should be concerned about, any patterns that you're seeing?"" So, that's why we're keeping the chats. The other reason is if a student types something questionable like, ""I want to build a bomb,"" Khanmigo is going to immediately
give a little empathy, but it's gonna flag this chat. Now as leaders, you can choose
to have the automatic flags, but it will flag it for teachers, it'll flag it for leaders. We have lots of guidance
on what is flagged and the moderation and all of that. But when you log in,
you'll have a dot up here that indicates that you
have some flagged chats, but you'll also get an email. So, it's really important 'cause kids are gonna try to type whatever they want in here, as I'm sure you know,
that's another guardrail. So, does anyone wanna ask Khanmigo anything in particular
with this math problem? Is there anything else?
- What is the first step? - The other thing, Khanmigo currently can speak
in Spanish and Portuguese, and then you also can use text to speech and then Khanmigo can read to you as well. So, I'll turn this on and I'll turn this on. What does the expression after R... I don't know, can you help me further? Let me see if it's reading it to you. Hopefully you can hear the sound. Oh. I'm gonna turn this-
- Sure thing. Let's break it down step by step. First, we substitute R equals five into the expression 15 divided by R minus- - Can you hear that?
- Mm-hmm. - So you have a choice of
three different voices, but what I like about it, okay, I have to turn this off 'cause now it's gonna
just record everything. What I like about it is it
didn't sound like a robot, right? It sounded more fluent. It's not like, ""Sure thing, let's break it down step by step,"" or... So, it's a little bit more
of a fluent voice as well. Now I'm gonna show you what this looks like with art history. That's what it looks like in math and somebody else said art history. So, where was art history? Let's go to ancient art, was that? Oh, US, art history, there we go. So, same thing, if we wanna
look at prehistoric art, paleolithic art, you can even use Khanmigo with comprehension. So, let's go back over here. So now, students can actually ask, ""Give me a summary."" So if they don't necessarily
wanna read all of this, Khanmigo can give a summary. ""Would you like to know
more about a specific part? Does that help?"" You could actually have Khanmigo quiz you. You could write a poem about the article, have him write a poem or her or it, which is really fun. So now, it's taking
this art history article and it is having Khanmigo
write a poem about this. So, you can even say, what's something you wanna
ask Khanmigo about this? So now, what it's doing
is it's breaking down some of how the artist actually did this, like what materials, making beads. So it's going to chunk this more. Let me see, why should I care about art? I'm curious if it will say, can you simplify the text? So, it just simplified the text for me. Can you help me read this like a third grader? I'm literally just trying, just showing you different things. Hey, Barbara. So, what am I doing? I'm pushing Khanmigo to do more personalization
scaffolds, whatnot. And this is something that, again, we can talk to
students about doing. Any questions or do you wanna see anything else about Companion Mode? We're good so far? Okay, so that is... That's where you can find Khanmigo helping you with Khan Academy courses. So that is called Companion Mode. Now we also have additional
learner activities. Now you are able to
assign these activities. Back to school, you're able to assign like if you just want
them to have Tutor Me or Refresh my Knowledge
instead of all of these, but I'm gonna go through each of these and show you what they are. So students have access to
Tutoring Me in Math and Science. So maybe, this is where you can use the AI outside of Khan Academy content. So maybe you're doing another math core or something else science that you don't wanna use
the Khan Academy content, but students just wanna use the AI. Maybe they're using this in
study hall or after school or for a variety of purposes, you can type in, you can actually type something or you can have them give
you 10 practice problems. Let's see, if we wanna talk about chemistry. Quiz me, help me in chemistry. And we have some sample prompts that we can give you to be able to help foster
some of this learning. 'Cause sometimes when I look at ChatGPT, I'm like, I don't know what to ask. So, we have developed different prompts that students can use for the Tutor Mes. So, this is Tutor Me in Science and then Tutor Me in
Humanities, same thing. Maybe you have a question, maybe you were assigned something. Maybe the students need help with understanding ""Romeo and Juliet."" They can also choose to either just give me
five practice questions or help me practice my English grammar. This is interesting,
what should I learn next? I've played with this a
bunch about neuroscience. So, if you wanna say,
what should I learn next? So it'll help you with some... It'll have actually quiz you on some things that you've been doing. But if you wanna work on grammar, math, explore your interests, even just this is reiterating that if you spend 30 to 60 minutes each week on Khan Academy, it can boost the learning. So, it extends taking you back into the Khan Academy content. This is interesting, how to focus. So, this is sort of like I am bored and I just want Khan to help me. How frustrated do you feel right now on a scale of one to 10? So, I'm a seven. What makes you feel frustrated? So, this is starting to actually... It's not a therapist. Let me repeat, Khanmigo is a therapist. But if students are frustrated or if you have a student that is really struggling
for whatever reason, this could be something that
they could start to say, ""Well, I'm frustrated because
reading is hard for me."" Sometimes students are gonna
share more with Khanmigo than they might with an adult, than they might with a peer. And we've built Khanmigo
to be really empathetic. And again, you can see everything students are
talking to Khanmigo about. So, if you do have students
that are using this, you can see for the data analytics, I'm gonna show you that in a little bit, what students are choosing to look at and how much time
they've been on Khanmigo. And then, you also can use AI to see all of the student chats. Then there's national spelling bee. This is an opportunity for
them to practice knowledge. They can be quizzed in different areas. I'm gonna come back to Writing Coach 'cause that's really exciting. Students can actually debate and this could actually
train students to debate. So, they could talk about, they could debate Khanmigo about, should schools have shorter
or longer school days or there's some high
school topics and beyond, is minimum wage a good or a bad idea? So Khanmigo's gonna push to help the students
understand their argument, like I think it's a human right to have a living wage. Let's see what happens. So then, it's gonna have the
other side of the argument. So, it's gonna continue to help students refine their debates. They can chat with a literary character. Does anyone wanna chat with any of these? - Winnie the Pooh. - Winnie the Pooh? And then, it's saying, ""Oh, bother. Hello there, I'm Winnie the Pooh, or Pooh for short."" Can you hear his voice? Does anyone wanna ask Winnie the Pooh something off the wall to show you some of the guardrails? Anything shocking to Winnie? Do we wanna ask him
about the 2024 election? - Yeah, let's ask him. - Winnie the Pooh is not
going to have (laughs). So, he's just a bear of very little brain and long words bother him. He doesn't know much about such things, and any of these characters
will comment in their own way that they will not
comment on current events. And we have pressure
tested this quite a bit, so feel free, if you want a demo account, to pressure test some of this. Same thing with historical figures. Is there a historical figure anyone would wanna talk to right now? Just to show, oops, what happened? - Albert Einstein.
- Albert Einstein. What did we wanna ask Albert Einstein? - How did you learn math? - That's a great question. (laughs) This is fun. I haven't tested all of these. So it says, ""My journey
through mathematics is not without its challenges. As a young student, I struggled with traditional methods of teaching. However, my curiosity and
love for theoretical physics drove me to explore mathematics. I dived into complex problems."" So it's actually showing growth mindset. For students today,
resources like Khan Academy can provide structured approaches. So, how do you approach
new learning topics? Did you develop time travel? Does anyone wanna know
that about Albert Einstein? (Danielle laughs) So as an AI simulation of Albert, I must clarify, I did
not develop time travel. So, it's because time travel's
something that's more sci-fi, it's more like in movies now. So, it's going to talk
about anything of physics that might have contributed, but it's again, it's just interesting. Those are, again, some of the guardrails. They try to stick the historical figures just to talking about what
happened in their time. Then there's other ways
that they can play. Ignite My Curiosity,
this is really fun too. Like I was asking about neuroscience. And then, there's some support
with college admissions, academic and career growth. And then, students can actually add more interests into Khanmigo so they can learn them. But I wanna spend some time
showing you Writing Coach. So Writing Coach is a whole thing, but before we get to Writing Coach, students can also write a fiction story. If you wanna write an adventure story, this is how it would
co-create with Khanmigo. So, great, splendid choice. Who is it and what's the quest? I wanna write a frog who overcomes his fear of heights. I have no idea, I just made that up. It's going to write it with, it's gonna encourage you, ask about the two sentences,
give you some feedback. So, it's gonna be like
co-writing any of these stories, which is really fun. You can brainstorm ideas for
an academic admissions essay, check for problems in admission essays. But now, this is brand
new, just was released, this is Writing Coach. So how this works is
that teachers can assign to students a piece of writing. So, you could actually
assign it to everybody. But I'm gonna show you, we
have some assignments here. So, this teacher assigned
Hatchet Book Review. It's an eighth grade
literary analysis essay. The prompt instructions are here. So then, students are able to use Khanmigo to help understand each piece. So, they ask what are the requirements? So then, it's gonna help
break down how to write this. The next step is outlining. So students, it's giving the very specific
structures of the outline, but then students have Khanmigo here to help every step of the way as they're starting to fill this out. The next step would be drafting. So, this is where students are going to be writing the full draft, but it's gonna help them by like keeping the outline here. Students start to write, you can still ask Khanmigo
all these questions. And then finally, it'll help you revise, help the students revise and then submit as a final piece. The cool thing about this is students are writing in Khanmigo. So, if I start for 30 minutes and I'm writing in Khanmigo and I go home and then I just cut and paste a bunch of stuff from ChatGPT, it will alert the teacher being like, ""This doesn't seem like
Danielle's writing."" So, it's one of the ways that we are trying to prevent cheating. So, if students are actually writing, it's gonna learn my style, it's gonna learn the way I write. So, if I just go in and try
to cut and paste some stuff, it'll know that that's not me or it'll say there's some... What is it called? Plagiarism. It'll have different flags for teachers. So, this is something that you could use in any academic subject, any grade level could do this. I think this is gonna be
something really amazing. Reactions to Writing Coach. Do you wanna see any
more of Writing Coach? - I have a question, a couple questions.
- Yeah. - When they're going into
Khanmigo to do activities, is there some sort of placement test that will help them to know whether or not they
need to do an activity? - There's not a placement test, no, 'cause they're really
open-ended activities, but educators can assign. You could just have Tutor
Me available for students and you could give students
prompts that they would use. You could be more directive with these. - Okay. And then, when you're
doing the Writing Coach, do they have a text type mode? 'Cause a lot of kids, it's their typing that slows them down. - Correct. Let me see what are the requirements and then let's start the outline process. All right, next to outlining, I wanna use the text-to-writing feature. How do I do that? The speech-to-writing, I meant. All right. Barbara, do you know? I thought there were able to... That's a good question. I thought we did have that functionality. So, I have to check 'cause I
know it's here with Khanmigo, but I have to check. I thought we had text-to-speech
available for the writing, so I will check on that. - Okay. Thank you. - Yeah. Any other questions about Writing Coach or any of the other learner activities? We're good? So next week, we will do a deep.. Oh, you have a question? - There's a quick question
in the chat about, how do they input math expressions? - Oh, great, all right,
let's go back and show you. Okay. What will happen is it should offer... So, it offers, students have a sketch pad, but when you click on this, if it requires an expression, a calculator will pop up. I'm trying to find one. Let's try slope, okay. There's supposed to be a
calculator that pops up, but this one is just
requiring a simple answer. So, if there's an equation, there's a calculator that
you can type in the equation. I just can't find one off
the top of my head right now. Did that work, Kara? Any other questions about math? The equations in the Tutor Mode? Yeah, so let's see. How do they type it into Khanmigo itself? All right, do you know... Let me see. Oh, here we go, there it is. (laughs) I guess it's somewhere. So in Khanmigo down here are the math keys that they can type in the different equations. I was like, I knew it was somewhere, I just had to find it. So, that's for Khanmigo. But this will pop up if you need to type it
in the answer as well. Any other questions on
either of these things? All right, so the last two things or a couple things I wanna show you. Part of the partnership is that you have the administrator dashboard. That's why we ask for or Clever class link so we can automatic
enroll students into this. And as leaders, you're able to see all sorts of data, including Khanmigo data. So, you're able to see what
students are using Khanmigo. This is a demo account, so
it's not gonna have any data, but you're able to see how
much time they've been on and also what activities they're doing. You can see that for
teachers and students. So, if you have a lot of
students taking Tutor Me, Ignite My Curiosity, if you have students talking to literary characters quite a bit, you're able to see that data, which is really helpful. And then, the last thing I wanna show you regarding the student facing tutor, there's a lot of
confusion in New Hampshire about the free teacher tools versus not-free teacher tools. So, we did a couple weeks ago release a lot of our AI tools for free, but the tools that are part
of our district partnership is this, summarizing the student chat. This is not part of
the free version at all because this is... The only way to get the Khanmigo
that I've showed you today is through our district partnership. And then, this would be the way to use AI to mine those chats to
understand what's happening. So, this is a demo account, so I don't know if this will be able to do as much as I'd like, but I can ask, ""Summarize everything that
my sixth grade math students have been talking to Khanmigo about."" So, just with the student tools, there's some prompts for educators too. Again, next week, I'm
gonna do a whole deep dive into all the educator tools, but I just wanted to show you this 'cause it's part with
the student facing tutor. So, you can ask me to
summarize the last week. So now, it's going to take a couple minutes to
summarize all of the chats that my students have been
talking to Khanmigo about and any type of topics. Because it's a demo account, you're not gonna see a lot of data. So, there's spelling challenges. So I wanna see what they're talking about with world history. I could also ask for trends, I could ask for any problem areas. - You know, Danielle, in
working with a district who was using Khanmigo, one of the things that we
found was interesting was, when you go in and look at the data, the teachers could or the
administrators could see where was the place that the students ask or what part of algebra did the students ask the most questions or use Khanmigo for help. And so, it's like linear
equations or what... And so, that conversation
then with the teachers of, why do you think this happened or is this an area that my
teachers need to beef up on? Because I see that the kids really used the tutor during that when we were teaching with that. So, it's really powerful that way to see where are the kids
asking the questions. And I think as a former math teacher, going in and looking at those chats would also help me understand, am I teaching my students the
correct questioning skills? Developing their critical thinking in working with the
questioning part of Khanmigo. - Yeah, thank you. Any questions on what Barbara just shared? So, a couple last things. Up here, there's these three little dots. So up here, you can see the history of any chat that you're talking with or that the students are looking at. There's something called
Khanmigo's closet. So as students are working
through Khan Academy content, they can earn stars and dress Khanmigo up in
little hats and stuff. So, that's just like a fun incentive as they're moving through
Khan Academy content so they can make their Khanmigo, customize Khanmigo a little bit. And then, there's preferences here and this battery is just showing you how much power the AI has. So sometimes, depending on usage, it may be... It's just showing you how
much power that the AI has. A lot of people are like,
what is this battery for? So in conclusion, with all of this, we went through all of this. So let me-
- Danielle, there's a question in the chat. Also, I'm Barbara Campbell, I'll be the district success manager. So once you sign up with Khan Academy, I'm gonna be your contact in helping you implement it and get you going on it. I'll be your contact. But there was one question
in the chat talking about, the school system uses Alma
as their student information and he said Clever didn't
offer it as an option, will it connect? And Chris, I'm curious as to, Clever didn't offer it as an option. Can you explain that a little bit more? - Initial signup call,
there was a drop zone. - A dropdown? - Dropdown, did I say drop zone? Chris, have you already signed up? Did you already go through
the contracting process? So, let's talk about that. Let's talk about next steps. So Chris, part of that is, Barbara will do... Okay, so let me... Barbara, do you mind getting Chris's... Chris, can you put your full
name and district in the chat and then we'll look into that for you? And just put your email in the chat too and we'll make sure
that we look into that. So what's happening is, let me go to the end. Here we go. Okay. How this works is, you are already here, so we're doing the Summer
Learning Series the same time, Tuesdays at 9:00. You can please enroll more people. If you have other teachers,
they can sign up at any point. They can sign up for all of them or just one or two of them. Whoever signs up will get the recording. We will put all of these
recordings on a landing page so you can access this afterwards too. But the way to enroll with us is that, this is our landing page. You can go here, you can
see the press release, you can see if you needed
to book time with me to talk about anything
in particular, you can. And then, you can also
sign up to work with us. So, what that means is
you're gonna fill out a form and then we will send you a contract. You just need to sign the contract, send it back to us, then that will trigger
Barbara to send you an email, which then you'll have your
district fill out a survey so we understand a little bit of what your district is interested in. Then we're going to enroll you, which is part of the
Clever class link piece. So our enrollment specialist is checking to make sure that you're in Clever. We'll help you get
onboarded with all of that. And then, we're gonna see
how many districts sign up before the end of July and then we're gonna have a professional learning state-level plan that we'll announce early August that you'll be able to
have a track for teachers, a track for leaders, and be able to really
understand the nuts and bolts. Today was just an overview
of showing you things, but you'll be able to
get into your account. If you want demo access beforehand, my email is daniellesullivan@khanacademy.org. Put it in the chat too. So, there I am again. So if you want a demo account, I'm happy to give you a demo account. Just email me. If you have more questions, you can continue to reach out. But I will check, Chris, we'll check on what's happening with
your contract for sure. 'Cause I know that it takes a little bit, once you fill out the form, it takes a little bit
for us to get it approved through our legal process and then we have to send it to you. So, we'll just chat. We have a running tracker for all of that. Questions, comments on anything else? Well, we appreciate you so much. Thank you for joining us for
the first learning series. And next Tuesday, we are
going to do a deep dive into the teacher tools, all the things. We'll show you all the
things that you can do with the AI teacher tools, both in Companion Mode as well as just to save your
educators a lot of time. So please, please have more people sign up for this summer learning series. We would love to have more people come. And again, they can have
access to the recordings. We are doing this all summer. We appreciate your time and have a wonderful rest of your day. I'm gonna stop the recording, but we'll stay on for
the last two minutes."
kgP_SwxTE2w,Sketchbooking to Improve Your Figure Drawings,https://www.youtube.com/watch?v=kgP_SwxTE2w,Proko,UClM2LuQ1q5WEc23462tQzBg,"Discover efficient watercolor techniques for quick figure drawing. In this lesson, Bryce Kho shares methods from his sketchbook, ...",2024-12-18T18:37:43Z,"Hello everyone, my name is Bryce Kho. I am an illustrator and concept artist. Today I'm going to be showing you the
sketchbook that I filled out in the last month. These ones specifically are like the
three minute warm-up poses. They're done in a Kuretake Gansai Tambi
and it's just a little watercolor palette. I liked this spread in particular just
because the poses are so short but I tried to lay out the composition so that
it felt like an action was happening. And one of the things that I would take
away from it is Hey, this gave me an idea for an
illustration I might want to do in the future. I was like, oh, it's cool because you can
capture many characters doing many dynamic poses and get a sense of motion
by doing something like this. So every once in a while, even if it's
just practice, it might prompt an idea that you find useful for something else. So from the same session, these are like
five minute poses. I do this in the watercolor mostly
because I come from a background of just wanting to get it done as quickly as
possible. Doing watercolor is one of the fastest
ways to get value on the page. So rather than doing pencil and kind of
like having to slowly render and one little sketch at a time, you just load up
your brush real heavy with a lot of water and a lot of ink And then you're good to go to kind of get
these bigger gestural marks on the page. When it's most loaded, you're gonna do
the things that are gonna be darkest. And as you start having that water come
into the brush, you're gonna do these bigger strokes. As you lose more and more of that ink,
you can go back in with those softer values. Anytime that you see the color blocking
behind the character, that's when I decided to revisit that page and adding
the background behind it allows me to reshape and fix things with the outer
contour of the character that, you know, you otherwise would look like a mistake. But actually when you do this and like I
add like an edge here on the hat, it looks like it's a highlight and it looks
intentional. And as someone who kind of does these
incomplete drawings, it like actually matches the aesthetic. This is a really fun way to make these
drawings more polished and learn something about how form and highlights
can change a drawing. There's normally a big disconnect between
really loose drawings, right? And a finished illustration. And I've always kind of had those as two
separate skill sets within the work that I do. Going back and trying to polish up these
drawings, I think I've gotten a better understanding of what the core of some of
these sketches is. In particular with this one, I really
hated this drawing and I'm sure we all feel that way about some of the ones that
we do when we're studying. And so like the act of taking something
that you don't like, transforming it into something that you're at least okay with
or at least that you learn something new with, it means that nothing is truly
lost. It's not like wasted time. Like you can take something that was
frustrating and learn more from it than just the act of that initial practice. So this is the travel set that I've been
using for this entire book. And so it came with this watercolor brush
pen and another black pen, but I didn't really use that pen specifically. I mostly just used this one. It's a brush with a tube of water. And so basically when you squeeze it, a
little bit of water will come out so that you can use these hard watercolors to
just get value on the page. Within figure drawing, sometimes I get
bored of using that same medium. So this is one where I used a Kuretake
Bimoji pen. As I was saying before, like when I do
some of my illustration work, a lot of it is just with inks. It's with these kinds of drawings that I
have learned most of how I understand color. So with this palette, you'll notice it's
like really messy. And when I'm drawing, I normally
intentionally will get like three different colors on my brush. And it's really fun because basically as
you're working, the last color that you loaded up will be present and then it
will gradually become the colors that you mixed previously. And so you naturally get gradients and
kind of pops of color that you might not expect. And those unexpected decisions are what
teach me like, oh, I like this, I'm gonna do more of it. Or a certain thing, I might try a new
color combination. These are probably like three to five
minute poses. So I'm not thinking of them as being too
precious. When I know a pose is gonna be like 10 to
15 minutes long, then I might be like, oh, I want it to be like a actual
illustration. This one is more like, let's just fill it
up. We took my son to the Natural History
Museum here in Los Angeles, same palette here. I feel like this is one where it turned
out pretty well. I'm feeling good. These two colors, which I would normally
think wouldn't come out with an aesthetic drawing are like, I'm going to go for it. I'm going to see if I can make it work. Once you develop a thing that you're used
to that routine, that can be like a plateau if you don't reach beyond it. So intentionally touching things that you
don't think would work and trying to make them work. Those sorts of challenges are really
exciting to me. I always advocate to people who ask me
how I got better or how I learned my fundamentals. That figure drawing for me is that safe
space to play and learn. And focus on developing the new sorts of
ideas or sharpening up my fundamentals. My favorite drawing on this page was this
one. People often ask me how I decide where to
leave white space. I'm trying to get this drawing done as
quickly as possible. And I want to focus on the things that
are interesting. Means actually skipping everything that I
feel I can skip. So this line on this face, what I found
was when I just did the bare minimum, For those things that I thought were
interesting, it was kind of fun to leave that space open and imply those forms. This is from the same session and it's
the same model. As I was drawing it, I had a new idea. What if I use the poses that she's having
in this random order and try to compose them on the page to make a scene? As I was drawing them, I was thinking
like, how will I connect these poses to make some sort of story happening? In this particular case, it's clear that
she's the focal point and that she's where the other characters are looking so
that some sort of exchange could be happening story-wise. Then later I decided, oh yeah, what's the
conversation that's happening? How can I make this into a scene? And then adding a background that kind of
makes them share the same space. And then by modifying a little bit of the
costume, I can make her into a completely different character. You know, just giving each of these
people a different identity. This was really exciting for me. These are back to five minute poses. One thing that I didn't even notice when
I drew this character is that her head was probably too flat. But then when I drew this outline around
her, I was like, hey, that actually can become both a highlight and create form. It's simple. It's like, yeah, add a background behind
your character and leave negative space for where you might have like a blown out
highlight. Like that concept is simple, but
combining it with a loose drawing, it added a new level of possibility to any
given drawing. That sort of efficiency and practice for
me is like what I'm always thinking about. This session was probably my favorite
figure drawing session of all time. The way that I think I trained myself
most with figure drawing was having a volumetric focus on the model. That really just means like breaking down
what I'm seeing and the shapes I do understand. So like the knee here, right? So that line, that cross contour that's
going along her thigh it reveals the cylinder
shape there right and so understanding that as a simple cylinder makes that
shape less intimidating and makes it easier and more clear for me to know what
i'm doing bringing that understanding to everything that i'm drawing in figure
drawing where it's like what is the underlying shape how do i reveal it as
simply and as quickly as possible We're just making every line convey as
much volume as it can. That's what it's all about for me. And then two would be like feeling the
emotion and trying to convey some more character. The first ones were threes and then these
are fives. But this one with the background, I did
touch it up later. This is an example here of like, okay, I
don't think she needs much more of a silhouette. For the negative space, but like adding
that flourish of flowers, once you've memorized how to draw a flower and so
that you can manipulate it, it's always decorative and fun and makes this feel
like it could turn into a finished illustration if I really wanted it to. Here are, I believe the 10 minute poses. This pose, getting this angle on her
underarm, you don't get to see that when you look at photos, I feel like. It's one of those things where having
that live person in front of you and just that little bit of ability to move your
head around and get that extra information, I think is so invaluable. I also think of figure drawing as a free
space to explore style more. This one is a bit more of an anime comic
influence compared to like more trying to capture likeness with maybe these two. Within your figure drawing practice, if
you get to the point where you feel comfortable with capturing the pose and
those volumes that I talked about previously, Then figure drawing is also the place to
push style because you have that freedom to simplify things because you don't have
enough time and so it's more about like what is the essence of it. I could tell she was being ambitious with
the pose so I wanted to match her energy and so I was like what is she imagining
that she's doing with that and filling in the blank. Having to add in my own other half of the
drawing, the first tiger I drew was awful. I just drew on top of it. It was like almost just like a completely
different drawing. That's where I'm plugging how I feel
watercolor is such a valuable medium of like people often are scared of it and
think that it's unforgiving. This is an example of no, just draw on
top of it. You won't even notice. I think these are seven minute poses. One of the simplifications that I did
that I really liked was her dress was actually a crosshatch pattern that was
sufficiently clear how her clothing was warping as it was striping off of her. It's like, cool, it looks good. Just leave it at that. I can move on to other things. Oh, this one's probably my favorite out
of the book. So this is one where I loved the post so
much that I was like, I'm going to go way slower and be way more delicate with it. It was it was a ten minute post. The initial drawing was just the pink
lines that you see. So a ton of negative space. Really, I just wanted to get the hand and
the face and some of this draping down. I started with adding these patterns to
the draped clothing because I thought that's a pretty safe way to make the
essence of this image more heightened. You know, it is about like kind of a
mysterious aura, right? Although I haven't painted in gold like
that too often. And so it was like kind of a special
treat to make this drawing more interesting. The feeling anatomy is just so freaking
confusing. I've drawn cats many times because I
think of them as an interesting challenge but mastering it is still beyond me. I just want to add it to my long-term
visual library so that I would be able to do this on the fly. I just know through a lot of experience
that I will eventually get it and then that will be something I can just whip
out and not think it's a big deal but it's going to take a lot of trial and
error. These are five minute poses. I actually loved this one. My first thought was, damn it, I should
go move. But I was like, I should give it a fair
shake. It's one of those situations where you're
like surprised how much you liked a pose you thought was going to suck. Actually the amount of like personality
that I felt like was coming through after I started drawing, I was shocked and
surprised by. So I was like, I should really always
give it a fair shot and tackle those things that you think you are going to
not enjoy and surprise yourself. I haven't done nude figure drawing since
high school. I actually only did it for a summer at
Cal Arts when I was in their Inner Spark program. It's such a different vibe. That might not be informational to you
guys. Everyone in the room is way more serious. I think these are fives. Five fives is how they start. And so there was so much information that
I was like, dang, I don't know what I'm looking at. I have a lot more to learn here in this
subject and I was very pleasantly surprised. So this butt pose here. It was another one of those ones where
when it's the back and I don't have the face to emotionally connect to, I'm like,
this is going to be boring. I'm not going to be as interested in
this, but there was just so much interesting muscle information happening. And I feel like that information is what
fuels what I do everywhere else where it's like, oh, now that I know this thing
on the back of a pose can be beautiful. Now it's captured up here and I want to
try to share that with other people someday. This is the research that fuels other
illustration work I do. He was posing like a badass so I added
the scars made him look like he's like a chief. This is Dan Holland who is an amazing
artist who was sitting next to me. Some of these like more weird poses that
we wouldn't think to to draw in an illustration can sometimes like highlight
parts of how that little bit of foreshortening that's happening here that
little bit of extra volume that you wouldn't normally capture that in and of
itself can be a beautiful thing and so Connecting with that, it's all seeds that
are being planted for maybe future ways to express an idea. I think this next set of drawings, what
it's about is like me trying to find a rhythm. The next thing I did was like, okay, I
need to like loosen up a bit and draw faster and not so precious with what I'm
doing. With this one, I was like, I'm going to
try to capture the whole room in this like next set of like 20 to 25 minutes. I'm loading red and blue here. Like there's a little bit of blue in this
first drawing. But then as it fades out, I'm adding less
and less red onto my brush so that I get this natural gradient from red to blue. I'm finding a way to play, finding ways
to keep things interesting. I did touch up this spread even though I
didn't add the backgrounds. Like this one had the like the sort of
motion and flow that I was trying to convey. It's always super satisfying when you
like really nail a really big long line. And I guess my advice for people who want
to do that more What I love about it is every once in a
while, I will take the time to just study the model for like 10 to 20 seconds and
be like sketching in my mind what that shape is gonna be, taking that
pre-visualization, seeing it on the page, almost like a measure twice, cut once
kind of idea, and then just going for it. And the confidence to do that is because I'm seeing this point and I'm seeing this
point and I'm gonna be like there's a muscle here there's a little butt
sticking out and there's a little bit of a thigh there there's the indent of the
knee and then I stick it. Drawings like this are when internally
I'm like drawing is a battle man like I just feel like I'm fighting a war here
and I don't know if I'm gonna come out on top that's like how it feels at least
half the time. The challenge with this I'll say in
particular is that the tip of this brush pen that I use for this entire book is
pretty thick. For a drawing like this, what I'm doing
is I'm just being extremely delicate with the amount of pressure. Over the course of the month, this tip
became more and more dull. So that's also maybe related to the
difficulty level of tackling this medium. Having a stronger, newer brush is
helpful. If you guys yourselves are ever like
stuck in a rut and you're like, nothing is going well, I'm frustrated, do
something else. I find that particularly true for my
approach to illustration work. Like when you have that perfect thumbnail
in your head and you want to nail it so bad, but you've tried five, six times and
it's not going well, the second you do something else, you're fresh. And that freshness is something that you
might be able to like build up to revisit the idea you did want to touch. That's what you need to do. Like to be productive, which like I said,
is my whole MO to get back into a place where you were feeling it and able to
groove. For this page, I was like, I want it to
be about the cast shadows. So the little bit of cast shadow from a
buttocks or from her leg hitting the other leg, like that was the thing I was
interested in. And so I kind of like purposely would do
the line drawing real quick and like more of a blue tone. And then once I finished the essence of
the pose, I would load up more yellows and browns and reds to go back in and do
some of these contour shadows and cast shadows. This is a really cool pose that she was
doing. So when I think a pose is cool, I will
try to reserve a lot more space for it, obviously. But then it can also mean that I'm so
precious and slow with it that I actually lose the time that it would take to go
back and add some of the more things I'm interested in. It's a balancing act, happens to me all
the time. These are some looser drawings and I was
hoping to fill it in with a pose here that I liked, but this was like kind of a
gotcha for me for laying out where a pose will go, where after these two, I was
waiting for a pose that would fit here and it never did. When I start a sketchbook, I always leave
the first few pages blank because it just makes me feel like the sketchbook isn't
ruined if our first page is bad. With these longer poses, I believe these
were 10 and 15, I felt like the pose evoked the work of an artist I really
like. Her name is Soey Mill and she does like
kind of that more like meaty, soft color palette, different like variations in
skin tone. So that was what I wanted to get to. So I did the drawing as quickly as
possible as far as the contour and lines and try to give myself the time to play
with more of the values within the forms. That was really fun because I don't
normally do that. Like if you guys see my work, this is me
exploring territory that I'm more unfamiliar with. I just want to get something out of this
session. I just want to learn something new. And so trying all the new stuff. It's the way that I feel like I'm trying
to grind to level up my overall ability. The last spread is this inner page and
what I feel like was really cool is even though this is a Japanese watercolor, the
milkier colors have an opaqueness to them that make them more like wash. So what that means is like, you can go
over something and actually fully kind of blot it out, like as a more fresh, almost
digital kind of feeling. The way that the value adds a creaminess
and a softness to the form is like not something that I've touched much before. And so it was really exciting with these. I actually was able to really fix her
shoulder. It might be hard to see on camera, but
like I actually had her shoulder jutting out just a bit too much. Maybe it's like 10% too far out. But by adding this black background
behind her after the session was over, I was able to kind of fix that, adjust the
head shape as well by adding the black in between the legs. It's like it really popped The form here forward to like add that
three-dimensional element. It's literally just like the push and
pull of value, making that thing come forward. That was really interesting to me. So overall, I just felt like this
experience of filling out a sketchbook, trying to make every page about something
new for myself. It was super informative and I learned a
lot. My approach is, as you might guess, is
very informed by Kim Jung Gi because the idea of volumes being the thing that
allow you to have freedom to draw from imagination was what was most intriguing
to me. My goal is like, I do want to draw from
imagination, not just from figures, right? And so I want to capture those things for
my long-term use. And that's where once you understand a
volume, like drawing a shadow for a cup or a cylinder, it makes it seem simple,
even though it looks impressive when it's done in conjunction with a couple other
ideas. I do concept art in illustrations and so
the book that I have at my booth is the Sea of Stars art book that is published
by 3D Total and then I also did doodles in the book. This just encapsulates all the work that
I did for that game. I was the sole concept artist and so I
designed everything, all the characters and I also did the illustrations for the
project as well. Earlier this year, I went over to Proko
studios in San Diego and I filmed the course where I break down my process on a
digital illustration. In that course, I go from start to finish
on one of my illustrations. So if you want to know how I do more work
that looks like this, that's what the course is more about. Thanks guys."
pjVS-TlEm4o,Rapid Web Design with Wix Studio - 2025 Crash Course,https://www.youtube.com/watch?v=pjVS-TlEm4o,DesignCourse,UCVyRiMvfUNMA1UPlDPzG5Ow,"https://bit.ly/4fW3Wfi Take the Wix Studio Course (Code 'WIXSTUDIO20' for 20% off) -- Today, I'm going to show you just how ...",2025-01-14T16:13:34Z,"what is up everybody today we're going to be taking a look at Wix studio and how to build this exact layout that you see right here now if you look at the length of this YouTube video yeah it's on the longer side but we're talking like 30 something minutes to create this from scratch including all the interactivity all right so I'm going to show you exactly how to utilize many of the wick Studio features but really we're only just touching on a little bit of it if this video intrigues you you should definitely check out my brand new course it literally just released today and that is really all about utilizing the power of Wick Studio to not only just build really cool interactive animated landing pages but to also establish your business there your agency whether you're a freelancer or you have your own agency it is the perfect tool to really manage your clients and also to build awesome apps so definitely check out that course there's a coupon code here in the link of the top link of the description YouTube and I hope you all take it let's see how Wick studio canol all right so to get started we're going to create a new site and we're going to choose right here the studio blank temp uh canvas and of course you could choose a template you can take a look at the template Marketplace um to get like you know a more polished start rather than just starting with the blank canvas so this is going to load up in just a couple seconds and then we'll be in the main Wick Studio editor where we basically work and get our site ready so first thing we can see at the top here and I'm just kind of real quickly describe the UI it's very similar to other low no code tools in terms of the setup so it's familiar um over here we have all of our tools like for instance if you want to see all the layers very common right here um you have all your pages right here you have in this area a visual site map the site Styles so you know you save your variables for your your colors uh your topography all that good stuff um media section over here where you can upload your own um assets but also you can use unsplash and Shutterstock and do a search or you can use their AI image Creator as well um and then now over here we have Global sections this is stuff like you know your footer and your header um over here we have the app Marketplace so yes there's a bunch of apps um then we have a business section we're not going to get into that um this CMS of course if you want to make your site Dynamic and be able to bring in uh basically essentially serve as a crud app uh if you will you can H tie that to the CMS which is covered in the course as well um and then a code section as well we're not going to mess with uh integrating custom code or anything like that for this very simple demo so up here of course um almost every website's going to have a head or na bar of some some of some sort for us we're not even going to have it this is going to be a simple demonstration to see how fast just to show you how fast fast we can get up and running with a like basically like a landing page or a marketing page um so over here if I come over here to layers we can just hit delete now also um on the right hand side we'll be in property inspector again a very common pattern I that's where all if you select something all the associated properties that you can adjust will show up on the right sidebar which we'll see in a second and of course up here you know we have our tablet um desktop tablet and mobile preview you click on this it's just going to update the preview right here for us um and then the other things to worry about here is just uh you you click publish and it'll be up and live on a live URL that you can share very quickly and then of course if it's a serious project you can tie a custom domain to it as well and then over here we have a preview section which kind of just shows you in the browser what it might look like um I personally like to hit publish a lot and just look what and open up a new browser window to see exactly what it looks like without having the UI of uh Wick Studio here so let's go back to edit site and the first thing that you'll notice here um is you know choose your starting point do you want to have a design section a grid layout or do you want to add an element um so for us we're going to choose a design section and basically these are just template starting points and they're categorized based on you know like a an like if you want to have a section like that's going to talk about the founders or something so there'll be like an about section and there's a bunch of different templates that you can just let literally click and it'll just throw it right into the UI then you can go go ahead and update it in terms of the visual Aesthetics like the background Strokes borders uh rounded Corners um you can update the content and the text obviously the images so everything can be very customized you can add interactions so this is exactly what we're going to do now of course if we choose grid layout this will just give you the scaffolding of a layout okay it's it would be up to you to fill out these individual cells so to speak um and so we're not going to mess with that again the goal here of this video is to get things rapidly produced but of course in the course that I have that I released today the wick Studio course we go over all this stuff as well in detail so what I'm going to do is just go to sections um and I'm going to click the very first one um so this is going to be our hero section and if I left click it it'll show up right here in the middle and of course we can go ahead and preview it and guess what there we go we have our hero section already already designed now of course we want to customize this we want to make this our own somehow so let's go ahead and get rid of that so if I select for instance um and and one of the things you want to do is get into the habit of bringing out the layer section so you can see this layer right here I'm going to go ahead and zoom out just a bit there we go now you can see we have um our H1 is selected and so if we want to update that text literally just double click and here we go so let's come up with a fictional headline of of some sort maybe we'll make this I'm going to think of this off the top of my head a fictional business idea that we can kind of create for um let's just say has something to do with uh fishing all right uh so just type in Superior bait okay so obviously with the size of that text it's just it's just way too large so over here in the property inspector you can see it's it's structured with three different tabs so the first one is just the design tab this is where you make all your design um settings and you know what shows up here is dependent on what type of element you have selected so we have text here there's a bunch of text options as well um and so what we want to do is right down here in the font size section we'll see the font size is 197 pixels which is huge um let's just put in 100 and see what that does so that looks actually pretty good we can probably go a little bit higher so let's try 120 we just don't want to to get cut off now you can see over here there's a Max Min section so this basically means what is the maximum size that this type should reach based on the viewport you know uh like so on a on a like a desktop at a 4k monitor the browser maximized it won't get larger than 200 but that doesn't make sense because right now the the preferred font size is like 120 so we're going to put 120 here and then we'll see what the minimum size looks like so what we can do is just hit this preview and you can see it will scale down you see how it scales down there we go so Superior bait I might make that a little bit smaller I believe it was 77 so let's try something like 508 or so there we go all right so that's better okay now let's say for instance we want to change this background this may look like a background image but it's actually not it's a gradient so if I take the wel section right here make sure that's selected you'll see we have this gradient now what we can do and it's a conic gradient by the way you can um have a a solid color here if you want we can have this color um by default and you can adjust all the uh settings with that to make it unique or we can also have this type of gradient a fluid gradient which is actually really cool and that's what we're going to use so if we take the upper left Color Picker right here we can go right here and then specify by another color so I can just add a color and I'm going to choose something like this and what's awesome is it's going to show you exactly what this thing looks like live right here as you're making adjustments let's see I didn't do that properly let's go over here yeah we'll choose that and hit apply all right we'll do another one let's see I would make this one maybe more on the blue side yeah we'll just choose that one by default and then this one let's take this one and lower right Corner real quickly I don't know if I like that let's hit add all right so one thing to note is notice how the text is white on a very light background that's bad contrast so that's bad readability you 100% want to avoid that and you can either you know adjust for that by making this text black but then white text next to Black text doesn't really make sense or by adjusting the background and so the background in this case once again if we go back to our welcome section come over here we want to adjust this real quickly there we go all right so now it's darker which is now it's 100% fine because we can actually see exactly what's happening here all right so Superior bait now this hero section it's it's set up so that the height is a 100% of the viewport height that's the viewable area um like either in the browser um on the desktop on your laptop or your you know your PC or on your phone or your tablet um so it's always going to be the the 100% viewable height now with that said there's a lot of empty space here and it's kind of boring so let's remedy that and there's a few ways you can quickly without even having to touch code add some interesting animations and interactions so what I'll do is just I'm going to select um let's see we'll select in this cell right here and we're going to click the plus sign up here under add elements so when we do that we could come over here in this area under decorate uh decorative and we can add what's called a transparent video so if I click this we're going to click on more or rather more transparent videos at the bottom and this is going to give you a big list of what they have that's you know basically transparent videos where you can do all sorts of or integrate all sorts of interesting things so if you want a shark that's going to be you know floating around you could do that easily you know what I think we might actually do this I wasn't going to but um yeah let's let's see what it's like let's let's just type in fish all right so it has this one right here let's this one actually might be cool too but let's just go ahead and choose this shark right here I don't know if this is going to look good I didn't try it I didn't want it in this cell so I'm to delete that and just go back uh to this cell and paste that in there we go so now we can kind of uh increase the size of this and let's see let's see what this looks like okay that's actually pretty cool let me move this all right let's see what that looks like all right that's actually pretty cool so let's do another element where we have a little bit of uh Mouse interaction with it so let's let's put in hit plus we're going to go back to decorative and this time we're just going to go to icons and I'm going to click more icons and I'm going to type in heart all right I kind of like this heart right here so let's click add to page once again let's just uh get this situated so we can bring that over so copy that select the cell paste this and we can actually when it comes to all the icons of the vector we can change the color as well so if I want to make this black we just select that and choose black let's make this kind of bigger and I want this to be underneath the transparent video so I'm just going to drag that on top the transparent video layer now what's cool is if I we preview this this is what that looks like okay it's interesting now a lot more interesting than it was but we can make it a little bit more interesting with some mouse movement and so what we'll do is take the vector art and right over here on this section animations we're going to choose Mouse effects we're going to click plus we click add and these are all just different Mouse effects that you can apply to things like you know these uh assets right here so for instance if we want it to track meaning it's going to follow the mouse we click this and then click at the very bottom adjust animation and it's going to give you some properties that are tied to the tracking to the mouse tracking so you can see I follow mouse or you can invert the mouse and you could do a preview literally right here so with these current settings with the distance of a 250 pixels and a velocity of 0.5 movement axis you can constrain this to just horizontal or vertical movement right now it's both and then you can have easing as well this is exactly what it looks like what I suggest doing is experimenting with these values so if you take this just to 60 pixels it means it's only going to move by 60 pixels from its original position all right so this is super cool um and if you were to try to implement this in code this would be a fair amount of JavaScript that you would have to know um so super handy and let's go ahead and hit publish at this point I'm going to hit and you could just you know specify your custom URL at the end here and then hit save and continue and that quickly it's already up and there we go so if I decrease this real quick we'll see what this looks like so far and it's tracking the mouse and it's super cool looking okay so let's continue on let's go back here and let's go ahead and add another section so how do you add another section well let's select a section that we currently just worked on the welcome section and when you hover at the bottom you'll see where it says add section so you click that and Ah that's very familiar this is what we started off with the previous section so like landing pages especially they're section by section um and that's how this is structured so you can choose if you want another design section so let's click on this time wireframes and this is another way that we can get um just general I guess you could say section templates so for instance let's um let's choose this one right here so so this right here is kind of like two sections in one we have a title with a little brief description underneath it and then we have four cards underneath it as well in which we can modify all this stuff including making the icons custom and that stuff so let's say we don't want to have this title no big deal click it delete you're done now let's also say for this piece of type we want this to be larger all right and so what we would do again just come over here let's increase the font size and let's also increase the width so I'm going to hold alt and drag this out so as you can see it's very intuitive it's kind of like figma in a way where you can quickly just design while working in the scaffolding and the structure of an actual web page with markup because this is what this is um so let's take let's see what this looks like just a real quick preview we always get in the habit of taking a look at what everything looks like and of course you can also modify it down as well so I would say this is this text is too large now for a mobile mobile view Port but what I like to do is to make sure first we get everything look looking good in desktop first like this larger view so this is fine right here um what we can also do is let's come over here let's say for instance we don't want this background here right um what we can do is this is basically an image it looks like so if we take this down all the way to zero guess what we're not going to see it not a big deal but it still works on its own so again just taking a look at what this looks like that looks solid okay so now um let's say for instance we're going to have another section now we're going to add more interactivity and all that good stuff down here let's click add section no and come over here to plus and let's take a look at some other interesting types of sections so um let's take a look at I'm not sure if it's under media it might be um let's go to text yes text masks let's click this one now what's cool about this is I think by default the video background that it has chosen it has to do with the ocean I think so let's click on this one actually change background ah so what's cool is we can double click and up update this um Superior bait all right and then let's go ahead and increase the size just a bit so shift alt and also let's take a look at getting this organized just a bit better so let's go to our layers we have our section here and we have our text text mask inside of it okay so with the text mask selected we could see down here we have have what's called docking margins and padding and clearly right now at the top it's up above in a negative I I guess pixel of negative 18 pixels so we don't want that um and so what we could do is we can adjust this manually maybe we could put this to a 100 so now it's more pretty much in the center or so um additionally what we could do is let's take a a preview of this see how cool that is easy text masks without having to worry about code all right we're going to do some other really cool stuff with this section but we're going to do one more section at the end we'll do add section and this time another design section and let's take a look at let's see here there was a specific one I wanted to use because I liked it ah let's choose this one all right so again once again this is a section that I believe is uh set at fit to screen right there which means it's a fluid height right here it's going to stay to the height of the browser um of course if you didn't want that you can adjust it to a fixed height and all that good stuff um so now let's go ahead and take this and we can modify the image Itself by clicking into it and then eventually you get the change image button so again uh if I type in fish you know maybe we'll have some type very interesting fish picture let's click that fish swimming let's update that there we go um let's click on this let's hit change image um let's just call let's just do ocean for this one maybe want we want something that contrasts maybe this is a fisherman person on a little raft thingy okay and then we have um a section with some type in it and again just have fun with it like for instance you know maybe we want to make this background darker maybe we want this background we'll leave it we'll leave it like that so we have an interesting section right here if we view this in the browser here we go so we've just built out this landing page it's not the most exciting thing ever yet um we've done it in record time though essentially so now let's say for instance we want to add some interesting interactivity um like for instance maybe when uh we'll start up here actually let's take this H1 let's say for instance when it appears when it the page loads it's going to animate the text up and in how would you do that very simple we click over we select the text we come over here to this tab animation effects and then this is going to be an entrance entrance animation so when the these will animate when the element comes into view of the viewport so even when you're scrolling down once it comes into view it will do something based on the preset that you chose so let's click add and as you can see there's a lot you can make it blur in you can make it Glide in um you could do a reveal you could do a slide so if I click reveal ah guess what it's showing you what about a slide I like the slide the best so you can of of course adjust the animation with these properties right here by clicking that um we have the distance that it should travel the durations 1.2 seconds and then a delay and then you can choose the easing and the easing right here it's all about you know how things animate based on that 1.2 second duration is it going to start in slow and then end up fast and moving there that's what this stuff is right here so um very fun to player with so let's do the same thing right here with this piece of type we'll click add it'll be the same type of Animation um let's CH slide and then this time we will adjust the delay to like 0.3 seconds that that way the headline comes in first and then that type comes in first let's check it out ah very cool so if you view that again very very cool so this is already a very cool hero section that we've uh created now what about this section this is a space to welcome visitors the site of course we would want to update that but this text right here we could do the same thing essentially so in entrance animation where it will slide in okay and we can even do the same thing here now what's really cool and unique about this section where there's four different cards this is set up on what's called a repeater and we could see it in the layers section right here we have a repeater what this means is if we make an adjustment to the design of this card right here it's going to make an adjustment to all the other ones now of course that's not specific to things like the icons the those will stay unique as they currently are if you make a change to those but if you make a change for instance to the animation of one of them which we're about to do it will make all of them animate as well so for instance if I take um let's see here item one so make sure we have the item selected and we want to do um an entrance animation of slide all right so let's see what this looks like ah see so notice how they all slid in all right so let's click this take a look scroll down oh yeah see how cool that is that's how easy it is to add these type of animations interactive animations because traditionally without it you'd be stuck with JavaScript all right um Superior bait let me show you another really cool thing that we can do as well so we'll take Superior bait let's add a um animation a slide animation as well and then let's with that selection selected let's go ahead and click plus let's go back to decorative let's do icons and let's click more and then I'm going to choose um let's see here free maybe there's I just need an interesting tag of some sort I really didn't think about this um animal all right maybe we'll do fish okay let's um Let's do let's do this fish right here add the page okay so this get super fun now if I move this around currently it's on top maybe I want that to be behind so let's go ahead and get our layers out let's put it underneath okay now what we can do is we can choose with that selected and we have our animation effects tab open we could choose Mouse effects and click add and once again we'll do track so we're going to do another track up here I forgot we already did this in the hero section but yeah might as well do it here as well so oh no it's not tracking so let's see why that would be all right so track adjust animation all right move Mouse to preview there we go okay so now let's go back up edit site there we go look how cool that is super super cool um let's continue on we can add some hover based effects as well so let's say for instance oh and let's let's go ahead and create um entrance animations for these as well so we'll take the image itself and the image itself will do the entrance animation of slide very cool um let's see what shutters does ah that is cool let's click adjust and adjust it from Top preview nice I like that okay let's do the same thing for this area as well so we'll do an entrance of shutters and this will be from Top maybe we'll have a 3 second delay okay so let's see what that looks like very very cool and then additionally we can stack these animation effects on top of each other so we'll take the image once again and we'll do a hover let's click add and for the hover let's do to expand all right so it'll show you a quick preview especially if you click this click preview notice how it kind of it exceeds the actual bounding of the section I don't want that so what we'll do is take our cell now let's come back here we have to get to the point where it shows overflow content right there we want to hide that so now if we go back to image and we go back to to our animations effects hover expand click adjust and then preview it does not exceed the top of that so to see this in action all we have to do is just hover over it look how easily very simple we would have to be doing CSS um animations for this in order for that to work so now we can do the same thing over here and we can do a hover add expand all right and we'll have to do the same thing over here um so we have our cell let's go back oh I think I did that on the cell itself I think that's okay maybe it's not let's go back I forgot to select the image so what I'll do is just remove that and then select the image itself and apply the hover um expand there we go and then make sure that the cell the parent container after selecting it has overflow hide okay so now they're both going to hover as we wish now this right here for some reason it's not working only if I scroll to the top what I can do is hit publish and then click and view this in the browser all right there we go it's working ah there we go very nice all right so let's go back and make some more adjustments all right right and let's click edit site one thing I did I saw that I didn't like is notice how this element is not kind of centered here so I would take it the stack itself and these are alignment options up here so where we could center it vertically or horizontally so we're going to Center that vertical that makes way more sense um and again we could still have a lot of fun with this with the animations um so for instance if we do an entrance animation um like what is a reveal okay um we can expand all right let's just do that so now it'll expand in that is how simple it is to make these modifications now this button I would like to see that centered as well all right so now if I hit publish and we click view site we're going to see what this looks like as it's intended so let's scroll down all right we have this animation we have this very cool Superior bait thing and we have our interactive sections that animate base on scroll location now another thing that we you know definitely makes sense to do is to drag this browser in to see how things are looking at different mobile viewports so this right here I would scale this type down I'll show you how to do that all these are looking good this is looking good and of course because we used a predefined section template it automatically has responsiveness kind of baked into the section so notice they're not no longer in three columns next to each other they're in three rows that are stacked on top of each other which is the pattern that you would use for this for mobile um so let's go back into our editor and what we could if we want to make those adjustments um we can go to tablet right here and start making adjustments to the font sizes or we can wait till we get to the the phone viewport and make our adjustments there it's all up to you um so what I would do is maybe take this and scale it down just a little bit from where it was from 24 to 20 for the font size right here um and then that will apply and and remain intact for any of the viewports that are smaller than that one so like this this viewport it'll stay there and then we can make it even smaller maybe like size 18 or 17 on this section so now if we preview this we'll see if we expand it it's going to get larger you see how the text gets larger like that another thing to note is if I hit publish again real quickly and we click view site one of the things to note is that per you may not want to have 100% fluid layout where on like a 4k monitor that's with a browser that's maximized like this um you may not want to have a situation where the the layout expands all the way to the very left and right and if you don't want that which I don't because I think things are spaced out a little bit too far you can do this let me show you real quick we come over here and with for instance this welcome section what we can do is this little toggle apply Max width all right and it's going to tell the sight's max width is set to, 1600 pixels so you can click apply Max width and nothing Visible Changes however if we expand this out notice how it stays at600 pixels all right so that's super super cool um and we can apply that in a few of the other areas as well so for instance I would apply it on this section grid right here apply Max width I would apply it on this section as well oh it's already it already is applied so some of them may come with it applied already and then we have our products I would apply it there as well so now if we hit publish and we wait for it to load we click view site notice now it's not going all the way to the very left and very right of the browser it's staying fixed within that section you know the 100% width section um and that's very cool so as you can see it is super easy super fast to rapidly create landing pages and websites with Wick studio and hopefully we know we only kind of just touched on a little bit of it but if you really want to learn more there's so much more to learn definitely check out my brand new Wick Studio course the link is in the top link of the YouTube description here there's a coupon code there and I hope to see you all join it see you soon"
WpX2F2BS3Qc,What is Data Cleaning? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=WpX2F2BS3Qc,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we learn all about Data Cleaning! Data Cleaning is an essential part of working with data and making it useful for ...,2025-02-11T13:00:47Z,what's going on everybody welcome back to another video today we're going to be talking all about data [Music] cleaning now data cleaning is an essential part of working with any data and so this is a very core fundamental concept that anybody who works with data will need to know as a data analyst I've cleaned data in almost any way that you can imagine so I'm very excited to talk about this topic let's not waste any time let's J on my screen and take a look all right so let's take a look at what data cleaning actually is data cleaning is the process of identifying and fixing issues AKA dirty data in your data to ensure it's accurate consistent and complete let's take a look at these patient names on the right hand side really quickly these are all my names but just in different versions or variation this is very dirty so we have Alex freeberg Alexander freeberg Alex F Alexander F Alex freeberg with a u Alejandro freeberg these are all the same person that's all me but if you're looking at this in a database it's going to consider all these people different and so what we would have to do to clean up this data is we would have to make all of these names consistent and the same maybe we do that by saying okay all these people have the same date of birth they're all male they all have the same Social Security number so with all of those things we could say yes these are all the same person and we could make all these patient names Alex freeberg with an E that would really clean up this data a lot why do we need to clean data at all what is the reason that we do this one is to ensure accuracy because you're going to be giving this data to stakeholders or your boss or a customer and they're going to expect that this data is accurate but if you're giving them bad data then they may make bad decisions with that data and that's going to come back on you next it improves efficiency when you are working with clean data it is 10 times easier to analyze and use that data in any way you need rather than it being really messy and really difficult to work with lastly it builds trust and stakeholders and customers and clients they want to be able to trust that what you're giving them the data that you're using is actually accurate and complete and so those stakeholders are really going to trust you if that data is clean and accurate and you can find insights with that data now let's take a look at some other examples of dirty data and these are not all of the examples but these are many of them here in this data we have columns and rows like an Excel file we have a name a phone number an email address and an address in each of these you can see a lot of mistakes take for example Le in the name column we have things like punctuation marks and abbreviations these are the same person just like we looked at in the example with my name these are all the same person but each of these records requires a different row of data because it isn't standardized or cleaned let's look at phone number this one shows us missing data and this is a very common one where you're collecting phone numbers and all of a sudden you just don't have a phone number so you're missing that data now what are you going to do with that when you're cleaning it maybe you need to populate that data maybe that is something that you can get from another data source or you know it and you can actually put it in there that is a way you can clean that data up next we have mixed numbers and letters it may look like 831 262 2149 but that one is actually an l and so this is just a classic case of bad data they should all be in the same format with the phone number but they're not some have dashes some have commas some don't have anything and some even have letters that's very very messy next we have email address now within this one they're all somewhat different right we all have different email addresses and again that's just a standardization making them all the same issue but we also have something like a non-printable character now there are specific characters within computer systems that you just shouldn't be putting or really can't put in specific data types if this is a string that may be a character that you shouldn't have or can't have that's going to mess up your data lastly in the address section we have two issues here we have messy structure and format so some are capitalized there the some of the data is capitalized versus not capitalized we also have incomplete data for example we have Emily renelli Boulevard but we don't have a number we don't have a city we don't have a state there's just incomplete and that makes it really difficult to work with that data now here we have something called a data cleaning cycle and I really like this visualization because it shows that data cleaning is not just a onetime thing it is something that you have to continuously do and I have and I've experienced this a lot over my years as a data analyst once you clean data isn't necessarily perfectly cleaned you kind of have to go back and clean it as you go and it's never really perfect it's just really usable this cycle typically starts at the very top so we have importing data this is just bringing in data from other systems usually through some data collection system like a data pipeline that we talked about in the data collection lesson last time next we have merging data sets this is combining multiple data sources into one data set next we have rebuilding missing data this is where you're handling incomplete data or you're actually filling in that missing data next we have standardization and normalization standardization is where you're making sure that the data follows a consistent format so all the date formats are the same for example if we go back to this one we can make sure that the address is all standardized they all have an address a City a state and maybe a zip code if you need they all have the same data next we have normalization this is a little bit different because you're adjusting data to a common scale without distorting the data itself next we have D duplication and this is where you may have duplicates of data in your columns for example maybe we have a 100 Columns of Alex freeberg and we don't need 100 columns it's all the exact same data we would want to remove 99 of those to just keep the one that we actually need next we have what they call verification and enrichment this is really just data quality you're going through and you're validating your data making sure that your data is accurate then lastly you're saving this clean data in the format that you need for your next processes whether it's analyzing or using in some type of product now one thing I want to mention on here is that this cycle is not perfect in fact I usually do D duplication earlier on within this cycle but it really depends on the data itself sometimes you're importing merging rebuilding and then going back and getting more data and then importing merging and rebuilding so this isn't a perfect cycle this isn't exactly what you should do every time but these are often the steps that I am taking when I'm cleaning data now data cleaning is very specific to different tools and I have a lot of different videos on how to exactly clean data with full projects on data cleaning in SQL and Tableau and powerbi and Python and Excel and so if you want to learn Hands-On how to actually clean data go check out those videos because they are fantastic to learn how to actually clean data with that being said thank you guys so much for watching I really appreciate it if you like this video be sure to like And subscribe and I will see you in the next one [Music]
cd_jj0IRmaA,What is Data Collection? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=cd_jj0IRmaA,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we break down exactly what Data Collection is and how to works! RESOURCES: Analyst Builder ...,2025-02-04T13:00:52Z,what's going on everybody welcome back to another video today we're going to be talking all about data [Music] collection now data collection is an extremely part of getting data in fact I was on a data collection team for over 3 years I absolutely love data collection and so I'm really excited to talk about this topic let's not waste any time let's jump onto my screen and take a look let's take a look at data collection now what exactly is data collection just as a definition data ction is the process of gathering data from different data sources to use in analysis decisionmaking and problem solving a data source means where the data is actually being created and data is created all around us it could be in a hospital EHR system it could be in your bank account it could be through apis it could be through a website or it could be in a CSV file so why is data collection important and what I really should say is why is it really important one it ensures that you have raw material or the raw data needed to make informed decision you can then use that data to identify Trends patterns and opportunities within that data and it also lays the foundation for data quality this is something that we're going to cover actually in our next lesson when we look at data cleaning so if you collect data poorly or if you do not process that data correctly that can lead to bad data which can give you incorrect results and then of course you're going to make bad decisions with bad data now data collection does not just happen it doesn't just magically appear this is a very calculated and specific process that needs to happen in order for you to get that data let's take just a really quick example you are actually running an online shop you have a website you're selling stuff on the right you're selling T-shirts and jackets and other clothes I'm assuming now you want to track how many customers actually put something into their cart you might be able to compare how many customers put something into their cart versus how many customers actually bought something and that could be useful information to you that data just doesn't appear a data collection system is set up to collect that data and place it into something like a database so it can be analyzed and used now these data collection systems can be something that you manually create and we'll talk about that in a little bit or it could be something that you just pay for so it could be a system that you say hey I want you to collect this data they go and do it for you and you don't have to actually do the work but there is a data collection system in place whether it's you or some system you paid for all this data is going to be processed via a data pipeline now this is a system that's going to automate the movement of data from one place to another while often transforming it along the way let's take a look at this ETL pipeline ETL stands for extract transform and load and you can see that through this process on the left hand side we have all these different data sources it could be different parts of your website or it could be different websites or it could be different locations of the data entirely we're going to extract that raw data and we're going to put it into a staging area this staging area is kind of like a temporary hold for your data where then you can work with data professionals like data Engineers database developers data analyst data scientists who can then determine how we want to transform that data now transforming data is something we'll cover again in the next lesson when we talk about data cleaning but transforming the data makes that raw data more usable for whatever you're trying to use it for after we transform that data we're going to load that data into something like a data warehouse a database maybe it could even be an Excel file be as simple as that but then from there we can use that to analyze our data that's really what data collection is in a nutshell now I worked on a data collection team for many years and I was a data analyst and I would often work at every single step of this process I would have to go and talk to the client and see exactly what data they had available and sometimes they didn't even have data available and so they said hey we want to collect this new type of data so as part of my job is I would help them understand how to start collecting that data so then we could create these data pipelines to then transfer it into a database to use data collection is not a one-time thing either data collection is always happening the ETL pipelines they break or they need new ones or the source data changed on the left hand side of this diagram The Source data changed from one part of the website to another and so you need to go back and you need to fix that data pipeline to correctly collect all the data that you're wanting and so this is a very active process this typically doesn't just happen one time and then it's done it typically happens one time then you adapt it and you keep changing or maybe fixing it over time that is data collection in a nutshell and so if you like this video be sure to like And subscribe and I'll see you the next video [Music]
OcG0B4ny1cE,What are File Types? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=OcG0B4ny1cE,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we take a look at all the different file types you'll work use! RESOURCES: Analyst Builder ...,2025-01-28T13:00:34Z,what's going on everybody welcome back to another video today we're going to be taking a look at file [Music] types now file types or file formats are everywhere if you've saved any type of file ever to your computer you had to save that as a specific file type so in this lesson we're going to be diving into exactly what file types and file formats are and how they are used so with that being said let's J over to my screen and take a look all right so let's take a look at what file types are file types refer to the format in which data is stored in a file and you're going to see even in the next slide there's so many different file types out there there are a lot and we're going to get into specific file types in this video that you can see a lot of the different types of files that are very commonly used each file type is designed for a specific purpose and it depends on what kind of data it's holding and how it's going to be used or shared you really can think of these like a container whether it's a bowl or a plate or it's a vase each one of these containers is designed to hold different things and that's kind of like what a file type is used for now if you go right now you look at your file explorer if you're using a Windows machine if you go to your view and you look at the details the view is right next to the sort button up there you can see a different type of file type and with all this is my actual you know file explorer right now if you go look in my downloads we have a lot of different stuff I have MP4 files I have different file folders that holds different files I have pngs I have csvs I have PDFs I have all sorts of stuff to the right of this you can see the size as well all these different file types hold the data differently and some take a lot more data than others so that size is how much data is actually stored within that file let's take a look at probably the most simple type of data file or data format that you'll see which is a text file a text file is super simple and just stores data as plain text often used for unformatted or tabular data this is data that I would work with all the time as a data analyst we would work with text files and CSV which stands for comma separated values this image on the right hand side is being stored right now as a text file but if I then went and saved it as a CSV it would separate these values based off of the commas so country salesperson order amount quarter this data would be separated and all the commas going down on each row would be separated into basically columns and rows dsv and text files are super common and they can store a lot of data very simply because they're just storing plain text and so it doesn't get super complex and so it's a very popular type of file format next we have structured file types now these are files that store data in a predefined structure typically rows and columns or in a hierarchal format one of the most common types is one that I'm sure almost everyone has used that's an xlsx that's going to be an Excel file so your typical Excel workbook and so right here on the right hand side this is your standard workbook you're going to have columns and rows and different worksheets and you'll be able to do different things with that data in these Excel files we also have a DB file and this stands for a database file so often times in the data world if you're working with a customer or a client they might give you an entire backup of their database and you can go and use that and within that database they're going to have columns and rows especially if it's a relational database they're going to have columns and rows just like an Excel file but on a much larger scale it typically can hold a lot more data and then of course you get more complex things within a database file like database schemas to connect and bring all that data together next we have semi structured file types now these get a little bit more complex these file types have a loose structure often used to store complex data relationships some common formats for this are Json and XML files now these can get a lot more complex than just columns and rows because in columns and rows it's pretty simple it's pretty straightforward but something like a Json file which we have on the right hand side you can have data nested Within other data which just means data within data within data and so there can be lots of layers to this data this is another one that's just really popular and really common within data professionals and they are really great for storing data that's a little bit too complex for something that's really simple like columns and rows next we have unstructured file types now you saw this within my file explorer these are files that don't follow a specific format they don't have columns and rows they're often just raw data or multimedia data for example this video that I'm recording right now I'm recording onto an mp4 file this image on the right of this beautiful little hummingbird is a PNG or there's actually lots of different formats for images but PNG is probably the most common one lastly we have big data and specialized file types so these file types are designed specifically to handle really large scale data efficiently one of the most common and one that if you've worked in the data world or you've worked in Azure or maybe even AWS that you might be familiar with is something called a parquet file parquet files are very common especially if you're working in something like spark that's something where I've used it quite a bit or even data bricks where you're bringing in massive amounts of data and you want to do that in a really efficient manner so it has all these different properties that they bring in to these parket files that a normal CSV file would never be able to do or handle now what file type you choose can be extremely extremely important and I've made a lot of mistakes over my years as a data analyst storing data in you know one file format versus another and that has caused issues and so it's so no how data actually is collected and used and stored and analyzed and shared you have to take all these things into account when you're determining what kind of file type you want now in the next lesson we're going to be looking at data collection and we're going to address this exact thing because if you store data in a specific way and then you want to put it in a database it may not be possible if you store it incorrectly and so there are a lot of things to consider within just data collection but this has been our lesson on file types I hope it was helpful I hope it was useful this this has been something that over the years of working in data has just become more and more important it's definitely something you need to consider especially when you're working with data consistent with that being said thank you guys so much for watching I hope this was helpful if you haven't already be sure to like And subscribe and I will see you in the next video [Music]
hXpt8zj_ajc,What are Data Types? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=hXpt8zj_ajc,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we are going to learn all about data types and why they're so important! RESOURCES: Analyst Builder ...,2025-01-21T13:00:55Z,what's going on everybody welcome back to another video today we're going to be taking a look at data [Music] types if you've worked with data at all you know that data types are very important and if you haven't you were in the right place cuz we're going to talk a lot about what data types are and how they are used so with that being said let's jump on to my screen and take a look so let's dive into it let's take a look at what data types are now data types really quickly before we jump into the definition data types are something something that if you work with any data in any way data types do pertain to you these are things that you need to know these are things that eventually will either help you or hinder you on whatever you're trying to get done so a data type is an attribute associated with a piece of data that tells a computer system how to interpret its value every single programming language every database has similar but slightly different data types I've worked with all types of programming languages and lots of different databases and they all act somewhat similarly but they can be different at times so knowing the Core Concepts that we're going to cover in this lesson can be really helpful to kind of Traverse the different types of data types in different systems to get started there are a ton of different data types I mean there's probably 50 60 70 different data types I'm just throwing out random numbers but they all fall under certain categories they're usually either strings which are things like free text numbers like 1 2 3 or date and time the January 1 1st of 2024 at 6 p.m. these are kind of the core fundamental data types but under each of these are a lot of other data types as well now within string you could have something like a name John Smith Emma Johnson this is very simple data that you can categorize and you can use next it could be an address 123 Main Street New York New York this is something that can determine a location then we have something like product categories Electronics Furniture Etc these product categories are all strings but then can be used later on in the data process for things like aggregation maybe you want to see how many customers are buying electronics at your store versus furniture at your store you have to collect that data you do that with string data next we have numerical or numbers this is probably the most simple data type it's integers 25 100 minus 15 then we also have decimals these are both two separate data types so decimals like 12.5 99.99 now within certain systems especially databases they'll have something like a big integer for really large numbers they'll have something like a small integer they'll also have just a regular integer within decimals they may have something like a double point system or a decimal data type so within each of these they may have even subcategories of data types next we have date time the dates could be something simple like 1210 of 2024 we have a day a month and a year or it could be month day year there are different formats within dates then we have times or timestamps so time just indicate the time of the day then time stamps are both date and time combined so the time stamps tend to be very specific then we have dates which give a general day and then times that just give a specific time time stamps can be very useful but often times when you're working with it in the real world you'll break out these two data into separate columns you have date in one time in another and that may allow you to do more advanced things with this data so understanding what data type your data is is really important because that allows you to work with it and analyze that data in different ways for example if we're working with numerical data we can use that to calculate averages you could say the average person is spending this much on our website per day that would be an example of how you can use numerical data or with string data types or categorical data you can group it and count on those occurrences or you can do any type of aggregation sum Max Min average median all these different things you can see how many people are buying things in our electrical department versus our furniture department and that is worthwhile data to use that really is the basics of data types now if you go into specific things like if you go into SQL or if you go into python or Excel I have a lot of lessons specifically for data types in those systems and then it gets a little bit more complex and so if you want to really dive into data types in a specific system go into any of my playlists whether it's SQL Excel uh powerbi Tableau they all have different data types and you can learn a lot more about data types within that specific tool with that being said I hope that this was helpful if you like this video be sure to like And subscribe below and I will see you in the next one [Music]
ItZlTixh6Bs,What are KPIs and Metrics? | Data Fundamental for Beginners,https://www.youtube.com/watch?v=ItZlTixh6Bs,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we take a look at what KPIs and Metrics are and the difference between them! RESOURCES: Analyst Builder ...,2025-01-14T13:00:34Z,"what's going on everybody welcome back to another video today we're going to be taking a look at kpis and [Music] metrics now if you've worked in the data World you've probably heard these terms before because they are very popular to throw around and use but you may not know exactly what they mean so in this lesson we're going to be diving into kpis and metrics so with that being said let's jump over to my screen so let's dive into kpis and metrics and let's start off with metrics so what exactly is a metric a metric is something that by the way people throw out all the time and they typically get metrics and kpis confused and so we will be really good going through this I'm going to talk about metrics first and then how metrics relate to kpis so a metric is any measurement that provides information using data so if you're taking data and you're tracking that data and you're measuring that data that is a metric it can be anything for example let's say we have a website and we sell things on this website it's like an e-commerce platform a metric that we might have is website visits how many visits per month do we actually have and let's say this month we had 15,000 monthly visitors we also could look at sales numbers so we sold 500 units of whatever product we're selling so these are core metrics now if you look over on this right hand side we have this dashboard this is something that a lot of companies will have it'll be something to track their metrics or at least visualize their metrics it could be on revenue or margins or all these different things this is something that when you're working with data people want to know they want to be able to measure and track specific data now let's see how this compares to a kpi kpi stands for key performance indicator and this is a specific metric that directly measures progress towards a goal so every single kpi is going to be a metric but not every metric is going to be a kpi for example let's over on this image on the right hand side we start with all of our data and then we take that data and we say what metrics do we want to look at within this data then we determine what metrics do we actually want to track which metrics align with our goals so for example in our website that we have we have 15,000 monthly visitors but let's say our Target kpi is going to be those monthly visitors but our goal is 20,000 and so we have a metric that we're tracking and now we're saying we want this to be a goal that we achieve and it's also measurable for our sales numbers we have 500 units sold one of our sales kpi could be okay this month we're selling 500 but next month we want to increase our sales by 2% each month going forward so that could also be a kpi you may be asking how do you choose a good kpi and this is a very good question because I've worked with a lot of different data teams and they just sometimes randomly choose kpis they're like this seems like a good one to achieve or get better at that may be true but it may not actually progress you towards the goal that you're wanting and so when you're trying to choose a good kpi let's say you're tracking these metrics you're saying I want to progress towards a goal how do we choose what kpis we want the first thing you have to ask is what is your goal maybe for our website it was we want to increase sales that's our number one thing then we have to identify which metric actually best tracks our progress towards that goal on a website there are a ton of different data points that you can do for example you can see how long long a user is actually on your website you can see how many times one user gets on your platform every day maybe they get on three or four or five times a day those are metrics but that may not be what your goal actually is to sell your products and then lastly you have to say is this metric actionable maybe you can't make people sign onto your website three four five times a day if that's what you're wanting to do that may not be an actionable metric to actually track but something like the daily users is because maybe you could send out a daily email or you can do some type of marketing to get more people on your platform these are things that you have control over and that are actionable so really quickly let's just break down key performance indicators versus business metrics a kpi is going to provide a direct line of action to a business goal whereas business metrics don't necessarily contribute directly towards a goal kpis are measured actively as a benchmark to a goal whereas business metrics can be measured but they aren't typically checked and monitored for example at a previous company I was working with we had lots of metrics that we kept kind of tabs on but we only put the key performance indicators are the most important ones into dashboards or maybe into reports that we would then provide to our users next kpis are a set of standards that are vital to the business whereas metrics may or may not be vital to the business again could be anything versus kpis are like the core things that you want to track and get better at and then lastly this is something I mentioned before all kpis are business metrics but not all business metrics are kpis you specify exactly what metrics you want to be kpis to help move move your business or grow your business however you want to do that so in a nutshell a metric helps us understand what's happening in our data and kpi show us whether we're reaching our goals using our data I hope that this was helpful this was not something that I knew when I first started uh working in data something I kind of figured out along the way but if you are just getting into Data or maybe you already are and you don't know what this is now you know and now you can go into business meetings and you can go into conversations being a little bit more knowledgeable with that being said thank you guys so much for watching if you like this video be sure to like And subscribe below and I will see you in the next video [Music]"
PEWMgtu-1e4,What is Data? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=PEWMgtu-1e4,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this series we walk through the fundamentals of data! This lesson we look at what data exactly is! RESOURCES: Analyst ...,2025-01-07T13:00:35Z,what's going on everybody welcome back to another video today we're going to be starting our data fundamentals [Music] series now in this series I'm going to be walking through some really core fundamental concepts about data if you've been on my YouTube channel for any amount of time you know that we talk a lot about data specifically about how to use tools to work with your data but up until now I haven't really dived in and broken down the Core Concepts of what data is and how it's used in the real world so in series that's what I aim to do and in this video we're going to be starting off with what is data let's jump over to my screen and take a look all right so in this lesson we're going be talking about what data is again we're starting from the very Basics really working our way up through this series so by definition data is just raw facts and figures it doesn't even necessarily have to be on a computer it could be on a notepad if you writing down 1 2 3 4 5 that is data that you're writing down it's going to be harder to use that data necessarily because you know on a computer Compu it's easier to process and use data but that is data some examples of data are things like a number the number 45 that is a piece of data a word could be data just the word completed or a sentence that is also data and then a date could be data as well so we have 1210 of 2024 this is a piece of data now the thing about data is is that data is everywhere it's in everything we do all the time but without collecting it without context of what this data actually means it's basically useless look at some examples of how data is used in the real world something that a lot of you will use almost every single day so let's take a look at this first one this is a weather app I use my weather app almost all the time I got to send my kids to school and I want to check if it's rainy if it's hot if it's cold if they need a jacket if they don't and that is something that requires a lot of data meteorologists use tools to collect data on all of these things then they're present Ed in these apps so they collect data about weather temperature humidity location time and they take all of this and they aggregate it that just means they bring all of it together into one place and they aggregate these numbers and finally they'll present it to you based off of your data your location where you actually are and so that is something that is extremely data dependent they typically will process this as well as forecast which means they're going to kind of predict out what they think is going to happen in the next hour 2 hours maybe it's a day or several days ahead they can also use this data to predict what might happen in your location another example would be a bank app so I go on my phone all the time to check my banking statements to make sure that you know I didn't spend too much money and everything in your banking app is data and so when you go on this app like you can see in this image down here you can see where you spent your money you can see the amount you spent your money the date and the time that you spent your money these are all different points of data that the bank has collected Banks collect hundreds if not thousands of data points but really common ones are think like Bank deposits and transactions and payments that you've made all these things so they can put it in your dashboard so that you can track your money now let's take a look at different types of data because there isn't just one type of data data is just one thing data is really complex and there's a lot of different things to it so really briefly I'm going to touch on structured semi-structured and unstructured data structured data is really neat and really easy to visualize and see as you can see in this uh image right here that typically refers to something that has columns and rows something like an Excel file everybody's used an Excel file before and so that is something that is very structured very easy to kind of visualize and use and understand the exact opposite side of this we have unstructured data unstructured data is kind of all over the place and it might be a lot harder to use for example that could be something like a photograph that you took or maybe a video or an audio file these are all examples of unstructured data that you can't really put into something like an Excel file for it to be in columns and rows then we have something called semi structured data semi structured data is closer to structured data than it is unstructured Data but it is more complex than something like an Excel file for example semi-structure data might be something like a Json file now we haven't gotten to file formats and file types yet in this series but when we do I'll dive into what Json files are because Json files store things differently than something like structured data where they nest data in kind of these hierarchies let's take a look at the two main ones structured versus unstructured data structured data is the data that I primarily work with as a data analyst this is typically going to be something like a row and column in an Excel file or a CSV file or in something like a relational database a database is just a place where you will store a lot of data and all of that data typically connects in some way so you can work with a lot of it structur data is also quantitative versus qualitative like unstructured data structured data is numbers based and it's measurable and so you can easily kind of track it and use it whereas qualitative could be something like a survey where it might be free text where it's someone saying you know I had a really great experience at this and I really liked this and I liked this that's a little bit harder to actually put into numbers how much that person liked but quantitative maybe hey how much did you like this on a scale of 1 to 10 and if the person puts a seven that's a very specific answer now the amount of data that sits as structured data is significantly less than unstructured data structured data is only about 20% of Enterprise data compared to 80% of unstructured data and so there's a lot more unstructured data in the world and so what a lot of people in the data world do is they try to take that unstructured data and they try to make it structured and so that is a big part of what a lot of data professionals do lastly and we just touched on this but structure data tends to be things like numbers dates strings which are things like words and text versus unstructured data which is things like images audio video and others that being said data is everywhere it is all around us all the time and especially in this technological world we live in it is literally in everything we do but the challenge especially for people in data who are working with data the challenge is to collect it to organize and analyze it that you can then use that data and so we're going to be covering a lot of these different topics in this series that you can understand exactly what it is and how we can thank you guys for joining in on the very first data fundamentals video we will have more like this thank you guys so much for watching if you like this video be sure to like And subscribe and I will see you in the next one [Music]
WpX2F2BS3Qc,What is Data Cleaning? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=WpX2F2BS3Qc,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we learn all about Data Cleaning! Data Cleaning is an essential part of working with data and making it useful for ...,2025-02-11T13:00:47Z,what's going on everybody welcome back to another video today we're going to be talking all about data [Music] cleaning now data cleaning is an essential part of working with any data and so this is a very core fundamental concept that anybody who works with data will need to know as a data analyst I've cleaned data in almost any way that you can imagine so I'm very excited to talk about this topic let's not waste any time let's J on my screen and take a look all right so let's take a look at what data cleaning actually is data cleaning is the process of identifying and fixing issues AKA dirty data in your data to ensure it's accurate consistent and complete let's take a look at these patient names on the right hand side really quickly these are all my names but just in different versions or variation this is very dirty so we have Alex freeberg Alexander freeberg Alex F Alexander F Alex freeberg with a u Alejandro freeberg these are all the same person that's all me but if you're looking at this in a database it's going to consider all these people different and so what we would have to do to clean up this data is we would have to make all of these names consistent and the same maybe we do that by saying okay all these people have the same date of birth they're all male they all have the same Social Security number so with all of those things we could say yes these are all the same person and we could make all these patient names Alex freeberg with an E that would really clean up this data a lot why do we need to clean data at all what is the reason that we do this one is to ensure accuracy because you're going to be giving this data to stakeholders or your boss or a customer and they're going to expect that this data is accurate but if you're giving them bad data then they may make bad decisions with that data and that's going to come back on you next it improves efficiency when you are working with clean data it is 10 times easier to analyze and use that data in any way you need rather than it being really messy and really difficult to work with lastly it builds trust and stakeholders and customers and clients they want to be able to trust that what you're giving them the data that you're using is actually accurate and complete and so those stakeholders are really going to trust you if that data is clean and accurate and you can find insights with that data now let's take a look at some other examples of dirty data and these are not all of the examples but these are many of them here in this data we have columns and rows like an Excel file we have a name a phone number an email address and an address in each of these you can see a lot of mistakes take for example Le in the name column we have things like punctuation marks and abbreviations these are the same person just like we looked at in the example with my name these are all the same person but each of these records requires a different row of data because it isn't standardized or cleaned let's look at phone number this one shows us missing data and this is a very common one where you're collecting phone numbers and all of a sudden you just don't have a phone number so you're missing that data now what are you going to do with that when you're cleaning it maybe you need to populate that data maybe that is something that you can get from another data source or you know it and you can actually put it in there that is a way you can clean that data up next we have mixed numbers and letters it may look like 831 262 2149 but that one is actually an l and so this is just a classic case of bad data they should all be in the same format with the phone number but they're not some have dashes some have commas some don't have anything and some even have letters that's very very messy next we have email address now within this one they're all somewhat different right we all have different email addresses and again that's just a standardization making them all the same issue but we also have something like a non-printable character now there are specific characters within computer systems that you just shouldn't be putting or really can't put in specific data types if this is a string that may be a character that you shouldn't have or can't have that's going to mess up your data lastly in the address section we have two issues here we have messy structure and format so some are capitalized there the some of the data is capitalized versus not capitalized we also have incomplete data for example we have Emily renelli Boulevard but we don't have a number we don't have a city we don't have a state there's just incomplete and that makes it really difficult to work with that data now here we have something called a data cleaning cycle and I really like this visualization because it shows that data cleaning is not just a onetime thing it is something that you have to continuously do and I have and I've experienced this a lot over my years as a data analyst once you clean data isn't necessarily perfectly cleaned you kind of have to go back and clean it as you go and it's never really perfect it's just really usable this cycle typically starts at the very top so we have importing data this is just bringing in data from other systems usually through some data collection system like a data pipeline that we talked about in the data collection lesson last time next we have merging data sets this is combining multiple data sources into one data set next we have rebuilding missing data this is where you're handling incomplete data or you're actually filling in that missing data next we have standardization and normalization standardization is where you're making sure that the data follows a consistent format so all the date formats are the same for example if we go back to this one we can make sure that the address is all standardized they all have an address a City a state and maybe a zip code if you need they all have the same data next we have normalization this is a little bit different because you're adjusting data to a common scale without distorting the data itself next we have D duplication and this is where you may have duplicates of data in your columns for example maybe we have a 100 Columns of Alex freeberg and we don't need 100 columns it's all the exact same data we would want to remove 99 of those to just keep the one that we actually need next we have what they call verification and enrichment this is really just data quality you're going through and you're validating your data making sure that your data is accurate then lastly you're saving this clean data in the format that you need for your next processes whether it's analyzing or using in some type of product now one thing I want to mention on here is that this cycle is not perfect in fact I usually do D duplication earlier on within this cycle but it really depends on the data itself sometimes you're importing merging rebuilding and then going back and getting more data and then importing merging and rebuilding so this isn't a perfect cycle this isn't exactly what you should do every time but these are often the steps that I am taking when I'm cleaning data now data cleaning is very specific to different tools and I have a lot of different videos on how to exactly clean data with full projects on data cleaning in SQL and Tableau and powerbi and Python and Excel and so if you want to learn Hands-On how to actually clean data go check out those videos because they are fantastic to learn how to actually clean data with that being said thank you guys so much for watching I really appreciate it if you like this video be sure to like And subscribe and I will see you in the next one [Music]
cd_jj0IRmaA,What is Data Collection? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=cd_jj0IRmaA,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we break down exactly what Data Collection is and how to works! RESOURCES: Analyst Builder ...,2025-02-04T13:00:52Z,what's going on everybody welcome back to another video today we're going to be talking all about data [Music] collection now data collection is an extremely part of getting data in fact I was on a data collection team for over 3 years I absolutely love data collection and so I'm really excited to talk about this topic let's not waste any time let's jump onto my screen and take a look let's take a look at data collection now what exactly is data collection just as a definition data ction is the process of gathering data from different data sources to use in analysis decisionmaking and problem solving a data source means where the data is actually being created and data is created all around us it could be in a hospital EHR system it could be in your bank account it could be through apis it could be through a website or it could be in a CSV file so why is data collection important and what I really should say is why is it really important one it ensures that you have raw material or the raw data needed to make informed decision you can then use that data to identify Trends patterns and opportunities within that data and it also lays the foundation for data quality this is something that we're going to cover actually in our next lesson when we look at data cleaning so if you collect data poorly or if you do not process that data correctly that can lead to bad data which can give you incorrect results and then of course you're going to make bad decisions with bad data now data collection does not just happen it doesn't just magically appear this is a very calculated and specific process that needs to happen in order for you to get that data let's take just a really quick example you are actually running an online shop you have a website you're selling stuff on the right you're selling T-shirts and jackets and other clothes I'm assuming now you want to track how many customers actually put something into their cart you might be able to compare how many customers put something into their cart versus how many customers actually bought something and that could be useful information to you that data just doesn't appear a data collection system is set up to collect that data and place it into something like a database so it can be analyzed and used now these data collection systems can be something that you manually create and we'll talk about that in a little bit or it could be something that you just pay for so it could be a system that you say hey I want you to collect this data they go and do it for you and you don't have to actually do the work but there is a data collection system in place whether it's you or some system you paid for all this data is going to be processed via a data pipeline now this is a system that's going to automate the movement of data from one place to another while often transforming it along the way let's take a look at this ETL pipeline ETL stands for extract transform and load and you can see that through this process on the left hand side we have all these different data sources it could be different parts of your website or it could be different websites or it could be different locations of the data entirely we're going to extract that raw data and we're going to put it into a staging area this staging area is kind of like a temporary hold for your data where then you can work with data professionals like data Engineers database developers data analyst data scientists who can then determine how we want to transform that data now transforming data is something we'll cover again in the next lesson when we talk about data cleaning but transforming the data makes that raw data more usable for whatever you're trying to use it for after we transform that data we're going to load that data into something like a data warehouse a database maybe it could even be an Excel file be as simple as that but then from there we can use that to analyze our data that's really what data collection is in a nutshell now I worked on a data collection team for many years and I was a data analyst and I would often work at every single step of this process I would have to go and talk to the client and see exactly what data they had available and sometimes they didn't even have data available and so they said hey we want to collect this new type of data so as part of my job is I would help them understand how to start collecting that data so then we could create these data pipelines to then transfer it into a database to use data collection is not a one-time thing either data collection is always happening the ETL pipelines they break or they need new ones or the source data changed on the left hand side of this diagram The Source data changed from one part of the website to another and so you need to go back and you need to fix that data pipeline to correctly collect all the data that you're wanting and so this is a very active process this typically doesn't just happen one time and then it's done it typically happens one time then you adapt it and you keep changing or maybe fixing it over time that is data collection in a nutshell and so if you like this video be sure to like And subscribe and I'll see you the next video [Music]
OcG0B4ny1cE,What are File Types? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=OcG0B4ny1cE,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we take a look at all the different file types you'll work use! RESOURCES: Analyst Builder ...,2025-01-28T13:00:34Z,what's going on everybody welcome back to another video today we're going to be taking a look at file [Music] types now file types or file formats are everywhere if you've saved any type of file ever to your computer you had to save that as a specific file type so in this lesson we're going to be diving into exactly what file types and file formats are and how they are used so with that being said let's J over to my screen and take a look all right so let's take a look at what file types are file types refer to the format in which data is stored in a file and you're going to see even in the next slide there's so many different file types out there there are a lot and we're going to get into specific file types in this video that you can see a lot of the different types of files that are very commonly used each file type is designed for a specific purpose and it depends on what kind of data it's holding and how it's going to be used or shared you really can think of these like a container whether it's a bowl or a plate or it's a vase each one of these containers is designed to hold different things and that's kind of like what a file type is used for now if you go right now you look at your file explorer if you're using a Windows machine if you go to your view and you look at the details the view is right next to the sort button up there you can see a different type of file type and with all this is my actual you know file explorer right now if you go look in my downloads we have a lot of different stuff I have MP4 files I have different file folders that holds different files I have pngs I have csvs I have PDFs I have all sorts of stuff to the right of this you can see the size as well all these different file types hold the data differently and some take a lot more data than others so that size is how much data is actually stored within that file let's take a look at probably the most simple type of data file or data format that you'll see which is a text file a text file is super simple and just stores data as plain text often used for unformatted or tabular data this is data that I would work with all the time as a data analyst we would work with text files and CSV which stands for comma separated values this image on the right hand side is being stored right now as a text file but if I then went and saved it as a CSV it would separate these values based off of the commas so country salesperson order amount quarter this data would be separated and all the commas going down on each row would be separated into basically columns and rows dsv and text files are super common and they can store a lot of data very simply because they're just storing plain text and so it doesn't get super complex and so it's a very popular type of file format next we have structured file types now these are files that store data in a predefined structure typically rows and columns or in a hierarchal format one of the most common types is one that I'm sure almost everyone has used that's an xlsx that's going to be an Excel file so your typical Excel workbook and so right here on the right hand side this is your standard workbook you're going to have columns and rows and different worksheets and you'll be able to do different things with that data in these Excel files we also have a DB file and this stands for a database file so often times in the data world if you're working with a customer or a client they might give you an entire backup of their database and you can go and use that and within that database they're going to have columns and rows especially if it's a relational database they're going to have columns and rows just like an Excel file but on a much larger scale it typically can hold a lot more data and then of course you get more complex things within a database file like database schemas to connect and bring all that data together next we have semi structured file types now these get a little bit more complex these file types have a loose structure often used to store complex data relationships some common formats for this are Json and XML files now these can get a lot more complex than just columns and rows because in columns and rows it's pretty simple it's pretty straightforward but something like a Json file which we have on the right hand side you can have data nested Within other data which just means data within data within data and so there can be lots of layers to this data this is another one that's just really popular and really common within data professionals and they are really great for storing data that's a little bit too complex for something that's really simple like columns and rows next we have unstructured file types now you saw this within my file explorer these are files that don't follow a specific format they don't have columns and rows they're often just raw data or multimedia data for example this video that I'm recording right now I'm recording onto an mp4 file this image on the right of this beautiful little hummingbird is a PNG or there's actually lots of different formats for images but PNG is probably the most common one lastly we have big data and specialized file types so these file types are designed specifically to handle really large scale data efficiently one of the most common and one that if you've worked in the data world or you've worked in Azure or maybe even AWS that you might be familiar with is something called a parquet file parquet files are very common especially if you're working in something like spark that's something where I've used it quite a bit or even data bricks where you're bringing in massive amounts of data and you want to do that in a really efficient manner so it has all these different properties that they bring in to these parket files that a normal CSV file would never be able to do or handle now what file type you choose can be extremely extremely important and I've made a lot of mistakes over my years as a data analyst storing data in you know one file format versus another and that has caused issues and so it's so no how data actually is collected and used and stored and analyzed and shared you have to take all these things into account when you're determining what kind of file type you want now in the next lesson we're going to be looking at data collection and we're going to address this exact thing because if you store data in a specific way and then you want to put it in a database it may not be possible if you store it incorrectly and so there are a lot of things to consider within just data collection but this has been our lesson on file types I hope it was helpful I hope it was useful this this has been something that over the years of working in data has just become more and more important it's definitely something you need to consider especially when you're working with data consistent with that being said thank you guys so much for watching I hope this was helpful if you haven't already be sure to like And subscribe and I will see you in the next video [Music]
hXpt8zj_ajc,What are Data Types? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=hXpt8zj_ajc,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we are going to learn all about data types and why they're so important! RESOURCES: Analyst Builder ...,2025-01-21T13:00:55Z,what's going on everybody welcome back to another video today we're going to be taking a look at data [Music] types if you've worked with data at all you know that data types are very important and if you haven't you were in the right place cuz we're going to talk a lot about what data types are and how they are used so with that being said let's jump on to my screen and take a look so let's dive into it let's take a look at what data types are now data types really quickly before we jump into the definition data types are something something that if you work with any data in any way data types do pertain to you these are things that you need to know these are things that eventually will either help you or hinder you on whatever you're trying to get done so a data type is an attribute associated with a piece of data that tells a computer system how to interpret its value every single programming language every database has similar but slightly different data types I've worked with all types of programming languages and lots of different databases and they all act somewhat similarly but they can be different at times so knowing the Core Concepts that we're going to cover in this lesson can be really helpful to kind of Traverse the different types of data types in different systems to get started there are a ton of different data types I mean there's probably 50 60 70 different data types I'm just throwing out random numbers but they all fall under certain categories they're usually either strings which are things like free text numbers like 1 2 3 or date and time the January 1 1st of 2024 at 6 p.m. these are kind of the core fundamental data types but under each of these are a lot of other data types as well now within string you could have something like a name John Smith Emma Johnson this is very simple data that you can categorize and you can use next it could be an address 123 Main Street New York New York this is something that can determine a location then we have something like product categories Electronics Furniture Etc these product categories are all strings but then can be used later on in the data process for things like aggregation maybe you want to see how many customers are buying electronics at your store versus furniture at your store you have to collect that data you do that with string data next we have numerical or numbers this is probably the most simple data type it's integers 25 100 minus 15 then we also have decimals these are both two separate data types so decimals like 12.5 99.99 now within certain systems especially databases they'll have something like a big integer for really large numbers they'll have something like a small integer they'll also have just a regular integer within decimals they may have something like a double point system or a decimal data type so within each of these they may have even subcategories of data types next we have date time the dates could be something simple like 1210 of 2024 we have a day a month and a year or it could be month day year there are different formats within dates then we have times or timestamps so time just indicate the time of the day then time stamps are both date and time combined so the time stamps tend to be very specific then we have dates which give a general day and then times that just give a specific time time stamps can be very useful but often times when you're working with it in the real world you'll break out these two data into separate columns you have date in one time in another and that may allow you to do more advanced things with this data so understanding what data type your data is is really important because that allows you to work with it and analyze that data in different ways for example if we're working with numerical data we can use that to calculate averages you could say the average person is spending this much on our website per day that would be an example of how you can use numerical data or with string data types or categorical data you can group it and count on those occurrences or you can do any type of aggregation sum Max Min average median all these different things you can see how many people are buying things in our electrical department versus our furniture department and that is worthwhile data to use that really is the basics of data types now if you go into specific things like if you go into SQL or if you go into python or Excel I have a lot of lessons specifically for data types in those systems and then it gets a little bit more complex and so if you want to really dive into data types in a specific system go into any of my playlists whether it's SQL Excel uh powerbi Tableau they all have different data types and you can learn a lot more about data types within that specific tool with that being said I hope that this was helpful if you like this video be sure to like And subscribe below and I will see you in the next one [Music]
ItZlTixh6Bs,What are KPIs and Metrics? | Data Fundamental for Beginners,https://www.youtube.com/watch?v=ItZlTixh6Bs,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this lesson we take a look at what KPIs and Metrics are and the difference between them! RESOURCES: Analyst Builder ...,2025-01-14T13:00:34Z,"what's going on everybody welcome back to another video today we're going to be taking a look at kpis and [Music] metrics now if you've worked in the data World you've probably heard these terms before because they are very popular to throw around and use but you may not know exactly what they mean so in this lesson we're going to be diving into kpis and metrics so with that being said let's jump over to my screen so let's dive into kpis and metrics and let's start off with metrics so what exactly is a metric a metric is something that by the way people throw out all the time and they typically get metrics and kpis confused and so we will be really good going through this I'm going to talk about metrics first and then how metrics relate to kpis so a metric is any measurement that provides information using data so if you're taking data and you're tracking that data and you're measuring that data that is a metric it can be anything for example let's say we have a website and we sell things on this website it's like an e-commerce platform a metric that we might have is website visits how many visits per month do we actually have and let's say this month we had 15,000 monthly visitors we also could look at sales numbers so we sold 500 units of whatever product we're selling so these are core metrics now if you look over on this right hand side we have this dashboard this is something that a lot of companies will have it'll be something to track their metrics or at least visualize their metrics it could be on revenue or margins or all these different things this is something that when you're working with data people want to know they want to be able to measure and track specific data now let's see how this compares to a kpi kpi stands for key performance indicator and this is a specific metric that directly measures progress towards a goal so every single kpi is going to be a metric but not every metric is going to be a kpi for example let's over on this image on the right hand side we start with all of our data and then we take that data and we say what metrics do we want to look at within this data then we determine what metrics do we actually want to track which metrics align with our goals so for example in our website that we have we have 15,000 monthly visitors but let's say our Target kpi is going to be those monthly visitors but our goal is 20,000 and so we have a metric that we're tracking and now we're saying we want this to be a goal that we achieve and it's also measurable for our sales numbers we have 500 units sold one of our sales kpi could be okay this month we're selling 500 but next month we want to increase our sales by 2% each month going forward so that could also be a kpi you may be asking how do you choose a good kpi and this is a very good question because I've worked with a lot of different data teams and they just sometimes randomly choose kpis they're like this seems like a good one to achieve or get better at that may be true but it may not actually progress you towards the goal that you're wanting and so when you're trying to choose a good kpi let's say you're tracking these metrics you're saying I want to progress towards a goal how do we choose what kpis we want the first thing you have to ask is what is your goal maybe for our website it was we want to increase sales that's our number one thing then we have to identify which metric actually best tracks our progress towards that goal on a website there are a ton of different data points that you can do for example you can see how long long a user is actually on your website you can see how many times one user gets on your platform every day maybe they get on three or four or five times a day those are metrics but that may not be what your goal actually is to sell your products and then lastly you have to say is this metric actionable maybe you can't make people sign onto your website three four five times a day if that's what you're wanting to do that may not be an actionable metric to actually track but something like the daily users is because maybe you could send out a daily email or you can do some type of marketing to get more people on your platform these are things that you have control over and that are actionable so really quickly let's just break down key performance indicators versus business metrics a kpi is going to provide a direct line of action to a business goal whereas business metrics don't necessarily contribute directly towards a goal kpis are measured actively as a benchmark to a goal whereas business metrics can be measured but they aren't typically checked and monitored for example at a previous company I was working with we had lots of metrics that we kept kind of tabs on but we only put the key performance indicators are the most important ones into dashboards or maybe into reports that we would then provide to our users next kpis are a set of standards that are vital to the business whereas metrics may or may not be vital to the business again could be anything versus kpis are like the core things that you want to track and get better at and then lastly this is something I mentioned before all kpis are business metrics but not all business metrics are kpis you specify exactly what metrics you want to be kpis to help move move your business or grow your business however you want to do that so in a nutshell a metric helps us understand what's happening in our data and kpi show us whether we're reaching our goals using our data I hope that this was helpful this was not something that I knew when I first started uh working in data something I kind of figured out along the way but if you are just getting into Data or maybe you already are and you don't know what this is now you know and now you can go into business meetings and you can go into conversations being a little bit more knowledgeable with that being said thank you guys so much for watching if you like this video be sure to like And subscribe below and I will see you in the next video [Music]"
PEWMgtu-1e4,What is Data? | Data Fundamentals for Beginners,https://www.youtube.com/watch?v=PEWMgtu-1e4,Alex The Analyst,UC7cs8q-gJRlGwj4A8OmCmXg,In this series we walk through the fundamentals of data! This lesson we look at what data exactly is! RESOURCES: Analyst ...,2025-01-07T13:00:35Z,what's going on everybody welcome back to another video today we're going to be starting our data fundamentals [Music] series now in this series I'm going to be walking through some really core fundamental concepts about data if you've been on my YouTube channel for any amount of time you know that we talk a lot about data specifically about how to use tools to work with your data but up until now I haven't really dived in and broken down the Core Concepts of what data is and how it's used in the real world so in series that's what I aim to do and in this video we're going to be starting off with what is data let's jump over to my screen and take a look all right so in this lesson we're going be talking about what data is again we're starting from the very Basics really working our way up through this series so by definition data is just raw facts and figures it doesn't even necessarily have to be on a computer it could be on a notepad if you writing down 1 2 3 4 5 that is data that you're writing down it's going to be harder to use that data necessarily because you know on a computer Compu it's easier to process and use data but that is data some examples of data are things like a number the number 45 that is a piece of data a word could be data just the word completed or a sentence that is also data and then a date could be data as well so we have 1210 of 2024 this is a piece of data now the thing about data is is that data is everywhere it's in everything we do all the time but without collecting it without context of what this data actually means it's basically useless look at some examples of how data is used in the real world something that a lot of you will use almost every single day so let's take a look at this first one this is a weather app I use my weather app almost all the time I got to send my kids to school and I want to check if it's rainy if it's hot if it's cold if they need a jacket if they don't and that is something that requires a lot of data meteorologists use tools to collect data on all of these things then they're present Ed in these apps so they collect data about weather temperature humidity location time and they take all of this and they aggregate it that just means they bring all of it together into one place and they aggregate these numbers and finally they'll present it to you based off of your data your location where you actually are and so that is something that is extremely data dependent they typically will process this as well as forecast which means they're going to kind of predict out what they think is going to happen in the next hour 2 hours maybe it's a day or several days ahead they can also use this data to predict what might happen in your location another example would be a bank app so I go on my phone all the time to check my banking statements to make sure that you know I didn't spend too much money and everything in your banking app is data and so when you go on this app like you can see in this image down here you can see where you spent your money you can see the amount you spent your money the date and the time that you spent your money these are all different points of data that the bank has collected Banks collect hundreds if not thousands of data points but really common ones are think like Bank deposits and transactions and payments that you've made all these things so they can put it in your dashboard so that you can track your money now let's take a look at different types of data because there isn't just one type of data data is just one thing data is really complex and there's a lot of different things to it so really briefly I'm going to touch on structured semi-structured and unstructured data structured data is really neat and really easy to visualize and see as you can see in this uh image right here that typically refers to something that has columns and rows something like an Excel file everybody's used an Excel file before and so that is something that is very structured very easy to kind of visualize and use and understand the exact opposite side of this we have unstructured data unstructured data is kind of all over the place and it might be a lot harder to use for example that could be something like a photograph that you took or maybe a video or an audio file these are all examples of unstructured data that you can't really put into something like an Excel file for it to be in columns and rows then we have something called semi structured data semi structured data is closer to structured data than it is unstructured Data but it is more complex than something like an Excel file for example semi-structure data might be something like a Json file now we haven't gotten to file formats and file types yet in this series but when we do I'll dive into what Json files are because Json files store things differently than something like structured data where they nest data in kind of these hierarchies let's take a look at the two main ones structured versus unstructured data structured data is the data that I primarily work with as a data analyst this is typically going to be something like a row and column in an Excel file or a CSV file or in something like a relational database a database is just a place where you will store a lot of data and all of that data typically connects in some way so you can work with a lot of it structur data is also quantitative versus qualitative like unstructured data structured data is numbers based and it's measurable and so you can easily kind of track it and use it whereas qualitative could be something like a survey where it might be free text where it's someone saying you know I had a really great experience at this and I really liked this and I liked this that's a little bit harder to actually put into numbers how much that person liked but quantitative maybe hey how much did you like this on a scale of 1 to 10 and if the person puts a seven that's a very specific answer now the amount of data that sits as structured data is significantly less than unstructured data structured data is only about 20% of Enterprise data compared to 80% of unstructured data and so there's a lot more unstructured data in the world and so what a lot of people in the data world do is they try to take that unstructured data and they try to make it structured and so that is a big part of what a lot of data professionals do lastly and we just touched on this but structure data tends to be things like numbers dates strings which are things like words and text versus unstructured data which is things like images audio video and others that being said data is everywhere it is all around us all the time and especially in this technological world we live in it is literally in everything we do but the challenge especially for people in data who are working with data the challenge is to collect it to organize and analyze it that you can then use that data and so we're going to be covering a lot of these different topics in this series that you can understand exactly what it is and how we can thank you guys for joining in on the very first data fundamentals video we will have more like this thank you guys so much for watching if you like this video be sure to like And subscribe and I will see you in the next one [Music]
